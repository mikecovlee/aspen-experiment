[
  {
    "instruction": "What are the ids for employees who do not work in departments with managers that have ids between 100 and 200?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));",
    "output": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
  },
  {
    "instruction": "Find the name of tracks which are in both Movies and music playlists.",
    "input": "create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);create table playlist_tracks (playlist_id integer not null, track_id integer not null, constraint pk_playlisttrack primary key (playlist_id, track_id), foreign key (playlist_id) references playlists (id)\n        ON delete no action\n        ON update no action, foreign key (track_id) references tracks (id)\n        ON delete no action\n        ON update no action);create table playlists (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);create table playlist_tracks (playlist_id integer not null, track_id integer not null, constraint pk_playlisttrack primary key (playlist_id, track_id), foreign key (playlist_id) references playlists (id)\n        ON delete no action\n        ON update no action, foreign key (track_id) references tracks (id)\n        ON delete no action\n        ON update no action);create table playlists (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'"
  },
  {
    "instruction": "How many staff live in state Georgia?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";"
  },
  {
    "instruction": "List all player names who have an overall rating higher than the average.",
    "input": "create table `player` (`id`\tinteger primary key autoincrement, `player_api_id`\tinteger unique, `player_name`\ttext, `player_fifa_api_id`\tinteger unique, `birthday`\ttext, `height`\tinteger, `weight`\tinteger);create table \"Player_Attributes\" (`id`\tinteger primary key autoincrement, `player_fifa_api_id`\tinteger, `player_api_id`\tinteger, `date`\ttext, `overall_rating`\tinteger, `potential`\tinteger, `preferred_foot`\ttext, `attacking_work_rate`\ttext, `defensive_work_rate`\ttext, `crossing`\tinteger, `finishing`\tinteger, `heading_accuracy`\tinteger, `short_passing`\tinteger, `volleys`\tinteger, `dribbling`\tinteger, `curve`\tinteger, `free_kick_accuracy`\tinteger, `long_passing`\tinteger, `ball_control`\tinteger, `acceleration`\tinteger, `sprint_speed`\tinteger, `agility`\tinteger, `reactions`\tinteger, `balance`\tinteger, `shot_power`\tinteger, `jumping`\tinteger, `stamina`\tinteger, `strength`\tinteger, `long_shots`\tinteger, `aggression`\tinteger, `interceptions`\tinteger, `positioning`\tinteger, `vision`\tinteger, `penalties`\tinteger, `marking`\tinteger, `standing_tackle`\tinteger, `sliding_tackle`\tinteger, `gk_diving`\tinteger, `gk_handling`\tinteger, `gk_kicking`\tinteger, `gk_positioning`\tinteger, `gk_reflexes`\tinteger, foreign key(`player_fifa_api_id`) references `player`(`player_fifa_api_id`), foreign key(`player_api_id`) references `player`(`player_api_id`));create table \"Player_Attributes\" (`id`\tinteger primary key autoincrement, `player_fifa_api_id`\tinteger, `player_api_id`\tinteger, `date`\ttext, `overall_rating`\tinteger, `potential`\tinteger, `preferred_foot`\ttext, `attacking_work_rate`\ttext, `defensive_work_rate`\ttext, `crossing`\tinteger, `finishing`\tinteger, `heading_accuracy`\tinteger, `short_passing`\tinteger, `volleys`\tinteger, `dribbling`\tinteger, `curve`\tinteger, `free_kick_accuracy`\tinteger, `long_passing`\tinteger, `ball_control`\tinteger, `acceleration`\tinteger, `sprint_speed`\tinteger, `agility`\tinteger, `reactions`\tinteger, `balance`\tinteger, `shot_power`\tinteger, `jumping`\tinteger, `stamina`\tinteger, `strength`\tinteger, `long_shots`\tinteger, `aggression`\tinteger, `interceptions`\tinteger, `positioning`\tinteger, `vision`\tinteger, `penalties`\tinteger, `marking`\tinteger, `standing_tackle`\tinteger, `sliding_tackle`\tinteger, `gk_diving`\tinteger, `gk_handling`\tinteger, `gk_kicking`\tinteger, `gk_positioning`\tinteger, `gk_reflexes`\tinteger, foreign key(`player_fifa_api_id`) references `player`(`player_fifa_api_id`), foreign key(`player_api_id`) references `player`(`player_api_id`));",
    "output": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > ( SELECT avg(overall_rating) FROM Player_Attributes )"
  },
  {
    "instruction": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T1.Allergy, T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" ORDER BY T1.Allergy"
  },
  {
    "instruction": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "What is the average price of clothes?",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes'"
  },
  {
    "instruction": "what papers did chi publish ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"chi\";"
  },
  {
    "instruction": "What are the names of all the states with college students playing in the mid position but no goalies?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'"
  },
  {
    "instruction": "What are the names of customers who have a loan of more than 3000 in amount?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000"
  },
  {
    "instruction": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));",
    "output": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\""
  },
  {
    "instruction": "what are the employee ids and job titles for employees in department 80?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `jobs` (`job_id` varchar(10) not null default '', `job_title` varchar(35) not null, `min_salary` decimal(6, 0) default null, `max_salary` decimal(6, 0) default null, primary key (`job_id`));",
    "output": "SELECT T1.employee_id, T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80"
  },
  {
    "instruction": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.",
    "input": "create table \"Web_client_accelerator\" (\"id\" int, \"name\" text, \"Operating_system\" text, \"Client\" text, \"Connection\" text, primary key(\"id\"));create table \"Web_client_accelerator\" (\"id\" int, \"name\" text, \"Operating_system\" text, \"Client\" text, \"Connection\" text, primary key(\"id\"));create table \"accelerator_compatible_browser\" (\"accelerator_id\" int, \"browser_id\" int, \"compatible_since_year\" int, primary key(\"accelerator_id\", \"browser_id\"), foreign key (\"accelerator_id\") references `web_client_accelerator`(\"id\"), foreign key (\"browser_id\") references `browser`(\"id\"));create table \"browser\" (\"id\" int, \"name\" text, \"market_share\" real, primary key(\"id\"));",
    "output": "SELECT name, operating_system FROM web_client_accelerator EXCEPT SELECT T1.name, T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'"
  },
  {
    "instruction": "How many times has the student Linda Smith visited Subway?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table visits_restaurant (stuid integer, resid integer, time timestamp, spent float, foreign key(stuid) references student(stuid), foreign key(resid) references restaurant(resid));create table restaurant (resid integer primary key, resname varchar(100), address varchar(100), rating integer);",
    "output": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";"
  },
  {
    "instruction": "What is the average height of the players from the college named 'Yale University'?",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table player_college (player_id text, college_id text, year integer, foreign key (player_id) references player(player_id), foreign key (college_id) references college(college_id));create table college (college_id text, name_full text, city text, state text, country text);",
    "output": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id WHERE T3.name_full = 'Yale University';"
  },
  {
    "instruction": "Return the publisher that has published the most books.",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of different companies.",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT count(DISTINCT Company) FROM entrepreneur"
  },
  {
    "instruction": "convolution paper by brian curless",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"brian curless\" AND t5.keyphrasename = \"convolution\";"
  },
  {
    "instruction": "Find the title of course that is provided by Statistics but not Psychology departments.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'"
  },
  {
    "instruction": "What are the apartment number and the room count of each apartment?",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_number, room_count FROM Apartments"
  },
  {
    "instruction": "Find the name of the stadium that has the maximum capacity.",
    "input": "create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));",
    "output": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1"
  },
  {
    "instruction": "List the name of rooms with king or queen bed.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName FROM Rooms WHERE bedType = \"King\" OR bedType = \"Queen\";"
  },
  {
    "instruction": "How many different roles are there on the project staff?",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT count(DISTINCT role_code) FROM Project_Staff"
  },
  {
    "instruction": "Show names for all aircraft with at least two flights.",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count(*) >= 2"
  },
  {
    "instruction": "Give the ids for documents that have the budget description 'Government'.",
    "input": "create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));create table ref_budget_codes (budget_type_code char(15) not null, budget_type_description varchar(255) not null, primary key (budget_type_code));",
    "output": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE T2.budget_type_Description = \"Government\""
  },
  {
    "instruction": "What is the name and building of the departments whose budget is more than the average budget?",
    "input": "create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));",
    "output": "SELECT dept_name, building FROM department WHERE budget > (SELECT avg(budget) FROM department)"
  },
  {
    "instruction": "What is the full name of the instructor who has a course named COMPUTER LITERACY?",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT T2.Fname, T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = \"COMPUTER LITERACY\""
  },
  {
    "instruction": "What is the count of states with college students playing in the mid position but not as goalies?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie')"
  },
  {
    "instruction": "return me the homepage of \" H. V. Jagadish \" .",
    "input": "create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT homepage FROM author WHERE name = \"H. V. Jagadish\";"
  },
  {
    "instruction": "What are the account ids, customer ids, and account names for all the accounts?",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT account_id, customer_id, account_name FROM Accounts"
  },
  {
    "instruction": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);",
    "output": "SELECT T2.building, T2.room_number, T2.semester, T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title"
  },
  {
    "instruction": "What is the code of the product type with an average price higher than the average price of all products?",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price) > (SELECT avg(product_price) FROM products)"
  },
  {
    "instruction": "What is the name of the movie produced after 2000 and directed by James Cameron?",
    "input": "create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR > 2000"
  },
  {
    "instruction": "What is the id of the organization with the maximum number of outcomes and how many outcomes are there?",
    "input": "create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));",
    "output": "SELECT T1.organisation_id, count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Economic Matters\""
  },
  {
    "instruction": "What are the total scores of the body builders whose birthday contains the string \"January\" ?",
    "input": "create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));",
    "output": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";"
  },
  {
    "instruction": "What is the id, forename, and number of races for all drivers that have participated in at least 2 races?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT T1.driverid, T1.forename, count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*) >= 2"
  },
  {
    "instruction": "How many ships are there?",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT count(*) FROM ship"
  },
  {
    "instruction": "What are the papers published under the institution \"Indiana University\"?",
    "input": "create table papers (paperid integer, title text, primary key (paperid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Indiana University\""
  },
  {
    "instruction": "How many stores are there?",
    "input": "create table store (store_id tinyint unsigned not null, manager_staff_id tinyint unsigned not null, address_id smallint unsigned not null, last_update timestamp not null default current_timestamp, primary key (store_id), foreign key (manager_staff_id) references staff (staff_id), foreign key (address_id) references address (address_id));",
    "output": "SELECT count(*) FROM store"
  },
  {
    "instruction": "who has written the most papers on syntactic parsing ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "What types of ships have both ships that have Panama Flags and Malta flags?",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));",
    "output": "SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta'"
  },
  {
    "instruction": "authors with at least 5 papers",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t2.paperid ), t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid = t2.paperid GROUP BY t1.authorid HAVING COUNT ( t2.paperid ) >= 5;"
  },
  {
    "instruction": "coauthors of Noah A Smith",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Noah A Smith\";"
  },
  {
    "instruction": "For each city, what is the highest latitude for its stations?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT city, max(lat) FROM station GROUP BY city"
  },
  {
    "instruction": "Find the number of games taken place in city Atlanta in 2000.",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));create table park (park_id text, park_name text, park_alias text, city text, state text, country text);",
    "output": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 AND T2.city = 'Atlanta';"
  },
  {
    "instruction": "What are the names of customers with a higher checking balance than savings balance?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T2.balance > T3.balance"
  },
  {
    "instruction": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
    "input": "create table services (service_id integer not null, organization_id integer not null, service_type_code char(15) not null, service_details varchar(255), primary key (service_id), foreign key (organization_id) references organizations (organization_id));create table organizations (organization_id integer not null, parent_organization_id integer, organization_details varchar(255), primary key (organization_id));",
    "output": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id = T2.organization_id WHERE T2.organization_details = 'Denesik and Sons Party'"
  },
  {
    "instruction": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));",
    "output": "SELECT Adults FROM Reservations WHERE CheckIn = \"2010-10-23\" AND FirstName = \"CONRAD\" AND LastName = \"SELBIG\";"
  },
  {
    "instruction": "Which customers have orders with status \"Packing\"? Give me the customer names.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\""
  },
  {
    "instruction": "give me a good restaurant in mountain view for arabic food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "List all students' first names and last names who majored in 600.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Fname, Lname FROM Student WHERE Major = 600;"
  },
  {
    "instruction": "What are the distinct years in which the competitions type is not \"Tournament\"?",
    "input": "create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));",
    "output": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\""
  },
  {
    "instruction": "What is the name of the race held most recently?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT name FROM races ORDER BY date DESC LIMIT 1"
  },
  {
    "instruction": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT rank, company, market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion"
  },
  {
    "instruction": "Show different teams of technicians and the number of technicians in each team.",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Team, COUNT(*) FROM technician GROUP BY Team"
  },
  {
    "instruction": "What are the different instruments listed in the database?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));",
    "output": "SELECT DISTINCT instrument FROM Instruments"
  },
  {
    "instruction": "Find the name of customers whose credit score is below the average credit scores of all customers.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT cust_name FROM customer WHERE credit_score < (SELECT avg(credit_score) FROM customer)"
  },
  {
    "instruction": "which business has the most number of checkins",
    "input": "create table \"checkin\" (\"cid\" int, \"business_id\" text, \"count\" int, \"day\" text, primary key(\"cid\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t1.name FROM checkin AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id GROUP BY t1.name ORDER BY SUM ( t2.count ) DESC LIMIT 1;"
  },
  {
    "instruction": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
    "input": "create table `pilot` (`pilot_id` int(11) not null, `name` varchar(50) not null, `age` int(11) not null, primary key (`pilot_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT t1.name, t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot WHERE t1.age < 30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the title of all the albums of the artist \"AC/DC\".",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));",
    "output": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"AC/DC\""
  },
  {
    "instruction": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
    "input": "create table `products_for_hire` (`product_id` integer primary key, `product_type_code` varchar(15) not null, `daily_hire_cost` decimal(19, 4), `product_name` varchar(80), `product_description` varchar(255));create table `products_booked` (`booking_id` integer not null, `product_id` integer not null, `returned_yn` varchar(1), `returned_late_yn` varchar(1), `booked_count` integer, `booked_amount` float null, primary key (`booking_id`, `product_id`) foreign key (`booking_id`) references `bookings`(`booking_id`), foreign key (`product_id`) references `products_for_hire`(`product_id`));create table `bookings` (`booking_id` integer primary key , `customer_id` integer not null, `booking_status_code` varchar(10) not null, `returned_damaged_yn` varchar(40), `booking_start_date` datetime, `booking_end_date` datetime, `count_hired` varchar(40), `amount_payable` decimal(19, 4), `amount_of_discount` decimal(19, 4), `amount_outstanding` decimal(19, 4), `amount_of_refund` decimal(19, 4), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T3.booking_start_date, T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id = T2.product_id JOIN bookings AS T3 ON T2.booking_id = T3.booking_id WHERE T1.product_name = 'Book collection A'"
  },
  {
    "instruction": "What is the title, phone and hire date of Nancy Edwards?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT title, phone, hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
  },
  {
    "instruction": "List all restaurant types.",
    "input": "create table restaurant_type (restypeid integer primary key, restypename varchar(40), restypedescription varchar(100));",
    "output": "SELECT ResTypeName FROM Restaurant_Type;"
  },
  {
    "instruction": "parsing papers with most citations",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "How many accounts are there for each customer id?",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT customer_id, count(*) FROM Accounts GROUP BY customer_id"
  },
  {
    "instruction": "which states have points that are higher than the highest point in colorado",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM highlow WHERE highest_elevation > ( SELECT highest_elevation FROM highlow WHERE state_name = \"colorado\" );"
  },
  {
    "instruction": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars > (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = \"James Cameron\")"
  },
  {
    "instruction": "Provide the full names of employees earning more than the employee with id 163.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name FROM employees WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163 )"
  },
  {
    "instruction": "Find the first names of teachers whose email address contains the word \"man\".",
    "input": "create table `teachers` (`teacher_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `gender` varchar(1), `cell_mobile_number` varchar(40), `email_address` varchar(40), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'"
  },
  {
    "instruction": "For each company id, what are the companies and how many gas stations does each one operate?",
    "input": "create table \"station_company\" (\"Station_ID\" int, \"Company_ID\" int, \"Rank_of_the_Year\" int, primary key (\"Station_ID\",\"Company_ID\"), foreign key (`station_id`) references `gas_station`(`station_id`), foreign key (`company_id`) references `company`(`company_id`));create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT T2.company, count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id"
  },
  {
    "instruction": "What are the names of gymnasts, ordered by their heights ascending?",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height ASC"
  },
  {
    "instruction": "What is the name of the aircraft that was on flight number 99?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99"
  },
  {
    "instruction": "what are the populations of states through which the mississippi river runs",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );"
  },
  {
    "instruction": "Find the total number of scientists.",
    "input": "create table scientists (ssn int, name char(30) not null, primary key (ssn));",
    "output": "SELECT count(*) FROM scientists"
  },
  {
    "instruction": "What is detail of the student who registered the most number of courses?",
    "input": "create table students (student_id integer not null, student_details varchar(255), primary key (student_id), foreign key (student_id) references people (person_id));create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));",
    "output": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the birth dates corresponding to employees who live in the city of Edmonton.",
    "input": "create table `employee` (`employeeid` integer not null , `lastname` varchar(20) not null , `firstname` varchar(20) not null , `title` varchar(30) default null , `reportsto` integer default null , `birthdate` datetime default null , `hiredate` datetime default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) default null , primary key (`employeeid`) , constraint `fk_employeereportsto` foreign key (`reportsto`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT BirthDate FROM EMPLOYEE WHERE City = \"Edmonton\""
  },
  {
    "instruction": "Give the maximum and minimum product prices for each product type, grouped and ordered by product type.",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT max(product_price), min(product_price), product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code"
  },
  {
    "instruction": "Which transportation method is used the most often to get to tourist attractions?",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));",
    "output": "SELECT Date_Claim_Made, Date_Claim_Settled FROM Claims WHERE Amount_Claimed > ( SELECT avg(Amount_Claimed) FROM Claims )"
  },
  {
    "instruction": "How many aircrafts have distance between 1000 and 5000?",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000"
  },
  {
    "instruction": "How many times was noah a smith cited ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"noah a smith\";"
  },
  {
    "instruction": "Find the city with the most number of stores.",
    "input": "create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));create table \"store_district\" (\"Store_ID\" int, \"District_ID\" int, primary key (\"Store_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`district_id`) references `district`(`district_id`));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is title of album which track Balls to the Wall belongs to?",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";"
  },
  {
    "instruction": "List the names of representatives that have not participated in elections listed here.",
    "input": "create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));create table \"election\" (\"Election_ID\" int, \"Representative_ID\" int, \"Date\" text, \"Votes\" real, \"Vote_Percent\" real, \"Seats\" real, \"Place\" real, primary key (\"Election_ID\"), foreign key (\"Representative_ID\") references `representative`(\"Representative_ID\"));",
    "output": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)"
  },
  {
    "instruction": "Find the most prominent max page size among all the products.",
    "input": "create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));",
    "output": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the names of the items that did not receive any review.",
    "input": "create table `item` (`i_id` integer not null , `title` varchar(20) default null , primary key (`i_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
  },
  {
    "instruction": "what is the largest state capital in population",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );"
  },
  {
    "instruction": "pldi papers in 2015",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "Give the names of wrestlers and their elimination moves.",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT T2.Name, T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID"
  },
  {
    "instruction": "Show the statement id and the statement detail for the statement with most number of accounts.",
    "input": "create table accounts (account_id integer not null, statement_id integer not null, account_details varchar(255), primary key (account_id), foreign key (statement_id) references statements (statement_id));create table statements (statement_id integer not null, statement_details varchar(255), primary key (statement_id), foreign key (statement_id) references documents (document_id));",
    "output": "SELECT T1.statement_id, T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what is the population of the major cities in wisconsin",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE population > 150000 AND state_name = \"wisconsin\";"
  },
  {
    "instruction": "What countries are the female artists who sung in the language Bangla from?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = \"Female\" AND T2.languages = \"bangla\""
  },
  {
    "instruction": "Give me the names of members whose address is in Harford or Waterbury.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Membership_card\" text, \"Age\" int, \"Time_of_purchase\" int, \"Level_of_membership\" int, \"Address\" text, primary key (\"Member_ID\"));",
    "output": "SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'"
  },
  {
    "instruction": "where is the best american restaurant in the bay area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" );"
  },
  {
    "instruction": "Count the number of financial transactions that correspond to each account id.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT count(*), account_id FROM Financial_transactions"
  },
  {
    "instruction": "return me the authors who have more than 10 papers in PVLDB .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = \"PVLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title ) > 10;"
  },
  {
    "instruction": "papers by Peter Mertens and Dina Barbian",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "return me the homepage of PVLDB .",
    "input": "create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT homepage FROM journal WHERE name = \"PVLDB\";"
  },
  {
    "instruction": "what city has the most people",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );"
  },
  {
    "instruction": "List the locations of schools in descending order of founded year.",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT LOCATION FROM school ORDER BY Founded DESC"
  },
  {
    "instruction": "Compute the average number of hosts for parties.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT avg(Number_of_hosts) FROM party"
  },
  {
    "instruction": "what are the highest points of all the states",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_point FROM highlow;"
  },
  {
    "instruction": "how many cities are there in usa",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( city_name ) FROM city;"
  },
  {
    "instruction": "How many departments offer courses?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT count(DISTINCT dept_name) FROM course"
  },
  {
    "instruction": "Who is the delegate of district 1 in the elections?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT Delegate FROM election WHERE District = 1"
  },
  {
    "instruction": "return me the keywords in VLDB conference .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid WHERE t2.name = \"VLDB\";"
  },
  {
    "instruction": "Find the number of professors in accounting department.",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = \"Accounting\""
  },
  {
    "instruction": "Find the number of albums by the artist \"Metallica\".",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));",
    "output": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"Metallica\""
  },
  {
    "instruction": "give me the number of rivers in idaho",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( river_name ) FROM river WHERE traverse = \"idaho\";"
  },
  {
    "instruction": "Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\".",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"red\" AND t3.characteristic_name = \"fast\""
  },
  {
    "instruction": "What are the names and buying prices of all the products?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT product_name, typical_buying_price FROM products"
  },
  {
    "instruction": "people working on sensor fusion",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";"
  },
  {
    "instruction": "Find the name, checking balance and saving balance of all accounts in the bank.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid"
  },
  {
    "instruction": "What are the distinct move in dates of the residents?",
    "input": "create table residents (resident_id integer not null, property_id integer not null, date_moved_in datetime not null, date_moved_out datetime not null, other_details varchar(255), primary key (resident_id, property_id, date_moved_in), foreign key (property_id) references properties (property_id));",
    "output": "SELECT DISTINCT date_moved_in FROM residents"
  },
  {
    "instruction": "What is the average weight of all players?",
    "input": "create table `player` (`id`\tinteger primary key autoincrement, `player_api_id`\tinteger unique, `player_name`\ttext, `player_fifa_api_id`\tinteger unique, `birthday`\ttext, `height`\tinteger, `weight`\tinteger);",
    "output": "SELECT avg(weight) FROM Player"
  },
  {
    "instruction": "where are some restaurants good for french food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t1.food_type = \"french\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);",
    "output": "SELECT T2.Dname, T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = \"INTRODUCTION TO COMPUTER SCIENCE\""
  },
  {
    "instruction": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?",
    "input": "create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2002 AND T2.campus = \"Long Beach State University\""
  },
  {
    "instruction": "Which staff members are assigned to the problem with id 1? Give me their first and last names.",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));create table `problem_log` (`problem_log_id` integer primary key, `assigned_to_staff_id` integer not null, `problem_id` integer not null, `problem_category_code` varchar(20) not null, `problem_status_code` varchar(20) not null, `log_entry_date` datetime, `log_entry_description` varchar(255), `log_entry_fix` varchar(255), `other_log_details` varchar(255), foreign key (`problem_category_code`) references `problem_category_codes`(`problem_category_code`), foreign key (`assigned_to_staff_id`) references `staff`(`staff_id`), foreign key (`problem_id`) references `problems`(`problem_id`), foreign key (`problem_status_code`) references `problem_status_codes`(`problem_status_code`));",
    "output": "SELECT DISTINCT staff_first_name, staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1"
  },
  {
    "instruction": "What are the titles and average ratings for all movies that have the lowest average rating?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1"
  },
  {
    "instruction": "Find names of all students who took some course and got A or C.",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));",
    "output": "SELECT T1.stu_fname, T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'"
  },
  {
    "instruction": "What are the names of the scientists, and how many projects are each of them working on?",
    "input": "create table scientists (ssn int, name char(30) not null, primary key (ssn));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));",
    "output": "SELECT count(*), T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist GROUP BY T1.name"
  },
  {
    "instruction": "What is the average money requested by all entrepreneurs?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT avg(Money_Requested) FROM entrepreneur"
  },
  {
    "instruction": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName, RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2;"
  },
  {
    "instruction": "return me the total citations of all the papers in PVLDB .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = \"PVLDB\";"
  },
  {
    "instruction": "What are the names of the albums that have more than 10 tracks?",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id) > 10;"
  },
  {
    "instruction": "For each distinct test result, find the number of students who got the result.",
    "input": "create table `student_tests_taken` (`registration_id` integer not null, `date_test_taken` datetime not null, `test_result` varchar(255), foreign key (`registration_id`) references `student_course_enrolment`(`registration_id`));",
    "output": "SELECT test_result, COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC"
  },
  {
    "instruction": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.city_code = \"NYC\" AND T2.Election_Cycle = \"Spring\""
  },
  {
    "instruction": "Find the first names of all the authors ordered in alphabetical order.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));",
    "output": "SELECT fname FROM authors ORDER BY fname"
  },
  {
    "instruction": "Show the average share count of transactions each each investor, ordered by average share count.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT investor_id, avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)"
  },
  {
    "instruction": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"
  },
  {
    "instruction": "Return the party email that has used party services the greatest number of times.",
    "input": "create table `parties` (`party_id` integer primary key, `payment_method_code` varchar(15) not null, `party_phone` varchar(80), `party_email` varchar(80));create table `party_services` (`booking_id` integer not null , `customer_id` integer not null, `service_id` integer not null, `service_datetime` datetime not null, `booking_made_date` datetime, foreign key (`service_id`) references `services`(`service_id`), foreign key (`customer_id`) references `parties`(`party_id`));",
    "output": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of shops that have more than a single kind of device in stock?",
    "input": "create table \"stock\" (\"Shop_ID\" int, \"Device_ID\" int, \"Quantity\" int, primary key (\"Shop_ID\",\"Device_ID\"), foreign key (`shop_id`) references `shop`(`shop_id`), foreign key (`device_id`) references `device`(`device_id`));create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*) > 1"
  },
  {
    "instruction": "how many papers does sigir have ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"sigir\";"
  },
  {
    "instruction": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));create table \"farm_competition\" (\"Competition_ID\" int, \"Year\" int, \"Theme\" text, \"Host_city_ID\" int, \"Hosts\" text, primary key (\"Competition_ID\"), foreign key (`host_city_id`) references `city`(`city_id`));",
    "output": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000"
  },
  {
    "instruction": "List the name of products in ascending order of price.",
    "input": "create table products (product_id integer not null, product_type_code char(15), product_name varchar(255), product_price decimal(20, 4), primary key (product_id), unique (product_id));",
    "output": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC"
  },
  {
    "instruction": "What are the names and addressed of customers who have both New and Pending orders?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name, T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"New\" INTERSECT SELECT T1.customer_name, T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Pending\""
  },
  {
    "instruction": "Which faculty do not participate in any activity? Find their faculty ids.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));",
    "output": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in"
  },
  {
    "instruction": "Who made the latest order?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.order_date DESC LIMIT 1"
  },
  {
    "instruction": "Show all distinct lot details.",
    "input": "create table `lots` (`lot_id` integer primary key, `investor_id` integer not null, `lot_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`));",
    "output": "SELECT DISTINCT lot_details FROM LOTS"
  },
  {
    "instruction": "papers published in 2015 by Liwen Xiong",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Liwen Xiong\" AND t3.year = 2015;"
  },
  {
    "instruction": "List each donator name and the amount of endowment in descending order of the amount of endowment.",
    "input": "create table \"endowment\" (\"endowment_id\" int, \"School_id\" int, \"donator_name\" text, \"amount\" real, primary key(\"endowment_id\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));",
    "output": "SELECT donator_name, sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC"
  },
  {
    "instruction": "What is the total credit does each department offer?",
    "input": "create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT sum(crs_credit), dept_code FROM course GROUP BY dept_code"
  },
  {
    "instruction": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.",
    "input": "create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);",
    "output": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010"
  },
  {
    "instruction": "What are the different states that have students trying out?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName"
  },
  {
    "instruction": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?",
    "input": "create table \"pitStops\" (\"raceId\" integer, \"driverId\" integer, \"stop\" integer, \"lap\" integer, \"time\" text, \"duration\" text, \"milliseconds\" integer, primary key (\"raceId\", \"driverId\", \"stop\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"pitStops\" (\"raceId\" integer, \"driverId\" integer, \"stop\" integer, \"lap\" integer, \"time\" text, \"duration\" text, \"milliseconds\" integer, primary key (\"raceId\", \"driverId\", \"stop\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT DISTINCT driverid, STOP FROM pitstops WHERE duration > (SELECT min(duration) FROM pitstops WHERE raceid = 841)"
  },
  {
    "instruction": "List the document type code for the document with the id 2.",
    "input": "create table documents (document_id integer not null, document_status_code char(15) not null, document_type_code char(15) not null, shipping_agent_code char(15), receipt_date datetime, receipt_number varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (document_status_code) references ref_document_status (document_status_code), foreign key (shipping_agent_code) references ref_shipping_agents (shipping_agent_code));",
    "output": "SELECT document_type_code FROM Documents WHERE document_id = 2;"
  },
  {
    "instruction": "Count the total number of policies used by the customer named \"Dayana Robel\".",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table customers_policies (customer_id integer not null, policy_id integer not null, date_opened date, date_closed date, primary key (customer_id, policy_id), foreign key (customer_id) references customers (customer_id), foreign key (policy_id) references available_policies (policy_id));",
    "output": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Dayana Robel\""
  },
  {
    "instruction": "Find the full name and id of the college that has the most baseball players.",
    "input": "create table college (college_id text, name_full text, city text, state text, country text);create table player_college (player_id text, college_id text, year integer, foreign key (player_id) references player(player_id), foreign key (college_id) references college(college_id));",
    "output": "SELECT T1.name_full, T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "instruction": "display all the information about the department Marketing.",
    "input": "create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));",
    "output": "SELECT * FROM departments WHERE department_name = 'Marketing'"
  },
  {
    "instruction": "which states does the ohio run through",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE river_name = \"ohio\";"
  },
  {
    "instruction": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
    "input": "create table products (product_id integer not null, product_type_code char(15), product_name varchar(255), product_price decimal(20, 4), primary key (product_id), unique (product_id));create table products_in_events (product_in_event_id integer not null, event_id integer not null, product_id integer not null, primary key (product_in_event_id), foreign key (event_id) references events (event_id), foreign key (product_id) references products (product_id));",
    "output": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*) >= 2 ORDER BY T1.Product_Name"
  },
  {
    "instruction": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT Industry FROM Companies WHERE Headquarters = \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters = \"China\""
  },
  {
    "instruction": "give me the states that border kentucky",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" after 2005 .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t2.name = \"H. V. Jagadish\" AND t1.name = \"Yunyao Li\" AND t5.year > 2005;"
  },
  {
    "instruction": "Find the name of the courses that do not have any prerequisite?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));",
    "output": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
  },
  {
    "instruction": "How many teachers does the student named CHRISSY NABOZNY have?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"CHRISSY\" AND T1.lastname = \"NABOZNY\""
  },
  {
    "instruction": "What are the last names of female students, ordered by age descending?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT LName FROM STUDENT WHERE Sex = \"F\" ORDER BY Age DESC"
  },
  {
    "instruction": "What are the ids of all students who don't play sports?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo"
  },
  {
    "instruction": "What is the full name of each student who is not allergic to any type of food.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT fname, lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")"
  },
  {
    "instruction": "How many universities have a campus fee higher than average?",
    "input": "create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));",
    "output": "SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)"
  },
  {
    "instruction": "where is a jamerican cuisine in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.name = \"jamerican cuisine\";"
  },
  {
    "instruction": "What is the average number of working horses of farms with more than 5000 total number of horses?",
    "input": "create table \"farm\" (\"Farm_ID\" int, \"Year\" int, \"Total_Horses\" real, \"Working_Horses\" real, \"Total_Cattle\" real, \"Oxen\" real, \"Bulls\" real, \"Cows\" real, \"Pigs\" real, \"Sheep_and_Goats\" real, primary key (\"Farm_ID\"));",
    "output": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses > 5000"
  },
  {
    "instruction": "what state contains the highest point in the us",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Show the average, maximum, minimum enrollment of all schools.",
    "input": "create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));",
    "output": "SELECT avg(enrollment), max(enrollment), min(enrollment) FROM school"
  },
  {
    "instruction": "what are major rivers in illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH > 750 AND traverse = \"illinois\";"
  },
  {
    "instruction": "Which payment method is used by most customers?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Give me the minimum and maximum bathroom count among all the apartments.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT min(bathroom_count), max(bathroom_count) FROM Apartments"
  },
  {
    "instruction": "What are the average profits of companies?",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT avg(Profits_billion) FROM Companies"
  },
  {
    "instruction": "What is the total balance of savings accounts not belonging to someone with the name Brown?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T1.name != 'Brown'"
  },
  {
    "instruction": "which us city has the highest population density",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );"
  },
  {
    "instruction": "Find the name of the youngest organization.",
    "input": "create table `organizations` (`organization_id` integer primary key, `date_formed` datetime, `organization_name` varchar(255), `uk_vat_number` varchar(20));",
    "output": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1"
  },
  {
    "instruction": "What is the velocity of the pilot named 'Thompson'?",
    "input": "create table \"flight\" (\"id\" int, \"Vehicle_Flight_number\" text, \"Date\" text, \"Pilot\" text, \"Velocity\" real, \"Altitude\" real, \"airport_id\" int, \"company_id\" int, primary key (\"id\"), foreign key (\"airport_id\") references `airport`(\"id\"), foreign key (\"company_id\") references `operate_company`(\"id\"));",
    "output": "SELECT avg(velocity) FROM flight WHERE pilot = 'Thompson'"
  },
  {
    "instruction": "Show the id and builder of the railway that are associated with the most trains.",
    "input": "create table \"railway\" (\"Railway_ID\" int, \"Railway\" text, \"Builder\" text, \"Built\" text, \"Wheels\" text, \"Location\" text, \"ObjectNumber\" text, primary key (\"Railway_ID\"));create table \"train\" (\"Train_ID\" int, \"Train_Num\" text, \"Name\" text, \"\nFROM\" text, \"Arrival\" text, \"Railway_ID\" int, primary key (\"Train_ID\"), foreign key (\"Railway_ID\") references `railway`(\"Railway_ID\"));",
    "output": "SELECT T2.Railway_ID, T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "what state has the largest area",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "List the names of all players who have a crossing score higher than 90 and prefer their right foot.",
    "input": "create table `player` (`id`\tinteger primary key autoincrement, `player_api_id`\tinteger unique, `player_name`\ttext, `player_fifa_api_id`\tinteger unique, `birthday`\ttext, `height`\tinteger, `weight`\tinteger);create table \"Player_Attributes\" (`id`\tinteger primary key autoincrement, `player_fifa_api_id`\tinteger, `player_api_id`\tinteger, `date`\ttext, `overall_rating`\tinteger, `potential`\tinteger, `preferred_foot`\ttext, `attacking_work_rate`\ttext, `defensive_work_rate`\ttext, `crossing`\tinteger, `finishing`\tinteger, `heading_accuracy`\tinteger, `short_passing`\tinteger, `volleys`\tinteger, `dribbling`\tinteger, `curve`\tinteger, `free_kick_accuracy`\tinteger, `long_passing`\tinteger, `ball_control`\tinteger, `acceleration`\tinteger, `sprint_speed`\tinteger, `agility`\tinteger, `reactions`\tinteger, `balance`\tinteger, `shot_power`\tinteger, `jumping`\tinteger, `stamina`\tinteger, `strength`\tinteger, `long_shots`\tinteger, `aggression`\tinteger, `interceptions`\tinteger, `positioning`\tinteger, `vision`\tinteger, `penalties`\tinteger, `marking`\tinteger, `standing_tackle`\tinteger, `sliding_tackle`\tinteger, `gk_diving`\tinteger, `gk_handling`\tinteger, `gk_kicking`\tinteger, `gk_positioning`\tinteger, `gk_reflexes`\tinteger, foreign key(`player_fifa_api_id`) references `player`(`player_fifa_api_id`), foreign key(`player_api_id`) references `player`(`player_api_id`));",
    "output": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing > 90 AND T2.preferred_foot = \"right\""
  },
  {
    "instruction": "What is the code of the course which the student whose last name is Smithson took?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'"
  },
  {
    "instruction": "What is the name of the artist who joined latest?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1"
  },
  {
    "instruction": "who has the most publications in syntactic parsing ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "What is the description of the product named \"Chocolate\"?",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `product_category_code` varchar(20) not null, `date_product_first_available` datetime, `date_product_discontinued` datetime, `product_name` varchar(80), `product_description` varchar(255), `product_price` decimal(19, 4));",
    "output": "SELECT product_description FROM products WHERE product_name = \"Chocolate\""
  },
  {
    "instruction": "what are the collaborations of Peter Mertens and Dina Barbian ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "Find the name and position of the head of the department with the least employees.",
    "input": "create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));",
    "output": "SELECT T2.name, T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"
  },
  {
    "instruction": "return me the papers after 2000 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT title FROM publication WHERE YEAR > 2000;"
  },
  {
    "instruction": "What are the positions with both players having more than 20 points and less than 10 points.",
    "input": "create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10"
  },
  {
    "instruction": "Find the name of customers who are living in Colorado?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_addresses` (`customer_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `address_type` varchar(15) not null, `date_address_to` datetime, foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = \"Colorado\""
  },
  {
    "instruction": "What is average age for different job title?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT avg(age), job FROM Person GROUP BY job"
  },
  {
    "instruction": "What are the names of the 3 departments with the most courses?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "List all of the ids for left-footed players with a height between 180cm and 190cm.",
    "input": "create table `player` (`id`\tinteger primary key autoincrement, `player_api_id`\tinteger unique, `player_name`\ttext, `player_fifa_api_id`\tinteger unique, `birthday`\ttext, `height`\tinteger, `weight`\tinteger);create table \"Player_Attributes\" (`id`\tinteger primary key autoincrement, `player_fifa_api_id`\tinteger, `player_api_id`\tinteger, `date`\ttext, `overall_rating`\tinteger, `potential`\tinteger, `preferred_foot`\ttext, `attacking_work_rate`\ttext, `defensive_work_rate`\ttext, `crossing`\tinteger, `finishing`\tinteger, `heading_accuracy`\tinteger, `short_passing`\tinteger, `volleys`\tinteger, `dribbling`\tinteger, `curve`\tinteger, `free_kick_accuracy`\tinteger, `long_passing`\tinteger, `ball_control`\tinteger, `acceleration`\tinteger, `sprint_speed`\tinteger, `agility`\tinteger, `reactions`\tinteger, `balance`\tinteger, `shot_power`\tinteger, `jumping`\tinteger, `stamina`\tinteger, `strength`\tinteger, `long_shots`\tinteger, `aggression`\tinteger, `interceptions`\tinteger, `positioning`\tinteger, `vision`\tinteger, `penalties`\tinteger, `marking`\tinteger, `standing_tackle`\tinteger, `sliding_tackle`\tinteger, `gk_diving`\tinteger, `gk_handling`\tinteger, `gk_kicking`\tinteger, `gk_positioning`\tinteger, `gk_reflexes`\tinteger, foreign key(`player_fifa_api_id`) references `player`(`player_fifa_api_id`), foreign key(`player_api_id`) references `player`(`player_api_id`));",
    "output": "SELECT player_api_id FROM Player WHERE height >= 180 AND height <= 190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = \"left\""
  },
  {
    "instruction": "datasets in papers about semantic parsing",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid WHERE t4.keyphrasename = \"semantic parsing\";"
  },
  {
    "instruction": "Return the address content for the customer whose name is \"Maudie Kertzmann\".",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_addresses` (`customer_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `address_type` varchar(15) not null, `date_address_to` datetime, foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.customer_name = \"Maudie Kertzmann\""
  },
  {
    "instruction": "How many songs are there?",
    "input": "create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(*) FROM Songs"
  },
  {
    "instruction": "Show the name of aircraft which fewest people have its certificate.",
    "input": "create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of climbers and the corresponding names of mountains that they climb?",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT T1.Name, T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID"
  },
  {
    "instruction": "Find the average number of factories for the manufacturers that have more than 20 shops.",
    "input": "create table \"manufacturer\" (\"Manufacturer_ID\" int, \"Open_Year\" real, \"Name\" text, \"Num_of_Factories\" int, \"Num_of_Shops\" int, primary key (\"Manufacturer_ID\"));",
    "output": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops > 20"
  },
  {
    "instruction": "How many bookings did each customer make? List the customer id, first name, and the count.",
    "input": "create table `customers` (`customer_id` integer primary key, `coupon_id` integer not null, `good_or_bad_customer` varchar(4), `first_name` varchar(80), `last_name` varchar(80), `gender_mf` varchar(1), `date_became_customer` datetime, `date_last_hire` datetime, foreign key (`coupon_id`) references `discount_coupons`(`coupon_id`));create table `bookings` (`booking_id` integer primary key , `customer_id` integer not null, `booking_status_code` varchar(10) not null, `returned_damaged_yn` varchar(40), `booking_start_date` datetime, `booking_end_date` datetime, `count_hired` varchar(40), `amount_payable` decimal(19, 4), `amount_of_discount` decimal(19, 4), `amount_outstanding` decimal(19, 4), `amount_of_refund` decimal(19, 4), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_id, T1.first_name, count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id"
  },
  {
    "instruction": "how many states are there in united states",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT COUNT ( state_name ) FROM state;"
  },
  {
    "instruction": "What are the names of customers who have taken both Mortgage and Auto loans?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Auto'"
  },
  {
    "instruction": "where is the highest mountain of the united states",
    "input": "create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain );"
  },
  {
    "instruction": "Which directors had a movie in either 1999 or 2000?",
    "input": "create table \"movie\" (\"movie_id\" int, \"Title\" text, \"Year\" int, \"Director\" text, \"Budget_million\" real, \"Gross_worldwide\" int, primary key(\"movie_id\"));",
    "output": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000"
  },
  {
    "instruction": "What are the enrollment dates of all the tests that have result \"Pass\"?",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));create table `student_tests_taken` (`registration_id` integer not null, `date_test_taken` datetime not null, `test_result` varchar(255), foreign key (`registration_id`) references `student_course_enrolment`(`registration_id`));",
    "output": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\""
  },
  {
    "instruction": "List the name of the county with the largest population.",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
  },
  {
    "instruction": "What are the names, ages, and countries of artists, sorted by the year they joined?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT name, age, country FROM artist ORDER BY Year_Join"
  },
  {
    "instruction": "How many co-authors has Mark Steedman had ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname != \"Mark Steedman\" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Mark Steedman\" );"
  },
  {
    "instruction": "how many rivers are found in idaho",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( river_name ) FROM river WHERE traverse = \"idaho\";"
  },
  {
    "instruction": "which shop has happy hour most frequently? List its id and number of happy hours.",
    "input": "create table \"happy_hour\" (\"HH_ID\" int, \"Shop_ID\" int, \"Month\" text, \"Num_of_shaff_in_charge\" int, primary key (\"HH_ID\",\"Shop_ID\",\"Month\"), foreign key (\"Shop_ID\") references `shop`(\"Shop_ID\"));",
    "output": "SELECT shop_id, count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the times used by climbers to climb mountains in Country Uganda.",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = \"Uganda\""
  },
  {
    "instruction": "Show all church names except for those that had a wedding in year 2015.",
    "input": "create table \"church\" (\"Church_ID\" int, \"Name\" text, \"Organized_by\" text, \"Open_Date\" int, \"Continuation_of\" text, primary key (\"Church_ID\"));create table \"church\" (\"Church_ID\" int, \"Name\" text, \"Organized_by\" text, \"Open_Date\" int, \"Continuation_of\" text, primary key (\"Church_ID\"));create table \"wedding\" (\"Church_ID\" int, \"Male_ID\" int, \"Female_ID\" int, \"Year\" int, primary key (\"Church_ID\",\"Male_ID\",\"Female_ID\"), foreign key (\"Church_ID\") references `church`(\"Church_ID\"), foreign key (\"Male_ID\") references `people`(\"People_ID\"), foreign key (\"Female_ID\") references `people`(\"People_ID\"));",
    "output": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id WHERE T2.year = 2015"
  },
  {
    "instruction": "When was deep learning proposed ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;"
  },
  {
    "instruction": "display the ID for those employees who did two or more jobs in the past.",
    "input": "create table `job_history` (`employee_id` decimal(6, 0) not null, `start_date` date not null, `end_date` date not null, `job_id` varchar(10) not null, `department_id` decimal(4, 0) default null, primary key (`employee_id`,`start_date`), foreign key (`employee_id`) references employees(`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
    "input": "create table \"bridge\" (\"architect_id\" int, \"id\" int, \"name\" text, \"location\" text, \"length_meters\" real, \"length_feet\" real, primary key(\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));create table \"architect\" (\"id\" text, \"name\" text, \"nationality\" text, \"gender\" text, primary key(\"id\"));",
    "output": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id WHERE t2.nationality = 'American' ORDER BY t1.length_feet"
  },
  {
    "instruction": "How many accounts do we have?",
    "input": "create table accounts (account_id integer not null, statement_id integer not null, account_details varchar(255), primary key (account_id), foreign key (statement_id) references statements (statement_id));",
    "output": "SELECT count(*) FROM Accounts"
  },
  {
    "instruction": "For each type of store, how many of them are there?",
    "input": "create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));",
    "output": "SELECT TYPE, count(*) FROM store GROUP BY TYPE"
  },
  {
    "instruction": "Find the total balance across checking accounts.",
    "input": "create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT sum(balance) FROM checking"
  },
  {
    "instruction": "return me the paper by \" H. V. Jagadish \" with the most citations .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t1.name = \"H. V. Jagadish\" ORDER BY t3.citation_num DESC LIMIT 1;"
  },
  {
    "instruction": "How many debates are there?",
    "input": "create table \"debate\" (\"Debate_ID\" int, \"Date\" text, \"Venue\" text, \"Num_of_Audience\" int, primary key (\"Debate_ID\"));",
    "output": "SELECT count(*) FROM debate"
  },
  {
    "instruction": "Show station names without any trains.",
    "input": "create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));create table \"train_station\" (\"Train_ID\" int, \"Station_ID\" int, primary key (\"Train_ID\",\"Station_ID\"), foreign key (\"Train_ID\") references \"train\"(\"Train_ID\"), foreign key (\"Station_ID\") references \"station\"(\"Station_ID\"));",
    "output": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)"
  },
  {
    "instruction": "what is the major cities in kansas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population > 150000 AND state_name = \"kansas\";"
  },
  {
    "instruction": "What is the attribute data type of the attribute with name \"Green\"?",
    "input": "create table `attribute_definitions` (`attribute_id` integer primary key, `attribute_name` varchar(30), `attribute_data_type` varchar(10));",
    "output": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = \"Green\""
  },
  {
    "instruction": "How many papers does Ed Desmond have in Semantic Parsing area ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t1.paperid JOIN author AS t2 ON t3.authorid = t2.authorid WHERE t2.authorname = \"Ed Desmond\" AND t4.keyphrasename = \"Semantic Parsing\";"
  },
  {
    "instruction": "How many parks are there in Atlanta city?",
    "input": "create table park (park_id text, park_name text, park_alias text, city text, state text, country text);",
    "output": "SELECT count(*) FROM park WHERE city = 'Atlanta';"
  },
  {
    "instruction": "What are the amenities in alphabetical order that Anonymous Donor Hall has?",
    "input": "create table dorm_amenity (amenid integer, amenity_name varchar(25));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid = T1.amenid JOIN dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = 'Anonymous Donor Hall' ORDER BY T1.amenity_name"
  },
  {
    "instruction": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, hire_date, salary, department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id"
  },
  {
    "instruction": "How many different locations does the school with code BUS has?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code = 'BUS'"
  },
  {
    "instruction": "List all people names in the order of their date of birth from old to young.",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));",
    "output": "SELECT name FROM people ORDER BY date_of_birth"
  },
  {
    "instruction": "What are the total account balances for each customer from Utah or Texas?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT sum(acc_bal) FROM customer WHERE state = 'Utah' OR state = 'Texas'"
  },
  {
    "instruction": "How many total credits are offered by each department?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT sum(credits), dept_name FROM course GROUP BY dept_name"
  },
  {
    "instruction": "How many tasks are there in total?",
    "input": "create table `tasks` (`task_id` integer primary key, `project_id` integer not null, `task_details` varchar(255) not null, `eg agree objectives` varchar(1), foreign key (`project_id`) references `projects`(`project_id`));",
    "output": "SELECT count(*) FROM Tasks"
  },
  {
    "instruction": "List the votes of elections in descending order.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Representative_ID\" int, \"Date\" text, \"Votes\" real, \"Vote_Percent\" real, \"Seats\" real, \"Place\" real, primary key (\"Election_ID\"), foreign key (\"Representative_ID\") references `representative`(\"Representative_ID\"));",
    "output": "SELECT Votes FROM election ORDER BY Votes DESC"
  },
  {
    "instruction": "What are the dates that have an average sea level pressure between 30.3 and 31?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"
  },
  {
    "instruction": "Who is the oldest person?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT name FROM Person WHERE age = (SELECT max(age) FROM person)"
  },
  {
    "instruction": "Which project made the most number of outcomes? List the project details and the project id.",
    "input": "create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));",
    "output": "SELECT T1.project_details, T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "In what scholarly journals does Takashi Matsumoto publish ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Takashi Matsumoto\" GROUP BY t3.journalid;"
  },
  {
    "instruction": "How many papers are published in total?",
    "input": "create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT count(*) FROM papers"
  },
  {
    "instruction": "What is the average unit price of all the tracks?",
    "input": "create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT AVG(UnitPrice) FROM TRACK"
  },
  {
    "instruction": "What are the distinct buildings with capacities of greater than 50?",
    "input": "create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));",
    "output": "SELECT DISTINCT building FROM classroom WHERE capacity > 50"
  },
  {
    "instruction": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.",
    "input": "create table \"movie\" (\"movie_id\" int, \"Title\" text, \"Year\" int, \"Director\" text, \"Budget_million\" real, \"Gross_worldwide\" int, primary key(\"movie_id\"));",
    "output": "SELECT title, director FROM movie WHERE YEAR <= 2000 ORDER BY gross_worldwide DESC LIMIT 1"
  },
  {
    "instruction": "Give the name of the department with the lowest budget.",
    "input": "create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));",
    "output": "SELECT dept_name FROM department ORDER BY budget LIMIT 1"
  },
  {
    "instruction": "how much population does california have",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM state WHERE state_name = \"california\";"
  },
  {
    "instruction": "Show the case burden of counties in descending order of population.",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC"
  },
  {
    "instruction": "where is a good restaurant on buchanan in san francisco for arabic food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "which state border kentucky",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "keyphrases used by Christof Dallermassl in 2000",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"Christof Dallermassl\" AND t3.year = 2000;"
  },
  {
    "instruction": "What is average number of students enrolled in Florida colleges?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT avg(enr) FROM College WHERE state = 'FL'"
  },
  {
    "instruction": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT t1.product_name, t1.typical_buying_price, t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"yellow\""
  },
  {
    "instruction": "What are the employee ids for those who had two or more jobs.",
    "input": "create table `job_history` (`employee_id` decimal(6, 0) not null, `start_date` date not null, `end_date` date not null, `job_id` varchar(10) not null, `department_id` decimal(4, 0) default null, primary key (`employee_id`,`start_date`), foreign key (`employee_id`) references employees(`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "What are the flight numbers for the aircraft Airbus A340-300?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = \"Airbus A340-300\""
  },
  {
    "instruction": "How many different cities are they from?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT count(DISTINCT city) FROM Person"
  },
  {
    "instruction": "where is massachusetts",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT country_name FROM state WHERE state_name = \"massachusetts\";"
  },
  {
    "instruction": "Count the number of actors.",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));",
    "output": "SELECT count(*) FROM actor"
  },
  {
    "instruction": "how many rivers are in the state with the largest population",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name = t2.traverse WHERE t1.state_name = ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );"
  },
  {
    "instruction": "What are the ids and last names of all drivers who participated in the most races?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the distinct visit dates?",
    "input": "create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT DISTINCT Visit_Date FROM VISITS"
  },
  {
    "instruction": "What are the names of all students taking a course who received an A or C?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));",
    "output": "SELECT T1.stu_fname, T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'"
  },
  {
    "instruction": "What is the last name of the student who got a grade A in the class with code 10018.",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));",
    "output": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A' AND T2.class_code = 10018"
  },
  {
    "instruction": "what papers does oren etzioni cite",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"oren etzioni\";"
  },
  {
    "instruction": "How many professors attained either Ph.D. or Masters degrees?",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'"
  },
  {
    "instruction": "What topic does Luke Zettlemoyer write about ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Luke Zettlemoyer\";"
  },
  {
    "instruction": "papers published in the last year",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT paperid FROM paper WHERE YEAR = ( SELECT MAX ( YEAR ) FROM paper );"
  },
  {
    "instruction": "What are recent papers on deep learning ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid, t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T1.fname, T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')"
  },
  {
    "instruction": "What are the open dates and years for the shop named Apple?",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT Open_Date, Open_Year FROM shop WHERE Shop_Name = \"Apple\""
  },
  {
    "instruction": "What is the customer id, first and last name with least number of accounts.",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "What is the party that has the largest number of representatives?",
    "input": "create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));",
    "output": "SELECT Party, COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What year did Ye Cao publish the most papers",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ), t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;"
  },
  {
    "instruction": "What is the name of the technician whose team is not 'NYY'?",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Name FROM technician WHERE Team != \"NYY\""
  },
  {
    "instruction": "What are the ids, types, and details of the organization with the most research staff?",
    "input": "create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));create table `research_staff` (`staff_id` integer primary key, `employer_organisation_id` integer not null, `staff_details` varchar(255) not null, foreign key (`employer_organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT T1.organisation_id, T1.organisation_type, T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the party with drivers from Hartford and drivers older than 40.",
    "input": "create table \"driver\" (\"Driver_ID\" int, \"Name\" text, \"Party\" text, \"Home_city\" text, \"Age\" int, primary key (\"Driver_ID\"));",
    "output": "SELECT party FROM driver WHERE home_city = 'Hartford' AND age > 40"
  },
  {
    "instruction": "Which address has both members younger than 30 and members older than 40?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Membership_card\" text, \"Age\" int, \"Time_of_purchase\" int, \"Level_of_membership\" int, \"Address\" text, primary key (\"Member_ID\"));create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Membership_card\" text, \"Age\" int, \"Time_of_purchase\" int, \"Level_of_membership\" int, \"Address\" text, primary key (\"Member_ID\"));",
    "output": "SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40"
  },
  {
    "instruction": "What are the team and the location of school each player belongs to?",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT T1.Team, T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID"
  },
  {
    "instruction": "How many different services are provided by all stations?",
    "input": "create table \"station\" (\"id\" int, \"network_name\" text, \"services\" text, \"local_authority\" text, primary key (\"id\"));",
    "output": "SELECT count(DISTINCT services) FROM station"
  },
  {
    "instruction": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));create table \"match\" (\"Match_ID\" int, \"Date\" text, \"Venue\" text, \"Score\" text, \"Result\" text, \"Competition\" text, primary key (\"Match_ID\"));",
    "output": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\""
  },
  {
    "instruction": "What is detail of the student who most recently registered course?",
    "input": "create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));create table students (student_id integer not null, student_details varchar(255), primary key (student_id), foreign key (student_id) references people (person_id));",
    "output": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1"
  },
  {
    "instruction": "give me some good places for arabic in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);",
    "output": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010"
  },
  {
    "instruction": "Find the name of the candidates whose oppose percentage is the lowest for each sex.",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT t1.name, t1.sex, min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex"
  },
  {
    "instruction": "What are the delegate and committee information for each election record?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT Delegate, Committee FROM election"
  },
  {
    "instruction": "Find the department with the most employees.",
    "input": "create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));",
    "output": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;"
  },
  {
    "instruction": "What are the price ranges of five star hotels?",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT price_range FROM HOTELS WHERE star_rating_code = \"5\""
  },
  {
    "instruction": "Who are Noah A Smith 's coauthors ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Noah A Smith\";"
  },
  {
    "instruction": "What is the first name of all employees who do not give any lessons?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id"
  },
  {
    "instruction": "Which parties have hosts of age above 50? Give me the party locations.",
    "input": "create table \"party_host\" (\"Party_ID\" int, \"Host_ID\" int, \"Is_Main_in_Charge\" bool, primary key (\"Party_ID\",\"Host_ID\"), foreign key (\"Host_ID\") references `host`(\"Host_ID\"), foreign key (\"Party_ID\") references `party`(\"Party_ID\"));create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T2.Age > 50"
  },
  {
    "instruction": "in what state is mount whitney",
    "input": "create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM mountain WHERE mountain_name = \"whitney\";"
  },
  {
    "instruction": "Has mirella lapata written any papers in 2016 ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t2.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"mirella lapata\" AND t3.year = 2016 GROUP BY t2.authorid;"
  },
  {
    "instruction": "Find the total hours of all projects.",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT sum(hours) FROM projects"
  },
  {
    "instruction": "what are some good places in mountain view for arabic food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "return me the number of references of \" Making database systems usable \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT reference_num FROM publication WHERE title = \"Making database systems usable\";"
  },
  {
    "instruction": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\""
  },
  {
    "instruction": "What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.",
    "input": "create table scientists (ssn int, name char(30) not null, primary key (ssn));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT T1.Name, T3.Name, T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name, T1.Name"
  },
  {
    "instruction": "How many assets can each parts be used in? List the part name and the number.",
    "input": "create table `parts` (`part_id` integer primary key, `part_name` varchar(255), `chargeable_yn` varchar(1), `chargeable_amount` varchar(20), `other_part_details` varchar(255));create table `asset_parts` (`asset_id` integer not null, `part_id` integer not null, foreign key (`part_id`) references `parts`(`part_id`), foreign key (`asset_id`) references `assets`(`asset_id`));",
    "output": "SELECT T1.part_name, count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name"
  },
  {
    "instruction": "Count the number of transactions.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT count(*) FROM Financial_transactions"
  },
  {
    "instruction": "What is the average fastest lap speed for races held after 2004, for each race, ordered by year?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT avg(T2.fastestlapspeed), T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"
  },
  {
    "instruction": "Show me Question Answering papers .",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "who publishes papers about sensor fusion",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";"
  },
  {
    "instruction": "How many different types of sports do we offer?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT count(DISTINCT sportname) FROM Sportsinfo"
  },
  {
    "instruction": "order all gas station locations by the opening year.",
    "input": "create table \"gas_station\" (\"Station_ID\" int, \"Open_Year\" int, \"Location\" text, \"Manager_Name\" text, \"Vice_Manager_Name\" text, \"Representative_Name\" text, primary key (\"Station_ID\"));",
    "output": "SELECT LOCATION FROM gas_station ORDER BY open_year"
  },
  {
    "instruction": "List the names of wrestlers and the teams in elimination in descending order of days held.",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT T2.Name, T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC"
  },
  {
    "instruction": "What is the name, type, and flag of the ship that was built in the most recent year?",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));",
    "output": "SELECT name, TYPE, flag FROM ship ORDER BY built_year DESC LIMIT 1"
  },
  {
    "instruction": "Show the reign and days held of wrestlers.",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT Reign, Days_held FROM wrestler"
  },
  {
    "instruction": "How many actors were born in \" Los Angeles \" after 2000 ?",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT name ) FROM actor WHERE birth_city = \"Los Angeles\" AND birth_year > 2000;"
  },
  {
    "instruction": "what state bordering oklahoma has the largest population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"oklahoma\" ) ORDER BY population DESC LIMIT 1;"
  },
  {
    "instruction": "what is the highest point in the state with the smallest population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name = t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MIN ( population ) FROM state ) );"
  },
  {
    "instruction": "What are the names of procedures physician John Wen was trained in?",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table trained_in (physician integer not null, treatment integer not null, certificationdate datetime not null, certificationexpires datetime not null, constraint fk_trained_in_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_trained_in_procedures_code foreign key(treatment) references procedures(code), primary key(physician, treatment));create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\""
  },
  {
    "instruction": "For each bed type, find the average room price.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT bedType, avg(basePrice) FROM Rooms GROUP BY bedType;"
  },
  {
    "instruction": "What are the different main industries for all companies?",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT DISTINCT main_industry FROM company"
  },
  {
    "instruction": "What is the description of role code ED?",
    "input": "create table roles (role_code char(15) not null, role_description varchar(255), primary key (role_code));",
    "output": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";"
  },
  {
    "instruction": "How many products have the color description 'red' and the characteristic name 'slow'?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"red\" AND t3.characteristic_name = \"slow\""
  },
  {
    "instruction": "Euclidean Distance papers citing NIPS papers",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN cite AS t5 ON t2.paperid = t5.citingpaperid JOIN paper AS t3 ON t3.paperid = t5.citedpaperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"Euclidean Distance\" AND t4.venuename = \"NIPS\";"
  },
  {
    "instruction": "List the school color of the school that has the largest enrollment.",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1"
  },
  {
    "instruction": "Which store has most the customers?",
    "input": "create table customer (customer_id smallint unsigned not null, store_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, email varchar(50) default null, address_id smallint unsigned not null, active boolean not null default true, create_date datetime not null, last_update timestamp default current_timestamp, primary key (customer_id), foreign key (address_id) references address (address_id), foreign key (store_id) references store (store_id));",
    "output": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Return the maximum and minimum number of cities across all markets.",
    "input": "create table \"market\" (\"Market_ID\" int, \"Country\" text, \"Number_cities\" int, primary key (\"Market_ID\"));",
    "output": "SELECT max(Number_cities), min(Number_cities) FROM market"
  },
  {
    "instruction": "What are the student ids for students over 20 years old?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT StuID FROM Student WHERE age > 20"
  },
  {
    "instruction": "What are the names of the technicians by ascending order of age?",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Name FROM technician ORDER BY Age ASC"
  },
  {
    "instruction": "Find the names of the artists who are from UK and have produced English songs.",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT artist_name FROM artist WHERE country = \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages = \"english\""
  },
  {
    "instruction": "What years did Pedro Domingos publish papers in ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Pedro Domingos\" GROUP BY t3.year;"
  },
  {
    "instruction": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));",
    "output": "SELECT T1.id, T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count(*) >= 2"
  },
  {
    "instruction": "Return the hispanic percentage for cities in which the black percentage is greater than 10.",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));",
    "output": "SELECT Hispanic FROM city WHERE Black > 10"
  },
  {
    "instruction": "what state has the highest population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state );"
  },
  {
    "instruction": "How many students are advised by each rank of faculty? List the rank and the number of students.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T1.rank, count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank"
  },
  {
    "instruction": "how many people live in california",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM state WHERE state_name = \"california\";"
  },
  {
    "instruction": "What is the phone number of the performer Ashley?",
    "input": "create table performers (performer_id integer not null, address_id integer not null, customer_name varchar(255), customer_phone varchar(255), customer_email_address varchar(255), other_details varchar(255), primary key (performer_id), unique (performer_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name = \"Ashley\""
  },
  {
    "instruction": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.",
    "input": "create table \"college\" (\"College_ID\" int, \"Name\" text, \"Leader_Name\" text, \"College_Location\" text, primary key (\"College_ID\"));create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Country\" text, \"College_ID\" int, primary key (\"Member_ID\"), foreign key (\"College_ID\") references `college`(\"College_ID\"));",
    "output": "SELECT T2.Name, T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID ORDER BY T2.Name ASC"
  },
  {
    "instruction": "return me the number of papers in PVLDB in \" University of Michigan \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN journal AS t3 ON t5.jid = t3.jid WHERE t3.name = \"PVLDB\" AND t2.name = \"University of Michigan\";"
  },
  {
    "instruction": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
    "input": "create table \"game\" (\"stadium_id\" int, \"id\" int, \"Season\" int, \"Date\" text, \"Home_team\" text, \"Away_team\" text, \"Score\" text, \"Competition\" text, primary key (\"id\"), foreign key (\"stadium_id\") references `stadium`(\"id\"));create table \"stadium\" (\"id\" int, \"name\" text, \"Home_Games\" int, \"Average_Attendance\" real, \"Total_Attendance\" real, \"Capacity_Percentage\" real, primary key (\"id\"));create table \"injury_accident\" (\"game_id\" int, \"id\" int, \"Player\" text, \"Injury\" text, \"Number_of_matches\" text, \"Source\" text, primary key (\"id\"), foreign key (\"game_id\") references `game`(\"id\"));create table \"game\" (\"stadium_id\" int, \"id\" int, \"Season\" int, \"Date\" text, \"Home_team\" text, \"Away_team\" text, \"Score\" text, \"Competition\" text, primary key (\"id\"), foreign key (\"stadium_id\") references `stadium`(\"id\"));create table \"stadium\" (\"id\" int, \"name\" text, \"Home_Games\" int, \"Average_Attendance\" real, \"Total_Attendance\" real, \"Capacity_Percentage\" real, primary key (\"id\"));create table \"injury_accident\" (\"game_id\" int, \"id\" int, \"Player\" text, \"Injury\" text, \"Number_of_matches\" text, \"Source\" text, primary key (\"id\"), foreign key (\"game_id\") references `game`(\"id\"));",
    "output": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'"
  },
  {
    "instruction": "What is the channel code and contact number of the customer contact channel that was active for the longest time?",
    "input": "create table `customer_contact_channels` (`customer_id` integer not null, `channel_code` varchar(15) not null, `active_from_date` datetime not null, `active_to_date` datetime, `contact_number` varchar(50) not null, foreign key (`customer_id`) references `customers`(`customer_id`));create table `customer_contact_channels` (`customer_id` integer not null, `channel_code` varchar(15) not null, `active_from_date` datetime not null, `active_to_date` datetime, `contact_number` varchar(50) not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT channel_code, contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date = (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)"
  },
  {
    "instruction": "machine networks for one shot learning",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT paperid FROM paper WHERE title = \"machine networks for one shot learning\";"
  },
  {
    "instruction": "How many players enter hall of fame each year?",
    "input": "create table hall_of_fame (player_id text, yearid integer, votedby text, ballots numeric, needed numeric, votes numeric, inducted text, category text, needed_note text, foreign key (player_id) references player(player_id));",
    "output": "SELECT yearid, count(*) FROM hall_of_fame GROUP BY yearid;"
  },
  {
    "instruction": "What is the sport with the most scholarship students?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT sportname FROM Sportsinfo WHERE onscholarship = 'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Return the names of entrepreneurs.",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID"
  },
  {
    "instruction": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
    "input": "create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT title FROM Movie WHERE director = \"James Cameron\" OR YEAR < 1980"
  },
  {
    "instruction": "What are the duration of the longest and shortest pop tracks in milliseconds?",
    "input": "create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT max(Milliseconds), min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Pop\""
  },
  {
    "instruction": "What is minimum age for different job title?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT min(age), job FROM Person GROUP BY job"
  },
  {
    "instruction": "Show the names for all females from Canada having a wedding in year 2016.",
    "input": "create table \"wedding\" (\"Church_ID\" int, \"Male_ID\" int, \"Female_ID\" int, \"Year\" int, primary key (\"Church_ID\",\"Male_ID\",\"Female_ID\"), foreign key (\"Church_ID\") references `church`(\"Church_ID\"), foreign key (\"Male_ID\") references `people`(\"People_ID\"), foreign key (\"Female_ID\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Country\" text, \"Is_Male\" text, \"Age\" int, primary key (\"People_ID\"));",
    "output": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id = T2.people_id WHERE T1.year = 2016 AND T2.is_male = 'F' AND T2.country = 'Canada'"
  },
  {
    "instruction": "What are the number of different course codes?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT crs_code) FROM CLASS"
  },
  {
    "instruction": "What are the descriptions of the courses with name \"database\"?",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));",
    "output": "SELECT course_description FROM COURSES WHERE course_name = \"database\""
  },
  {
    "instruction": "Show the manager name for gas stations belonging to the ExxonMobil company.",
    "input": "create table \"station_company\" (\"Station_ID\" int, \"Company_ID\" int, \"Rank_of_the_Year\" int, primary key (\"Station_ID\",\"Company_ID\"), foreign key (`station_id`) references `gas_station`(`station_id`), foreign key (`company_id`) references `company`(`company_id`));create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));create table \"gas_station\" (\"Station_ID\" int, \"Open_Year\" int, \"Location\" text, \"Manager_Name\" text, \"Vice_Manager_Name\" text, \"Representative_Name\" text, primary key (\"Station_ID\"));",
    "output": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.company = 'ExxonMobil'"
  },
  {
    "instruction": "What is the first name of students enrolled in class ACCT-211 and got grade C?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'"
  },
  {
    "instruction": "When was benjamin mako hill 's first publication ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;"
  },
  {
    "instruction": "How many events did not have any participants?",
    "input": "create table events (event_id integer not null, service_id integer not null, event_details varchar(255), primary key (event_id), foreign key (service_id) references services (service_id));create table participants_in_events (event_id integer not null, participant_id integer not null, primary key (event_id, participant_id), foreign key (participant_id) references participants (participant_id), foreign key (event_id) references events (event_id));",
    "output": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)"
  },
  {
    "instruction": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?",
    "input": "create table \"match\" (\"Match_ID\" int, \"Date\" text, \"Venue\" text, \"Score\" text, \"Result\" text, \"Competition\" text, primary key (\"Match_ID\"));",
    "output": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\""
  },
  {
    "instruction": "How many instrument does the musician with last name \"Heilo\" use?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = \"Heilo\""
  },
  {
    "instruction": "Find the first name of student who is taking classes from accounting and Computer Info. Systems departments",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Computer Info. Systems'"
  },
  {
    "instruction": "Show all member names who are not in charge of any event.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));create table \"party_events\" (\"Event_ID\" int, \"Event_Name\" text, \"Party_ID\" int, \"Member_in_charge_ID\" int, primary key (\"Event_ID\"), foreign key (`party_id`) references `party`(`party_id`), foreign key (`member_in_charge_id`) references `member`(`member_id`));",
    "output": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id"
  },
  {
    "instruction": "Find the distinct ages of students who have secretary votes in the fall election cycle.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE T2.Election_Cycle = \"Fall\""
  },
  {
    "instruction": "who wrote the most CVPR papers in 2007",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t2.paperid ), t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2007 AND t3.venuename = \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;"
  },
  {
    "instruction": "Find the names of states that have some college students playing in goalie and mid positions.",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid'"
  },
  {
    "instruction": "In the year 2000, what is the campus fee for San Francisco State University?",
    "input": "create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Francisco State University\" AND t1.year = 2000"
  },
  {
    "instruction": "How many draft copies does the document with id 2 have?",
    "input": "create table draft_copies (document_id integer not null, draft_number integer not null, copy_number integer not null, primary key (document_id, draft_number, copy_number), foreign key (document_id, draft_number) references document_drafts (document_id, draft_number));",
    "output": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;"
  },
  {
    "instruction": "Give the names of wines with prices above any wine produced in 2006.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Name FROM WINE WHERE Price > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)"
  },
  {
    "instruction": "How many camera lenses have a focal length longer than 15 mm?",
    "input": "create table \"camera_lens\" (\"id\" int, \"brand\" text, \"name\" text, \"focal_length_mm\" real, \"max_aperture\" real, primary key(\"id\"));",
    "output": "SELECT count(*) FROM camera_lens WHERE focal_length_mm > 15"
  },
  {
    "instruction": "How many students participated in tryouts for each college by descennding count?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT count(*), cName FROM tryout GROUP BY cName ORDER BY count(*) DESC"
  },
  {
    "instruction": "What is the height of the mountain climbined by the climbing who had the most points?",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1"
  },
  {
    "instruction": "What is the issue date of the volume with the minimum weeks on top?",
    "input": "create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1"
  },
  {
    "instruction": "How many cards does customer Art Turcotte have?",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\""
  },
  {
    "instruction": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Rosalind\""
  },
  {
    "instruction": "List all information about courses sorted by credits in the ascending order.",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT * FROM COURSE ORDER BY Credits"
  },
  {
    "instruction": "How many papers in ACL 2015 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"ACL\";"
  },
  {
    "instruction": "Which vocal type is the most frequently appearring type?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));",
    "output": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the total number of rooms in the apartments that have facility code \"Gym\".",
    "input": "create table apartment_facilities (apt_id integer not null, facility_code char(15) not null, primary key (apt_id, facility_code), foreign key (apt_id) references apartments (apt_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.facility_code = \"Gym\""
  },
  {
    "instruction": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
    "input": "create table things (thing_id integer not null, organization_id integer not null, type_of_thing_code char(15) not null, service_type_code char(10) not null, service_details varchar(255), primary key (thing_id), foreign key (organization_id) references organizations (organization_id));create table timed_locations_of_things (thing_id integer not null, date_and_time datetime not null, location_code char(15) not null, primary key (thing_id, date_and_time, location_code), foreign key (thing_id) references things (thing_id));",
    "output": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.service_details = 'Unsatisfied'"
  },
  {
    "instruction": "List the names and scores of all wines.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Name, Score FROM WINE"
  },
  {
    "instruction": "Count the number of courses.",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT count(*) FROM COURSE"
  },
  {
    "instruction": "papers about Question Answering",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "how large is the largest city in alaska",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"alaska\" ) AND state_name = \"alaska\";"
  },
  {
    "instruction": "Find the name and level of catalog structure with level between 5 and 10.",
    "input": "create table `catalog_structure` (`catalog_level_number` integer primary key, `catalog_id` integer not null, `catalog_level_name` varchar(50), foreign key (`catalog_id`) references `catalogs`(`catalog_id`));",
    "output": "SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
  },
  {
    "instruction": "List the carriers of devices that have no devices in stock.",
    "input": "create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));create table \"stock\" (\"Shop_ID\" int, \"Device_ID\" int, \"Quantity\" int, primary key (\"Shop_ID\",\"Device_ID\"), foreign key (`shop_id`) references `shop`(`shop_id`), foreign key (`device_id`) references `device`(`device_id`));",
    "output": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)"
  },
  {
    "instruction": "list all the reviews by Niloofar",
    "input": "create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t2.name = \"Niloofar\";"
  },
  {
    "instruction": "What details are there on the research staff? List the result in ascending alphabetical order.",
    "input": "create table `research_staff` (`staff_id` integer primary key, `employer_organisation_id` integer not null, `staff_details` varchar(255) not null, foreign key (`employer_organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC"
  },
  {
    "instruction": "Which city is post code 255 located in?",
    "input": "create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT city FROM addresses WHERE zip_postcode = 255"
  },
  {
    "instruction": "What are the names and ids of the tourist attractions that are visited at most once?",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT T1.Name, T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) <= 1"
  },
  {
    "instruction": "return me the papers by \" H. V. Jagadish \" on PVLDB with more than 200 citations .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\" AND t2.name = \"PVLDB\" AND t4.citation_num > 200;"
  },
  {
    "instruction": "Give me the name of the customer who ordered the most items in total.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1"
  },
  {
    "instruction": "What are the heights of perpetrators in descending order of the number of people they injured?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Home Town\" text, primary key (\"People_ID\"));create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Injured DESC"
  },
  {
    "instruction": "What is the number of distinct cities the stations are located at?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT count(DISTINCT city) FROM station"
  },
  {
    "instruction": "What is the ship with the largest amount of tonnage called?",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1"
  },
  {
    "instruction": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200"
  },
  {
    "instruction": "what is the city with the smallest population",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city );"
  },
  {
    "instruction": "What are the headquarters with at least two companies in the banking industry?",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING count(*) >= 2"
  },
  {
    "instruction": "What are the names of device shops, and what are the carriers that they carry devices in stock for?",
    "input": "create table \"stock\" (\"Shop_ID\" int, \"Device_ID\" int, \"Quantity\" int, primary key (\"Shop_ID\",\"Device_ID\"), foreign key (`shop_id`) references `shop`(`shop_id`), foreign key (`device_id`) references `device`(`device_id`));create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT T3.Shop_Name, T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID"
  },
  {
    "instruction": "Find the names of females who are friends with Zach",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Zach' AND T1.gender = 'female'"
  },
  {
    "instruction": "From what date and to what date do the staff work on a project that has the most staff and has staff in a leader role?",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT date_from, date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from, date_to FROM Project_Staff WHERE role_code = 'leader'"
  },
  {
    "instruction": "List the name of musicals that do not have actors.",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));",
    "output": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"
  },
  {
    "instruction": "which state has the biggest population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state );"
  },
  {
    "instruction": "What are the unique names of all race held between 2014 and 2017?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017"
  },
  {
    "instruction": "What are the hometowns that are shared by at least two gymnasts?",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "how big is the city of boulder",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = \"boulder\";"
  },
  {
    "instruction": "Find the name and checking balance of the account with the lowest savings balance.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name, T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1"
  },
  {
    "instruction": "give me some good restaurants on buchanan in san francisco for arabic food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Parsing papers from ACL 2014 that used Jeopardy! Questions",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid = t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid = t3.paperid JOIN paper AS t2 ON t2.paperid = t3.paperid JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid = t1.keyphraseid WHERE t5.datasetname = \"Jeopardy! Questions\" AND t1.keyphrasename = \"Parsing\" AND t2.year = 2014 AND t6.venuename = \"ACL\";"
  },
  {
    "instruction": "List the customers first and last name of 10 least expensive invoices.",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10;"
  },
  {
    "instruction": "ACL papers by author",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT t2.paperid, t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"ACL\";"
  },
  {
    "instruction": "What is the average latitude and longitude of all starting stations for the trips?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT avg(T1.lat), avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id"
  },
  {
    "instruction": "How many invoices correspond to each order id?",
    "input": "create table `invoices` (`invoice_number` integer primary key, `order_id` integer not null, `invoice_date` datetime, foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT order_id, count(*) FROM Invoices GROUP BY order_id"
  },
  {
    "instruction": "How many clubs are there?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT count(*) FROM club"
  },
  {
    "instruction": "What are all the different zip codes that have a maximum dew point that was always below 70?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70"
  },
  {
    "instruction": "What are the names of cities, as well as the names of the counties they correspond to?",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT T1.Name, T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID"
  },
  {
    "instruction": "List the names of people that are not employed by any company",
    "input": "create table \"people\" (\"People_ID\" int, \"Age\" int, \"Name\" text, \"Nationality\" text, \"Graduation_College\" text, primary key (\"People_ID\"));create table \"employment\" (\"Company_ID\" int, \"People_ID\" int, \"Year_working\" int, primary key (\"Company_ID\",\"People_ID\"), foreign key (\"Company_ID\") references `company`(\"Company_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));",
    "output": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)"
  },
  {
    "instruction": "Find the author who achieved the highest score in a submission.",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1"
  },
  {
    "instruction": "What are the unique ids of those departments where any manager is managing 4 or more employees.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT DISTINCT department_id FROM employees GROUP BY department_id, manager_id HAVING COUNT(employee_id) >= 4"
  },
  {
    "instruction": "Show the member name and hometown who registered a branch in 2016.",
    "input": "create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));",
    "output": "SELECT T2.name, T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T1.register_year = 2016"
  },
  {
    "instruction": "name the states which have no surrounding states",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );"
  },
  {
    "instruction": "How many furniture components are there in total?",
    "input": "create table \"furniture\" (\"Furniture_ID\" int, \"Name\" text, \"Num_of_Component\" int, \"Market_Rate\" real, primary key (\"Furniture_ID\"));",
    "output": "SELECT sum(num_of_component) FROM furniture"
  },
  {
    "instruction": "Show the id and name of the aircraft with the maximum distance.",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT aid, name FROM Aircraft ORDER BY distance DESC LIMIT 1"
  },
  {
    "instruction": "What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?",
    "input": "create table postseason (year integer, round text, team_id_winner text, league_id_winner text, team_id_loser text, league_id_loser text, wins integer, losses integer, ties integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT count(*), T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year"
  },
  {
    "instruction": "Show institution types, along with the number of institutions and total enrollment for each type.",
    "input": "create table \"Institution\" (\"Institution_id\" text, \"Institution\" text, \"Location\" text, \"Founded\" real, \"Type\" text, \"Enrollment\" int, \"Team\" text, \"Primary_Conference\" text, \"building_id\" text, primary key(\"Institution_id\"), foreign key (\"building_id\") references \"building\"(\"building_id\"));",
    "output": "SELECT TYPE, count(*), sum(enrollment) FROM institution GROUP BY TYPE"
  },
  {
    "instruction": "Find the number of trains for each station, as well as the station network name and services.",
    "input": "create table \"station\" (\"id\" int, \"network_name\" text, \"services\" text, \"local_authority\" text, primary key (\"id\"));create table \"route\" (\"train_id\" int, \"station_id\" int, primary key (\"train_id\", \"station_id\"), foreign key (\"train_id\") references `train`(\"id\"), foreign key (\"station_id\") references `station`(\"id\"));",
    "output": "SELECT count(*), t1.network_name, t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id"
  },
  {
    "instruction": "Show the name, role code, and date of birth for the employee with name 'Armani'.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT employee_name, role_code, date_of_birth FROM Employees WHERE employee_Name = 'Armani'"
  },
  {
    "instruction": "What are the names of organizations, ordered by the date they were formed, ascending?",
    "input": "create table `organizations` (`organization_id` integer primary key, `date_formed` datetime, `organization_name` varchar(255), `uk_vat_number` varchar(20));",
    "output": "SELECT organization_name FROM organizations ORDER BY date_formed ASC"
  },
  {
    "instruction": "Find all businesses in Texas with a rating below 2",
    "input": "create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT name FROM business WHERE rating < 2 AND state = \"Texas\";"
  },
  {
    "instruction": "What are the first name and last name of the players whose death record is empty?",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);",
    "output": "SELECT name_first, name_last FROM player WHERE death_year = '';"
  },
  {
    "instruction": "Find the names of channels that are not owned by CCTV.",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));",
    "output": "SELECT name FROM channel WHERE OWNER != 'CCTV'"
  },
  {
    "instruction": "What are the different transaction types, and how many transactions of each have taken place?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `previous_transaction_id` integer, `account_id` integer not null, `card_id` integer not null, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` double null, `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`card_id`) references `customers_cards`(`card_id`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT transaction_type, count(*) FROM Financial_transactions GROUP BY transaction_type"
  },
  {
    "instruction": "what are the populations of states through which the mississippi run",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );"
  },
  {
    "instruction": "What is the average bike availablility for stations not in Palo Alto?",
    "input": "create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = \"Palo Alto\")"
  },
  {
    "instruction": "Show the name of drivers in descending order of age.",
    "input": "create table \"driver\" (\"Driver_ID\" int, \"Name\" text, \"Party\" text, \"Home_city\" text, \"Age\" int, primary key (\"Driver_ID\"));",
    "output": "SELECT name FROM driver ORDER BY age DESC"
  },
  {
    "instruction": "For each country and airline name, how many routes are there?",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT T1.country, T1.name, count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.country, T1.name"
  },
  {
    "instruction": "What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;"
  },
  {
    "instruction": "How many buildings are there?",
    "input": "create table \"building\" (\"building_id\" text, \"Name\" text, \"Street_address\" text, \"Years_as_tallest\" text, \"Height_feet\" int, \"Floors\" int, primary key(\"building_id\"));",
    "output": "SELECT count(*) FROM building"
  },
  {
    "instruction": "Which position is most popular among players in the tryout?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the distinct first names, last names, and phone numbers for customers with accounts?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT T1.customer_first_name, T1.customer_last_name, T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id"
  },
  {
    "instruction": "what is the largest city in wyoming by population",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"wyoming\" ) AND state_name = \"wyoming\";"
  },
  {
    "instruction": "Who has published more papers in chi ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ), t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;"
  },
  {
    "instruction": "Show ids for all aircrafts with more than 1000 distance.",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT aid FROM Aircraft WHERE distance > 1000"
  },
  {
    "instruction": "What are the full names and salaries for any employees earning less than 6000?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, salary FROM employees WHERE salary < 6000"
  },
  {
    "instruction": "Find the last name of female (sex is F) students in the descending order of age.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT LName FROM STUDENT WHERE Sex = \"F\" ORDER BY Age DESC"
  },
  {
    "instruction": "What are the average prices of products, grouped by manufacturer name?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT avg(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name"
  },
  {
    "instruction": "What are the heights of body builders with total score smaller than 315?",
    "input": "create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total < 315"
  },
  {
    "instruction": "What are the student ids for all male students?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT StuID FROM Student WHERE Sex = 'M'"
  },
  {
    "instruction": "papers with at least 5 citations",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid = t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid ) >= 5;"
  },
  {
    "instruction": "what is the capital of the state with the most inhabitants",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT capital FROM state WHERE population = ( SELECT MAX ( population ) FROM state );"
  },
  {
    "instruction": "What are the SSN and names of scientists working on the project with the most hours?",
    "input": "create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table scientists (ssn int, name char(30) not null, primary key (ssn));create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT T3.ssn, T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT max(hours) FROM projects)"
  },
  {
    "instruction": "What are the job ids corresponding to jobs with average salary above 8000?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000"
  },
  {
    "instruction": "Show all video games and their types in the order of their names.",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT gname, gtype FROM Video_games ORDER BY gname"
  },
  {
    "instruction": "Return the characteristic names of the 'sesame' product.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\""
  },
  {
    "instruction": "What is the carrier of the most expensive phone?",
    "input": "create table \"phone\" (\"Name\" text, \"Phone_ID\" int, \"Memory_in_G\" int, \"Carrier\" text, \"Price\" real, primary key (\"Phone_ID\"));",
    "output": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1"
  },
  {
    "instruction": "give me the best restaurant in bay area for american food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" );"
  },
  {
    "instruction": "How many rooms cost more than 120, for each different decor?",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT decor, count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor;"
  },
  {
    "instruction": "Show all artist name, age, and country ordered by the yeared they joined.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT name, age, country FROM artist ORDER BY Year_Join"
  },
  {
    "instruction": "What are the official languages of the countries of players from Maryland or Duke college?",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = \"Maryland\" OR T2.College = \"Duke\""
  },
  {
    "instruction": "How many airlines are there?",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);",
    "output": "SELECT count(*) FROM airlines"
  },
  {
    "instruction": "How many entrepreneurs are there?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT count(*) FROM entrepreneur"
  },
  {
    "instruction": "What are the details of all organizations that are described as Sponsors and sort the results in ascending order?",
    "input": "create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));create table `organisation_types` (`organisation_type` varchar(10) primary key, `organisation_type_description` varchar(255) not null);",
    "output": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_type_description = 'Sponsor' ORDER BY organisation_details"
  },
  {
    "instruction": "How many papers does jamie callan publish each year ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"jamie callan\" GROUP BY t3.year;"
  },
  {
    "instruction": "number of papers written by Christopher D. Manning",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Christopher D. Manning\";"
  },
  {
    "instruction": "What are the famous titles of the artist \"Triumfall\"?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));",
    "output": "SELECT Famous_Title FROM artist WHERE Artist = \"Triumfall\""
  },
  {
    "instruction": "What is the customer last name, id and phone number with most number of orders?",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT T2.customer_last_name, T1.customer_id, T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many different types of transactions are there?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `previous_transaction_id` integer, `account_id` integer not null, `card_id` integer not null, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` double null, `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`card_id`) references `customers_cards`(`card_id`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions"
  },
  {
    "instruction": "Find the schools that were either founded after 1850 or public.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'"
  },
  {
    "instruction": "What are the countries that contain 3 or more cities?",
    "input": "create table city (city_id smallint unsigned not null, city varchar(50) not null, country_id smallint unsigned not null, last_update timestamp not null default current_timestamp, primary key (city_id), foreign key (country_id) references country (country_id));create table country (country_id smallint unsigned not null, country varchar(50) not null, last_update timestamp not null default current_timestamp, primary key (country_id));",
    "output": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id GROUP BY T2.country_id HAVING count(*) >= 3"
  },
  {
    "instruction": "Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));",
    "output": "SELECT Amount_Settled, Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1"
  },
  {
    "instruction": "Show the description of the transaction type that occurs most frequently.",
    "input": "create table `ref_transaction_types` (`transaction_type_code` varchar(10) primary key, `transaction_type_description` varchar(80) not null);create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.",
    "input": "create table `maintenance_engineers` (`engineer_id` integer primary key, `company_id` integer not null, `first_name` varchar(50), `last_name` varchar(50), `other_details` varchar(255), foreign key (`company_id`) references `third_party_companies`(`company_id`));create table `engineer_visits` (`engineer_visit_id` integer primary key, `contact_staff_id` integer, `engineer_id` integer not null, `fault_log_entry_id` integer not null, `fault_status` varchar(10) not null, `visit_start_datetime` datetime, `visit_end_datetime` datetime, `other_visit_details` varchar(255), foreign key (`fault_log_entry_id`) references `fault_log`(`fault_log_entry_id`), foreign key (`engineer_id`) references `maintenance_engineers`(`engineer_id`), foreign key (`contact_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT first_name, last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)"
  },
  {
    "instruction": "Return the minimum and maximum crime rates across all counties.",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT min(Crime_rate), max(Crime_rate) FROM county_public_safety"
  },
  {
    "instruction": "how long is the rio grande river in miles",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT LENGTH FROM river WHERE river_name = \"rio grande\";"
  },
  {
    "instruction": "What are the famous titles of artists who do not have any volumes?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)"
  },
  {
    "instruction": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT name, headquarter FROM manufacturers ORDER BY revenue DESC"
  },
  {
    "instruction": "Show the transportation method most people choose to get to tourist attractions.",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the degrees conferred in \"San Francisco State University\" in 2001.",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 2001"
  },
  {
    "instruction": "what is the state with the lowest population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state );"
  },
  {
    "instruction": "who published the most at chi",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ), t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;"
  },
  {
    "instruction": "Show the distinct venues of debates",
    "input": "create table \"debate\" (\"Debate_ID\" int, \"Date\" text, \"Venue\" text, \"Num_of_Audience\" int, primary key (\"Debate_ID\"));",
    "output": "SELECT DISTINCT Venue FROM debate"
  },
  {
    "instruction": "show major cities in kansas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population > 150000 AND state_name = \"kansas\";"
  },
  {
    "instruction": "List the name and gender for all artists who released songs in March.",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.artist_name, T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\""
  },
  {
    "instruction": "Which country does customer with first name as Carole and last name as Bernhard lived in?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\""
  },
  {
    "instruction": "Which wineries produce at least four wines?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*) >= 4"
  },
  {
    "instruction": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1"
  },
  {
    "instruction": "Find the number of vocal types used in song \"Le Pop\"",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\""
  },
  {
    "instruction": "Return the name of the characteristic that is most common across all products.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Return the maximum enrollment across all schools.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT max(Enrollment) FROM university"
  },
  {
    "instruction": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);",
    "output": "SELECT Appelation FROM WINE WHERE YEAR > 2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area = \"Central Coast\""
  },
  {
    "instruction": "What are the ids of all students for courses and what are the names of those courses?",
    "input": "create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));create table courses (course_id varchar(100) not null, course_name varchar(120), course_description varchar(255), other_details varchar(255), primary key (course_id));",
    "output": "SELECT T1.student_id, T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id"
  },
  {
    "instruction": "Find the distinct last names of all the students who have president votes and whose advisor is 8741.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = \"8741\""
  },
  {
    "instruction": "Show the number of buildings with a height above the average or a number of floors above the average.",
    "input": "create table \"building\" (\"building_id\" text, \"Name\" text, \"Street_address\" text, \"Years_as_tallest\" text, \"Height_feet\" int, \"Floors\" int, primary key(\"building_id\"));create table \"building\" (\"building_id\" text, \"Name\" text, \"Street_address\" text, \"Years_as_tallest\" text, \"Height_feet\" int, \"Floors\" int, primary key(\"building_id\"));create table \"building\" (\"building_id\" text, \"Name\" text, \"Street_address\" text, \"Years_as_tallest\" text, \"Height_feet\" int, \"Floors\" int, primary key(\"building_id\"));",
    "output": "SELECT count(*) FROM building WHERE height_feet > (SELECT avg(height_feet) FROM building) OR floors > (SELECT avg(floors) FROM building)"
  },
  {
    "instruction": "What is the average sales of the journals that have an editor whose work type is 'Photo'?",
    "input": "create table \"journal\" (\"Journal_ID\" int, \"Date\" text, \"Theme\" text, \"Sales\" int, primary key (\"Journal_ID\"));create table \"journal_committee\" (\"Editor_ID\" int, \"Journal_ID\" int, \"Work_Type\" text, primary key (\"Editor_ID\",\"Journal_ID\"), foreign key (\"Editor_ID\") references `editor`(\"Editor_ID\"), foreign key (\"Journal_ID\") references `journal`(\"Journal_ID\"));",
    "output": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo'"
  },
  {
    "instruction": "Show all the planned delivery dates and actual delivery dates of bookings.",
    "input": "create table bookings (booking_id integer not null , customer_id integer not null, workshop_group_id varchar(100) not null, status_code char(15) not null, store_id integer not null, order_date datetime not null, planned_delivery_date datetime not null, actual_delivery_date datetime not null, other_order_details varchar(255), primary key (booking_id), unique (booking_id), foreign key (customer_id) references clients (client_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id));",
    "output": "SELECT Planned_Delivery_Date, Actual_Delivery_Date FROM BOOKINGS"
  },
  {
    "instruction": "Please show the most common status of roller coasters.",
    "input": "create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "List the name of playlist which has number of tracks greater than 100.",
    "input": "create table playlist_tracks (playlist_id integer not null, track_id integer not null, constraint pk_playlisttrack primary key (playlist_id, track_id), foreign key (playlist_id) references playlists (id)\n        ON delete no action\n        ON update no action, foreign key (track_id) references tracks (id)\n        ON delete no action\n        ON update no action);create table playlists (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id) > 100;"
  },
  {
    "instruction": "most published author at CVPR 2007",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t2.paperid ), t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2007 AND t3.venuename = \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;"
  },
  {
    "instruction": "What are the titles of films and corresponding types of market estimations?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));",
    "output": "SELECT T1.Title, T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID"
  },
  {
    "instruction": "Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT T1.claim_id, T1.date_claim_made, count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find all Mexican restaurant in Dallas with a rating above 3.5",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t1.rating > 3.5 AND t2.category_name = \"Mexican\" AND t3.category_name = \"restaurant\";"
  },
  {
    "instruction": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT product, chromosome, porphyria FROM enzyme WHERE LOCATION = 'Cytosol'"
  },
  {
    "instruction": "How much money did Lucas Mancini spend?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
  },
  {
    "instruction": "Find the name of the most expensive product.",
    "input": "create table `products` (`product_id` integer primary key, `product_name` varchar(20), `product_price` decimal(19, 4), `product_description` varchar(255));",
    "output": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1"
  },
  {
    "instruction": "Find the name of customers who have more than one loan.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING count(*) > 1"
  },
  {
    "instruction": "Find the name of the source user with the highest average trust score.",
    "input": "create table `useracct` (`u_id` integer not null , `name` varchar(128) default null , primary key (`u_id`));create table \"trust\" (`source_u_id` integer not null, `target_u_id` integer not null, `trust` integer not null, foreign key (`source_u_id`) references `useracct`(`u_id`), foreign key (`target_u_id`) references `useracct`(`u_id`));",
    "output": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1"
  },
  {
    "instruction": "monte carlo simulation papers since 2011",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"monte carlo simulation\" AND t3.year > 2011;"
  },
  {
    "instruction": "What is the average, minimum, maximum, and total transaction amount?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT avg(transaction_amount), min(transaction_amount), max(transaction_amount), sum(transaction_amount) FROM Financial_transactions"
  },
  {
    "instruction": "co-authors of Noah A Smith",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Noah A Smith\";"
  },
  {
    "instruction": "Show the name, phone, and payment method code for all customers in descending order of customer number.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(15), `customer_number` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));",
    "output": "SELECT customer_name, customer_phone, payment_method_code FROM customers ORDER BY customer_number DESC"
  },
  {
    "instruction": "What is the total amount of moeny paid by the customer Carole Bernhard?",
    "input": "create table `customer_payments` (`customer_id` integer not null, `datetime_payment` datetime not null, `payment_method_code` varchar(10) not null, `amount_payment` double null, primary key (`customer_id`,`datetime_payment`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\""
  },
  {
    "instruction": "What are the names and average prices of products for manufacturers whose products cost on average 150 or more?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT avg(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150"
  },
  {
    "instruction": "how many rivers are there in us",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( river_name ) FROM river;"
  },
  {
    "instruction": "What is the weight of the shortest person?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1"
  },
  {
    "instruction": "List the name of artworks in ascending alphabetical order.",
    "input": "create table artwork (\"Artwork_ID\" int, \"Type\" text, \"Name\" text, primary key (\"Artwork_ID\"));",
    "output": "SELECT Name FROM artwork ORDER BY Name ASC"
  },
  {
    "instruction": "What is the invoice number and invoice date for the invoice with most number of transactions?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));create table `invoices` (`invoice_number` integer primary key, `order_id` integer not null, `invoice_date` datetime, foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT T2.invoice_number, T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find all movies that star both \" Woody Strode \" and \" Jason Robards \"",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN CAST AS t3 ON t4.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid WHERE t1.name = \"Woody Strode\" AND t2.name = \"Jason Robards\";"
  },
  {
    "instruction": "Return the staff ids and genders for any staff with the title Department Manager.",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_gender` varchar(1), `staff_name` varchar(80));create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.staff_id, T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Department Manager\""
  },
  {
    "instruction": "return me the total citations of all the papers in the VLDB conference .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = \"VLDB\";"
  },
  {
    "instruction": "What is the average price range of five star hotels that allow pets?",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code = \"5\" AND pets_allowed_yn = 1"
  },
  {
    "instruction": "Find the names of swimmers who has a result of \"win\".",
    "input": "create table \"swimmer\" (\"ID\" int, \"name\" text, \"Nationality\" text, \"meter_100\" real, \"meter_200\" text, \"meter_300\" text, \"meter_400\" text, \"meter_500\" text, \"meter_600\" text, \"meter_700\" text, \"Time\" text, primary key (\"ID\"));create table \"record\" (\"ID\" int, \"Result\" text, \"Swimmer_ID\" int, \"Event_ID\" int, primary key (\"Swimmer_ID\",\"Event_ID\"), foreign key (`event_id`) references `event`(`id`), foreign key (`swimmer_id`) references `swimmer`(`id`));",
    "output": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win'"
  },
  {
    "instruction": "What are the names of countains that no climber has climbed?",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));",
    "output": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)"
  },
  {
    "instruction": "What is the id, name and IATA code of the airport that had most number of flights?",
    "input": "create table \"airport\" (\"id\" int, \"City\" text, \"Country\" text, \"IATA\" text, \"ICAO\" text, \"name\" text, primary key(\"id\"));create table \"flight\" (\"id\" int, \"Vehicle_Flight_number\" text, \"Date\" text, \"Pilot\" text, \"Velocity\" real, \"Altitude\" real, \"airport_id\" int, \"company_id\" int, primary key (\"id\"), foreign key (\"airport_id\") references `airport`(\"id\"), foreign key (\"company_id\") references `operate_company`(\"id\"));",
    "output": "SELECT T1.id, T1.name, T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
  },
  {
    "instruction": "Find the name and id of the item with the highest average rating.",
    "input": "create table `item` (`i_id` integer not null , `title` varchar(20) default null , primary key (`i_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1"
  },
  {
    "instruction": "What are the ids and names of accounts with 4 or more transactions?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.account_id, T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count(*) >= 4"
  },
  {
    "instruction": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));",
    "output": "SELECT customer_id, customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\""
  },
  {
    "instruction": "List papers that has keyword Question Answering",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "What are the names of the schools with the top 3 largest class sizes?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3"
  },
  {
    "instruction": "What is the average fee on a CSU campus in 2005?",
    "input": "create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));",
    "output": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 2005"
  },
  {
    "instruction": "Who are the different players and how many years has each played?",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Years_Played\" text, \"Total_WL\" text, \"Singles_WL\" text, \"Doubles_WL\" text, \"Team\" int, primary key (\"Player_ID\"), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT Player, Years_Played FROM player"
  },
  {
    "instruction": "Return the name of the youngest captain.",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT name FROM captain ORDER BY age LIMIT 1"
  },
  {
    "instruction": "List the journals published in March , 2011",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT journalid FROM paper WHERE YEAR = 2011 GROUP BY journalid;"
  },
  {
    "instruction": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T2.maxOccupancy = T1.Adults + T1.Kids;"
  },
  {
    "instruction": "what states does the shortest river run through",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river );"
  },
  {
    "instruction": "Which customer made the largest amount of claim in a single claim? Return the customer details.",
    "input": "create table claim_headers (claim_header_id integer not null, claim_status_code char(15) not null, claim_type_code char(15) not null, policy_id integer not null, date_of_claim datetime, date_of_settlement datetime, amount_claimed decimal(20, 4), amount_piad decimal(20, 4), primary key (claim_header_id), foreign key (policy_id) references policies (policy_id));create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table claim_headers (claim_header_id integer not null, claim_status_code char(15) not null, claim_type_code char(15) not null, policy_id integer not null, date_of_claim datetime, date_of_settlement datetime, amount_claimed decimal(20, 4), amount_piad decimal(20, 4), primary key (claim_header_id), foreign key (policy_id) references policies (policy_id));",
    "output": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_claimed = (SELECT max(amount_claimed) FROM claim_headers)"
  },
  {
    "instruction": "papers coauthored by Peter Mertens and Dina Barbian",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.",
    "input": "create table \"swimmer\" (\"ID\" int, \"name\" text, \"Nationality\" text, \"meter_100\" real, \"meter_200\" text, \"meter_300\" text, \"meter_400\" text, \"meter_500\" text, \"meter_600\" text, \"meter_700\" text, \"Time\" text, primary key (\"ID\"));create table \"record\" (\"ID\" int, \"Result\" text, \"Swimmer_ID\" int, \"Event_ID\" int, primary key (\"Swimmer_ID\",\"Event_ID\"), foreign key (`event_id`) references `event`(`id`), foreign key (`swimmer_id`) references `swimmer`(`id`));create table \"swimmer\" (\"ID\" int, \"name\" text, \"Nationality\" text, \"meter_100\" real, \"meter_200\" text, \"meter_300\" text, \"meter_400\" text, \"meter_500\" text, \"meter_600\" text, \"meter_700\" text, \"Time\" text, primary key (\"ID\"));create table \"record\" (\"ID\" int, \"Result\" text, \"Swimmer_ID\" int, \"Event_ID\" int, primary key (\"Swimmer_ID\",\"Event_ID\"), foreign key (`event_id`) references `event`(`id`), foreign key (`swimmer_id`) references `swimmer`(`id`));",
    "output": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Loss'"
  },
  {
    "instruction": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\""
  },
  {
    "instruction": "What are the names of all the races that occurred in the year 2017?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT name FROM races WHERE YEAR = 2017"
  },
  {
    "instruction": "Return the id and full name of the customer who has the fewest accounts.",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "What is the description of the marketing region China?",
    "input": "create table marketing_regions (marketing_region_code char(15) not null, marketing_region_name varchar(255) not null, marketing_region_descriptrion varchar(255) not null, other_details varchar(255), primary key (marketing_region_code), unique (marketing_region_code));",
    "output": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name = \"China\""
  },
  {
    "instruction": "Find the name of amenities Smith Hall dorm have.",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall'"
  },
  {
    "instruction": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT Studio FROM film WHERE Director = \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director = \"Walter Hill\""
  },
  {
    "instruction": "Show company name and main industry without a gas station.",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));create table \"station_company\" (\"Station_ID\" int, \"Company_ID\" int, \"Rank_of_the_Year\" int, primary key (\"Station_ID\",\"Company_ID\"), foreign key (`station_id`) references `gas_station`(`station_id`), foreign key (`company_id`) references `company`(`company_id`));",
    "output": "SELECT company, main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
  },
  {
    "instruction": "what state has the city with the most population",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );"
  },
  {
    "instruction": "What are the years of film market estimation for the market of Japan, ordered by year descending?",
    "input": "create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));create table \"market\" (\"Market_ID\" int, \"Country\" text, \"Number_cities\" int, primary key (\"Market_ID\"));",
    "output": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country = \"Japan\" ORDER BY T1.Year DESC"
  },
  {
    "instruction": "Find the number of users who did not write any review.",
    "input": "create table `useracct` (`u_id` integer not null , `name` varchar(128) default null , primary key (`u_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"
  },
  {
    "instruction": "What are the ids and durations of the trips with the top 3 durations?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3"
  },
  {
    "instruction": "What is the last date of the staff leaving the projects?",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1"
  },
  {
    "instruction": "return me the number of citations of \" Making database systems usable \" before 2010 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"cite\" (\"cited\" int, \"citing\" int, foreign key(\"cited\") references \"publication\"(\"pid\"), foreign key(\"citing\") references \"publication\"(\"pid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t3 JOIN cite AS t1 ON t3.pid = t1.cited JOIN publication AS t2 ON t2.pid = t1.citing WHERE t3.title = \"Making database systems usable\" AND t2.year < 2010;"
  },
  {
    "instruction": "What venues are for Neuroscience ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT venueid FROM venue WHERE venuename = \"Neuroscience\";"
  },
  {
    "instruction": "Show all transaction types.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `previous_transaction_id` integer, `account_id` integer not null, `card_id` integer not null, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` double null, `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`card_id`) references `customers_cards`(`card_id`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT DISTINCT transaction_type FROM Financial_Transactions"
  },
  {
    "instruction": "What are the ids, names and genders of the architects who built two bridges or one mill?",
    "input": "create table \"architect\" (\"id\" text, \"name\" text, \"nationality\" text, \"gender\" text, primary key(\"id\"));create table \"bridge\" (\"architect_id\" int, \"id\" int, \"name\" text, \"location\" text, \"length_meters\" real, \"length_feet\" real, primary key(\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));create table \"architect\" (\"id\" text, \"name\" text, \"nationality\" text, \"gender\" text, primary key(\"id\"));create table \"mill\" (\"architect_id\" int, \"id\" int, \"location\" text, \"name\" text, \"type\" text, \"built_year\" int, \"notes\" text, primary key (\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));",
    "output": "SELECT T1.id, T1.name, T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count(*) = 2 UNION SELECT T1.id, T1.name, T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count(*) = 1"
  },
  {
    "instruction": "which state has the highest population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MAX ( density ) FROM state );"
  },
  {
    "instruction": "How many workshops did each author submit to? Return the author name and the number of workshops.",
    "input": "create table \"Acceptance\" (\"Submission_ID\" int, \"Workshop_ID\" int, \"Result\" text, primary key (\"Submission_ID\",\"Workshop_ID\"), foreign key (\"Submission_ID\") references `submission`(\"Submission_ID\"), foreign key (\"Workshop_ID\") references `workshop`(\"Workshop_ID\"));create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT T2.Author, COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author"
  },
  {
    "instruction": "what is the population density of the largest state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT density FROM state WHERE area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "Which customers use \"Cash\" for payment method? Return the customer names.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT customer_name FROM customers WHERE payment_method = \"Cash\""
  },
  {
    "instruction": "What are the first name and major of the students who are able to consume soy?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT fname, major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Soy\")"
  },
  {
    "instruction": "How many papers were accepted at nature communications 2015 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"nature communications\";"
  },
  {
    "instruction": "How many races are there?",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));",
    "output": "SELECT count(*) FROM race"
  },
  {
    "instruction": "What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'"
  },
  {
    "instruction": "Which county do the delegates on \"Appropriations\" committee belong to? Give me the county names.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T2.Committee = \"Appropriations\""
  },
  {
    "instruction": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
    "input": "create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Support_rate, Consider_rate, Oppose_rate FROM candidate ORDER BY unsure_rate"
  },
  {
    "instruction": "which is the density of the state that the largest river in the united states runs through",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );"
  },
  {
    "instruction": "What paper did Michael Armstrong wrote in the 90s ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.year, t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname LIKE \"Michael Armstrong\" AND t3.year LIKE \"199\";"
  },
  {
    "instruction": "What are all the role codes, role names, and role descriptions?",
    "input": "create table roles (role_code char(15) not null, role_name varchar(255), role_description varchar(255), primary key (role_code));",
    "output": "SELECT role_code, role_name, role_description FROM ROLES"
  },
  {
    "instruction": "how high is the highest point in america",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT MAX ( highest_elevation ) FROM highlow;"
  },
  {
    "instruction": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT T1.date_of_enrolment, T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.family_name = \"Zieme\" AND T2.personal_name = \"Bernie\""
  },
  {
    "instruction": "List the dates of debates with number of audience bigger than 150",
    "input": "create table \"debate\" (\"Debate_ID\" int, \"Date\" text, \"Venue\" text, \"Num_of_Audience\" int, primary key (\"Debate_ID\"));",
    "output": "SELECT Date FROM debate WHERE Num_of_Audience > 150"
  },
  {
    "instruction": "Which country is the airport that has the highest altitude located in?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1"
  },
  {
    "instruction": "How many schools have some students playing in goalie and mid positions.",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT COUNT(*) FROM (SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid')"
  },
  {
    "instruction": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT flno, origin, destination FROM Flight ORDER BY origin"
  },
  {
    "instruction": "Give id of the instructor who advises students in the History department.",
    "input": "create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History'"
  },
  {
    "instruction": "What are the names of reviewers who had rated 3 star and 4 star?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table reviewer(rid int primary key, name text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table reviewer(rid int primary key, name text);",
    "output": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 4"
  },
  {
    "instruction": "How many assets does each maintenance contract contain? List the number and the contract id.",
    "input": "create table `maintenance_contracts` (`maintenance_contract_id` integer primary key, `maintenance_contract_company_id` integer not null, `contract_start_date` datetime, `contract_end_date` datetime, `other_contract_details` varchar(255), foreign key (`maintenance_contract_company_id`) references `third_party_companies`(`company_id`));create table `assets` (`asset_id` integer primary key, `maintenance_contract_id` integer not null, `supplier_company_id` integer not null, `asset_details` varchar(255), `asset_make` varchar(20), `asset_model` varchar(20), `asset_acquired_date` datetime, `asset_disposed_date` datetime, `other_asset_details` varchar(255), foreign key (`maintenance_contract_id`) references `maintenance_contracts`(`maintenance_contract_id`), foreign key (`supplier_company_id`) references `third_party_companies`(`company_id`));",
    "output": "SELECT count(*), T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id"
  },
  {
    "instruction": "Show the region name with at least two storms.",
    "input": "create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*) >= 2"
  },
  {
    "instruction": "Which problems are reported by the staff with first name \"Christop\"? Show the descriptions of the problems.",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));",
    "output": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\""
  },
  {
    "instruction": "return me the journals, which have more than 60 papers containing keyword \" Relational Database \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid WHERE t1.keyword = \"Relational Database\" GROUP BY t3.name HAVING COUNT ( DISTINCT t2.title ) > 60;"
  },
  {
    "instruction": "What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, hire_date FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\") AND first_name != \"Clara\""
  },
  {
    "instruction": "Give the full name and staff id of the staff who has handled the fewest payments.",
    "input": "create table staff (staff_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, address_id smallint unsigned not null, picture blob default null, email varchar(50) default null, store_id tinyint unsigned not null, active boolean not null default true, username varchar(16) not null, password varchar(40) default null, last_update timestamp not null default current_timestamp, primary key (staff_id), --FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (address_id) REFERENCES address (address_id));create table payment (payment_id smallint unsigned not null, customer_id smallint unsigned not null, staff_id tinyint unsigned not null, rental_id int default null, amount decimal(5, 2) not null, payment_date datetime not null, last_update timestamp default current_timestamp, primary key (payment_id), foreign key (rental_id) references rental (rental_id), foreign key (customer_id) references customer (customer_id), foreign key (staff_id) references staff (staff_id));",
    "output": "SELECT T1.first_name, T1.last_name, T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "What is the name of the language that the film 'AIRPORT POLLOCK' is in?",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));create table language (language_id tinyint unsigned not null, name char(20) not null, last_update timestamp not null default current_timestamp, primary key (language_id));",
    "output": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'AIRPORT POLLOCK'"
  },
  {
    "instruction": "Show the ids and names of all documents.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT document_id, document_name FROM Documents"
  },
  {
    "instruction": "List the total points of gymnasts in descending order of floor exercise points.",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC"
  },
  {
    "instruction": "What are all the dates of enrollment and completion in record?",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment"
  },
  {
    "instruction": "What is the name, latitude, and city of the station that is located the furthest South?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT name, lat, city FROM station ORDER BY lat LIMIT 1"
  },
  {
    "instruction": "where is the lowest point in iowa",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT lowest_point FROM highlow WHERE state_name = \"iowa\";"
  },
  {
    "instruction": "What is the id of the longest song?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);",
    "output": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1"
  },
  {
    "instruction": "Papers from Liwen Xiong in 2015",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Liwen Xiong\" AND t3.year = 2015;"
  },
  {
    "instruction": "Find all actors from Afghanistan",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT name FROM actor WHERE nationality = \"Afghanistan\";"
  },
  {
    "instruction": "How many games are free of injury accidents?",
    "input": "create table \"game\" (\"stadium_id\" int, \"id\" int, \"Season\" int, \"Date\" text, \"Home_team\" text, \"Away_team\" text, \"Score\" text, \"Competition\" text, primary key (\"id\"), foreign key (\"stadium_id\") references `stadium`(\"id\"));create table \"injury_accident\" (\"game_id\" int, \"id\" int, \"Player\" text, \"Injury\" text, \"Number_of_matches\" text, \"Source\" text, primary key (\"id\"), foreign key (\"game_id\") references `game`(\"id\"));",
    "output": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )"
  },
  {
    "instruction": "Find the name and email for the users who have more than one follower.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));create table `follows` (`f1` int(11) not null, `f2` int(11) not null, primary key (`f1`,`f2`), foreign key (`f1`) references `user_profiles`(`uid`), foreign key (`f2`) references `user_profiles`(`uid`));",
    "output": "SELECT T1.name, T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count(*) > 1"
  },
  {
    "instruction": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name, dept_name FROM student ORDER BY tot_cred"
  },
  {
    "instruction": "Return the total and minimum enrollments across all schools.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT sum(enrollment), min(enrollment) FROM university"
  },
  {
    "instruction": "What is the id and family name of the driver who has the longest laptime?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"lapTimes\" (\"raceId\" integer, \"driverId\" integer, \"lap\" integer, \"position\" integer, \"time\" text, \"milliseconds\" integer, primary key(\"raceId\", \"driverId\", \"lap\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1"
  },
  {
    "instruction": "Find the total revenue of companies of each founder.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT sum(revenue), founder FROM manufacturers GROUP BY founder"
  },
  {
    "instruction": "What are the name and id of the team offering the lowest average salary?",
    "input": "create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);create table salary (year integer, team_id text, league_id text, player_id text, salary integer);",
    "output": "SELECT T1.name, T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;"
  },
  {
    "instruction": "What are the positions and teams of pilots?",
    "input": "create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));",
    "output": "SELECT POSITION, Team FROM pilot"
  },
  {
    "instruction": "Find the number of tied games (the value of \"ties\" is '1') in 1885 postseason.",
    "input": "create table postseason (year integer, round text, team_id_winner text, league_id_winner text, team_id_loser text, league_id_loser text, wins integer, losses integer, ties integer);",
    "output": "SELECT count(*) FROM postseason WHERE YEAR = 1885 AND ties = 1;"
  },
  {
    "instruction": "Return the phone number of the customer who filed the complaint that was raised most recently.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1"
  },
  {
    "instruction": "Find the name and capacity of the dorm with least number of amenities.",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T1.dorm_name, T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);",
    "output": "SELECT name, course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID"
  },
  {
    "instruction": "What is the most common company type, and how many are there?",
    "input": "create table \"operate_company\" (\"id\" int, \"name\" text, \"Type\" text, \"Principal_activities\" text, \"Incorporated_in\" text, \"Group_Equity_Shareholding\" real, primary key (\"id\"));",
    "output": "SELECT TYPE, count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of chip model that do not have wifi.",
    "input": "create table \"chip_model\" (\"Model_name\" text, \"Launch_year\" real, \"RAM_MiB\" real, \"ROM_MiB\" real, \"Slots\" text, \"WiFi\" text, \"Bluetooth\" text, primary key (\"Model_name\"));",
    "output": "SELECT count(*) FROM chip_model WHERE wifi = 'No'"
  },
  {
    "instruction": "List the names of entrepreneurs and their companies in descending order of money requested?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name, T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested"
  },
  {
    "instruction": "How many team franchises are active, with active value 'Y'?",
    "input": "create table team_franchise (franchise_id text, franchise_name text, active text, na_assoc text);",
    "output": "SELECT count(*) FROM team_franchise WHERE active = 'Y';"
  },
  {
    "instruction": "For each grade 0 classroom, report the total number of students.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT classroom, count(*) FROM list WHERE grade = \"0\" GROUP BY classroom"
  },
  {
    "instruction": "sharon goldwater papers",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?",
    "input": "create table payment (payment_id smallint unsigned not null, customer_id smallint unsigned not null, staff_id tinyint unsigned not null, rental_id int default null, amount decimal(5, 2) not null, payment_date datetime not null, last_update timestamp default current_timestamp, primary key (payment_id), foreign key (rental_id) references rental (rental_id), foreign key (customer_id) references customer (customer_id), foreign key (staff_id) references staff (staff_id));create table payment (payment_id smallint unsigned not null, customer_id smallint unsigned not null, staff_id tinyint unsigned not null, rental_id int default null, amount decimal(5, 2) not null, payment_date datetime not null, last_update timestamp default current_timestamp, primary key (payment_id), foreign key (rental_id) references rental (rental_id), foreign key (customer_id) references customer (customer_id), foreign key (staff_id) references staff (staff_id));create table staff (staff_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, address_id smallint unsigned not null, picture blob default null, email varchar(50) default null, store_id tinyint unsigned not null, active boolean not null default true, username varchar(16) not null, password varchar(40) default null, last_update timestamp not null default current_timestamp, primary key (staff_id), --FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (address_id) REFERENCES address (address_id));",
    "output": "SELECT payment_date FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa'"
  },
  {
    "instruction": "What are the ids of all students who have attended at least one course?",
    "input": "create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT student_id FROM student_course_attendance"
  },
  {
    "instruction": "which rivers flow through illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = \"illinois\";"
  },
  {
    "instruction": "What are the total number of domestic passengers at all London airports?",
    "input": "create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\""
  },
  {
    "instruction": "What are the names of all the reviewers and movie names?",
    "input": "create table reviewer(rid int primary key, name text);create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT name FROM Reviewer UNION SELECT title FROM Movie"
  },
  {
    "instruction": "How many Starbucks are there in Dallas Texas ?",
    "input": "create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city = \"Dallas\" AND name = \"Starbucks\" AND state = \"Texas\";"
  },
  {
    "instruction": "What are the different positions for match season?",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT DISTINCT POSITION FROM match_season"
  },
  {
    "instruction": "What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id, first_name, last_name, salary FROM employees WHERE salary > ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')"
  },
  {
    "instruction": "how many square kilometers in the us",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT SUM ( area ) FROM state;"
  },
  {
    "instruction": "Show all distinct product categories along with the number of mailshots in each category.",
    "input": "create table `mailshot_campaigns` (`mailshot_id` integer primary key, `product_category` varchar(15), `mailshot_name` varchar(80), `mailshot_start_date` datetime, `mailshot_end_date` datetime);",
    "output": "SELECT product_category, count(*) FROM mailshot_campaigns GROUP BY product_category"
  },
  {
    "instruction": "What is the origin and destination for all flights whose price is higher than 300?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT origin, destination FROM Flight WHERE price > 300"
  },
  {
    "instruction": "What are the names of the county that the delegates on \"Appropriations\" committee belong to?",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T2.Committee = \"Appropriations\""
  },
  {
    "instruction": "Find the number of departments in each school.",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT dept_name), school_code FROM department GROUP BY school_code"
  },
  {
    "instruction": "Find the name of each user and number of tweets tweeted by each of them.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));create table `tweets` (`id` bigint(20) not null, `uid` int(11) not null, `text` char(140) not null, `createdate` datetime default current_timestamp, primary key (`id`), foreign key (`uid`) references `user_profiles`(`uid`));",
    "output": "SELECT T1.name, count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid"
  },
  {
    "instruction": "What is the average points of players from club with name \"AIB\".",
    "input": "create table \"club\" (\"Club_ID\" int, \"name\" text, \"Region\" text, \"Start_year\" text, primary key (\"Club_ID\"));create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.name = \"AIB\""
  },
  {
    "instruction": "return me the total citations of papers in PVLDB in each year .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t2.year, SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = \"PVLDB\" GROUP BY t2.year;"
  },
  {
    "instruction": "what states contain at least one major rivers",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE LENGTH > 750;"
  },
  {
    "instruction": "Find the names of the products with length smaller than 3 or height greater than 5.",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5"
  },
  {
    "instruction": "Return the address of customer 10.",
    "input": "create table `addresses` (`address_id` integer primary key, `address_details` varchar(255));create table `customer_addresses` (`customer_id` integer not null, `address_id` integer not null, `date_from` datetime not null, `date_to` datetime, primary key (`customer_id`, `address_id`), foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_id = 10"
  },
  {
    "instruction": "How many books are there for each publisher?",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT publisher, count(*) FROM book_club GROUP BY publisher"
  },
  {
    "instruction": "What is the id and salary of the employee named Mark Young?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT eid, salary FROM Employee WHERE name = 'Mark Young'"
  },
  {
    "instruction": "Who performed the song named \"Le Pop\"?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Le Pop\""
  },
  {
    "instruction": "return me the paper by \" H. V. Jagadish \" with more than 200 citations .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t1.name = \"H. V. Jagadish\" AND t3.citation_num > 200;"
  },
  {
    "instruction": "What are the ids of all moviest hat have not been reviewed by Britanny Harris?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table reviewer(rid int primary key, name text);",
    "output": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = \"Brittany Harris\""
  },
  {
    "instruction": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, hire_date FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = \"Clara\")"
  },
  {
    "instruction": "How many calendar items do we have?",
    "input": "create table ref_calendar (calendar_date datetime not null, day_number integer, primary key (calendar_date));",
    "output": "SELECT count(*) FROM Ref_calendar"
  },
  {
    "instruction": "Return the distinct name of customers whose order status is Pending, in the order of customer id.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Pending\" ORDER BY T2.customer_id"
  },
  {
    "instruction": "What is the name of the oldest student?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT name FROM Person WHERE job = 'student' AND age = (SELECT max(age) FROM person WHERE job = 'student' )"
  },
  {
    "instruction": "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_name` varchar(255), `gender` varchar(1), `other_staff_details` varchar(255));create table `fault_log` (`fault_log_entry_id` integer primary key, `asset_id` integer not null, `recorded_by_staff_id` integer not null, `fault_log_entry_datetime` datetime, `fault_description` varchar(255), `other_fault_details` varchar(255), foreign key (`asset_id`) references `assets`(`asset_id`), foreign key (`recorded_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_name` varchar(255), `gender` varchar(1), `other_staff_details` varchar(255));create table `engineer_visits` (`engineer_visit_id` integer primary key, `contact_staff_id` integer, `engineer_id` integer not null, `fault_log_entry_id` integer not null, `fault_status` varchar(10) not null, `visit_start_datetime` datetime, `visit_end_datetime` datetime, `other_visit_details` varchar(255), foreign key (`fault_log_entry_id`) references `fault_log`(`fault_log_entry_id`), foreign key (`engineer_id`) references `maintenance_engineers`(`engineer_id`), foreign key (`contact_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.staff_name, T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name, T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id = T4.contact_staff_id"
  },
  {
    "instruction": "Find the major that is studied by the most female students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Major FROM STUDENT WHERE Sex = \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",
    "input": "create table dorm_amenity (amenid integer, amenity_name varchar(25));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid = T1.amenid JOIN dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = 'Anonymous Donor Hall' ORDER BY T1.amenity_name"
  },
  {
    "instruction": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?",
    "input": "create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));create table all_documents (document_id integer not null, date_stored datetime, document_type_code char(15) not null, document_name char(255), document_description char(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (date_stored) references ref_calendar (calendar_date));",
    "output": "SELECT T1.date_in_location_from, T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Robin CV\""
  },
  {
    "instruction": "What are department ids for departments with managers managing more than 3 employees?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT DISTINCT department_id FROM employees GROUP BY department_id, manager_id HAVING COUNT(employee_id) >= 4"
  },
  {
    "instruction": "what are the populations of states which border texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT t2.population FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border WHERE t1.state_name = \"texas\";"
  },
  {
    "instruction": "Find the number of activities available.",
    "input": "create table activity (actid integer primary key, activity_name varchar(25));",
    "output": "SELECT count(*) FROM Activity"
  },
  {
    "instruction": "How many faculty members do we have for each faculty rank?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT rank, count(*) FROM Faculty GROUP BY rank"
  },
  {
    "instruction": "which states border the state with the smallest area",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );"
  },
  {
    "instruction": "Which city has hosted the most events?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));",
    "output": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the id of the trip that started from the station with the highest dock count?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1"
  },
  {
    "instruction": "Find the name of the customer that has been involved in the most policies.",
    "input": "create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));",
    "output": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the papers from pldi 2015 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental.",
    "input": "create table staff (staff_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, address_id smallint unsigned not null, picture blob default null, email varchar(50) default null, store_id tinyint unsigned not null, active boolean not null default true, username varchar(16) not null, password varchar(40) default null, last_update timestamp not null default current_timestamp, primary key (staff_id), --FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (address_id) REFERENCES address (address_id));create table rental (rental_id int not null, rental_date datetime not null, inventory_id mediumint unsigned not null, customer_id smallint unsigned not null, return_date datetime default null, staff_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (rental_id), foreign key (staff_id) references staff (staff_id), foreign key (inventory_id) references inventory (inventory_id), foreign key (customer_id) references customer (customer_id));create table customer (customer_id smallint unsigned not null, store_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, email varchar(50) default null, address_id smallint unsigned not null, active boolean not null default true, create_date datetime not null, last_update timestamp default current_timestamp, primary key (customer_id), foreign key (address_id) references address (address_id), foreign key (store_id) references store (store_id));",
    "output": "SELECT DISTINCT T1.first_name, T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id = T2.staff_id JOIN customer AS T3 ON T2.customer_id = T3.customer_id WHERE T3.first_name = 'APRIL' AND T3.last_name = 'BURNS'"
  },
  {
    "instruction": "Give the classes that have more than two captains.",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*) > 2"
  },
  {
    "instruction": "what state is the biggest",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "Find the total amount of products ordered before 2018-03-17 07:13:53.",
    "input": "create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_date < \"2018-03-17 07:13:53\""
  },
  {
    "instruction": "Show the height of the mountain climbed by the climber with the maximum points.",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1"
  },
  {
    "instruction": "Tell me the number of orders with \"Second time\" as order detail.",
    "input": "create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(*) FROM customer_orders WHERE order_details = \"Second time\""
  },
  {
    "instruction": "Find the distinct number of president votes.",
    "input": "create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD"
  },
  {
    "instruction": "Return the category code and typical price of 'cumin'.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT product_category_code, typical_buying_price FROM products WHERE product_name = \"cumin\""
  },
  {
    "instruction": "What are the average prices of wines for different years?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT avg(Price), YEAR FROM WINE GROUP BY YEAR"
  },
  {
    "instruction": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?",
    "input": "create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'"
  },
  {
    "instruction": "what are the names of the ships ordered by ascending tonnage?",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT Name FROM ship ORDER BY Tonnage ASC"
  },
  {
    "instruction": "Which party has two or more records?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "List the cities which have more than 2 airports sorted by the number of airports.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT city FROM airports GROUP BY city HAVING count(*) > 2 ORDER BY count(*)"
  },
  {
    "instruction": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT DISTINCT artist_name FROM song WHERE languages = \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 8"
  },
  {
    "instruction": "what is the population of the largest state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM state WHERE area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "How many accounts does the customer with first name Art and last name Turcotte have?",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\""
  },
  {
    "instruction": "Return the phone and email of the customer with the first name Aniyah and last name Feest.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = \"Aniyah\" AND customer_last_name = \"Feest\""
  },
  {
    "instruction": "Which origin has most number of flights?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.",
    "input": "create table \"journal\" (\"Journal_ID\" int, \"Date\" text, \"Theme\" text, \"Sales\" int, primary key (\"Journal_ID\"));create table \"journal\" (\"Journal_ID\" int, \"Date\" text, \"Theme\" text, \"Sales\" int, primary key (\"Journal_ID\"));create table \"journal_committee\" (\"Editor_ID\" int, \"Journal_ID\" int, \"Work_Type\" text, primary key (\"Editor_ID\",\"Journal_ID\"), foreign key (\"Editor_ID\") references `editor`(\"Editor_ID\"), foreign key (\"Journal_ID\") references `journal`(\"Journal_ID\"));",
    "output": "SELECT date, theme, sales FROM journal EXCEPT SELECT T1.date, T1.theme, T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID"
  },
  {
    "instruction": "What are the ids of all the employees who authorize document destruction?",
    "input": "create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"
  },
  {
    "instruction": "How many customers does Steve Johnson support?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";"
  },
  {
    "instruction": "What are the names of actors who are not 20 years old?",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));",
    "output": "SELECT Name FROM actor WHERE Age != 20"
  },
  {
    "instruction": "Find the id and last name of the student that has the most behavior incidents?",
    "input": "create table `behavior_incident` (`incident_id` integer primary key, `incident_type_code` varchar(10) not null, `student_id` integer not null, `date_incident_start` datetime, `date_incident_end` datetime, `incident_summary` varchar(255), `recommendations` varchar(255), `other_details` varchar(255), foreign key (`incident_type_code`) references `ref_incident_type`(`incident_type_code`), foreign key (`student_id`) references `students`(`student_id`));create table `students` (`student_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(40), `last_name` varchar(40), `cell_mobile_number` varchar(40), `email_address` varchar(40), `date_first_rental` datetime, `date_left_university` datetime, `other_student_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.student_id, T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "how many ships are there?",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));",
    "output": "SELECT count(*) FROM ship"
  },
  {
    "instruction": "What are the ids of instructors who didnt' teach?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);",
    "output": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches"
  },
  {
    "instruction": "Find each student's first name.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT fname FROM student"
  },
  {
    "instruction": "On average how large is the population of the counties?",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT avg(Population) FROM county"
  },
  {
    "instruction": "What are the different majors?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT Major FROM Student"
  },
  {
    "instruction": "Give the maximum price and score for wines produced in the appelation St. Helena.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT max(Price), max(Score) FROM WINE WHERE Appelation = \"St. Helena\""
  },
  {
    "instruction": "how many people live in the biggest city in alaska state",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"alaska\" ) AND state_name = \"alaska\";"
  },
  {
    "instruction": "Find the id and city of the student address with the highest average monthly rental.",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1` varchar(120), `line_2` varchar(120), `line_3` varchar(120), `city` varchar(80), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));create table `student_addresses` (`student_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `date_address_to` datetime, `monthly_rental` decimal(19, 4), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT T2.address_id, T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1"
  },
  {
    "instruction": "What is the count of aircrafts that have a distance between 1000 and 5000?",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000"
  },
  {
    "instruction": "what is the smallest city in the usa",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city );"
  },
  {
    "instruction": "How many participants belong to the type 'Organizer'?",
    "input": "create table participants (participant_id integer not null, participant_type_code char(15) not null, participant_details varchar(255), primary key (participant_id));",
    "output": "SELECT count(*) FROM participants WHERE participant_type_code = 'Organizer'"
  },
  {
    "instruction": "Show the flight number and distance of the flight with maximum price.",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT flno, distance FROM Flight ORDER BY price DESC LIMIT 1"
  },
  {
    "instruction": "Find the id and name of the staff who has been assigned for the shortest period.",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_gender` varchar(1), `staff_name` varchar(80));create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.staff_id, T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1"
  },
  {
    "instruction": "What is the average price for wines not produced in Sonoma county?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma')"
  },
  {
    "instruction": "Show id, first and last names for all customers with at least two cards.",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2"
  },
  {
    "instruction": "What is the cell phone number of the student whose address has the lowest monthly rental?",
    "input": "create table `student_addresses` (`student_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `date_address_to` datetime, `monthly_rental` decimal(19, 4), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`student_id`) references `students`(`student_id`));create table `students` (`student_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(40), `last_name` varchar(40), `cell_mobile_number` varchar(40), `email_address` varchar(40), `date_first_rental` datetime, `date_left_university` datetime, `other_student_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1"
  },
  {
    "instruction": "Give the number of students living in either HKG or CHI.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM Student WHERE city_code = \"HKG\" OR city_code = \"CHI\""
  },
  {
    "instruction": "How long is the total lesson time took by the customer named Rylan Goodwin?",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";"
  },
  {
    "instruction": "How many events have each participants attended? List the participant id, type and the number.",
    "input": "create table participants (participant_id integer not null, participant_type_code char(15) not null, participant_details varchar(255), primary key (participant_id));create table participants_in_events (event_id integer not null, participant_id integer not null, primary key (event_id, participant_id), foreign key (participant_id) references participants (participant_id), foreign key (event_id) references events (event_id));",
    "output": "SELECT T1.Participant_ID, T1.Participant_Type_Code, count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_ID"
  },
  {
    "instruction": "What are the crime rates of counties that contain cities that have white percentages of over 90?",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90"
  },
  {
    "instruction": "what is the state with the lowest population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE population = ( SELECT MIN ( population ) FROM state );"
  },
  {
    "instruction": "How many distinct governors are there?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT count(DISTINCT Governor) FROM party"
  },
  {
    "instruction": "What are the names of people who have a height greater than 200 or less than 190?",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));",
    "output": "SELECT name FROM people WHERE height > 200 OR height < 190"
  },
  {
    "instruction": "Return the most common first name among all actors.",
    "input": "create table actor (actor_id smallint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, last_update timestamp not null default current_timestamp, primary key (actor_id));",
    "output": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103)"
  },
  {
    "instruction": "Find the number of members living in each address.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Membership_card\" text, \"Age\" int, \"Time_of_purchase\" int, \"Level_of_membership\" int, \"Address\" text, primary key (\"Member_ID\"));",
    "output": "SELECT count(*), address FROM member GROUP BY address"
  },
  {
    "instruction": "What are the names and parties of representatives?",
    "input": "create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));",
    "output": "SELECT Name, Party FROM representative"
  },
  {
    "instruction": "List the distinct names of the instructors, ordered by name.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT DISTINCT name FROM instructor ORDER BY name"
  },
  {
    "instruction": "What are the different card type codes, and how many different customers hold each type?",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT card_type_code, count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
  },
  {
    "instruction": "Count the number of documents that do not have expenses.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )"
  },
  {
    "instruction": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));",
    "output": "SELECT title FROM film WHERE LENGTH > 100 OR rating = 'PG' EXCEPT SELECT title FROM film WHERE replacement_cost > 200"
  },
  {
    "instruction": "What are the average price and score of wines for each appelation?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT avg(Price), avg(Score), Appelation FROM WINE GROUP BY Appelation"
  },
  {
    "instruction": "Return the first names and last names of all guests",
    "input": "create table guests (guest_id integer not null , gender_code char(1), guest_first_name varchar(80), guest_last_name varchar(80), date_of_birth datetime, primary key (guest_id), unique (guest_id));",
    "output": "SELECT guest_first_name, guest_last_name FROM Guests"
  },
  {
    "instruction": "What are the names of all the playlists?",
    "input": "create table playlists (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT name FROM playlists;"
  },
  {
    "instruction": "what were some Parsing based papers in acl 2012 ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"Parsing\" AND t3.year = 2012 AND t4.venuename = \"acl\";"
  },
  {
    "instruction": "Return the structure description of the document that has been accessed the fewest number of times.",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `document_structures` (`document_structure_code` varchar(15) primary key, `parent_document_structure_code` varchar(15), `document_structure_description` varchar(80));",
    "output": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the rooms of faculties with rank professor who live in building NEB.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT Room FROM FACULTY WHERE Rank = \"Professor\" AND Building = \"NEB\""
  },
  {
    "instruction": "Find the name and id of the team that won the most times in 2008 postseason.",
    "input": "create table postseason (year integer, round text, team_id_winner text, league_id_winner text, team_id_loser text, league_id_loser text, wins integer, losses integer, ties integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT T2.name, T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "instruction": "Find the average height of the players who belong to the college called 'Yale University'.",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table player_college (player_id text, college_id text, year integer, foreign key (player_id) references player(player_id), foreign key (college_id) references college(college_id));create table college (college_id text, name_full text, city text, state text, country text);",
    "output": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id WHERE T3.name_full = 'Yale University';"
  },
  {
    "instruction": "subhasis chaudhuri",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"subhasis chaudhuri\";"
  },
  {
    "instruction": "Give me the the first and last name of the faculty who advises the most students.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T1.fname, T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find all tips about \" Vintner Grill \" that received more than 9 likes",
    "input": "create table \"tip\" (\"tip_id\" int, \"business_id\" text, \"text\" text, \"user_id\" text, \"likes\" int, \"year\" int, \"month\" text, primary key(\"tip_id\") foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Vintner Grill\" AND t2.likes > 9;"
  },
  {
    "instruction": "what states high point are higher than that of colorado",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM highlow WHERE highest_elevation > ( SELECT highest_elevation FROM highlow WHERE state_name = \"colorado\" );"
  },
  {
    "instruction": "What are the names of colleges that have two or more players, listed in descending alphabetical order?",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2 ORDER BY College DESC"
  },
  {
    "instruction": "What are the dates of the orders made by the customer named \"Jeramie\"?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\""
  },
  {
    "instruction": "How many kinds of enzymes are there?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT count(*) FROM enzyme"
  },
  {
    "instruction": "What are the names of gymnasts?",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID"
  },
  {
    "instruction": "What is the address of the restaurant Subway?",
    "input": "create table restaurant (resid integer primary key, resname varchar(100), address varchar(100), rating integer);",
    "output": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";"
  },
  {
    "instruction": "Show member names that are not in the Progress Party.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id WHERE T2.Party_name != \"Progress Party\""
  },
  {
    "instruction": "What are the ids and locations of all circuits in France or Belgium?",
    "input": "create table \"circuits\" (\"circuitId\" integer primary key, \"circuitRef\" text, \"name\" text, \"location\" text, \"country\" text, \"lat\" real, \"lng\" real, \"alt\" text, \"url\" text);",
    "output": "SELECT circuitid, LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\""
  },
  {
    "instruction": "where are some good arabic restaurants in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "count of ACL papers by author",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t2.paperid ), t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"ACL\" GROUP BY t1.authorid;"
  },
  {
    "instruction": "List the number of customers that did not have any payment history.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));create table `customer_payments` (`customer_id` integer not null, `datetime_payment` datetime not null, `payment_method_code` varchar(10) not null, `amount_payment` double null, primary key (`customer_id`,`datetime_payment`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );"
  },
  {
    "instruction": "What is the description of the restaurant type Sandwich?",
    "input": "create table restaurant_type (restypeid integer primary key, restypename varchar(40), restypedescription varchar(100));",
    "output": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";"
  },
  {
    "instruction": "How many main stream browsers whose market share is at least 5 exist?",
    "input": "create table \"browser\" (\"id\" int, \"name\" text, \"market_share\" real, primary key(\"id\"));",
    "output": "SELECT count(*) FROM browser WHERE market_share >= 5"
  },
  {
    "instruction": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award = \"Drama Desk Award\""
  },
  {
    "instruction": "Find the id of the candidate who got the lowest oppose rate.",
    "input": "create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1"
  },
  {
    "instruction": "List the names of clubs that do not have any players.",
    "input": "create table \"club\" (\"Club_ID\" int, \"name\" text, \"Region\" text, \"Start_year\" text, primary key (\"Club_ID\"));create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
  },
  {
    "instruction": "How long does track Fast As a Shark has?",
    "input": "create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";"
  },
  {
    "instruction": "how many Parsing papers did acl 2012 have ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"Parsing\" AND t3.year = 2012 AND t4.venuename = \"acl\";"
  },
  {
    "instruction": "How many papers by Ed Desmond contain the keyphrases Semantic Parsing ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t1.paperid JOIN author AS t2 ON t3.authorid = t2.authorid WHERE t2.authorname = \"Ed Desmond\" AND t4.keyphrasename = \"Semantic Parsing\";"
  },
  {
    "instruction": "What are the the songs in volumes, listed in ascending order?",
    "input": "create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT Song FROM volume ORDER BY Song"
  },
  {
    "instruction": "Find the phone number of all the customers and staff.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));create table `staff` (`staff_id` integer primary key, `gender` varchar(1), `first_name` varchar(80), `last_name` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff"
  },
  {
    "instruction": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.",
    "input": "create table \"chip_model\" (\"Model_name\" text, \"Launch_year\" real, \"RAM_MiB\" real, \"ROM_MiB\" real, \"Slots\" text, \"WiFi\" text, \"Bluetooth\" text, primary key (\"Model_name\"));create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT T2.Hardware_Model_name, T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32;"
  },
  {
    "instruction": "how many states have a city called springfield",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( state_name ) FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "What are the names of customers with credit score less than the average credit score across customers?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT cust_name FROM customer WHERE credit_score < (SELECT avg(credit_score) FROM customer)"
  },
  {
    "instruction": "What is the song with the most vocals?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many different instruments are used in the song \"Le Pop\"?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\""
  },
  {
    "instruction": "Find the name and capacity of the stadium where the event named \"World Junior\" happened.",
    "input": "create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));create table \"event\" (\"ID\" int, \"Name\" text, \"Stadium_ID\" int, \"Year\" text, primary key (\"ID\"), foreign key (`stadium_id`) references `stadium`(`id`));",
    "output": "SELECT t1.name, t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id WHERE t2.name = 'World Junior'"
  },
  {
    "instruction": "Find the maximum and minimum settlement amount.",
    "input": "create table settlements (settlement_id integer not null, claim_id integer, effective_date date, settlement_amount real, primary key (settlement_id), unique (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT max(settlement_amount), min(settlement_amount) FROM settlements"
  },
  {
    "instruction": "What are the names of shops that do not have any devices in stock?",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));create table \"stock\" (\"Shop_ID\" int, \"Device_ID\" int, \"Quantity\" int, primary key (\"Shop_ID\",\"Device_ID\"), foreign key (`shop_id`) references `shop`(`shop_id`), foreign key (`device_id`) references `device`(`device_id`));",
    "output": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)"
  },
  {
    "instruction": "Which submission received the highest score in acceptance result. Show me the result.",
    "input": "create table \"Acceptance\" (\"Submission_ID\" int, \"Workshop_ID\" int, \"Result\" text, primary key (\"Submission_ID\",\"Workshop_ID\"), foreign key (\"Submission_ID\") references `submission`(\"Submission_ID\"), foreign key (\"Workshop_ID\") references `workshop`(\"Workshop_ID\"));create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1"
  },
  {
    "instruction": "Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'SF'"
  },
  {
    "instruction": "What is the number of routes whose destinations are Italian airports?",
    "input": "create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = 'Italy'"
  },
  {
    "instruction": "return me the number of authors who have papers containing keyword \" Relational Database \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.name ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t1.keyword = \"Relational Database\";"
  },
  {
    "instruction": "Return the poll source corresponding to the candidate who has the oppose rate.",
    "input": "create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1"
  },
  {
    "instruction": "Show the result of the submission with the highest score.",
    "input": "create table \"Acceptance\" (\"Submission_ID\" int, \"Workshop_ID\" int, \"Result\" text, primary key (\"Submission_ID\",\"Workshop_ID\"), foreign key (\"Submission_ID\") references `submission`(\"Submission_ID\"), foreign key (\"Workshop_ID\") references `workshop`(\"Workshop_ID\"));create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1"
  },
  {
    "instruction": "What is the number of movies produced in 2013 ?",
    "input": "create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT title ) FROM movie WHERE release_year = 2013;"
  },
  {
    "instruction": "What are the titles of films that do not have a film market estimation?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));",
    "output": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)"
  },
  {
    "instruction": "How many candidates are there?",
    "input": "create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT count(*) FROM candidate"
  },
  {
    "instruction": "Which customers have ever canceled the purchase of the product \"food\" (the item status is \"Cancel\")?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer primary key, `product_id` integer not null, `order_id` integer not null, `order_item_status` varchar(10) not null, `order_item_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));create table `products` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*) >= 1"
  },
  {
    "instruction": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"lapTimes\" (\"raceId\" integer, \"driverId\" integer, \"lap\" integer, \"position\" integer, \"time\" text, \"milliseconds\" integer, primary key(\"raceId\", \"driverId\", \"lap\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT DISTINCT T1.driverid, T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds > 100000"
  },
  {
    "instruction": "How many camera lenses are not used in taking any photos?",
    "input": "create table \"camera_lens\" (\"id\" int, \"brand\" text, \"name\" text, \"focal_length_mm\" real, \"max_aperture\" real, primary key(\"id\"));create table \"photos\" (\"id\" int, \"camera_lens_id\" int, \"mountain_id\" int, \"color\" text, \"name\" text, primary key(\"id\"), foreign key(\"camera_lens_id\") references `camera_lens`(\"id\"), foreign key(\"mountain_id\") references `mountain`(\"id\"));",
    "output": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )"
  },
  {
    "instruction": "give me a restaurant in the bay area ?",
    "input": "create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t2.house_number, t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = \"bay area\" );"
  },
  {
    "instruction": "Count the number of artists.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));",
    "output": "SELECT count(*) FROM artist"
  },
  {
    "instruction": "what are the rivers of illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = \"illinois\";"
  },
  {
    "instruction": "What are the names of all customers, ordered by account balance?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT cust_name FROM customer ORDER BY acc_bal"
  },
  {
    "instruction": "which EMNLP 2010 papers have been cited the most ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.citedpaperid, COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2010 AND t2.venuename = \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;"
  },
  {
    "instruction": "For each user, find their name and the number of reviews written by them.",
    "input": "create table `useracct` (`u_id` integer not null , `name` varchar(128) default null , primary key (`u_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT T1.name, count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id"
  },
  {
    "instruction": "Show the names of journalists and the dates of the events they reported.",
    "input": "create table \"news_report\" (\"journalist_ID\" int, \"Event_ID\" int, \"Work_Type\" text, primary key (\"journalist_ID\",\"Event_ID\"), foreign key (\"journalist_ID\") references `journalist`(\"journalist_ID\"), foreign key (\"Event_ID\") references `event`(\"Event_ID\"));create table \"event\" (\"Event_ID\" int, \"Date\" text, \"Venue\" text, \"Name\" text, \"Event_Attendance\" int, primary key (\"Event_ID\"));create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));",
    "output": "SELECT T3.Name, T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID"
  },
  {
    "instruction": "Show all card type codes and the number of customers holding cards in each type.",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT card_type_code, count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
  },
  {
    "instruction": "what river runs through the most states",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;"
  },
  {
    "instruction": "Which cities have higher temperature in Feb than in Jun or have once served as host cities?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"temperature\" (\"City_ID\" int, \"Jan\" real, \"Feb\" real, \"Mar\" real, \"Apr\" real, \"Jun\" real, \"Jul\" real, \"Aug\" real, \"Sep\" real, \"Oct\" real, \"Nov\" real, \"Dec\" real, primary key (\"City_ID\"), foreign key (`city_id`) references `city`(`city_id`));create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));",
    "output": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Feb > T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city"
  },
  {
    "instruction": "Find the name of bank branches that provided some loans.",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id"
  },
  {
    "instruction": "character recognition papers from before 2010",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"character recognition\" AND t3.year < 2010;"
  },
  {
    "instruction": "Which customers do not have any policies? Find the details of these customers.",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table customer_policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date date, end_date date, primary key (policy_id), foreign key (customer_id) references customers (customer_id));",
    "output": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id"
  },
  {
    "instruction": "Return the last name, id and phone number of the customer who has made the greatest number of orders.",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT T2.customer_last_name, T1.customer_id, T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many students did not have any course enrollment?",
    "input": "create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)"
  },
  {
    "instruction": "what is the full name and id of the college with the largest number of baseball players?",
    "input": "create table college (college_id text, name_full text, city text, state text, country text);create table player_college (player_id text, college_id text, year integer, foreign key (player_id) references player(player_id), foreign key (college_id) references college(college_id));",
    "output": "SELECT T1.name_full, T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "instruction": "give me a good place in mountain view for arabic food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Report the number of students in each classroom.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT classroom, count(*) FROM list GROUP BY classroom"
  },
  {
    "instruction": "Find the cities of businesses rated below 1.5",
    "input": "create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT city FROM business WHERE rating < 1.5;"
  },
  {
    "instruction": "number of papers in sigir conference",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"sigir\";"
  },
  {
    "instruction": "how many states border kentucky",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( border ) FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "What is the year of publication of \" A Switching Architecture For ISDN \" ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT title, YEAR FROM paper WHERE title = \"A Switching Architecture For ISDN\";"
  },
  {
    "instruction": "How many sections does each course have?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT count(*), crs_code FROM CLASS GROUP BY crs_code"
  },
  {
    "instruction": "Find the number of distinct amenities.",
    "input": "create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT count(*) FROM dorm_amenity"
  },
  {
    "instruction": "Find the name and revenue of the company that earns the highest revenue in each city.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT name, max(revenue), Headquarter FROM manufacturers GROUP BY Headquarter"
  },
  {
    "instruction": "Give the product id for the product that was ordered most frequently.",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, foreign key (`order_id`) references `customer_orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what is the largest state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "What are the numbers of all flights coming from Los Angeles?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT flno FROM Flight WHERE origin = \"Los Angeles\""
  },
  {
    "instruction": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.",
    "input": "create table `attribute_definitions` (`attribute_id` integer primary key, `attribute_name` varchar(30), `attribute_data_type` varchar(10));create table `catalog_contents_additional_attributes` (`catalog_entry_id` integer not null, `catalog_level_number` integer not null, `attribute_id` integer not null, `attribute_value` varchar(255) not null, foreign key (`catalog_entry_id`) references `catalog_contents`(`catalog_entry_id`), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT t1.attribute_name, t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0"
  },
  {
    "instruction": "give me some good restaurants in alameda ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"alameda\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "How many distinct students have been in detention?",
    "input": "create table `students_in_detention` (`student_id` integer not null, `detention_id` integer not null, `incident_id` integer not null, foreign key (`incident_id`) references `behavior_incident`(`incident_id`), foreign key (`detention_id`) references `detention`(`detention_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT count(DISTINCT student_id) FROM Students_in_Detention"
  },
  {
    "instruction": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
    "input": "create table `jobs` (`job_id` varchar(10) not null default '', `job_title` varchar(35) not null, `min_salary` decimal(6, 0) default null, `max_salary` decimal(6, 0) default null, primary key (`job_id`));",
    "output": "SELECT job_title, max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000"
  },
  {
    "instruction": "What is total number of show times per dat for each cinema?",
    "input": "create table \"schedule\" (\"Cinema_ID\" int, \"Film_ID\" int, \"Date\" text, \"Show_times_per_day\" int, \"Price\" float, primary key (\"Cinema_ID\",\"Film_ID\"), foreign key (`film_id`) references `film`(`film_id`), foreign key (`cinema_id`) references `cinema`(`cinema_id`));create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT T2.name, sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id"
  },
  {
    "instruction": "What are the names and data types of the characteristics of the 'cumin' product?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT t3.characteristic_name, t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"cumin\""
  },
  {
    "instruction": "what are some good restaurants on bethel island rd in bethel island ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"bethel island\" AND t2.street_name = \"bethel island rd\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "whats the largest city",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );"
  },
  {
    "instruction": "Find the name of dorms only for female (F gender).",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT dorm_name FROM dorm WHERE gender = 'F'"
  },
  {
    "instruction": "List the type of the services in alphabetical order.",
    "input": "create table services (service_id integer not null, service_type_code char(15) not null, primary key (service_id));",
    "output": "SELECT service_type_code FROM services ORDER BY service_type_code"
  },
  {
    "instruction": "Find the total access count of all documents in the most popular document type.",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Report the total number of students for each fourth-grade classroom.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT classroom, count(*) FROM list WHERE grade = \"4\" GROUP BY classroom"
  },
  {
    "instruction": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?",
    "input": "create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);create table playlist_tracks (playlist_id integer not null, track_id integer not null, constraint pk_playlisttrack primary key (playlist_id, track_id), foreign key (playlist_id) references playlists (id)\n        ON delete no action\n        ON update no action, foreign key (track_id) references tracks (id)\n        ON delete no action\n        ON update no action);create table playlists (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);create table playlist_tracks (playlist_id integer not null, track_id integer not null, constraint pk_playlisttrack primary key (playlist_id, track_id), foreign key (playlist_id) references playlists (id)\n        ON delete no action\n        ON update no action, foreign key (track_id) references tracks (id)\n        ON delete no action\n        ON update no action);create table playlists (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'"
  },
  {
    "instruction": "Find the order detail for the products with price above 2000.",
    "input": "create table order_items (order_item_id integer not null , order_id integer not null, product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), primary key (order_item_id), foreign key (order_id) references customer_orders (order_id), foreign key (product_id) references products (product_id));create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_price > 2000"
  },
  {
    "instruction": "What is the count of different game types?",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT count(DISTINCT gtype) FROM Video_games"
  },
  {
    "instruction": "where is jamerican cuisine ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t1.name = \"jamerican cuisine\";"
  },
  {
    "instruction": "Find the GDP of the city with the largest regional population.",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));",
    "output": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1"
  },
  {
    "instruction": "Show different locations of railways along with the corresponding number of railways at each location.",
    "input": "create table \"railway\" (\"Railway_ID\" int, \"Railway\" text, \"Builder\" text, \"Built\" text, \"Wheels\" text, \"Location\" text, \"ObjectNumber\" text, primary key (\"Railway_ID\"));",
    "output": "SELECT LOCATION, COUNT(*) FROM railway GROUP BY LOCATION"
  },
  {
    "instruction": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".",
    "input": "create table photos (photo_id integer not null, tourist_attraction_id integer not null, name varchar(255), description varchar(255), filename varchar(255), other_details varchar(255), primary key (photo_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T1.Name, T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"film festival\""
  },
  {
    "instruction": "What is the entry name of the most expensive catalog (in USD)?",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
  },
  {
    "instruction": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"PUR\" AND share_count > 50"
  },
  {
    "instruction": "Show all the locations with at least two cinemas with capacity above 300.",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) >= 2"
  },
  {
    "instruction": "How many artists are male and how many are female?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT count(*), gender FROM artist GROUP BY gender"
  },
  {
    "instruction": "Find all the vocal types.",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));",
    "output": "SELECT DISTINCT TYPE FROM vocals"
  },
  {
    "instruction": "What are the clean and jerk score of the body builder with the highest total score?",
    "input": "create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));",
    "output": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1"
  },
  {
    "instruction": "Find all the campuses opened in 1958.",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE YEAR = 1958"
  },
  {
    "instruction": "Find the number of customers in the banks at New York City.",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT sum(no_of_customers) FROM bank WHERE city = 'New York City'"
  },
  {
    "instruction": "How many movies did \" Humphrey Bogart \" act in before 1942 ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Humphrey Bogart\" AND t2.release_year < 1942;"
  },
  {
    "instruction": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"OTHA\" AND T2.lastname = \"MOYER\""
  },
  {
    "instruction": "What is the position that is most common among players in match seasons?",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the total number of ratings that has more than 3 stars?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT count(*) FROM Rating WHERE stars > 3"
  },
  {
    "instruction": "What are the student IDs for everybody who worked for more than 10 hours per week on all sports?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek) > 10"
  },
  {
    "instruction": "Give the ids of documents that have expenses and contain the letter s in their names.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name LIKE '%s%'"
  },
  {
    "instruction": "Find the number of characteristics that the product \"flax\" has.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"flax\""
  },
  {
    "instruction": "In what year was \" Kevin Spacey \" born ?",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT birth_year FROM actor WHERE name = \"actor_name0\";"
  },
  {
    "instruction": "Show first name for all students with major 600.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Fname FROM Student WHERE Major = 600"
  },
  {
    "instruction": "which state 's capital city is the largest",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );"
  },
  {
    "instruction": "Show party names and the number of events for each party.",
    "input": "create table \"party_events\" (\"Event_ID\" int, \"Event_Name\" text, \"Party_ID\" int, \"Member_in_charge_ID\" int, primary key (\"Event_ID\"), foreign key (`party_id`) references `party`(`party_id`), foreign key (`member_in_charge_id`) references `member`(`member_id`));create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT T2.party_name, count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"
  },
  {
    "instruction": "show me all the major lakes in the us",
    "input": "create table `lake` (`lake_name` text , `area` double default null , `country_name` varchar(3) not null default '' , `state_name` text);",
    "output": "SELECT lake_name FROM lake WHERE area > 750;"
  },
  {
    "instruction": "Show the id and star rating of each hotel, ordered by its price from low to high.",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT hotel_id, star_rating_code FROM HOTELS ORDER BY price_range ASC"
  },
  {
    "instruction": "What is the sum of checking and savings balances for all customers, ordered by the total balance?",
    "input": "create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T1.balance + T2.balance"
  },
  {
    "instruction": "List the name of ships in ascending order of tonnage.",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT Name FROM ship ORDER BY Tonnage ASC"
  },
  {
    "instruction": "what is the tallest mountain in america",
    "input": "create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT mountain_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain );"
  },
  {
    "instruction": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?",
    "input": "create table `lots` (`lot_id` integer primary key, `investor_id` integer not null, `lot_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`));create table `transactions_lots` (`transaction_id` integer not null, `lot_id` integer not null, foreign key (`lot_id`) references `lots`(`lot_id`), foreign key (`transaction_id`) references `transactions`(`transaction_id`));create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count > 100 AND T3.transaction_type_code = \"PUR\""
  },
  {
    "instruction": "What are the log id and entry description of each problem?",
    "input": "create table `problem_log` (`problem_log_id` integer primary key, `assigned_to_staff_id` integer not null, `problem_id` integer not null, `problem_category_code` varchar(20) not null, `problem_status_code` varchar(20) not null, `log_entry_date` datetime, `log_entry_description` varchar(255), `log_entry_fix` varchar(255), `other_log_details` varchar(255), foreign key (`problem_category_code`) references `problem_category_codes`(`problem_category_code`), foreign key (`assigned_to_staff_id`) references `staff`(`staff_id`), foreign key (`problem_id`) references `problems`(`problem_id`), foreign key (`problem_status_code`) references `problem_status_codes`(`problem_status_code`));",
    "output": "SELECT problem_log_id, log_entry_description FROM problem_log"
  },
  {
    "instruction": "What are all the album titles, in alphabetical order?",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT Title FROM ALBUM ORDER BY Title"
  },
  {
    "instruction": "What are the names of the physicians who have 'senior' in their titles.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));",
    "output": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'"
  },
  {
    "instruction": "How many dorms are there and what is the total capacity for each gender?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT count(*), sum(student_capacity), gender FROM dorm GROUP BY gender"
  },
  {
    "instruction": "How many reviews has Niloofar written in 2015",
    "input": "create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t1.year = 2015 AND t2.name = \"Niloofar\";"
  },
  {
    "instruction": "how many major cities are there",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( city_name ) FROM city WHERE population > 150000;"
  },
  {
    "instruction": "List the names of members who did not attend any performance.",
    "input": "create table \"member\" (\"Member_ID\" text, \"Name\" text, \"Nationality\" text, \"Role\" text, primary key (\"Member_ID\"));create table \"member_attendance\" (\"Member_ID\" int, \"Performance_ID\" int, \"Num_of_Pieces\" int, primary key (\"Member_ID\",\"Performance_ID\"), foreign key (\"Member_ID\") references `member`(\"Member_ID\"), foreign key (\"Performance_ID\") references `performance`(\"Performance_ID\"));",
    "output": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)"
  },
  {
    "instruction": "In how many cities are there airports in the country of Greenland?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT count(DISTINCT city) FROM airports WHERE country = 'Greenland'"
  },
  {
    "instruction": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?",
    "input": "create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);",
    "output": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010"
  },
  {
    "instruction": "What are the apartment number, start date, and end date of each apartment booking?",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT T2.apt_number, T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id"
  },
  {
    "instruction": "what can you tell me about the population of california",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM state WHERE state_name = \"california\";"
  },
  {
    "instruction": "What are the names of the members and branches at which they are registered sorted by year of registration?",
    "input": "create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));",
    "output": "SELECT T3.name, T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id ORDER BY T1.register_year"
  },
  {
    "instruction": "Which skill is used in fixing the most number of faults? List the skill id and description.",
    "input": "create table `skills` (`skill_id` integer primary key, `skill_code` varchar(20), `skill_description` varchar(255));create table `skills_required_to_fix` (`part_fault_id` integer not null, `skill_id` integer not null, foreign key (`part_fault_id`) references `part_faults`(`part_fault_id`), foreign key (`skill_id`) references `skills`(`skill_id`));",
    "output": "SELECT T1.skill_id, T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT Name, Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\" OR How_to_Get_There = \"walk\""
  },
  {
    "instruction": "Show all opening years and the number of churches that opened in that year.",
    "input": "create table \"church\" (\"Church_ID\" int, \"Name\" text, \"Organized_by\" text, \"Open_Date\" int, \"Continuation_of\" text, primary key (\"Church_ID\"));",
    "output": "SELECT open_date, count(*) FROM church GROUP BY open_date"
  },
  {
    "instruction": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";"
  },
  {
    "instruction": "Find the average hours for the students whose tryout decision is no.",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no'"
  },
  {
    "instruction": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT f_id FROM files WHERE formats = \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution < 1000"
  },
  {
    "instruction": "What are the names of the songs without a lead vocal?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"lead\""
  },
  {
    "instruction": "What is the name of the patient who made the most recent appointment?",
    "input": "create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));create table appointment (appointmentid integer primary key not null, patient integer not null, prepnurse integer, physician integer not null, start datetime not null, end datetime not null, examinationroom text not null, constraint fk_appointment_patient_ssn foreign key(patient) references patient(ssn), constraint fk_appointment_nurse_employeeid foreign key(prepnurse) references nurse(employeeid), constraint fk_appointment_physician_employeeid foreign key(physician) references physician(employeeid));",
    "output": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1"
  },
  {
    "instruction": "what state has the largest city",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );"
  },
  {
    "instruction": "What is the location shared by most counties?",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the tracks that Dean Peeters bought?",
    "input": "create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);create table invoice_lines (id integer primary key autoincrement, invoice_id integer not null, track_id integer not null, unit_price numeric(10, 2) not null, quantity integer not null, foreign key (invoice_id) references invoices (id)\n        ON delete no action\n        ON update no action, foreign key (track_id) references tracks (id)\n        ON delete no action\n        ON update no action);create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";"
  },
  {
    "instruction": "who published the most papers in syntactic parsing ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "Which papers have \"Stephanie Weirich\" as an author?",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Stephanie\" AND t1.lname = \"Weirich\""
  },
  {
    "instruction": "Show white percentages of cities and the crime rates of counties they are in.",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT T1.White, T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID"
  },
  {
    "instruction": "What are the total and average enrollment of all schools?",
    "input": "create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));",
    "output": "SELECT sum(enrollment), avg(enrollment) FROM school"
  },
  {
    "instruction": "who published the most in syntactic parsing ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "monte carlo simulation papers published after 2011",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"monte carlo simulation\" AND t3.year > 2011;"
  },
  {
    "instruction": "List the wheels and locations of the railways.",
    "input": "create table \"railway\" (\"Railway_ID\" int, \"Railway\" text, \"Builder\" text, \"Built\" text, \"Wheels\" text, \"Location\" text, \"ObjectNumber\" text, primary key (\"Railway_ID\"));",
    "output": "SELECT Wheels, LOCATION FROM railway"
  },
  {
    "instruction": "What is the total population for all the districts that have an area larger tahn the average city area?",
    "input": "create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT sum(city_population) FROM district WHERE city_area > (SELECT avg(city_area) FROM district)"
  },
  {
    "instruction": "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?",
    "input": "create table \"exhibition_record\" (\"Exhibition_ID\" int, \"Date\" text, \"Attendance\" int, primary key (\"Exhibition_ID\",\"Date\"), foreign key (`exhibition_id`) references `exhibition`(`exhibition_id`));create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));create table \"exhibition_record\" (\"Exhibition_ID\" int, \"Date\" text, \"Attendance\" int, primary key (\"Exhibition_ID\",\"Date\"), foreign key (`exhibition_id`) references `exhibition`(`exhibition_id`));create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500"
  },
  {
    "instruction": "Show the most common country across members.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Country\" text, \"College_ID\" int, primary key (\"Member_ID\"), foreign key (\"College_ID\") references `college`(\"College_ID\"));",
    "output": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT T1.pName, T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'"
  },
  {
    "instruction": "Show the names of companies and of employees.",
    "input": "create table \"employment\" (\"Company_ID\" int, \"People_ID\" int, \"Year_working\" int, primary key (\"Company_ID\",\"People_ID\"), foreign key (\"Company_ID\") references `company`(\"Company_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Age\" int, \"Name\" text, \"Nationality\" text, \"Graduation_College\" text, primary key (\"People_ID\"));create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));",
    "output": "SELECT T3.Name, T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID"
  },
  {
    "instruction": "List the names of all distinct wines that are made of red color grape.",
    "input": "create table \"grapes\" (\"ID\" integer primary key, \"Grape\" text unique, \"Color\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"Red\""
  },
  {
    "instruction": "What are the names of the customers who bought product \"food\" at least once?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer primary key, `product_id` integer not null, `order_id` integer not null, `order_item_status` varchar(10) not null, `order_item_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));create table `products` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*) >= 1"
  },
  {
    "instruction": "What is the name of the instructor who advises the student with the greatest number of total credits?",
    "input": "create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1"
  },
  {
    "instruction": "Which allergy type is the least common?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "Who cites Daniel A Reed most ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.citingpaperid ), t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t4 ON t2.paperid = t4.citedpaperid JOIN writes AS t3 ON t3.paperid = t4.citingpaperid WHERE t1.authorname = \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;"
  },
  {
    "instruction": "what is the biggest city in wyoming",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"wyoming\" ) AND state_name = \"wyoming\";"
  },
  {
    "instruction": "Find the max, average, and minimum gpa of all students in each department.",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT max(stu_gpa), avg(stu_gpa), min(stu_gpa), dept_code FROM student GROUP BY dept_code"
  },
  {
    "instruction": "Find the ids of the problems reported after 1978-06-26.",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\""
  },
  {
    "instruction": "For each building, show the name of the building and the number of institutions in it.",
    "input": "create table \"building\" (\"building_id\" text, \"Name\" text, \"Street_address\" text, \"Years_as_tallest\" text, \"Height_feet\" int, \"Floors\" int, primary key(\"building_id\"));create table \"Institution\" (\"Institution_id\" text, \"Institution\" text, \"Location\" text, \"Founded\" real, \"Type\" text, \"Enrollment\" int, \"Team\" text, \"Primary_Conference\" text, \"building_id\" text, primary key(\"Institution_id\"), foreign key (\"building_id\") references \"building\"(\"building_id\"));",
    "output": "SELECT T1.name, count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id"
  },
  {
    "instruction": "Find all Italian restaurant in the Meadowood neighbourhood of Madison",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"neighbourhood\" (\"id\" int, \"business_id\" text, \"neighbourhood_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id = t1.business_id JOIN category AS t4 ON t4.business_id = t1.business_id JOIN neighbourhood AS t2 ON t2.business_id = t1.business_id WHERE t1.city = \"Madison\" AND t3.category_name = \"Italian\" AND t4.category_name = \"restaurant\" AND t2.neighbourhood_name = \"Meadowood\";"
  },
  {
    "instruction": "What is the stories of highest building?",
    "input": "create table \"buildings\" (\"id\" int, \"name\" text, \"City\" text, \"Height\" int, \"Stories\" int, \"Status\" text, primary key(\"id\"));",
    "output": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1"
  },
  {
    "instruction": "What place has the most flights coming from there?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the invoice dates for customers with the first name Astrid and the last name Gruber?",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `invoice` (`invoiceid` integer not null , `customerid` integer not null , `invoicedate` datetime not null , `billingaddress` varchar(70) default null , `billingcity` varchar(40) default null , `billingstate` varchar(40) default null , `billingcountry` varchar(40) default null , `billingpostalcode` varchar(10) default null , `total` decimal(10, 2) not null , primary key (`invoiceid`) , constraint `fk_invoicecustomerid` foreign key (`customerid`) references `customer` (`customerid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\""
  },
  {
    "instruction": "return all columns of the albums created in the year of 2012.",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);",
    "output": "SELECT * FROM Albums WHERE YEAR = 2012"
  },
  {
    "instruction": "List the 3 highest salaries of the players in 2001?",
    "input": "create table salary (year integer, team_id text, league_id text, player_id text, salary integer);",
    "output": "SELECT salary FROM salary WHERE YEAR = 2001 ORDER BY salary DESC LIMIT 3;"
  },
  {
    "instruction": "List all church names in descending order of opening date.",
    "input": "create table \"church\" (\"Church_ID\" int, \"Name\" text, \"Organized_by\" text, \"Open_Date\" int, \"Continuation_of\" text, primary key (\"Church_ID\"));",
    "output": "SELECT name FROM church ORDER BY open_date DESC"
  },
  {
    "instruction": "Count the number of different statuses.",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT count(DISTINCT Status) FROM city"
  },
  {
    "instruction": "Show name, class, and date for all races.",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));",
    "output": "SELECT name, CLASS, date FROM race"
  },
  {
    "instruction": "What is the name of the shipping agent of the document with id 2?",
    "input": "create table ref_shipping_agents (shipping_agent_code char(15) not null, shipping_agent_name varchar(255) not null, shipping_agent_description varchar(255) not null, primary key (shipping_agent_code));create table documents (document_id integer not null, document_status_code char(15) not null, document_type_code char(15) not null, shipping_agent_code char(15), receipt_date datetime, receipt_number varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (document_status_code) references ref_document_status (document_status_code), foreign key (shipping_agent_code) references ref_shipping_agents (shipping_agent_code));",
    "output": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;"
  },
  {
    "instruction": "What are the names of instructors who didn't teach courses in the Spring?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);",
    "output": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester = 'Spring')"
  },
  {
    "instruction": "List the names of all the distinct product names in alphabetical order?",
    "input": "create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT DISTINCT product_name FROM product ORDER BY product_name"
  },
  {
    "instruction": "Which city is the address of the store named \"FJA Filming\" located in?",
    "input": "create table addresses (address_id varchar(100) not null, line_1 varchar(255), line_2 varchar(255), city_town varchar(255), state_county varchar(255), other_details varchar(255), primary key (address_id), unique (address_id));create table stores (store_id varchar(100) not null, address_id integer not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (store_id), unique (store_id), foreign key (address_id) references addresses (address_id), foreign key (marketing_region_code) references marketing_regions (marketing_region_code));",
    "output": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Store_Name = \"FJA Filming\""
  },
  {
    "instruction": "What was the best paper at TACL 2014 ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid ), t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2014 AND t2.venuename = \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;"
  },
  {
    "instruction": "Which order has the most recent shipment? Give me the order id.",
    "input": "create table `shipments` (`shipment_id` integer primary key, `order_id` integer not null, `invoice_number` integer not null, `shipment_tracking_number` varchar(80), `shipment_date` datetime, `other_shipment_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`invoice_number`) references `invoices`(`invoice_number`));create table `shipments` (`shipment_id` integer primary key, `order_id` integer not null, `invoice_number` integer not null, `shipment_tracking_number` varchar(80), `shipment_date` datetime, `other_shipment_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`invoice_number`) references `invoices`(`invoice_number`));",
    "output": "SELECT order_id FROM shipments WHERE shipment_date = (SELECT max(shipment_date) FROM shipments)"
  },
  {
    "instruction": "What is the the phone number of Nancy Edwards?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
  },
  {
    "instruction": "Which of the airport names contains the word 'international'?",
    "input": "create table \"airport\" (\"id\" int, \"City\" text, \"Country\" text, \"IATA\" text, \"ICAO\" text, \"name\" text, primary key(\"id\"));",
    "output": "SELECT name FROM airport WHERE name LIKE '%international%'"
  },
  {
    "instruction": "are there any monte carlo simulation papers since 2011 ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"monte carlo simulation\" AND t3.year > 2011;"
  },
  {
    "instruction": "Show the ids of all employees who have authorized destruction.",
    "input": "create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"
  },
  {
    "instruction": "What are all the distinct payment types?",
    "input": "create table `payments` (`payment_id` integer primary key, `booking_id` integer, `customer_id` integer not null, `payment_type_code` varchar(15) not null, `amount_paid_in_full_yn` varchar(1), `payment_date` datetime, `amount_due` decimal(19, 4), `amount_paid` decimal(19, 4), foreign key (`booking_id`) references `bookings`(`booking_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT payment_type_code FROM payments"
  },
  {
    "instruction": "List the codes of all courses that take place in room KLR209.",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT class_code FROM CLASS WHERE class_room = 'KLR209'"
  },
  {
    "instruction": "Papers authored by Liwen Xiong in 2015",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Liwen Xiong\" AND t3.year = 2015;"
  },
  {
    "instruction": "What are the ids of the students who are not involved in any activity",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table participates_in (stuid integer, actid integer, foreign key(stuid) references student(stuid), foreign key(actid) references activity(actid));",
    "output": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in"
  },
  {
    "instruction": "What are the name and id of the three highest priced rooms?",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
  },
  {
    "instruction": "Give me the star rating descriptions of the hotels that cost more than 10000.",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));create table ref_hotel_star_ratings (star_rating_code char(15) not null, star_rating_description varchar(80), primary key (star_rating_code), unique (star_rating_code));",
    "output": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000"
  },
  {
    "instruction": "Select the average price of each manufacturer's products, showing the manufacturer's name.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT avg(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name"
  },
  {
    "instruction": "How many tracks does each genre have and what are the names of the top 5?",
    "input": "create table genres (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.name, COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;"
  },
  {
    "instruction": "Return the last name for the members of the club named \"Hopkins Student Enterprises\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\""
  },
  {
    "instruction": "Count the number of different colleges that players who play for Columbus Crew are from.",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));create table `team` (`team_id` int, `name` text, primary key (`team_id`));",
    "output": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\""
  },
  {
    "instruction": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT count(*), T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id"
  },
  {
    "instruction": "List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(10) not null, `customer_name` varchar(80), `customer_phone` varchar(80), `customer_email` varchar(80), `date_became_customer` datetime);",
    "output": "SELECT customer_name, customer_phone, customer_email FROM Customers ORDER BY date_became_customer"
  },
  {
    "instruction": "Show the names of pilots and the number of records they have.",
    "input": "create table \"pilot_record\" (\"Record_ID\" int, \"Pilot_ID\" int, \"Aircraft_ID\" int, \"Date\" text, primary key (\"Pilot_ID\", \"Aircraft_ID\", \"Date\"), foreign key (`pilot_id`) references `pilot`(`pilot_id`), foreign key (`aircraft_id`) references `aircraft`(`aircraft_id`));create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));",
    "output": "SELECT T2.Pilot_name, COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name"
  },
  {
    "instruction": "report the total number of degrees granted between 1998 and 2002.",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT T1.campus, sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year >= 1998 AND T2.year <= 2002 GROUP BY T1.campus"
  },
  {
    "instruction": "Show all cities where at least one customer lives in but no performer lives in.",
    "input": "create table addresses (address_id varchar(100) not null, line_1 varchar(255), line_2 varchar(255), city_town varchar(255), state_county varchar(255), other_details varchar(255), primary key (address_id), unique (address_id));create table customers (customer_id varchar(100) not null, address_id integer not null, customer_name varchar(255), customer_phone varchar(255), customer_email_address varchar(255), other_details varchar(255), primary key (customer_id), unique (customer_id), foreign key (address_id) references addresses (address_id));create table addresses (address_id varchar(100) not null, line_1 varchar(255), line_2 varchar(255), city_town varchar(255), state_county varchar(255), other_details varchar(255), primary key (address_id), unique (address_id));create table performers (performer_id integer not null, address_id integer not null, customer_name varchar(255), customer_phone varchar(255), customer_email_address varchar(255), other_details varchar(255), primary key (performer_id), unique (performer_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID = T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID"
  },
  {
    "instruction": "Which store owns most items?",
    "input": "create table inventory (inventory_id mediumint unsigned not null, film_id smallint unsigned not null, store_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (inventory_id), foreign key (store_id) references store (store_id), foreign key (film_id) references film (film_id));",
    "output": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many female students have milk or egg allergies?",
    "input": "create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = \"F\" AND T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\""
  },
  {
    "instruction": "How many customers have no payment histories?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));create table `customer_payments` (`customer_id` integer not null, `datetime_payment` datetime not null, `payment_method_code` varchar(10) not null, `amount_payment` double null, primary key (`customer_id`,`datetime_payment`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );"
  },
  {
    "instruction": "How many different colleges are there?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT count(*) FROM College"
  },
  {
    "instruction": "display the ID for those employees who did two or more jobs in the past.",
    "input": "create table `job_history` (`employee_id` decimal(6, 0) not null, `start_date` date not null, `end_date` date not null, `job_id` varchar(10) not null, `department_id` decimal(4, 0) default null, primary key (`employee_id`,`start_date`), foreign key (`employee_id`) references employees(`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "Give me the names and prices of furnitures which some companies are manufacturing.",
    "input": "create table \"furniture\" (\"Furniture_ID\" int, \"Name\" text, \"Num_of_Component\" int, \"Market_Rate\" real, primary key (\"Furniture_ID\"));create table \"furniture_manufacte\" (\"Manufacturer_ID\" int, \"Furniture_ID\" int, \"Price_in_Dollar\" real, primary key (\"Manufacturer_ID\",\"Furniture_ID\"), foreign key (\"Manufacturer_ID\") references `manufacturer`(\"Manufacturer_ID\"), foreign key (\"Furniture_ID\") references `furniture`(\"Furniture_ID\"));",
    "output": "SELECT t1.name, t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID"
  },
  {
    "instruction": "Show the average amount of transactions for different lots, ordered by average amount of transactions.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));create table `transactions_lots` (`transaction_id` integer not null, `lot_id` integer not null, foreign key (`lot_id`) references `lots`(`lot_id`), foreign key (`transaction_id`) references `transactions`(`transaction_id`));",
    "output": "SELECT T2.lot_id, avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)"
  },
  {
    "instruction": "Find the distinct names of all races held between 2014 and 2017?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017"
  },
  {
    "instruction": "How many stadiums are there?",
    "input": "create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));",
    "output": "SELECT count(*) FROM stadium"
  },
  {
    "instruction": "What are the names and ids of documents that have the type code BK?",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT document_name, document_id FROM Documents WHERE document_type_code = \"BK\""
  },
  {
    "instruction": "Show the id, the date of account opened, the account name, and other account detail for all accounts.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT account_id, date_account_opened, account_name, other_account_details FROM Accounts"
  },
  {
    "instruction": "Find all reviews for businesses rated 2.5",
    "input": "create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.rating = 2.5;"
  },
  {
    "instruction": "What is the name of customers who do not use Cash as payment method.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'"
  },
  {
    "instruction": "What is the total and minimum enrollment of all schools?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT sum(enrollment), min(enrollment) FROM university"
  },
  {
    "instruction": "Find the name of organizations whose names contain \"Party\".",
    "input": "create table `organizations` (`organization_id` integer primary key, `date_formed` datetime, `organization_name` varchar(255), `uk_vat_number` varchar(20));",
    "output": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\""
  },
  {
    "instruction": "Find the names of customers who have bought by at least three distinct products.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, foreign key (`order_id`) references `customer_orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id) >= 3"
  },
  {
    "instruction": "What are the names of customers who have taken out more than one loan?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING count(*) > 1"
  },
  {
    "instruction": "Find the number of people whose age is greater than all engineers.",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT count(*) FROM Person WHERE age > (SELECT max(age) FROM person WHERE job = 'engineer')"
  },
  {
    "instruction": "Count the number of different countries that climbers are from.",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));",
    "output": "SELECT COUNT(DISTINCT Country) FROM climber"
  },
  {
    "instruction": "Find the student first and last names and grade points of all enrollments.",
    "input": "create table enrolled_in (stuid integer, cid varchar(7), grade varchar(2), foreign key(stuid) references student(stuid), foreign key(cid) references course(cid), foreign key(grade) references gradeconversion(lettergrade));create table gradeconversion (lettergrade varchar(2) primary key, gradepoint float);create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T3.Fname, T3.LName, T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID"
  },
  {
    "instruction": "What is the total account balance for customers with a credit score of above 100 for the different states?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT sum(acc_bal), state FROM customer WHERE credit_score > 100 GROUP BY state"
  },
  {
    "instruction": "Find the last names of the members of the club \"Bootup Baltimore\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\""
  },
  {
    "instruction": "Where is store 1 located?",
    "input": "create table store (store_id tinyint unsigned not null, manager_staff_id tinyint unsigned not null, address_id smallint unsigned not null, last_update timestamp not null default current_timestamp, primary key (store_id), foreign key (manager_staff_id) references staff (staff_id), foreign key (address_id) references address (address_id));create table address (address_id smallint unsigned not null, address varchar(50) not null, address2 varchar(50) default null, district varchar(20) not null, city_id smallint unsigned not null, postal_code varchar(10) default null, phone varchar(20) not null, last_update timestamp not null default current_timestamp, primary key (address_id), foreign key (city_id) references city (city_id));",
    "output": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE store_id = 1"
  },
  {
    "instruction": "Show all party names and the number of members in each party.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT T2.party_name, count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"
  },
  {
    "instruction": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT dorm_name, gender FROM dorm WHERE student_capacity > 300 OR student_capacity < 100"
  },
  {
    "instruction": "Which industry has the most companies?",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "which state has the greatest density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MAX ( density ) FROM state );"
  },
  {
    "instruction": "What are the different names of all the races in reverse alphabetical order?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT DISTINCT name FROM races ORDER BY name DESC"
  },
  {
    "instruction": "what is the largest state that borders the state with the lowest point in the usa",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT t1.state_name FROM highlow AS t3 JOIN border_info AS t1 ON t3.state_name = t1.border JOIN state AS t2 ON t2.state_name = t1.border WHERE t3.lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow ) ORDER BY t2.area DESC LIMIT 1;"
  },
  {
    "instruction": "What is the name of the perpetrator with the biggest weight.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Home Town\" text, primary key (\"People_ID\"));create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1"
  },
  {
    "instruction": "Show name, address road, and city for all branches sorted by open year.",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT name, address_road, city FROM branch ORDER BY open_year"
  },
  {
    "instruction": "Find the id and number of shops for the company that produces the most expensive furniture.",
    "input": "create table \"manufacturer\" (\"Manufacturer_ID\" int, \"Open_Year\" real, \"Name\" text, \"Num_of_Factories\" int, \"Num_of_Shops\" int, primary key (\"Manufacturer_ID\"));create table \"furniture_manufacte\" (\"Manufacturer_ID\" int, \"Furniture_ID\" int, \"Price_in_Dollar\" real, primary key (\"Manufacturer_ID\",\"Furniture_ID\"), foreign key (\"Manufacturer_ID\") references `manufacturer`(\"Manufacturer_ID\"), foreign key (\"Furniture_ID\") references `furniture`(\"Furniture_ID\"));",
    "output": "SELECT t1.manufacturer_id, t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of customers with accounts, and what are the total savings balances for each?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT sum(T2.balance), T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name"
  },
  {
    "instruction": "What is zip code of customer with first name as Carole and last name as Bernhard?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\""
  },
  {
    "instruction": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT T1.White, T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID"
  },
  {
    "instruction": "How many schools are there in the department?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT school_code) FROM department"
  },
  {
    "instruction": "How many distinct delegates are from counties with population larger than 50000?",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000"
  },
  {
    "instruction": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT T1.title, T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 ORDER BY T1.title"
  },
  {
    "instruction": "List all media types.",
    "input": "create table media_types (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT name FROM media_types;"
  },
  {
    "instruction": "When was Michael Stonebraker GIS Database published ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"Michael Stonebraker\" AND t5.keyphrasename = \"GIS Database\";"
  },
  {
    "instruction": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);",
    "output": "SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
  },
  {
    "instruction": "How many roller coasters are there?",
    "input": "create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT count(*) FROM roller_coaster"
  },
  {
    "instruction": "What is the total number of people who could stay in the modern rooms in this inn?",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor = 'modern';"
  },
  {
    "instruction": "For each nomination, show the name of the artwork and name of the festival where it is nominated.",
    "input": "create table nomination (\"Artwork_ID\" int, \"Festival_ID\" int, \"Result\" text, primary key (\"Artwork_ID\",\"Festival_ID\"), foreign key (\"Artwork_ID\") references `artwork`(\"Artwork_ID\"), foreign key (\"Festival_ID\") references `festival_detail`(\"Festival_ID\"));create table artwork (\"Artwork_ID\" int, \"Type\" text, \"Name\" text, primary key (\"Artwork_ID\"));create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));",
    "output": "SELECT T2.Name, T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID"
  },
  {
    "instruction": "List the names of all the channels owned by either CCTV or HBS",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));",
    "output": "SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'"
  },
  {
    "instruction": "What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT lname FROM student WHERE sex = 'F' AND city_code = 'BAL' UNION SELECT lname FROM student WHERE sex = 'M' AND age < 20"
  },
  {
    "instruction": "Show student ids who are female and play football.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Student WHERE sex = 'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname = \"Football\""
  },
  {
    "instruction": "How many accounts do we have?",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT count(*) FROM Accounts"
  },
  {
    "instruction": "List the camera lens names containing substring \"Digital\".",
    "input": "create table \"camera_lens\" (\"id\" int, \"brand\" text, \"name\" text, \"focal_length_mm\" real, \"max_aperture\" real, primary key(\"id\"));",
    "output": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\""
  },
  {
    "instruction": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Airbus A340-300\""
  },
  {
    "instruction": "How many times did Boston Red Stockings lose in 2009 postseason?",
    "input": "create table postseason (year integer, round text, team_id_winner text, league_id_winner text, team_id_loser text, league_id_loser text, wins integer, losses integer, ties integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2009;"
  },
  {
    "instruction": "Find the number of manufactures that are based in Tokyo or Beijing.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT count(*) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Beijing'"
  },
  {
    "instruction": "What is the latest paper by oren etzioni ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"oren etzioni\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "Compute the number of products with a price larger than or equal to $180.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT count(*) FROM products WHERE price >= 180"
  },
  {
    "instruction": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.Title, T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID"
  },
  {
    "instruction": "find the event names that have more than 2 records.",
    "input": "create table \"party_events\" (\"Event_ID\" int, \"Event_Name\" text, \"Party_ID\" int, \"Member_in_charge_ID\" int, primary key (\"Event_ID\"), foreign key (`party_id`) references `party`(`party_id`), foreign key (`member_in_charge_id`) references `member`(`member_id`));",
    "output": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*) > 2"
  },
  {
    "instruction": "What is the code of the city with the most students?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what state has the smallest population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state );"
  },
  {
    "instruction": "Who is the friend of Zach with longest year relationship?",
    "input": "create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT friend FROM PersonFriend WHERE name = 'Zach' AND YEAR = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')"
  },
  {
    "instruction": "What are the details for all projects that did not hire any staff in a research role?",
    "input": "create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code = 'researcher' )"
  },
  {
    "instruction": "What is the name of the shop that has the most different kinds of devices in stock?",
    "input": "create table \"stock\" (\"Shop_ID\" int, \"Device_ID\" int, \"Quantity\" int, primary key (\"Shop_ID\",\"Device_ID\"), foreign key (`shop_id`) references `shop`(`shop_id`), foreign key (`device_id`) references `device`(`device_id`));create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the id and name of the department store that has both marketing and managing department?",
    "input": "create table `departments` (`department_id` integer primary key, `dept_store_id` integer not null, `department_name` varchar(80), foreign key (`dept_store_id`) references `department_stores`(`dept_store_id`));create table `department_stores` (`dept_store_id` integer primary key, `dept_store_chain_id` integer, `store_name` varchar(80), `store_address` varchar(255), `store_phone` varchar(80), `store_email` varchar(80), foreign key (`dept_store_chain_id`) references `department_store_chain`(`dept_store_chain_id`));create table `departments` (`department_id` integer primary key, `dept_store_id` integer not null, `department_name` varchar(80), foreign key (`dept_store_id`) references `department_stores`(`dept_store_id`));create table `department_stores` (`dept_store_id` integer primary key, `dept_store_chain_id` integer, `store_name` varchar(80), `store_address` varchar(255), `store_phone` varchar(80), `store_email` varchar(80), foreign key (`dept_store_chain_id`) references `department_store_chain`(`dept_store_chain_id`));",
    "output": "SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"marketing\" INTERSECT SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"managing\""
  },
  {
    "instruction": "What are the names of the five cities with the greatest proportion of white people?",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));",
    "output": "SELECT Name FROM city ORDER BY White DESC LIMIT 5"
  },
  {
    "instruction": "How many citations does Dan Makumbi 's Genetic Identity paper have ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid = t3.keyphraseid JOIN writes AS t4 ON t4.paperid = t2.paperid JOIN cite AS t5 ON t4.paperid = t5.citedpaperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"Dan Makumbi\" AND t3.keyphrasename = \"Genetic Identity\";"
  },
  {
    "instruction": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?",
    "input": "create table \"exhibition_record\" (\"Exhibition_ID\" int, \"Date\" text, \"Attendance\" int, primary key (\"Exhibition_ID\",\"Date\"), foreign key (`exhibition_id`) references `exhibition`(`exhibition_id`));create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10"
  },
  {
    "instruction": "Count the number of clubs for which the student named \"Eric Tai\" is a member.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Eric\" AND t3.lname = \"Tai\""
  },
  {
    "instruction": "What are the hosts of competitions whose theme is not \"Aliens\"?",
    "input": "create table \"farm_competition\" (\"Competition_ID\" int, \"Year\" int, \"Theme\" text, \"Host_city_ID\" int, \"Hosts\" text, primary key (\"Competition_ID\"), foreign key (`host_city_id`) references `city`(`city_id`));",
    "output": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'"
  },
  {
    "instruction": "What are the names and ids of the different categories, and how many films are in each?",
    "input": "create table film_category (film_id smallint unsigned not null, category_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (film_id, category_id), foreign key (film_id) references film (film_id), foreign key (category_id) references category (category_id));create table category (category_id tinyint unsigned not null, name varchar(25) not null, last_update timestamp not null default current_timestamp, primary key (category_id));",
    "output": "SELECT T2.name, T1.category_id, count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id"
  },
  {
    "instruction": "List the status shared by more than two roller coaster.",
    "input": "create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*) > 2"
  },
  {
    "instruction": "What is the location of the perpetrator with the largest kills.",
    "input": "create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1"
  },
  {
    "instruction": "Show the name of the county with the biggest population.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1"
  },
  {
    "instruction": "What are the name and location of the cinema with the largest capacity?",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT name, LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1"
  },
  {
    "instruction": "List the locations of schools in ascending order of enrollment.",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT LOCATION FROM school ORDER BY Enrollment ASC"
  },
  {
    "instruction": "what is the elevation of the highest point in the usa",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT MAX ( highest_elevation ) FROM highlow;"
  },
  {
    "instruction": "What is the name of the artist with the greatest number of albums?",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));",
    "output": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which studios have an average gross of over 4500000?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar) >= 4500000"
  },
  {
    "instruction": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo, Japan\""
  },
  {
    "instruction": "Return the elimination movies of wrestlers on Team Orton.",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));",
    "output": "SELECT Elimination_Move FROM Elimination WHERE Team = \"Team Orton\""
  },
  {
    "instruction": "How many different majors are there and how many different city codes are there for each student?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(DISTINCT major), count(DISTINCT city_code) FROM student"
  },
  {
    "instruction": "What is the number of professors for different school?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT count(*), T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code"
  },
  {
    "instruction": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?",
    "input": "create table apartment_buildings (building_id integer not null, building_short_name char(15), building_full_name varchar(80), building_description varchar(255), building_address varchar(255), building_manager varchar(50), building_phone varchar(80), primary key (building_id), unique (building_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = \"Columbus Square\""
  },
  {
    "instruction": "How many orders have detail \"Second time\"?",
    "input": "create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(*) FROM customer_orders WHERE order_details = \"Second time\""
  },
  {
    "instruction": "What is the course description and number of credits for QM-261?",
    "input": "create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT crs_credit, crs_description FROM course WHERE crs_code = 'QM-261'"
  },
  {
    "instruction": "Return me the number of tips that are written by Michelle in 2010 .",
    "input": "create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));create table \"tip\" (\"tip_id\" int, \"business_id\" text, \"text\" text, \"user_id\" text, \"likes\" int, \"year\" int, \"month\" text, primary key(\"tip_id\") foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t1.year = 2010 AND t2.name = \"Michelle\";"
  },
  {
    "instruction": "What is the number of distinct teams that suffer elimination?",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));",
    "output": "SELECT COUNT (DISTINCT team) FROM elimination"
  },
  {
    "instruction": "Count the number of cinemas.",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT count(*) FROM cinema"
  },
  {
    "instruction": "What are the method, date and amount of each payment? Sort the list in ascending order of date.",
    "input": "create table payments (payment_id integer not null, settlement_id integer not null, payment_method_code varchar(255), date_payment_made date, amount_payment integer, primary key (payment_id), foreign key (settlement_id) references settlements (settlement_id));",
    "output": "SELECT Payment_Method_Code, Date_Payment_Made, Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC"
  },
  {
    "instruction": "Find the countries that have never participated in any competition with Friendly type.",
    "input": "create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));",
    "output": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type = 'Friendly'"
  },
  {
    "instruction": "Find all Apple Store in \" Los Angeles \"",
    "input": "create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT business_id FROM business WHERE city = \"Los Angeles\" AND name = \"Apple Store\";"
  },
  {
    "instruction": "What states have at least two representatives?",
    "input": "create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));",
    "output": "SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "what topics does oren etzioni write about most ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t2.keyphraseid ), t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"oren etzioni\" GROUP BY t2.keyphraseid ORDER BY COUNT ( t2.keyphraseid ) DESC;"
  },
  {
    "instruction": "What are the dates of ceremony and results for each music festival?",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));",
    "output": "SELECT Date_of_ceremony, RESULT FROM music_festival"
  },
  {
    "instruction": "Find all the name of documents without any sections.",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `document_sections` (`section_id` integer primary key, `document_code` varchar(15) not null, `section_sequence` integer, `section_code` varchar(20), `section_title` varchar(80), foreign key (`document_code`) references `documents`(`document_code`));",
    "output": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)"
  },
  {
    "instruction": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));create table roles (role_code char(15) not null, role_name varchar(255), role_description varchar(255), primary key (role_code));",
    "output": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = \"Human Resource\" OR T2.role_name = \"Manager\""
  },
  {
    "instruction": "How many documents have document type code CV or BK?",
    "input": "create table all_documents (document_id integer not null, date_stored datetime, document_type_code char(15) not null, document_name char(255), document_description char(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (date_stored) references ref_calendar (calendar_date));",
    "output": "SELECT count(*) FROM All_documents WHERE document_type_code = \"CV\" OR document_type_code = \"BK\""
  },
  {
    "instruction": "List every album's title.",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT title FROM albums;"
  },
  {
    "instruction": "What is the average age and how many male students are there in each city?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*), avg(age), city_code FROM student WHERE sex = 'M' GROUP BY city_code"
  },
  {
    "instruction": "What are the title and rental rate of the film with the highest rental rate?",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));",
    "output": "SELECT title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1"
  },
  {
    "instruction": "Find the number of vocal types used in song \"Demon Kitty Rag\"?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Demon Kitty Rag\""
  },
  {
    "instruction": "papers of ali farhadi in eccv 2016",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"ali farhadi\" AND t3.year = 2016 AND t4.venuename = \"eccv\";"
  },
  {
    "instruction": "What are the different years for all competitions that are not of type equal to tournament?",
    "input": "create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));",
    "output": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\""
  },
  {
    "instruction": "How many papers have \"Atsushi Ohori\" published?",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Atsushi\" AND t1.lname = \"Ohori\""
  },
  {
    "instruction": "Find the number of products for each manufacturer, showing the name of each company.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT count(*), T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name"
  },
  {
    "instruction": "How many dorms are there?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT count(*) FROM dorm"
  },
  {
    "instruction": "How many drivers are there?",
    "input": "create table \"driver\" (\"Driver_ID\" int, \"Name\" text, \"Party\" text, \"Home_city\" text, \"Age\" int, primary key (\"Driver_ID\"));",
    "output": "SELECT count(*) FROM driver"
  },
  {
    "instruction": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?",
    "input": "create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Latin\" OR T1.Name = \"Pop\""
  },
  {
    "instruction": "What is the total number of students enrolled in schools without any goalies?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos = \"goalie\")"
  },
  {
    "instruction": "Which grade is studying in room 105?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT grade FROM list WHERE classroom = 105"
  },
  {
    "instruction": "What papers has Richard Ladner written at chi ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Richard Ladner\" AND t4.venuename = \"chi\";"
  },
  {
    "instruction": "For each advisor, report the total number of students advised by him or her.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Advisor, count(*) FROM STUDENT GROUP BY Advisor"
  },
  {
    "instruction": "What is the most common role for the staff?",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List all program origins in the alphabetical order.",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));",
    "output": "SELECT origin FROM program ORDER BY origin"
  },
  {
    "instruction": "What conferences does Daniella Coelho publish in ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Daniella Coelho\";"
  },
  {
    "instruction": "What are the maximum and average height of the mountains?",
    "input": "create table \"mountain\" (\"id\" int, \"name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key(\"id\"));",
    "output": "SELECT max(height), avg(height) FROM mountain"
  },
  {
    "instruction": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?",
    "input": "create table \"chip_model\" (\"Model_name\" text, \"Launch_year\" real, \"RAM_MiB\" real, \"ROM_MiB\" real, \"Slots\" text, \"WiFi\" text, \"Bluetooth\" text, primary key (\"Model_name\"));create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"
  },
  {
    "instruction": "List the amount and donor name for the largest amount of donation.",
    "input": "create table \"endowment\" (\"endowment_id\" int, \"School_id\" int, \"donator_name\" text, \"amount\" real, primary key(\"endowment_id\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));",
    "output": "SELECT amount, donator_name FROM endowment ORDER BY amount DESC LIMIT 1"
  },
  {
    "instruction": "What are the employee ids for employees who make more than the average?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id FROM employees WHERE salary > (SELECT AVG(salary) FROM employees)"
  },
  {
    "instruction": "Show the details of all trucks in the order of their license number.",
    "input": "create table `trucks` (`truck_id` integer primary key, `truck_licence_number` varchar(20), `truck_details` varchar(255));",
    "output": "SELECT truck_details FROM trucks ORDER BY truck_licence_number"
  },
  {
    "instruction": "Which customers have the substring \"Diana\" in their names? Return the customer details.",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));",
    "output": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\""
  },
  {
    "instruction": "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"OTHA\" AND T2.lastname = \"MOYER\""
  },
  {
    "instruction": "Find the total number of employees.",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);",
    "output": "SELECT count(*) FROM employee"
  },
  {
    "instruction": "what is the state with the highest elevation in the united states",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "What are the catalog entry names of the products with next entry ID above 8?",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8"
  },
  {
    "instruction": "Find all the customer last names that do not have invoice totals larger than 20.",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `invoice` (`invoiceid` integer not null , `customerid` integer not null , `invoicedate` datetime not null , `billingaddress` varchar(70) default null , `billingcity` varchar(40) default null , `billingstate` varchar(40) default null , `billingcountry` varchar(40) default null , `billingpostalcode` varchar(10) default null , `total` decimal(10, 2) not null , primary key (`invoiceid`) , constraint `fk_invoicecustomerid` foreign key (`customerid`) references `customer` (`customerid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20"
  },
  {
    "instruction": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT max(T1.HS), pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS > 1000 GROUP BY T2.pPos"
  },
  {
    "instruction": "Show all book categories and the number of books in each category.",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT category, count(*) FROM book_club GROUP BY category"
  },
  {
    "instruction": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));",
    "output": "SELECT title FROM film WHERE LENGTH > 100 OR rating = 'PG' EXCEPT SELECT title FROM film WHERE replacement_cost > 200"
  },
  {
    "instruction": "Count the number of clubs located at \"HHH\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT count(*) FROM club WHERE clublocation = \"HHH\""
  },
  {
    "instruction": "What are the order details of the products with price higher than 2000?",
    "input": "create table order_items (order_item_id integer not null , order_id integer not null, product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), primary key (order_item_id), foreign key (order_id) references customer_orders (order_id), foreign key (product_id) references products (product_id));create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_price > 2000"
  },
  {
    "instruction": "Show the times of elimination by \"Punk\" or \"Orton\".",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));",
    "output": "SELECT TIME FROM elimination WHERE Eliminated_By = \"Punk\" OR Eliminated_By = \"Orton\""
  },
  {
    "instruction": "Give the country id and corresponding count of cities in each country.",
    "input": "create table `locations` (`location_id` decimal(4, 0) not null default '0', `street_address` varchar(40) default null, `postal_code` varchar(12) default null, `city` varchar(30) not null, `state_province` varchar(25) default null, `country_id` varchar(2) default null, primary key (`location_id`), foreign key (`country_id`) references countries(`country_id`));",
    "output": "SELECT country_id, COUNT(*) FROM locations GROUP BY country_id"
  },
  {
    "instruction": "What is the location code with the most documents?",
    "input": "create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the name and description for role code \"MG\"?",
    "input": "create table roles (role_code char(15) not null, role_name varchar(255), role_description varchar(255), primary key (role_code));",
    "output": "SELECT role_name, role_description FROM ROLES WHERE role_code = \"MG\""
  },
  {
    "instruction": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.duration, T1.file_size, T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is = \"pop\" ORDER BY T2.song_name"
  },
  {
    "instruction": "Cound the number of artists who have not released an album.",
    "input": "create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"
  },
  {
    "instruction": "List players' first name and last name who have weight greater than 220 or height shorter than 75.",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);",
    "output": "SELECT name_first, name_last FROM player WHERE weight > 220 OR height < 75"
  },
  {
    "instruction": "Return the id and full name of the customer with the most accounts.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the name of the person who has no student friends.",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.job = 'student'"
  },
  {
    "instruction": "Show the countries that have both managers of age above 50 and managers of age below 46.",
    "input": "create table \"manager\" (\"Manager_ID\" int, \"Name\" text, \"Country\" text, \"Working_year_starts\" text, \"Age\" int, \"Level\" int, primary key (\"Manager_ID\"));create table \"manager\" (\"Manager_ID\" int, \"Name\" text, \"Country\" text, \"Working_year_starts\" text, \"Age\" int, \"Level\" int, primary key (\"Manager_ID\"));",
    "output": "SELECT Country FROM manager WHERE Age > 50 INTERSECT SELECT Country FROM manager WHERE Age < 46"
  },
  {
    "instruction": "What are the different product names? What is the average product price for each of them?",
    "input": "create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT Product_Name, avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name"
  },
  {
    "instruction": "Which problems are reported before 1978-06-26? Give me the ids of the problems.",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\""
  },
  {
    "instruction": "How many vehicles exist?",
    "input": "create table `vehicles` (`vehicle_id` integer primary key, `vehicle_details` varchar(255));",
    "output": "SELECT count(*) FROM Vehicles;"
  },
  {
    "instruction": "Show the names of players and names of their coaches in descending order of the votes of players.",
    "input": "create table \"player_coach\" (\"Player_ID\" int, \"Coach_ID\" int, \"Starting_year\" int, primary key (\"Player_ID\",\"Coach_ID\"), foreign key (`player_id`) references `player`(`player_id`), foreign key (`coach_id`) references `coach`(`coach_id`));create table \"coach\" (\"Coach_ID\" int, \"Coach_name\" text, \"Gender\" text, \"Club_ID\" int, \"Rank\" int, primary key (\"Coach_ID\"), foreign key (`club_id`) references `club`(`club_id`));create table \"player\" (\"Player_ID\" int, \"Sponsor_name\" text, \"Player_name\" text, \"Gender\" text, \"Residence\" text, \"Occupation\" text, \"Votes\" int, \"Rank\" text, primary key (\"Player_ID\"));",
    "output": "SELECT T3.Player_name, T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID ORDER BY T3.Votes DESC"
  },
  {
    "instruction": "papers in pldi 2015",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "What are the id and name of the mountains that have at least 2 photos?",
    "input": "create table \"mountain\" (\"id\" int, \"name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key(\"id\"));create table \"photos\" (\"id\" int, \"camera_lens_id\" int, \"mountain_id\" int, \"color\" text, \"name\" text, primary key(\"id\"), foreign key(\"camera_lens_id\") references `camera_lens`(\"id\"), foreign key(\"mountain_id\") references `mountain`(\"id\"));",
    "output": "SELECT T1.id, T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING count(*) >= 2"
  },
  {
    "instruction": "List the id and type of each thing, and the details of the organization that owns it.",
    "input": "create table things (thing_id integer not null, organization_id integer not null, type_of_thing_code char(15) not null, service_type_code char(10) not null, service_details varchar(255), primary key (thing_id), foreign key (organization_id) references organizations (organization_id));create table organizations (organization_id integer not null, parent_organization_id integer, organization_details varchar(255), primary key (organization_id));",
    "output": "SELECT T1.thing_id, T1.type_of_Thing_Code, T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id"
  },
  {
    "instruction": "what are the states through which the longest river runs",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );"
  },
  {
    "instruction": "What papers were published in acl in 2012 about Parsing ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"Parsing\" AND t3.year = 2012 AND t4.venuename = \"acl\";"
  },
  {
    "instruction": "Which producer has worked with the most number of directors ?",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"made_by\" (\"id\" int, \"msid\" int, \"pid\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"pid\") references `producer`(\"pid\"));create table \"producer\" (\"pid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"pid\"));",
    "output": "SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN made_by AS t5 ON t4.mid = t5.msid JOIN producer AS t1 ON t1.pid = t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name ) DESC LIMIT 1;"
  },
  {
    "instruction": "Which authors have last name \"Ueno\"? List their first names.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));",
    "output": "SELECT fname FROM authors WHERE lname = \"Ueno\""
  },
  {
    "instruction": "How many universities have a campus fee greater than the average?",
    "input": "create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));",
    "output": "SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)"
  },
  {
    "instruction": "What are the names of the states that have 2 to 4 employees living there?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;"
  },
  {
    "instruction": "Show all the distinct product names with price higher than the average.",
    "input": "create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price > (SELECT avg(Product_Price) FROM PRODUCTS)"
  },
  {
    "instruction": "Return the maximum number of points for climbers from the United Kingdom.",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));",
    "output": "SELECT max(Points) FROM climber WHERE Country = \"United Kingdom\""
  },
  {
    "instruction": "Show the delegates and the names of the party they belong to.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T1.Delegate, T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID"
  },
  {
    "instruction": "What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?",
    "input": "create table \"mountain\" (\"id\" int, \"name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key(\"id\"));",
    "output": "SELECT name, height, prominence FROM mountain WHERE range != 'Aberdare Range'"
  },
  {
    "instruction": "return me the number of papers by \" H. V. Jagadish \" .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t1.name = \"H. V. Jagadish\";"
  },
  {
    "instruction": "Where did li dong publish in 2016",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"li dong\" AND t3.year = 2016;"
  },
  {
    "instruction": "What is the first name of students who got grade C in any class?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));",
    "output": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C'"
  },
  {
    "instruction": "return me the total citations of papers in PVLDB in 2005 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = \"PVLDB\" AND t2.year = 2005;"
  },
  {
    "instruction": "How many weddings are there in year 2016?",
    "input": "create table \"wedding\" (\"Church_ID\" int, \"Male_ID\" int, \"Female_ID\" int, \"Year\" int, primary key (\"Church_ID\",\"Male_ID\",\"Female_ID\"), foreign key (\"Church_ID\") references `church`(\"Church_ID\"), foreign key (\"Male_ID\") references `people`(\"People_ID\"), foreign key (\"Female_ID\") references `people`(\"People_ID\"));",
    "output": "SELECT count(*) FROM wedding WHERE YEAR = 2016"
  },
  {
    "instruction": "What are the names of the all-female dorms?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT dorm_name FROM dorm WHERE gender = 'F'"
  },
  {
    "instruction": "Which assets did not incur any fault log? List the asset model.",
    "input": "create table `assets` (`asset_id` integer primary key, `maintenance_contract_id` integer not null, `supplier_company_id` integer not null, `asset_details` varchar(255), `asset_make` varchar(20), `asset_model` varchar(20), `asset_acquired_date` datetime, `asset_disposed_date` datetime, `other_asset_details` varchar(255), foreign key (`maintenance_contract_id`) references `maintenance_contracts`(`maintenance_contract_id`), foreign key (`supplier_company_id`) references `third_party_companies`(`company_id`));create table `fault_log` (`fault_log_entry_id` integer primary key, `asset_id` integer not null, `recorded_by_staff_id` integer not null, `fault_log_entry_datetime` datetime, `fault_description` varchar(255), `other_fault_details` varchar(255), foreign key (`asset_id`) references `assets`(`asset_id`), foreign key (`recorded_by_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)"
  },
  {
    "instruction": "How many problems did the product called \"voluptatem\" have in record?",
    "input": "create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\""
  },
  {
    "instruction": "Return the names of parties that have two or more events.",
    "input": "create table \"party_events\" (\"Event_ID\" int, \"Event_Name\" text, \"Party_ID\" int, \"Member_in_charge_ID\" int, primary key (\"Event_ID\"), foreign key (`party_id`) references `party`(`party_id`), foreign key (`member_in_charge_id`) references `member`(`member_id`));create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id HAVING count(*) >= 2"
  },
  {
    "instruction": "display job ID for those jobs that were done by two or more for more than 300 days.",
    "input": "create table `job_history` (`employee_id` decimal(6, 0) not null, `start_date` date not null, `end_date` date not null, `job_id` varchar(10) not null, `department_id` decimal(4, 0) default null, primary key (`employee_id`,`start_date`), foreign key (`employee_id`) references employees(`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT job_id FROM job_history WHERE end_date - start_date > 300 GROUP BY job_id HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "What are the first and last names of all the candidates?",
    "input": "create table candidates (candidate_id integer not null , candidate_details varchar(255), primary key (candidate_id), foreign key (candidate_id) references people (person_id));create table people (person_id integer not null, first_name varchar(255), middle_name varchar(255), last_name varchar(255), cell_mobile_number varchar(40), email_address varchar(40), login_name varchar(40), password varchar(40), primary key (person_id));",
    "output": "SELECT T2.first_name, T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
  },
  {
    "instruction": "What are the different product sizes?",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `production_type_code` varchar(15) not null, `unit_price` decimal(19, 4), `product_name` varchar(80), `product_color` varchar(20), `product_size` varchar(20), foreign key (`production_type_code`) references `product_categories`(`production_type_code`));",
    "output": "SELECT DISTINCT product_size FROM Products"
  },
  {
    "instruction": "Find the first and last names of all the female (sex is F) students who have president votes.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT T1.Fname, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE WHERE T1.sex = \"F\""
  },
  {
    "instruction": "What is the total access count of documents that are of the most common document type?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the race class and number of races in each class.",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));",
    "output": "SELECT CLASS, count(*) FROM race GROUP BY CLASS"
  },
  {
    "instruction": "What are the full names of customers who do not have any accounts?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id"
  },
  {
    "instruction": "What is the gender and name of the artist who sang the song with the smallest resolution?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.gender, T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.resolution LIMIT 1"
  },
  {
    "instruction": "What are the full names of customers who have accounts?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id"
  },
  {
    "instruction": "return me the domain where \" H. V. Jagadish \" is focused .",
    "input": "create table \"domain_author\" (\"aid\" int, \"did\" int, primary key (\"did\", \"aid\"), foreign key(\"aid\") references `author`(\"aid\"), foreign key(\"did\") references `domain`(\"did\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));",
    "output": "SELECT t2.name FROM domain_author AS t3 JOIN author AS t1 ON t3.aid = t1.aid JOIN DOMAIN AS t2 ON t2.did = t3.did WHERE t1.name = \"H. V. Jagadish\";"
  },
  {
    "instruction": "Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));create table view_unit_status (apt_id integer, apt_booking_id integer, status_date datetime not null, available_yn bit, primary key (status_date), foreign key (apt_id) references apartments (apt_id), foreign key (apt_booking_id) references apartment_bookings (apt_booking_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));create table view_unit_status (apt_id integer, apt_booking_id integer, status_date datetime not null, available_yn bit, primary key (status_date), foreign key (apt_id) references apartments (apt_id), foreign key (apt_booking_id) references apartment_bookings (apt_booking_id));",
    "output": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 1"
  },
  {
    "instruction": "What are the names of wines, sorted by price ascending?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT Name FROM WINE ORDER BY price"
  },
  {
    "instruction": "Return the id of the project that has the fewest corresponding documents.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "what are the cities of the state with the highest point",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow ) );"
  },
  {
    "instruction": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103)"
  },
  {
    "instruction": "What are the IDs of customers who have \"Diana\" in part of their names?",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));",
    "output": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""
  },
  {
    "instruction": "what is the lowest elevation in pennsylvania",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT lowest_elevation FROM highlow WHERE state_name = \"pennsylvania\";"
  },
  {
    "instruction": "Find the name of students who didn't take any course from Biology department.",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table takes (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), grade varchar(2), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references student (id)\n        ON delete cascade);create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology')"
  },
  {
    "instruction": "What is the name of the department with the most credits?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1"
  },
  {
    "instruction": "Who is the instructor with the highest salary?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1"
  },
  {
    "instruction": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT AVG(Price), AVG(Cases) FROM WINE WHERE YEAR = 2009 AND Grape = \"Zinfandel\""
  },
  {
    "instruction": "which river runs through most states",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;"
  },
  {
    "instruction": "people in boulder",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = \"boulder\";"
  },
  {
    "instruction": "How many different statuses do cities have?",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT count(DISTINCT Status) FROM city"
  },
  {
    "instruction": "How many customers live in the city of Prague?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*) FROM customers WHERE city = \"Prague\";"
  },
  {
    "instruction": "What are the names of all the customers in alphabetical order?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);",
    "output": "SELECT name FROM accounts ORDER BY name"
  },
  {
    "instruction": "Show the total number of rooms of all apartments with facility code \"Gym\".",
    "input": "create table apartment_facilities (apt_id integer not null, facility_code char(15) not null, primary key (apt_id, facility_code), foreign key (apt_id) references apartments (apt_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.facility_code = \"Gym\""
  },
  {
    "instruction": "What are the titles of all movies that have rating star is between 3 and 5?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5"
  },
  {
    "instruction": "Tell me the price ranges for all the hotels.",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT price_range FROM HOTELS"
  },
  {
    "instruction": "Report all advisors that advise more than 2 students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*) > 2"
  },
  {
    "instruction": "Return the name of the artist who has the latest join year.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1"
  },
  {
    "instruction": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT T1.name, T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available) > 14 UNION SELECT name, id FROM station WHERE installation_date LIKE \"12/%\""
  },
  {
    "instruction": "Find the common personal name of course authors and students.",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students"
  },
  {
    "instruction": "What are the headquarters and industries of all companies?",
    "input": "create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));",
    "output": "SELECT Headquarters, Industry FROM company"
  },
  {
    "instruction": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5"
  },
  {
    "instruction": "What are the titles of movies and books corresponding to companies incorporated in China?",
    "input": "create table \"movie\" (\"movie_id\" int, \"Title\" text, \"Year\" int, \"Director\" text, \"Budget_million\" real, \"Gross_worldwide\" int, primary key(\"movie_id\"));create table \"culture_company\" (\"Company_name\" text, \"Type\" text, \"Incorporated_in\" text, \"Group_Equity_Shareholding\" real, \"book_club_id\" text, \"movie_id\" text, primary key(\"Company_name\"), foreign key (\"book_club_id\") references \"book_club\"(\"book_club_id\"), foreign key (\"movie_id\") references \"movie\"(\"movie_id\"));create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT T1.title, T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id JOIN book_club AS T3 ON T3.book_club_id = T2.book_club_id WHERE T2.incorporated_in = 'China'"
  },
  {
    "instruction": "Find all the distinct district names ordered by city area in descending.",
    "input": "create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC"
  },
  {
    "instruction": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
    "input": "create table `customers` (`customer_id` integer primary key, `coupon_id` integer not null, `good_or_bad_customer` varchar(4), `first_name` varchar(80), `last_name` varchar(80), `gender_mf` varchar(1), `date_became_customer` datetime, `date_last_hire` datetime, foreign key (`coupon_id`) references `discount_coupons`(`coupon_id`));",
    "output": "SELECT first_name, last_name, gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY last_name"
  },
  {
    "instruction": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000"
  },
  {
    "instruction": "what is the biggest state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "Count the number of wrestlers.",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT count(*) FROM wrestler"
  },
  {
    "instruction": "Show the studios that have not produced films with director \"Walter Hill\".",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director = \"Walter Hill\""
  },
  {
    "instruction": "Sort the customer names in alphabetical order.",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));",
    "output": "SELECT customer_details FROM customers ORDER BY customer_details"
  },
  {
    "instruction": "Please show the categories of the music festivals with count more than 1.",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));",
    "output": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*) > 1"
  },
  {
    "instruction": "Count the number of courses in the Physics department.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name = 'Physics'"
  },
  {
    "instruction": "What is average age of male for different job title?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT avg(age), job FROM Person WHERE gender = 'male' GROUP BY job"
  },
  {
    "instruction": "Show first name and id for all customers with at least 2 accounts.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT T2.customer_first_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2"
  },
  {
    "instruction": "Find the number of different cities that employees live in.",
    "input": "create table `employee` (`employeeid` integer not null , `lastname` varchar(20) not null , `firstname` varchar(20) not null , `title` varchar(30) default null , `reportsto` integer default null , `birthdate` datetime default null , `hiredate` datetime default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) default null , primary key (`employeeid`) , constraint `fk_employeereportsto` foreign key (`reportsto`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE"
  },
  {
    "instruction": "List the names of all genres in alphabetical oder, together with its ratings.",
    "input": "create table genre(g_name varchar2(20) not null, rating varchar2(10), most_popular_in varchar2(50), primary key(g_name));",
    "output": "SELECT g_name, rating FROM genre ORDER BY g_name"
  },
  {
    "instruction": "How many male (sex is M) students have class senator votes in the fall election cycle?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.Sex = \"M\" AND T2.Election_Cycle = \"Fall\""
  },
  {
    "instruction": "List the names of the customers who have once bought product \"food\".",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer primary key, `product_id` integer not null, `order_id` integer not null, `order_item_status` varchar(10) not null, `order_item_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));create table `products` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*) >= 1"
  },
  {
    "instruction": "What is the name of the artist who produced the shortest song?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);",
    "output": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id ORDER BY T2.duration LIMIT 1"
  },
  {
    "instruction": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
    "input": "create table \"game\" (\"stadium_id\" int, \"id\" int, \"Season\" int, \"Date\" text, \"Home_team\" text, \"Away_team\" text, \"Score\" text, \"Competition\" text, primary key (\"id\"), foreign key (\"stadium_id\") references `stadium`(\"id\"));create table \"stadium\" (\"id\" int, \"name\" text, \"Home_Games\" int, \"Average_Attendance\" real, \"Total_Attendance\" real, \"Capacity_Percentage\" real, primary key (\"id\"));create table \"injury_accident\" (\"game_id\" int, \"id\" int, \"Player\" text, \"Injury\" text, \"Number_of_matches\" text, \"Source\" text, primary key (\"id\"), foreign key (\"game_id\") references `game`(\"id\"));",
    "output": "SELECT T1.season, T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'"
  },
  {
    "instruction": "Return the characters and durations for each actor.",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));",
    "output": "SELECT Character, Duration FROM actor"
  },
  {
    "instruction": "Which destination has least number of flights?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "Show the names of pilots and models of aircrafts they have flied with.",
    "input": "create table \"pilot_record\" (\"Record_ID\" int, \"Pilot_ID\" int, \"Aircraft_ID\" int, \"Date\" text, primary key (\"Pilot_ID\", \"Aircraft_ID\", \"Date\"), foreign key (`pilot_id`) references `pilot`(`pilot_id`), foreign key (`aircraft_id`) references `aircraft`(`aircraft_id`));create table \"aircraft\" (\"Aircraft_ID\" int, \"Order_Year\" int, \"Manufacturer\" text, \"Model\" text, \"Fleet_Series\" text, \"Powertrain\" text, \"Fuel_Propulsion\" text, primary key (\"Aircraft_ID\"));create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));",
    "output": "SELECT T3.Pilot_name, T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID"
  },
  {
    "instruction": "What are the names of all pilots 30 years old or young in descending alphabetical order?",
    "input": "create table `pilot` (`pilot_id` int(11) not null, `name` varchar(50) not null, `age` int(11) not null, primary key (`pilot_id`));",
    "output": "SELECT Name FROM pilot WHERE Age <= 30 ORDER BY Name DESC"
  },
  {
    "instruction": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));create table `invoices` (`invoice_number` integer primary key, `order_id` integer not null, `invoice_date` datetime, foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT T2.invoice_number, T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many distinct transaction types are used in the transactions?",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS"
  },
  {
    "instruction": "What is the name of the department with the fewest members?",
    "input": "create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);create table member_of (facid integer, dno integer, appt_type varchar(15), foreign key(facid) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "What are the names and years released for the movies with the top 3 highest ratings?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY T1.stars DESC LIMIT 3"
  },
  {
    "instruction": "Show all the locations where no cinema has capacity over 800.",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800"
  },
  {
    "instruction": "Which state has the most customers?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "What is the average enrollment number?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT avg(enr) FROM College"
  },
  {
    "instruction": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
    "input": "create table ref_shipping_agents (shipping_agent_code char(15) not null, shipping_agent_name varchar(255) not null, shipping_agent_description varchar(255) not null, primary key (shipping_agent_code));create table documents (document_id integer not null, document_status_code char(15) not null, document_type_code char(15) not null, shipping_agent_code char(15), receipt_date datetime, receipt_number varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (document_status_code) references ref_document_status (document_status_code), foreign key (shipping_agent_code) references ref_shipping_agents (shipping_agent_code));",
    "output": "SELECT Ref_Shipping_Agents.shipping_agent_name, count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;"
  },
  {
    "instruction": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?",
    "input": "create table \"train_station\" (\"Train_ID\" int, \"Station_ID\" int, primary key (\"Train_ID\",\"Station_ID\"), foreign key (\"Train_ID\") references \"train\"(\"Train_ID\"), foreign key (\"Station_ID\") references \"station\"(\"Station_ID\"));create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));create table \"train\" (\"Train_ID\" int, \"Name\" text, \"Time\" text, \"Service\" text, primary key (\"Train_ID\"));create table \"train_station\" (\"Train_ID\" int, \"Station_ID\" int, primary key (\"Train_ID\",\"Station_ID\"), foreign key (\"Train_ID\") references \"train\"(\"Train_ID\"), foreign key (\"Station_ID\") references \"station\"(\"Station_ID\"));create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));create table \"train\" (\"Train_ID\" int, \"Name\" text, \"Time\" text, \"Service\" text, primary key (\"Train_ID\"));",
    "output": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = \"Guruvayur Express\""
  },
  {
    "instruction": "Show the school name and driver name for all school buses.",
    "input": "create table \"school_bus\" (\"School_ID\" int, \"Driver_ID\" int, \"Years_Working\" int, \"If_full_time\" bool, primary key (\"School_ID\",\"Driver_ID\"), foreign key (\"School_ID\") references `school`(\"School_ID\"), foreign key (\"Driver_ID\") references `driver`(\"Driver_ID\"));create table \"school\" (\"School_ID\" int, \"Grade\" text, \"School\" text, \"Location\" text, \"Type\" text, primary key (\"School_ID\"));create table \"driver\" (\"Driver_ID\" int, \"Name\" text, \"Party\" text, \"Home_city\" text, \"Age\" int, primary key (\"Driver_ID\"));",
    "output": "SELECT T2.school, T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3 ON T1.driver_id = T3.driver_id"
  },
  {
    "instruction": "What is the most common type of ships?",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Who is the advisor of Linda Smith? Give me the first name and last name.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T1.fname, T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T2.fname = \"Linda\" AND T2.lname = \"Smith\""
  },
  {
    "instruction": "return me the paper after 2000 with more than 200 citations .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT title FROM publication WHERE citation_num > 200 AND YEAR > 2000;"
  },
  {
    "instruction": "return me the number of papers published in the VLDB conference before 2000 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = \"VLDB\" AND t2.year < 2000;"
  },
  {
    "instruction": "Find the year which offers the largest number of courses.",
    "input": "create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);",
    "output": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are all distinct country for artists?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT DISTINCT country FROM artist"
  },
  {
    "instruction": "What are the names of captains, sorted by age descending?",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT name FROM captain ORDER BY age DESC"
  },
  {
    "instruction": "List the dates and vote percents of elections.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Representative_ID\" int, \"Date\" text, \"Votes\" real, \"Vote_Percent\" real, \"Seats\" real, \"Place\" real, primary key (\"Election_ID\"), foreign key (\"Representative_ID\") references `representative`(\"Representative_ID\"));",
    "output": "SELECT Date, Vote_Percent FROM election"
  },
  {
    "instruction": "Show names for all aircrafts of which John Williams has certificates.",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = \"John Williams\""
  },
  {
    "instruction": "What are the addresses of customers living in Germany who have had an invoice?",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `invoice` (`invoiceid` integer not null , `customerid` integer not null , `invoicedate` datetime not null , `billingaddress` varchar(70) default null , `billingcity` varchar(40) default null , `billingstate` varchar(40) default null , `billingcountry` varchar(40) default null , `billingpostalcode` varchar(10) default null , `total` decimal(10, 2) not null , primary key (`invoiceid`) , constraint `fk_invoicecustomerid` foreign key (`customerid`) references `customer` (`customerid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Germany\""
  },
  {
    "instruction": "List the names of journalists who have not reported any event.",
    "input": "create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));create table \"news_report\" (\"journalist_ID\" int, \"Event_ID\" int, \"Work_Type\" text, primary key (\"journalist_ID\",\"Event_ID\"), foreign key (\"journalist_ID\") references `journalist`(\"journalist_ID\"), foreign key (\"Event_ID\") references `event`(\"Event_ID\"));",
    "output": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)"
  },
  {
    "instruction": "Find all movies by directors born in \" Los Angeles \"",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.birth_city = \"Los Angeles\";"
  },
  {
    "instruction": "return me the papers on PVLDB after 2000 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = \"PVLDB\" AND t2.year > 2000;"
  },
  {
    "instruction": "Find the country of all appelations who have at most three wines.",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING count(*) <= 3"
  },
  {
    "instruction": "Tell me the booking status code for the apartment with number \"Suite 634\".",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = \"Suite 634\""
  },
  {
    "instruction": "Show the name of the party that has the most delegates.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show all ministers who do not belong to Progress Party.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT minister FROM party WHERE party_name != 'Progress Party'"
  },
  {
    "instruction": "What is the average number of employees of the departments whose rank is between 10 and 15?",
    "input": "create table \"department\" (\"Department_ID\" int, \"Name\" text, \"Creation\" text, \"Ranking\" int, \"Budget_in_Billions\" real, \"Num_Employees\" real, primary key (\"Department_ID\"));",
    "output": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15"
  },
  {
    "instruction": "What are the names and number of works for all artists who have sung at least one song in English?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.artist_name, count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"english\" GROUP BY T2.artist_name HAVING count(*) >= 1"
  },
  {
    "instruction": "What is the label with the most albums?",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);",
    "output": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name LIKE \"%love%\""
  },
  {
    "instruction": "List name, dates active, and number of deaths for all storms with at least 1 death.",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT name, dates_active, number_deaths FROM storm WHERE number_deaths >= 1"
  },
  {
    "instruction": "What is the lowest salary in departments with average salary greater than the overall average.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT min(salary), dept_name FROM instructor GROUP BY dept_name HAVING avg(salary) > (SELECT avg(salary) FROM instructor)"
  },
  {
    "instruction": "Give the title of the course offered in Chandler during the Fall of 2010.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);",
    "output": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010"
  },
  {
    "instruction": "Find the number of songs in all the studio albums.",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);create table \"Tracklists\" (\"AlbumId\" integer, \"Position\" integer, \"SongId\" integer , primary key(albumid, position), foreign key (songid) references songs(songid), foreign key (albumid) references albums(aid));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.type = \"Studio\""
  },
  {
    "instruction": "Which programs are never broadcasted in the morning? Give me the names of the programs.",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));",
    "output": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Morning\""
  },
  {
    "instruction": "What are all the movies rated as R? List the titles.",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));",
    "output": "SELECT title FROM film WHERE rating = 'R'"
  },
  {
    "instruction": "what state is springfield in",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "What are the invoice dates, order ids, and order details for all invoices?",
    "input": "create table `invoices` (`invoice_number` integer primary key, `order_id` integer not null, `invoice_date` datetime, foreign key (`order_id`) references `orders`(`order_id`));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.invoice_date, T1.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id"
  },
  {
    "instruction": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT t1.product_name, t1.typical_buying_price, t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"yellow\""
  },
  {
    "instruction": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
    "input": "create table \"stadium\" (\"id\" int, \"name\" text, \"Home_Games\" int, \"Average_Attendance\" real, \"Total_Attendance\" real, \"Capacity_Percentage\" real, primary key (\"id\"));create table \"game\" (\"stadium_id\" int, \"id\" int, \"Season\" int, \"Date\" text, \"Home_team\" text, \"Away_team\" text, \"Score\" text, \"Competition\" text, primary key (\"id\"), foreign key (\"stadium_id\") references `stadium`(\"id\"));create table \"injury_accident\" (\"game_id\" int, \"id\" int, \"Player\" text, \"Injury\" text, \"Number_of_matches\" text, \"Source\" text, primary key (\"id\"), foreign key (\"game_id\") references `game`(\"id\"));",
    "output": "SELECT T1.id, T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Give the name of the student in the History department with the most credits.",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1"
  },
  {
    "instruction": "Find the average age and experience working length of journalists working on different role type.",
    "input": "create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));create table \"news_report\" (\"journalist_ID\" int, \"Event_ID\" int, \"Work_Type\" text, primary key (\"journalist_ID\",\"Event_ID\"), foreign key (\"journalist_ID\") references `journalist`(\"journalist_ID\"), foreign key (\"Event_ID\") references `event`(\"Event_ID\"));",
    "output": "SELECT avg(t1.age), avg(Years_working), t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type"
  },
  {
    "instruction": "Show all the cinema names and opening years in descending order of opening year.",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT name, openning_year FROM cinema ORDER BY openning_year DESC"
  },
  {
    "instruction": "What is the match id of the competition called \"1994 FIFA World Cup qualification\"?",
    "input": "create table \"match\" (\"Match_ID\" int, \"Date\" text, \"Venue\" text, \"Score\" text, \"Result\" text, \"Competition\" text, primary key (\"Match_ID\"));",
    "output": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\""
  },
  {
    "instruction": "What are the names and type codes of products?",
    "input": "create table products (product_id integer not null, product_type_code char(15), product_name varchar(255), product_price decimal(20, 4), primary key (product_id), unique (product_id));",
    "output": "SELECT Product_Name, Product_Type_Code FROM Products"
  },
  {
    "instruction": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));",
    "output": "SELECT T1.id, T1.Name, T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY count(*) DESC"
  },
  {
    "instruction": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.",
    "input": "create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));create table \"budget\" (\"School_id\" int, \"Year\" int, \"Budgeted\" int, \"total_budget_percent_budgeted\" real, \"Invested\" int, \"total_budget_percent_invested\" real, \"Budget_invested_percent\" text, primary key(\"School_id\",\"YEAR\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));",
    "output": "SELECT T1.School_name, T1.Mascot, T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id = T2.school_id WHERE Budgeted > 6000 OR YEAR < 2003 ORDER BY T2.total_budget_percent_invested, T2.total_budget_percent_budgeted"
  },
  {
    "instruction": "List the forenames of all distinct drivers in alphabetical order?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);",
    "output": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC"
  },
  {
    "instruction": "What are the names of different tracks, and how many races has each had?",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT T2.name, count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id"
  },
  {
    "instruction": "Return the unique name for stations that have ever had 7 bikes available.",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));",
    "output": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7"
  },
  {
    "instruction": "Find the full names of employees living in the city of Calgary.",
    "input": "create table `employee` (`employeeid` integer not null , `lastname` varchar(20) not null , `firstname` varchar(20) not null , `title` varchar(30) default null , `reportsto` integer default null , `birthdate` datetime default null , `hiredate` datetime default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) default null , primary key (`employeeid`) , constraint `fk_employeereportsto` foreign key (`reportsto`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT FirstName, LastName FROM EMPLOYEE WHERE City = \"Calgary\""
  },
  {
    "instruction": "return me the number of papers published in PVLDB in each year .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ), t2.year FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = \"PVLDB\" GROUP BY t2.year;"
  },
  {
    "instruction": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `airport_aircraft` (\"ID\" int, \"Airport_ID\" int, \"Aircraft_ID\" int, primary key (\"Airport_ID\",\"Aircraft_ID\"), foreign key (\"Airport_ID\") references `airport`(`airport_id`), foreign key (\"Aircraft_ID\") references `aircraft`(`aircraft_id`));create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT T1.Aircraft, T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Total_Passengers > 10000000"
  },
  {
    "instruction": "Return the average transaction amount, as well as the total amount of all transactions.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `previous_transaction_id` integer, `account_id` integer not null, `card_id` integer not null, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` double null, `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`card_id`) references `customers_cards`(`card_id`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT avg(transaction_amount), sum(transaction_amount) FROM Financial_transactions"
  },
  {
    "instruction": "What are the numbers of races for each constructor id?",
    "input": "create table \"constructorStandings\" (\"constructorStandingsId\" integer primary key, \"raceId\" integer, \"constructorId\" integer, \"points\" real, \"position\" integer, \"positionText\" text, \"wins\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"));",
    "output": "SELECT count(*), constructorid FROM constructorStandings GROUP BY constructorid"
  },
  {
    "instruction": "Find the names and phone numbers of customers living in California state.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(10) not null, `customer_name` varchar(80), `customer_phone` varchar(80), `customer_email` varchar(80), `date_became_customer` datetime);create table `customer_addresses` (`customer_id` integer not null, `address_id` integer not null, `date_from` datetime not null, `address_type` varchar(10) not null, `date_to` datetime, foreign key (`customer_id`) references `customers`(`customer_id`), foreign key (`address_id`) references `addresses`(`address_id`));create table `addresses` (`address_id` integer primary key, `address_details` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT t1.customer_name, t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'"
  },
  {
    "instruction": "List all info about all people.",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));",
    "output": "SELECT * FROM people"
  },
  {
    "instruction": "Which room has cheapest base price? List the room's name and the base price.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName, basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;"
  },
  {
    "instruction": "What is the alphabetically ordered list of all distinct medications?",
    "input": "create table medication (code integer primary key not null, name varchar(30) not null, brand varchar(30) not null, description varchar(30) not null);",
    "output": "SELECT DISTINCT name FROM medication ORDER BY name"
  },
  {
    "instruction": "What is the name of the most expensive product?",
    "input": "create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1"
  },
  {
    "instruction": "How many movies were produced in the year 2013 ?",
    "input": "create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT title ) FROM movie WHERE release_year = 2013;"
  },
  {
    "instruction": "Find all details for each swimmer.",
    "input": "create table \"swimmer\" (\"ID\" int, \"name\" text, \"Nationality\" text, \"meter_100\" real, \"meter_200\" text, \"meter_300\" text, \"meter_400\" text, \"meter_500\" text, \"meter_600\" text, \"meter_700\" text, \"Time\" text, primary key (\"ID\"));",
    "output": "SELECT * FROM swimmer"
  },
  {
    "instruction": "What are the codes of types of documents of which there are for or more?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*) > 4"
  },
  {
    "instruction": "How many Annual Meeting events happened in the United Kingdom region?",
    "input": "create table \"region\" (\"Region_ID\" int, \"Region_name\" text, \"Date\" text, \"Label\" text, \"Format\" text, \"Catalogue\" text, primary key (\"Region_ID\"));create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));create table \"party_events\" (\"Event_ID\" int, \"Event_Name\" text, \"Party_ID\" int, \"Member_in_charge_ID\" int, primary key (\"Event_ID\"), foreign key (`party_id`) references `party`(`party_id`), foreign key (`member_in_charge_id`) references `member`(`member_id`));",
    "output": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id = t2.region_id JOIN party_events AS t3 ON t2.party_id = t3.party_id WHERE t1.region_name = \"United Kingdom\" AND t3.Event_Name = \"Annaual Meeting\""
  },
  {
    "instruction": "What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?",
    "input": "create table `product_suppliers` (`product_id` integer not null, `supplier_id` integer not null, `date_supplied_from` datetime not null, `date_supplied_to` datetime, `total_amount_purchased` varchar(80), `total_value_purchased` decimal(19, 4), primary key (`product_id`, `supplier_id`), foreign key (`supplier_id`) references `suppliers`(`supplier_id`), foreign key (`product_id`) references `products`(`product_id`));create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 2 AND T2.product_price > (SELECT avg(product_price) FROM products)"
  },
  {
    "instruction": "What are the names of students who have more than one advisor?",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);",
    "output": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING count(*) > 1"
  },
  {
    "instruction": "Which employees were hired after September 7th, 1987?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM employees WHERE hire_date > '1987-09-07'"
  },
  {
    "instruction": "List the open date of open year of the shop named \"Apple\".",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT Open_Date, Open_Year FROM shop WHERE Shop_Name = \"Apple\""
  },
  {
    "instruction": "Show the names of journalists and the names of the events they reported in ascending order",
    "input": "create table \"news_report\" (\"journalist_ID\" int, \"Event_ID\" int, \"Work_Type\" text, primary key (\"journalist_ID\",\"Event_ID\"), foreign key (\"journalist_ID\") references `journalist`(\"journalist_ID\"), foreign key (\"Event_ID\") references `event`(\"Event_ID\"));create table \"event\" (\"Event_ID\" int, \"Date\" text, \"Venue\" text, \"Name\" text, \"Event_Attendance\" int, primary key (\"Event_ID\"));create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));",
    "output": "SELECT T3.Name, T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID ORDER BY T2.Event_Attendance ASC"
  },
  {
    "instruction": "For each zip code, what is the average mean temperature for all dates that start with '8'?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT zip_code, avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"
  },
  {
    "instruction": "How many different classes are there?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT class_code) FROM CLASS"
  },
  {
    "instruction": "What are the name, role code, and date of birth of the employee named 'Armani'?",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT employee_name, role_code, date_of_birth FROM Employees WHERE employee_Name = 'Armani'"
  },
  {
    "instruction": "What are the shipping agent names?",
    "input": "create table ref_shipping_agents (shipping_agent_code char(15) not null, shipping_agent_name varchar(255) not null, shipping_agent_description varchar(255) not null, primary key (shipping_agent_code));",
    "output": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;"
  },
  {
    "instruction": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.",
    "input": "create table `item` (`i_id` integer not null , `title` varchar(20) default null , primary key (`i_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));create table `item` (`i_id` integer not null , `title` varchar(20) default null , primary key (`i_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating) > 5"
  },
  {
    "instruction": "where is the director of \" The Past \" from",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.title = \"The Past\";"
  },
  {
    "instruction": "Show ids for all employees who don't have a certificate.",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
  },
  {
    "instruction": "Count the number of gymnasts.",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT count(*) FROM gymnast"
  },
  {
    "instruction": "Of all the claims, what was the earliest date when any claim was made?",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));",
    "output": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1"
  },
  {
    "instruction": "What are the first names and ages of all students who are playing both Football and Lacrosse?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT fname, age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName = \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName = \"Lacrosse\")"
  },
  {
    "instruction": "How many perpetrators are there?",
    "input": "create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT count(*) FROM perpetrator"
  },
  {
    "instruction": "What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT stu_fname, stu_lname, stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1"
  },
  {
    "instruction": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
    "input": "create table `payments` (`payment_id` integer primary key, `booking_id` integer, `customer_id` integer not null, `payment_type_code` varchar(15) not null, `amount_paid_in_full_yn` varchar(1), `payment_date` datetime, `amount_due` decimal(19, 4), `amount_paid` decimal(19, 4), foreign key (`booking_id`) references `bookings`(`booking_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT payment_date FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'"
  },
  {
    "instruction": "Show the names of members in ascending order of their rank in rounds.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Country\" text, \"College_ID\" int, primary key (\"Member_ID\"), foreign key (\"College_ID\") references `college`(\"College_ID\"));create table \"round\" (\"Round_ID\" int, \"Member_ID\" int, \"Decoration_Theme\" text, \"Rank_in_Round\" int, primary key (\"Member_ID\",\"Round_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"));",
    "output": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID ORDER BY Rank_in_Round ASC"
  },
  {
    "instruction": "Show the name and age for all male people who don't have a wedding.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Country\" text, \"Is_Male\" text, \"Age\" int, primary key (\"People_ID\"));create table \"wedding\" (\"Church_ID\" int, \"Male_ID\" int, \"Female_ID\" int, \"Year\" int, primary key (\"Church_ID\",\"Male_ID\",\"Female_ID\"), foreign key (\"Church_ID\") references `church`(\"Church_ID\"), foreign key (\"Male_ID\") references `people`(\"People_ID\"), foreign key (\"Female_ID\") references `people`(\"People_ID\"));",
    "output": "SELECT name, age FROM people WHERE is_male = 'T' AND people_id NOT IN (SELECT male_id FROM wedding)"
  },
  {
    "instruction": "At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.",
    "input": "create table visits_restaurant (stuid integer, resid integer, time timestamp, spent float, foreign key(stuid) references student(stuid), foreign key(resid) references restaurant(resid));create table restaurant (resid integer primary key, resname varchar(100), address varchar(100), rating integer);",
    "output": "SELECT Restaurant.ResName, sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;"
  },
  {
    "instruction": "Show the minimum, maximum, and average age for all people.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Country\" text, \"Is_Male\" text, \"Age\" int, primary key (\"People_ID\"));",
    "output": "SELECT min(age), max(age), avg(age) FROM people"
  },
  {
    "instruction": "give me the best restaurant in the bay area for american food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" );"
  },
  {
    "instruction": "What are the names of scientists who have not been assigned a project?",
    "input": "create table scientists (ssn int, name char(30) not null, primary key (ssn));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));",
    "output": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)"
  },
  {
    "instruction": "For each submission, find its author and acceptance result.",
    "input": "create table \"Acceptance\" (\"Submission_ID\" int, \"Workshop_ID\" int, \"Result\" text, primary key (\"Submission_ID\",\"Workshop_ID\"), foreign key (\"Submission_ID\") references `submission`(\"Submission_ID\"), foreign key (\"Workshop_ID\") references `workshop`(\"Workshop_ID\"));create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT T2.Author, T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID"
  },
  {
    "instruction": "What are the names of regions that were affected by the storm in which the most people died?",
    "input": "create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1"
  },
  {
    "instruction": "Show the date and venue of each workshop in ascending alphabetical order of the venue.",
    "input": "create table \"workshop\" (\"Workshop_ID\" int, \"Date\" text, \"Venue\" text, \"Name\" text, primary key (\"Workshop_ID\"));",
    "output": "SELECT Date, Venue FROM workshop ORDER BY Venue"
  },
  {
    "instruction": "what keywords are used by Luke Zettlemoyer",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Luke Zettlemoyer\";"
  },
  {
    "instruction": "How many employees do we have?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT count(*) FROM Employee"
  },
  {
    "instruction": "List all club names in descending alphabetical order.",
    "input": "create table \"club\" (\"Club_ID\" int, \"name\" text, \"Region\" text, \"Start_year\" text, primary key (\"Club_ID\"));",
    "output": "SELECT name FROM club ORDER BY name DESC"
  },
  {
    "instruction": "What are the names of the people who have no friends who are students?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.job = 'student'"
  },
  {
    "instruction": "Which bike traveled the most often in zip code 94002?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is highest rating for the most recent movie and when was it released?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT max(T1.stars), T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT max(YEAR) FROM Movie)"
  },
  {
    "instruction": "How many papers were published in nature communications 2015 conference ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"nature communications\";"
  },
  {
    "instruction": "What are the ids of the students who either registered or attended a course?",
    "input": "create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"
  },
  {
    "instruction": "Show the document name and the document date for all documents on project with details 'Graph Database project'.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));create table projects (project_id integer not null, project_details varchar(255), primary key (project_id));",
    "output": "SELECT document_name, document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'"
  },
  {
    "instruction": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT f_id FROM files WHERE formats = \"mp4\" UNION SELECT f_id FROM song WHERE resolution > 720"
  },
  {
    "instruction": "Return the decor of the room named \"Recluse and defiance\".",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT decor FROM Rooms WHERE roomName = \"Recluse and defiance\";"
  },
  {
    "instruction": "What is the last name of the artist who sang the most songs?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";"
  },
  {
    "instruction": "What is the most popular file format?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);",
    "output": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names and account balances of customers with the letter a in their names?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT cust_name, acc_bal FROM customer WHERE cust_name LIKE '%a%'"
  },
  {
    "instruction": "Datasets by jitendra malik",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"jitendra malik\";"
  },
  {
    "instruction": "Find the name of the students and their department names sorted by their total credits in ascending order.",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name, dept_name FROM student ORDER BY tot_cred"
  },
  {
    "instruction": "Find the names of nurses who are on call.",
    "input": "create table nurse (employeeid integer primary key not null, name varchar(30) not null, position varchar(30) not null, registered boolean not null, ssn integer not null);create table on_call (nurse integer not null, blockfloor integer not null, blockcode integer not null, oncallstart datetime not null, oncallend datetime not null, primary key(nurse, blockfloor, blockcode, oncallstart, oncallend), constraint fk_oncall_nurse_employeeid foreign key(nurse) references nurse(employeeid), constraint fk_oncall_block_floor foreign key(blockfloor, blockcode) references block(blockfloor, blockcode));",
    "output": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse"
  },
  {
    "instruction": "What are the names of all aicrafts that have never won any match?",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)"
  },
  {
    "instruction": "How many documents have expenses?",
    "input": "create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT count(*) FROM Documents_with_expenses"
  },
  {
    "instruction": "Return the name, location, and seating of the track that was opened in the most recent year.",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT name, LOCATION, seating FROM track ORDER BY year_opened DESC LIMIT 1"
  },
  {
    "instruction": "List the distinct director of all films.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT DISTINCT Director FROM film"
  },
  {
    "instruction": "What are the different types of vocals?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));",
    "output": "SELECT DISTINCT TYPE FROM vocals"
  },
  {
    "instruction": "What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\""
  },
  {
    "instruction": "Which colleges do the tryout players whose name starts with letter D go to?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT T1.cName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T2.pName LIKE 'D%'"
  },
  {
    "instruction": "List top papers for parsing",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "Find id of candidates whose assessment code is \"Pass\"?",
    "input": "create table candidate_assessments (candidate_id integer not null, qualification char(15) not null, assessment_date datetime not null, asessment_outcome_code char(15) not null, primary key (candidate_id, qualification), foreign key (candidate_id) references candidates (candidate_id));",
    "output": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\""
  },
  {
    "instruction": "What is the average number of points for players from the \"AIB\" club?",
    "input": "create table \"club\" (\"Club_ID\" int, \"name\" text, \"Region\" text, \"Start_year\" text, primary key (\"Club_ID\"));create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.name = \"AIB\""
  },
  {
    "instruction": "what cities in wyoming have the highest number of citizens",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"wyoming\" ) AND state_name = \"wyoming\";"
  },
  {
    "instruction": "What are the names and salaries of instructors who advise students in the Math department?",
    "input": "create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'"
  },
  {
    "instruction": "Find the names of all instructors in Comp. Sci. department with salary > 80000.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000"
  },
  {
    "instruction": "Which organisation type hires most research staff?",
    "input": "create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));create table `research_staff` (`staff_id` integer primary key, `employer_organisation_id` integer not null, `staff_details` varchar(255) not null, foreign key (`employer_organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many different departments are there in each school that has less than 5 apartments?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT dept_name), school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name) < 5"
  },
  {
    "instruction": "What are the names of the amenities that Smith Hall has?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall'"
  },
  {
    "instruction": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT T1.date_of_enrolment, T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.family_name = \"Zieme\" AND T2.personal_name = \"Bernie\""
  },
  {
    "instruction": "Find the name of department has the highest amount of students?",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the address and staff number of the shops that do not have any happy hour.",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Address\" text, \"Num_of_staff\" text, \"Score\" real, \"Open_Year\" text, primary key (\"Shop_ID\"));create table \"happy_hour\" (\"HH_ID\" int, \"Shop_ID\" int, \"Month\" text, \"Num_of_shaff_in_charge\" int, primary key (\"HH_ID\",\"Shop_ID\",\"Month\"), foreign key (\"Shop_ID\") references `shop`(\"Shop_ID\"));",
    "output": "SELECT address, num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)"
  },
  {
    "instruction": "Find the number of stores in each city.",
    "input": "create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));create table \"store_district\" (\"Store_ID\" int, \"District_ID\" int, primary key (\"Store_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`district_id`) references `district`(`district_id`));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT t3.headquartered_city, count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city"
  },
  {
    "instruction": "What are the names of products that have never been ordered?",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `production_type_code` varchar(15) not null, `unit_price` decimal(19, 4), `product_name` varchar(80), `product_color` varchar(20), `product_size` varchar(20), foreign key (`production_type_code`) references `product_categories`(`production_type_code`));create table `products` (`product_id` integer primary key, `parent_product_id` integer, `production_type_code` varchar(15) not null, `unit_price` decimal(19, 4), `product_name` varchar(80), `product_color` varchar(20), `product_size` varchar(20), foreign key (`production_type_code`) references `product_categories`(`production_type_code`));create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id"
  },
  {
    "instruction": "find the number of restaurant rated more than 3.5",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.rating > 3.5 AND t2.category_name = \"restaurant\";"
  },
  {
    "instruction": "What is the name of the bank branch with the greatest number of customers?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1"
  },
  {
    "instruction": "In 2014, what are the id and rank of the team that has the largest average number of attendance?",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT T2.team_id, T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;"
  },
  {
    "instruction": "How many actors have appeared in each musical?",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT T2.Name, COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID"
  },
  {
    "instruction": "Give the total money requested by entrepreneurs who are taller than 1.85.",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85"
  },
  {
    "instruction": "Find the name and partition id for users who tweeted less than twice.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));create table `tweets` (`id` bigint(20) not null, `uid` int(11) not null, `text` char(140) not null, `createdate` datetime default current_timestamp, primary key (`id`), foreign key (`uid`) references `user_profiles`(`uid`));",
    "output": "SELECT T1.name, T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count(*) < 2"
  },
  {
    "instruction": "I want the papers on keyphrase0 by brian curless",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"brian curless\" AND t5.keyphrasename = \"convolution\";"
  },
  {
    "instruction": "Where did sergey levine publish his last paper ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid, t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"sergey levine\" GROUP BY t3.venueid, t3.year ORDER BY t3.year DESC;"
  },
  {
    "instruction": "Show name and distance for all aircrafts.",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT name, distance FROM Aircraft"
  },
  {
    "instruction": "Which cities have at least one customer but no performer?",
    "input": "create table addresses (address_id varchar(100) not null, line_1 varchar(255), line_2 varchar(255), city_town varchar(255), state_county varchar(255), other_details varchar(255), primary key (address_id), unique (address_id));create table customers (customer_id varchar(100) not null, address_id integer not null, customer_name varchar(255), customer_phone varchar(255), customer_email_address varchar(255), other_details varchar(255), primary key (customer_id), unique (customer_id), foreign key (address_id) references addresses (address_id));create table addresses (address_id varchar(100) not null, line_1 varchar(255), line_2 varchar(255), city_town varchar(255), state_county varchar(255), other_details varchar(255), primary key (address_id), unique (address_id));create table performers (performer_id integer not null, address_id integer not null, customer_name varchar(255), customer_phone varchar(255), customer_email_address varchar(255), other_details varchar(255), primary key (performer_id), unique (performer_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID = T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID"
  },
  {
    "instruction": "Count the number of customers recorded.",
    "input": "create table customers (customer_id varchar(100) not null, address_id integer not null, customer_name varchar(255), customer_phone varchar(255), customer_email_address varchar(255), other_details varchar(255), primary key (customer_id), unique (customer_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT count(*) FROM CUSTOMERS"
  },
  {
    "instruction": "What is the average price of products with manufacturer codes equal to 2?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT avg(price) FROM products WHERE Manufacturer = 2"
  },
  {
    "instruction": "What are the names of different music genres?",
    "input": "create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));",
    "output": "SELECT Name FROM GENRE"
  },
  {
    "instruction": "What the full names, ids of each employee and the name of the country they are in?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));create table `locations` (`location_id` decimal(4, 0) not null default '0', `street_address` varchar(40) default null, `postal_code` varchar(12) default null, `city` varchar(30) not null, `state_province` varchar(25) default null, `country_id` varchar(2) default null, primary key (`location_id`), foreign key (`country_id`) references countries(`country_id`));create table `countries` (`country_id` varchar(2) not null, `country_name` varchar(40) default null, `region_id` decimal(10, 0) default null, primary key (`country_id`), foreign key (`region_id`) references regions (`region_id`));",
    "output": "SELECT T1.first_name, T1.last_name, T1.employee_id, T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id"
  },
  {
    "instruction": "List all the subject names.",
    "input": "create table `subjects` (`subject_id` integer primary key, `subject_name` varchar(120));",
    "output": "SELECT subject_name FROM SUBJECTS"
  },
  {
    "instruction": "How many colleges in total?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT count(*) FROM College"
  },
  {
    "instruction": "Find the first names of all instructors who have taught some course and the course description.",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T2.emp_fname, T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code"
  },
  {
    "instruction": "what is the largest state in the us",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "return me all the organizations in Databases area located in \" North America \" .",
    "input": "create table \"domain_author\" (\"aid\" int, \"did\" int, primary key (\"did\", \"aid\"), foreign key(\"aid\") references `author`(\"aid\"), foreign key(\"did\") references `domain`(\"did\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));",
    "output": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid WHERE t3.name = \"Databases\" AND t2.continent = \"North America\";"
  },
  {
    "instruction": "return me the number of organizations in Databases area located in \" North America \" .",
    "input": "create table \"domain_author\" (\"aid\" int, \"did\" int, primary key (\"did\", \"aid\"), foreign key(\"aid\") references `author`(\"aid\"), foreign key(\"did\") references `domain`(\"did\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid WHERE t3.name = \"Databases\" AND t2.continent = \"North America\";"
  },
  {
    "instruction": "What are all the distinct participant ids who attended any events?",
    "input": "create table participants_in_events (event_id integer not null, participant_id integer not null, primary key (event_id, participant_id), foreign key (participant_id) references participants (participant_id), foreign key (event_id) references events (event_id));",
    "output": "SELECT count(DISTINCT participant_id) FROM participants_in_Events"
  },
  {
    "instruction": "Return me the number of businesses that are restaurant .",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t2.category_name = \"restaurant\";"
  },
  {
    "instruction": "Find the policy type used by more than 4 customers.",
    "input": "create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));",
    "output": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*) > 4"
  },
  {
    "instruction": "List the countries having more than 4 addresses listed.",
    "input": "create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT country FROM addresses GROUP BY country HAVING count(address_id) > 4"
  },
  {
    "instruction": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT max(OMIM) FROM enzyme"
  },
  {
    "instruction": "What is the id of the shortest trip?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT id FROM trip ORDER BY duration LIMIT 1"
  },
  {
    "instruction": "Find the team that attended the least number of home games in 1980.",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;"
  },
  {
    "instruction": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));",
    "output": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported > ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )"
  },
  {
    "instruction": "What are all the document type codes and document type names?",
    "input": "create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));",
    "output": "SELECT document_type_code, document_type_name FROM Ref_document_types"
  },
  {
    "instruction": "What is the campus fee of \"San Francisco State University\" in year 2000?",
    "input": "create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Francisco State University\" AND t1.year = 2000"
  },
  {
    "instruction": "What are the destinations and number of flights to each one?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT destination, count(*) FROM Flight GROUP BY destination"
  },
  {
    "instruction": "How many hours do the players train on average?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT avg(HS) FROM Player"
  },
  {
    "instruction": "newest deep learning papers",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid, t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "How many times does ROY SWEAZY has reserved a room.",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));",
    "output": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\";"
  },
  {
    "instruction": "How many paper has Ed Desmond written about Semantic Parsing ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t1.paperid JOIN author AS t2 ON t3.authorid = t2.authorid WHERE t2.authorname = \"Ed Desmond\" AND t4.keyphrasename = \"Semantic Parsing\";"
  },
  {
    "instruction": "What are the names of the people who are older 40 but no friends under age 30?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)"
  },
  {
    "instruction": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT T1.cust_name, T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount) > 5000"
  },
  {
    "instruction": "What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000?",
    "input": "create table `product_suppliers` (`product_id` integer not null, `supplier_id` integer not null, `date_supplied_from` datetime not null, `date_supplied_to` datetime, `total_amount_purchased` varchar(80), `total_value_purchased` decimal(19, 4), primary key (`product_id`, `supplier_id`), foreign key (`supplier_id`) references `suppliers`(`supplier_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased) > 50000 OR avg(total_amount_purchased) < 30000"
  },
  {
    "instruction": "Show names of companies and that of employees in descending order of number of years working for that employee.",
    "input": "create table \"employment\" (\"Company_ID\" int, \"People_ID\" int, \"Year_working\" int, primary key (\"Company_ID\",\"People_ID\"), foreign key (\"Company_ID\") references `company`(\"Company_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Age\" int, \"Name\" text, \"Nationality\" text, \"Graduation_College\" text, primary key (\"People_ID\"));create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));",
    "output": "SELECT T3.Name, T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID ORDER BY T1.Year_working"
  },
  {
    "instruction": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
    "input": "create table \"injury_accident\" (\"game_id\" int, \"id\" int, \"Player\" text, \"Injury\" text, \"Number_of_matches\" text, \"Source\" text, primary key (\"id\"), foreign key (\"game_id\") references `game`(\"id\"));",
    "output": "SELECT player, number_of_matches, SOURCE FROM injury_accident WHERE injury != 'Knee problem'"
  },
  {
    "instruction": "Find the number of students who are older than 18 and do not have allergy to either food or animal.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT count(*) FROM Student WHERE age > 18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" OR T2.allergytype = \"animal\")"
  },
  {
    "instruction": "What are the name and phone of the customer with the most ordered product quantity?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(15), `customer_number` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_date` datetime not null, `order_status_code` varchar(15), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer not null , `order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(80), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT T1.customer_name, T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1"
  },
  {
    "instruction": "When was \" Kevin Spacey \" born ?",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT birth_year FROM actor WHERE name = \"actor_name0\";"
  },
  {
    "instruction": "Show the advisors of the students whose city of residence has city code \"BAL\".",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Advisor FROM STUDENT WHERE city_code = \"BAL\""
  },
  {
    "instruction": "Show the names and ids of tourist attractions that are visited at least two times.",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT T1.Name, T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) >= 2"
  },
  {
    "instruction": "What campuses are located in Los Angeles county and opened after 1950?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950"
  },
  {
    "instruction": "Show the lieutenant governor and comptroller from the democratic party.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT Lieutenant_Governor, Comptroller FROM party WHERE Party = \"Democratic\""
  },
  {
    "instruction": "What is the best french in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" );"
  },
  {
    "instruction": "Please list the location and the winning aircraft name.",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT T2.Location, T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft"
  },
  {
    "instruction": "What are the names of perpetrators whose country is not \"China\"?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Home Town\" text, primary key (\"People_ID\"));create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country != \"China\""
  },
  {
    "instruction": "List the name of tracks belongs to genre Rock or genre Jazz.",
    "input": "create table genres (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\""
  },
  {
    "instruction": "What is the name, city, country, and elevation for every airport in the city of New York?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT name, city, country, elevation FROM airports WHERE city = 'New York'"
  },
  {
    "instruction": "Find the distinct last names of the students who have class president votes.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_President_VOTE"
  },
  {
    "instruction": "What is the most common major among female (sex is F) students?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Major FROM STUDENT WHERE Sex = \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the total credits of courses provided by different department.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT sum(credits), dept_name FROM course GROUP BY dept_name"
  },
  {
    "instruction": "How many addresses have zip code 197?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1` varchar(120), `line_2` varchar(120), `line_3` varchar(120), `city` varchar(80), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT count(*) FROM ADDRESSES WHERE zip_postcode = \"197\""
  },
  {
    "instruction": "What is the average rating of songs for each language?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT avg(rating), languages FROM song GROUP BY languages"
  },
  {
    "instruction": "What papers were written on question answering this year ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"question answering\" AND t3.year = 2016;"
  },
  {
    "instruction": "how many major cities are in states bordering nebraska",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( city_name ) FROM city WHERE population > 150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"nebraska\" );"
  },
  {
    "instruction": "What is the school code of the accounting department?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT school_code FROM department WHERE dept_name = \"Accounting\""
  },
  {
    "instruction": "How many patents outcomes were listed for all the projects?",
    "input": "create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));",
    "output": "SELECT count(*) FROM Project_outcomes WHERE outcome_code = 'Patent'"
  },
  {
    "instruction": "Tell me the distinct block codes where some rooms are available.",
    "input": "create table room (roomnumber integer primary key not null, roomtype varchar(30) not null, blockfloor integer not null, blockcode integer not null, unavailable boolean not null, constraint fk_room_block_pk foreign key(blockfloor, blockcode) references block(blockfloor, blockcode));",
    "output": "SELECT DISTINCT blockcode FROM room WHERE unavailable = 0"
  },
  {
    "instruction": "What are the themes of parties ordered by the number of hosts in ascending manner?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC"
  },
  {
    "instruction": "List the name of all projects that are operated longer than the average working hours of all projects.",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT name FROM projects WHERE hours > (SELECT avg(hours) FROM projects)"
  },
  {
    "instruction": "what is the most dense state in the usa",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MAX ( density ) FROM state );"
  },
  {
    "instruction": "Find the number of students taught by the teacher KAWA GORDON.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"KAWA\" AND T2.lastname = \"GORDON\""
  },
  {
    "instruction": "How many students are affected by food related allergies?",
    "input": "create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = \"food\""
  },
  {
    "instruction": "How many events are there?",
    "input": "create table \"event\" (\"ID\" int, \"Name\" text, \"Stadium_ID\" int, \"Year\" text, primary key (\"ID\"), foreign key (`stadium_id`) references `stadium`(`id`));",
    "output": "SELECT count(*) FROM event"
  },
  {
    "instruction": "How many people are older than every engineer?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT count(*) FROM Person WHERE age > (SELECT max(age) FROM person WHERE job = 'engineer')"
  },
  {
    "instruction": "Return the name, phone number and email address for the customer with the most orders.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name, T1.customer_phone, T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?",
    "input": "create table `students` (`student_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(40), `last_name` varchar(40), `cell_mobile_number` varchar(40), `email_address` varchar(40), `date_first_rental` datetime, `date_left_university` datetime, `other_student_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT email_address FROM Students WHERE first_name = \"Emma\" AND last_name = \"Rohan\""
  },
  {
    "instruction": "What are the names of all the clubs starting with the oldest?",
    "input": "create table \"club\" (\"Club_ID\" int, \"name\" text, \"Region\" text, \"Start_year\" text, primary key (\"Club_ID\"));",
    "output": "SELECT name FROM club ORDER BY Start_year ASC"
  },
  {
    "instruction": "How many degrees were conferred in \"San Jose State University\" in 2000?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 2000"
  },
  {
    "instruction": "List all the event names by year from the most recent to the oldest.",
    "input": "create table \"event\" (\"ID\" int, \"Name\" text, \"Stadium_ID\" int, \"Year\" text, primary key (\"ID\"), foreign key (`stadium_id`) references `stadium`(`id`));",
    "output": "SELECT name FROM event ORDER BY YEAR DESC"
  },
  {
    "instruction": "Count the number of regions.",
    "input": "create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));",
    "output": "SELECT count(*) FROM region"
  },
  {
    "instruction": "List ids and details for all projects.",
    "input": "create table projects (project_id integer not null, project_details varchar(255), primary key (project_id));",
    "output": "SELECT project_id, project_details FROM Projects"
  },
  {
    "instruction": "What are the names of all students who took a class and the corresponding course descriptions?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T1.stu_fname, T1.stu_lname, T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code"
  },
  {
    "instruction": "Return the investors who have invested in two or more entrepreneurs.",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "Find the SSN and name of scientists who are assigned to the project with the longest hours.",
    "input": "create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table scientists (ssn int, name char(30) not null, primary key (ssn));create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT T3.ssn, T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT max(hours) FROM projects)"
  },
  {
    "instruction": "What is the id and detail of the vehicle used in lessons for most of the times?",
    "input": "create table `vehicles` (`vehicle_id` integer primary key, `vehicle_details` varchar(255));create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.vehicle_id, T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id = T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the average pages per minute color?",
    "input": "create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));",
    "output": "SELECT avg(pages_per_minute_color) FROM product"
  },
  {
    "instruction": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000"
  },
  {
    "instruction": "List the addresses of all the course authors or tutors.",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));",
    "output": "SELECT address_line_1 FROM Course_Authors_and_Tutors"
  },
  {
    "instruction": "Sort the list of names and costs of all procedures in the descending order of cost.",
    "input": "create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT name, cost FROM procedures ORDER BY cost DESC"
  },
  {
    "instruction": "What are the names of the directors who made exactly one movie excluding director NULL?",
    "input": "create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*) = 1"
  },
  {
    "instruction": "What are the first names of all students that are not enrolled in courses?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table enrolled_in (stuid integer, cid varchar(7), grade varchar(2), foreign key(stuid) references student(stuid), foreign key(cid) references course(cid), foreign key(grade) references gradeconversion(lettergrade));",
    "output": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)"
  },
  {
    "instruction": "Find all the songs that do not have a lead vocal.",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"lead\""
  },
  {
    "instruction": "which state has the highest peak in the country",
    "input": "create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain );"
  },
  {
    "instruction": "What are all the catalog entry names?",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT distinct(catalog_entry_name) FROM catalog_contents"
  },
  {
    "instruction": "What country is the artist who made the fewest songs from?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "Liwen Xiong publication 2015",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Liwen Xiong\" AND t3.year = 2015;"
  },
  {
    "instruction": "Which staff handled least number of payments? List the full name and the id.",
    "input": "create table staff (staff_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, address_id smallint unsigned not null, picture blob default null, email varchar(50) default null, store_id tinyint unsigned not null, active boolean not null default true, username varchar(16) not null, password varchar(40) default null, last_update timestamp not null default current_timestamp, primary key (staff_id), --FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (address_id) REFERENCES address (address_id));create table payment (payment_id smallint unsigned not null, customer_id smallint unsigned not null, staff_id tinyint unsigned not null, rental_id int default null, amount decimal(5, 2) not null, payment_date datetime not null, last_update timestamp default current_timestamp, primary key (payment_id), foreign key (rental_id) references rental (rental_id), foreign key (customer_id) references customer (customer_id), foreign key (staff_id) references staff (staff_id));",
    "output": "SELECT T1.first_name, T1.last_name, T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "Find the zip code in which the average mean visibility is lower than 10.",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles) < 10"
  },
  {
    "instruction": "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Airbus A340-300\""
  },
  {
    "instruction": "What is the most cited paper by ohad shamir ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "Return the themes of farm competitions, sorted by year ascending.",
    "input": "create table \"farm_competition\" (\"Competition_ID\" int, \"Year\" int, \"Theme\" text, \"Host_city_ID\" int, \"Hosts\" text, primary key (\"Competition_ID\"), foreign key (`host_city_id`) references `city`(`city_id`));",
    "output": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC"
  },
  {
    "instruction": "how high are the highest points of all the states",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_elevation FROM highlow;"
  },
  {
    "instruction": "Find the ids of orders whose status is 'Success'.",
    "input": "create table `actual_orders` (`actual_order_id` integer primary key, `order_status_code` varchar(10) not null, `regular_order_id` integer not null, `actual_order_date` datetime, foreign key (`regular_order_id`) references `regular_orders`(`regular_order_id`));",
    "output": "SELECT actual_order_id FROM actual_orders WHERE order_status_code = 'Success'"
  },
  {
    "instruction": "what is the largest city in a state that borders california",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" );"
  },
  {
    "instruction": "List member names and their party names.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT T1.member_name, T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id"
  },
  {
    "instruction": "What are the different cities where people live?",
    "input": "create table addresses (address_id integer not null, line_1 varchar(80), line_2 varchar(80), city varchar(50), zip_postcode char(20), state_province_county varchar(50), country varchar(50), primary key (address_id));create table people_addresses (person_address_id integer not null, person_id integer not null, address_id integer not null, date_from datetime, date_to datetime, primary key (person_address_id), foreign key (person_id) references people (person_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id"
  },
  {
    "instruction": "What are the companies of entrepreneurs, ordered descending by amount of money requested?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC"
  },
  {
    "instruction": "What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);",
    "output": "SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
  },
  {
    "instruction": "Who are Noah A Smith 's coauthors",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Noah A Smith\";"
  },
  {
    "instruction": "What is the description of document type 'Paper'?",
    "input": "create table ref_document_types (document_type_code char(15) not null, document_type_description varchar(255) not null, primary key (document_type_code));",
    "output": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";"
  },
  {
    "instruction": "Most cited papers on parsing",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "which state has the highest elevation",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Find the ids and names of members who are under age 30 or with black membership card.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Membership_card\" text, \"Age\" int, \"Time_of_purchase\" int, \"Level_of_membership\" int, \"Address\" text, primary key (\"Member_ID\"));",
    "output": "SELECT name, member_id FROM member WHERE Membership_card = 'Black' OR age < 30"
  },
  {
    "instruction": "Find the city and state of the bank branch named morningside.",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT city, state FROM bank WHERE bname = 'morningside'"
  },
  {
    "instruction": "What is the total likes on tips about \" Cafe Zinho \"",
    "input": "create table \"tip\" (\"tip_id\" int, \"business_id\" text, \"text\" text, \"user_id\" text, \"likes\" int, \"year\" int, \"month\" text, primary key(\"tip_id\") foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Cafe Zinho\";"
  },
  {
    "instruction": "What are the minimum and maximum crime rate of counties?",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT min(Crime_rate), max(Crime_rate) FROM county_public_safety"
  },
  {
    "instruction": "What is the most common maximum page size?",
    "input": "create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));",
    "output": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many different cities do people originate from?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT count(DISTINCT city) FROM Person"
  },
  {
    "instruction": "Find the number of routes from the United States to Canada.",
    "input": "create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')"
  },
  {
    "instruction": "What are the names of the physician who prescribed the highest dose?",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));",
    "output": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1"
  },
  {
    "instruction": "What is the first name of the band mate who perfomed in the most songs?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate = t2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Give the distinct names of wines made before 2000 or after 2010.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT Name FROM WINE WHERE YEAR < 2000 OR YEAR > 2010"
  },
  {
    "instruction": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));create table medication (code integer primary key not null, name varchar(30) not null, brand varchar(30) not null, description varchar(30) not null);",
    "output": "SELECT DISTINCT T1.name, T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand = \"X\""
  },
  {
    "instruction": "How many languages are in these films?",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));",
    "output": "SELECT count(DISTINCT language_id) FROM film"
  },
  {
    "instruction": "How many devices are there?",
    "input": "create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));",
    "output": "SELECT count(*) FROM device"
  },
  {
    "instruction": "What are the maximum and minimum week on top of all volumes?",
    "input": "create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT max(Weeks_on_Top), min(Weeks_on_Top) FROM volume"
  },
  {
    "instruction": "What are the titles of all albums that start with A in alphabetical order?",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;"
  },
  {
    "instruction": "Show the names and heights of buildings with at least two institutions founded after 1880.",
    "input": "create table \"building\" (\"building_id\" text, \"Name\" text, \"Street_address\" text, \"Years_as_tallest\" text, \"Height_feet\" int, \"Floors\" int, primary key(\"building_id\"));create table \"Institution\" (\"Institution_id\" text, \"Institution\" text, \"Location\" text, \"Founded\" real, \"Type\" text, \"Enrollment\" int, \"Team\" text, \"Primary_Conference\" text, \"building_id\" text, primary key(\"Institution_id\"), foreign key (\"building_id\") references \"building\"(\"building_id\"));",
    "output": "SELECT T1.name, T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880 GROUP BY T1.building_id HAVING count(*) >= 2"
  },
  {
    "instruction": "Find the city and name of bank branches that provide business loans.",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT T1.bname, T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T2.loan_type = 'Business'"
  },
  {
    "instruction": "which rivers run through the state with the largest city in the us",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city ) );"
  },
  {
    "instruction": "For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons.",
    "input": "create table postseason (year integer, round text, team_id_winner text, league_id_winner text, team_id_loser text, league_id_loser text, wins integer, losses integer, ties integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT count(*), T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year"
  },
  {
    "instruction": "How many distinct publication dates are there in our record?",
    "input": "create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));",
    "output": "SELECT COUNT (DISTINCT Publication_Date) FROM publication"
  },
  {
    "instruction": "In February, which city marks the highest temperature?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"temperature\" (\"City_ID\" int, \"Jan\" real, \"Feb\" real, \"Mar\" real, \"Apr\" real, \"Jun\" real, \"Jul\" real, \"Aug\" real, \"Sep\" real, \"Oct\" real, \"Nov\" real, \"Dec\" real, primary key (\"City_ID\"), foreign key (`city_id`) references `city`(`city_id`));",
    "output": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id ORDER BY T2.Feb DESC LIMIT 1"
  },
  {
    "instruction": "List official names of cities in descending order of population.",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT Official_Name FROM city ORDER BY Population DESC"
  },
  {
    "instruction": "List the names and birthdays of the top five players in terms of potential.",
    "input": "create table `player` (`id`\tinteger primary key autoincrement, `player_api_id`\tinteger unique, `player_name`\ttext, `player_fifa_api_id`\tinteger unique, `birthday`\ttext, `height`\tinteger, `weight`\tinteger);create table \"Player_Attributes\" (`id`\tinteger primary key autoincrement, `player_fifa_api_id`\tinteger, `player_api_id`\tinteger, `date`\ttext, `overall_rating`\tinteger, `potential`\tinteger, `preferred_foot`\ttext, `attacking_work_rate`\ttext, `defensive_work_rate`\ttext, `crossing`\tinteger, `finishing`\tinteger, `heading_accuracy`\tinteger, `short_passing`\tinteger, `volleys`\tinteger, `dribbling`\tinteger, `curve`\tinteger, `free_kick_accuracy`\tinteger, `long_passing`\tinteger, `ball_control`\tinteger, `acceleration`\tinteger, `sprint_speed`\tinteger, `agility`\tinteger, `reactions`\tinteger, `balance`\tinteger, `shot_power`\tinteger, `jumping`\tinteger, `stamina`\tinteger, `strength`\tinteger, `long_shots`\tinteger, `aggression`\tinteger, `interceptions`\tinteger, `positioning`\tinteger, `vision`\tinteger, `penalties`\tinteger, `marking`\tinteger, `standing_tackle`\tinteger, `sliding_tackle`\tinteger, `gk_diving`\tinteger, `gk_handling`\tinteger, `gk_kicking`\tinteger, `gk_positioning`\tinteger, `gk_reflexes`\tinteger, foreign key(`player_fifa_api_id`) references `player`(`player_fifa_api_id`), foreign key(`player_api_id`) references `player`(`player_api_id`));",
    "output": "SELECT DISTINCT T1.player_name, T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY potential DESC LIMIT 5"
  },
  {
    "instruction": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"temperature\" (\"City_ID\" int, \"Jan\" real, \"Feb\" real, \"Mar\" real, \"Apr\" real, \"Jun\" real, \"Jul\" real, \"Aug\" real, \"Sep\" real, \"Oct\" real, \"Nov\" real, \"Dec\" real, primary key (\"City_ID\"), foreign key (`city_id`) references `city`(`city_id`));create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));",
    "output": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Feb > T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city"
  },
  {
    "instruction": "What is all the information about employees hired before June 21, 2002?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM employees WHERE hire_date < '2002-06-21'"
  },
  {
    "instruction": "Find the name and id of the top 3 expensive rooms.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
  },
  {
    "instruction": "Return the issue date of the volume that has spent the fewest weeks on top.",
    "input": "create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1"
  },
  {
    "instruction": "How much was the budget of \" Finding Nemo \"",
    "input": "create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT budget FROM movie WHERE title = \"Finding Nemo\";"
  },
  {
    "instruction": "how many rivers are in idaho",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( river_name ) FROM river WHERE traverse = \"idaho\";"
  },
  {
    "instruction": "What are the names of documents that do not have any images?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `document_sections` (`section_id` integer primary key, `document_code` varchar(15) not null, `section_sequence` integer, `section_code` varchar(20), `section_title` varchar(80), foreign key (`document_code`) references `documents`(`document_code`));create table `document_sections_images` (`section_id` integer not null, `image_id` integer not null, primary key (`section_id`,`image_id`), foreign key (`section_id`) references `document_sections`(`section_id`), foreign key (`image_id`) references `images`(`image_id`));",
    "output": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id"
  },
  {
    "instruction": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)"
  },
  {
    "instruction": "Find the names of customers whose name contains \"Diana\".",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));",
    "output": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\""
  },
  {
    "instruction": "Show the distinct themes of journals.",
    "input": "create table \"journal\" (\"Journal_ID\" int, \"Date\" text, \"Theme\" text, \"Sales\" int, primary key (\"Journal_ID\"));",
    "output": "SELECT DISTINCT Theme FROM journal"
  },
  {
    "instruction": "What are the carriers of devices that are in stock in more than a single shop?",
    "input": "create table \"stock\" (\"Shop_ID\" int, \"Device_ID\" int, \"Quantity\" int, primary key (\"Shop_ID\",\"Device_ID\"), foreign key (`shop_id`) references `shop`(`shop_id`), foreign key (`device_id`) references `device`(`device_id`));create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));",
    "output": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*) > 1"
  },
  {
    "instruction": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT T1.account_id, T1.date_account_opened, T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'"
  },
  {
    "instruction": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT address_line_1, address_line_2 FROM customers WHERE email_address = \"vbogisich@example.org\""
  },
  {
    "instruction": "Show all distinct publishers for books.",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT DISTINCT publisher FROM book_club"
  },
  {
    "instruction": "how many major cities are in texas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( city_name ) FROM city WHERE population > 150000 AND state_name = \"texas\";"
  },
  {
    "instruction": "How many documents were shipped by USPS?",
    "input": "create table ref_shipping_agents (shipping_agent_code char(15) not null, shipping_agent_name varchar(255) not null, shipping_agent_description varchar(255) not null, primary key (shipping_agent_code));create table documents (document_id integer not null, document_status_code char(15) not null, document_type_code char(15) not null, shipping_agent_code char(15), receipt_date datetime, receipt_number varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (document_status_code) references ref_document_status (document_status_code), foreign key (shipping_agent_code) references ref_shipping_agents (shipping_agent_code));",
    "output": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
  },
  {
    "instruction": "Show all video game types and the number of video games in each type.",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT gtype, count(*) FROM Video_games GROUP BY gtype"
  },
  {
    "instruction": "how many places for chinese food are there in the bay area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"chinese\";"
  },
  {
    "instruction": "Which status code is the most common of all the bookings?",
    "input": "create table bookings (booking_id integer not null , customer_id integer not null, workshop_group_id varchar(100) not null, status_code char(15) not null, store_id integer not null, order_date datetime not null, planned_delivery_date datetime not null, actual_delivery_date datetime not null, other_order_details varchar(255), primary key (booking_id), unique (booking_id), foreign key (customer_id) references clients (client_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id));",
    "output": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of the clients who do not have any booking?",
    "input": "create table clients (client_id integer not null, address_id integer not null, customer_email_address varchar(255), customer_name varchar(255), customer_phone varchar(255), other_details varchar(255), primary key (client_id), unique (client_id), foreign key (address_id) references addresses (address_id));create table bookings (booking_id integer not null , customer_id integer not null, workshop_group_id varchar(100) not null, status_code char(15) not null, store_id integer not null, order_date datetime not null, planned_delivery_date datetime not null, actual_delivery_date datetime not null, other_order_details varchar(255), primary key (booking_id), unique (booking_id), foreign key (customer_id) references clients (client_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id));create table clients (client_id integer not null, address_id integer not null, customer_email_address varchar(255), customer_name varchar(255), customer_phone varchar(255), other_details varchar(255), primary key (client_id), unique (client_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID"
  },
  {
    "instruction": "Return the lot details of lots that belong to investors with details \"l\"?",
    "input": "create table `investors` (`investor_id` integer primary key, `investor_details` varchar(255));create table `lots` (`lot_id` integer primary key, `investor_id` integer not null, `lot_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`));",
    "output": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\""
  },
  {
    "instruction": "What are the details of the three most expensive hotels?",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3"
  },
  {
    "instruction": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT College FROM match_season WHERE POSITION = \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION = \"Defender\""
  },
  {
    "instruction": "Find the driver id and number of races of all drivers who have at most participated in 30 races?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT T1.driverid, count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*) <= 30"
  },
  {
    "instruction": "Which policy type has the most records in the database?",
    "input": "create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));",
    "output": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List today 's journals",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT journalid FROM paper WHERE YEAR = 2011 GROUP BY journalid;"
  },
  {
    "instruction": "What is the city with the most number of flagship stores?",
    "input": "create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));create table \"store_district\" (\"Store_ID\" int, \"District_ID\" int, primary key (\"Store_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`district_id`) references `district`(`district_id`));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "For each team, return the team name, id and the maximum salary among the team.",
    "input": "create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);create table salary (year integer, team_id text, league_id text, player_id text, salary integer);",
    "output": "SELECT T1.name, T1.team_id, max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id;"
  },
  {
    "instruction": "display those departments where more than ten employees work who got a commission percentage.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10"
  },
  {
    "instruction": "Who are the members of the club named \"Hopkins Student Enterprises\"? Show the last name.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\""
  },
  {
    "instruction": "How many professors are teaching class with code ACCT-211?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE = \"ACCT-211\""
  },
  {
    "instruction": "what is the highest point in the us",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?",
    "input": "create table `organizations` (`organization_id` integer primary key, `date_formed` datetime, `organization_name` varchar(255), `uk_vat_number` varchar(20));create table `organization_contact_individuals` (`individual_id` integer not null, `organization_id` integer not null, `date_contact_from` datetime not null, `date_contact_to` datetime, primary key (`individual_id`,`organization_id`), foreign key (`organization_id`) references `organizations`(`organization_id`), foreign key (`individual_id`) references `individuals`(`individual_id`));create table `individuals` (`individual_id` integer primary key, `individual_first_name` varchar(80), `individual_middle_name` varchar(80), `inidividual_phone` varchar(80), `individual_email` varchar(80), `individual_address` varchar(255), `individual_last_name` varchar(80));",
    "output": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1"
  },
  {
    "instruction": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?",
    "input": "create table `detention` (`detention_id` integer primary key, `detention_type_code` varchar(10) not null, `teacher_id` integer, `datetime_detention_start` datetime, `datetime_detention_end` datetime, `detention_summary` varchar(255), `other_details` varchar(255), foreign key (`detention_type_code`) references `ref_detention_type`(`detention_type_code`), foreign key (`teacher_id`) references `teachers`(`teacher_id`));create table `teachers` (`teacher_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `gender` varchar(1), `cell_mobile_number` varchar(40), `email_address` varchar(40), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.teacher_id, T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code = \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "who is the most published author in syntactic parsing ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "How many actors are in the movie \" Saving Private Ryan \" ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t3.title = \"Saving Private Ryan\";"
  },
  {
    "instruction": "What is the name of the customer that made the order with the largest quantity?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t3.order_quantity = ( SELECT max(order_quantity) FROM order_items)"
  },
  {
    "instruction": "Who was the actor that played \" Alan Turing \" in the movie \" The Imitation Game \" ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t2.role = \"Alan Turing\" AND t3.title = \"The Imitation Game\";"
  },
  {
    "instruction": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
    "input": "create table \"department\" (\"Department_ID\" int, \"Name\" text, \"Creation\" text, \"Ranking\" int, \"Budget_in_Billions\" real, \"Num_Employees\" real, primary key (\"Department_ID\"));create table \"management\" (\"department_ID\" int, \"head_ID\" int, \"temporary_acting\" text, primary key (\"Department_ID\",\"head_ID\"), foreign key (\"Department_ID\") references `department`(\"Department_ID\"), foreign key (\"head_ID\") references `head`(\"head_ID\"));create table \"head\" (\"head_ID\" int, \"name\" text, \"born_state\" text, \"age\" real, primary key (\"head_ID\"));create table \"department\" (\"Department_ID\" int, \"Name\" text, \"Creation\" text, \"Ranking\" int, \"Budget_in_Billions\" real, \"Num_Employees\" real, primary key (\"Department_ID\"));create table \"management\" (\"department_ID\" int, \"head_ID\" int, \"temporary_acting\" text, primary key (\"Department_ID\",\"head_ID\"), foreign key (\"Department_ID\") references `department`(\"Department_ID\"), foreign key (\"head_ID\") references `head`(\"head_ID\"));create table \"head\" (\"head_ID\" int, \"name\" text, \"born_state\" text, \"age\" real, primary key (\"head_ID\"));",
    "output": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'"
  },
  {
    "instruction": "convolution papers by brian curless",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"brian curless\" AND t5.keyphrasename = \"convolution\";"
  },
  {
    "instruction": "What are the titles of all movies that have between 3 and 5 stars?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5"
  },
  {
    "instruction": "List the number of invoices from the US, grouped by state.",
    "input": "create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state;"
  },
  {
    "instruction": "what states surround kentucky",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "How many classes does the professor whose last name is Graztevski teach?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'"
  },
  {
    "instruction": "What are the details of all products?",
    "input": "create table `products` (`product_id` integer primary key, `product_details` varchar(255));",
    "output": "SELECT DISTINCT product_details FROM products"
  },
  {
    "instruction": "Find the grade taught in classroom 103.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT grade FROM list WHERE classroom = 103"
  },
  {
    "instruction": "What are the product id and product type of the cheapest product?",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT product_id, product_type_code FROM products ORDER BY product_price LIMIT 1"
  },
  {
    "instruction": "Show ids for all transactions whose amounts are greater than the average.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > (SELECT avg(transaction_amount) FROM Financial_transactions)"
  },
  {
    "instruction": "Does brian curless do convolution ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"brian curless\" AND t5.keyphrasename = \"convolution\";"
  },
  {
    "instruction": "What are the titles of albums by the artist \"AC/DC\"?",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));",
    "output": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"AC/DC\""
  },
  {
    "instruction": "Show the product name and total order quantity for each product.",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(15), `product_name` varchar(80), `product_price` double null);create table `order_items` (`order_item_id` integer not null , `order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(80), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT T1.product_name, sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id"
  },
  {
    "instruction": "What is the first and last name of the student who played the most sports?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T2.Fname, T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show all artist names who didn't have an exhibition in 2004.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004"
  },
  {
    "instruction": "How many albums does Billy Cobham has?",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);create table artists (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"
  },
  {
    "instruction": "What is the description of the club named \"Tennis Club\"?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT clubdesc FROM club WHERE clubname = \"Tennis Club\""
  },
  {
    "instruction": "How many Semantic Parsing papers has Ed Desmond written ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t1.paperid JOIN author AS t2 ON t3.authorid = t2.authorid WHERE t2.authorname = \"Ed Desmond\" AND t4.keyphrasename = \"Semantic Parsing\";"
  },
  {
    "instruction": "Which club has the most members majoring in \"600\"?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.major = \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many neighbourhoods have a business with rating 5 in Madison ?",
    "input": "create table \"neighbourhood\" (\"id\" int, \"business_id\" text, \"neighbourhood_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.neighbourhood_name ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id = t2.business_id WHERE t2.city = \"Madison\" AND t2.rating = 5;"
  },
  {
    "instruction": "what states have rivers named ohio",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE river_name = \"ohio\";"
  },
  {
    "instruction": "give me some good arabic restaurants in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Which country has at most 3 stadiums listed?",
    "input": "create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));",
    "output": "SELECT country FROM stadium GROUP BY country HAVING count(*) <= 3"
  },
  {
    "instruction": "Give me the name and description of the location with code x.",
    "input": "create table ref_locations (location_code char(15) not null, location_name varchar(255) not null, location_description varchar(255) not null, primary key (location_code));",
    "output": "SELECT location_name, location_description FROM Ref_locations WHERE location_code = \"x\""
  },
  {
    "instruction": "What is the document type code with most number of documents?",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the name and rank of every company ordered by descending number of sales?",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT company, rank FROM company ORDER BY Sales_billion DESC"
  },
  {
    "instruction": "What are all the breweries in \" Los Angeles \" ?",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"breweries\";"
  },
  {
    "instruction": "list names of all departments ordered by their names.",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT dept_name FROM department ORDER BY dept_name"
  },
  {
    "instruction": "What is the party of the representative that has the smallest number of votes.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Representative_ID\" int, \"Date\" text, \"Votes\" real, \"Vote_Percent\" real, \"Seats\" real, \"Place\" real, primary key (\"Election_ID\"), foreign key (\"Representative_ID\") references `representative`(\"Representative_ID\"));create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));",
    "output": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes ASC LIMIT 1"
  },
  {
    "instruction": "Count the number of distinct product types.",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT count(DISTINCT product_type_code) FROM products"
  },
  {
    "instruction": "Count the number of programs.",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));",
    "output": "SELECT count(*) FROM program"
  },
  {
    "instruction": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'"
  },
  {
    "instruction": "what is the highest elevation in the united states",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT MAX ( highest_elevation ) FROM highlow;"
  },
  {
    "instruction": "Which college have both players with position midfielder and players with position defender?",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT College FROM match_season WHERE POSITION = \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION = \"Defender\""
  },
  {
    "instruction": "Find the name of scientists who are not assigned to any project.",
    "input": "create table scientists (ssn int, name char(30) not null, primary key (ssn));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));",
    "output": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)"
  },
  {
    "instruction": "What are the course names for courses taught on MTW?",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT CName FROM COURSE WHERE Days = \"MTW\""
  },
  {
    "instruction": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.",
    "input": "create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));",
    "output": "SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000"
  },
  {
    "instruction": "what are the populations of states through which the mississippi river run",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );"
  },
  {
    "instruction": "Count the number of distinct company industries.",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT count(DISTINCT Industry) FROM Companies"
  },
  {
    "instruction": "What is the total and maximum duration for all trips with the bike id 636?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT sum(duration), max(duration) FROM trip WHERE bike_id = 636"
  },
  {
    "instruction": "Find the last name and age of the student who has allergy to both milk and cat.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT lname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")"
  },
  {
    "instruction": "How many artists do we have?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT count(*) FROM artist"
  },
  {
    "instruction": "which states does the longest river run through",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );"
  },
  {
    "instruction": "What are the names of people who are not entrepreneurs?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)"
  },
  {
    "instruction": "how many rivers does idaho have",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( river_name ) FROM river WHERE traverse = \"idaho\";"
  },
  {
    "instruction": "How many technicians are there?",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT count(*) FROM technician"
  },
  {
    "instruction": "What are the guest first name, start date, and end date of each apartment booking?",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table guests (guest_id integer not null , gender_code char(1), guest_first_name varchar(80), guest_last_name varchar(80), date_of_birth datetime, primary key (guest_id), unique (guest_id));",
    "output": "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id"
  },
  {
    "instruction": "Which game type has least number of games?",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.",
    "input": "create table locations (location_id integer not null, location_name varchar(255), address varchar(255), other_details varchar(255), primary key (location_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"254 Ottilie Junction\" OR T2.How_to_Get_There = \"bus\""
  },
  {
    "instruction": "what is the biggest city in the usa",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );"
  },
  {
    "instruction": "Find the category descriptions of the products whose descriptions include letter 't'.",
    "input": "create table `ref_product_categories` (`product_category_code` varchar(15) primary key, `product_category_description` varchar(80), `unit_of_measure` varchar(20));create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%'"
  },
  {
    "instruction": "Sort all the rooms according to the price. Just report the room names.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName FROM Rooms ORDER BY basePrice;"
  },
  {
    "instruction": "what is the number of restaurant in Texas",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.state = \"Texas\" AND t2.category_name = \"restaurant\";"
  },
  {
    "instruction": "Find the brand and name for each camera lens, and sort in descending order of maximum aperture.",
    "input": "create table \"camera_lens\" (\"id\" int, \"brand\" text, \"name\" text, \"focal_length_mm\" real, \"max_aperture\" real, primary key(\"id\"));",
    "output": "SELECT brand, name FROM camera_lens ORDER BY max_aperture DESC"
  },
  {
    "instruction": "what keyphrase does Brian DeRenzi write about that gets most citations ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphrasename, SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;"
  },
  {
    "instruction": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT max(T2.fastestlapspeed), T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"
  },
  {
    "instruction": "List the names of phones that are not on any market.",
    "input": "create table \"phone\" (\"Name\" text, \"Phone_ID\" int, \"Memory_in_G\" int, \"Carrier\" text, \"Price\" real, primary key (\"Phone_ID\"));create table \"phone_market\" (\"Market_ID\" int, \"Phone_ID\" text, \"Num_of_stock\" int, primary key (\"Market_ID\",\"Phone_ID\"), foreign key (\"Market_ID\") references `market`(\"Market_ID\"), foreign key (\"Phone_ID\") references `phone`(\"Phone_ID\"));",
    "output": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)"
  },
  {
    "instruction": "What is the last name of the author that has published the most papers?",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.fname, t1.lname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many video games exist?",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT count(*) FROM Video_games"
  },
  {
    "instruction": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
    "input": "create table \"Institution\" (\"Institution_id\" text, \"Institution\" text, \"Location\" text, \"Founded\" real, \"Type\" text, \"Enrollment\" int, \"Team\" text, \"Primary_Conference\" text, \"building_id\" text, primary key(\"Institution_id\"), foreign key (\"building_id\") references \"building\"(\"building_id\"));",
    "output": "SELECT TYPE FROM institution WHERE founded > 1990 AND enrollment >= 1000"
  },
  {
    "instruction": "Count the number of stores the chain South has.",
    "input": "create table `department_stores` (`dept_store_id` integer primary key, `dept_store_chain_id` integer, `store_name` varchar(80), `store_address` varchar(255), `store_phone` varchar(80), `store_email` varchar(80), foreign key (`dept_store_chain_id`) references `department_store_chain`(`dept_store_chain_id`));create table `department_store_chain` (`dept_store_chain_id` integer primary key, `dept_store_chain_name` varchar(80));",
    "output": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE T2.dept_store_chain_name = \"South\""
  },
  {
    "instruction": "For each start station id, what is its name, longitude and average duration of trips started there?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT T1.name, T1.long, avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id"
  },
  {
    "instruction": "What is the first and last name of the faculty participating in the most activities?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));",
    "output": "SELECT T1.fname, T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many drivers did not race in 2009?",
    "input": "create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )"
  },
  {
    "instruction": "Find the count of universities whose campus fee is greater than the average campus fee.",
    "input": "create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));",
    "output": "SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)"
  },
  {
    "instruction": "What is the type of allergy Cat?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT allergytype FROM Allergy_type WHERE allergy = \"Cat\""
  },
  {
    "instruction": "How many apartments do not have any facility?",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));create table apartment_facilities (apt_id integer not null, facility_code char(15) not null, primary key (apt_id, facility_code), foreign key (apt_id) references apartments (apt_id));",
    "output": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)"
  },
  {
    "instruction": "return me the number of the organizations in \" North America \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));",
    "output": "SELECT COUNT ( DISTINCT name ) FROM organization WHERE continent = \"North America\";"
  },
  {
    "instruction": "How many flights have a velocity larger than 200?",
    "input": "create table \"flight\" (\"id\" int, \"Vehicle_Flight_number\" text, \"Date\" text, \"Pilot\" text, \"Velocity\" real, \"Altitude\" real, \"airport_id\" int, \"company_id\" int, primary key (\"id\"), foreign key (\"airport_id\") references `airport`(\"id\"), foreign key (\"company_id\") references `operate_company`(\"id\"));",
    "output": "SELECT count(*) FROM flight WHERE velocity > 200"
  },
  {
    "instruction": "List the names of the city with the top 5 white percentages.",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));",
    "output": "SELECT Name FROM city ORDER BY White DESC LIMIT 5"
  },
  {
    "instruction": "What is the department name of the students with lowest gpa belongs to?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY stu_gpa LIMIT 1"
  },
  {
    "instruction": "name all the rivers in illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = \"illinois\";"
  },
  {
    "instruction": "How many clubs does \"Linda Smith\" have membership for?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Linda\" AND t3.lname = \"Smith\""
  },
  {
    "instruction": "Show all the Store_Name of drama workshop groups.",
    "input": "create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT Store_Name FROM Drama_Workshop_Groups"
  },
  {
    "instruction": "List the campuses in Los Angeles county.",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE county = \"Los Angeles\""
  },
  {
    "instruction": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT T2.firstname, T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"EVELINA\" AND T1.lastname = \"BROMLEY\""
  },
  {
    "instruction": "What is the total number of companies?",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT count(*) FROM company"
  },
  {
    "instruction": "Which party has the largest number of delegates?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the card type code with most number of cards?",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many female people are older than 30 in our record?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Country\" text, \"Is_Male\" text, \"Age\" int, primary key (\"People_ID\"));",
    "output": "SELECT count(*) FROM people WHERE is_male = 'F' AND age > 30"
  },
  {
    "instruction": "return me the conferences, which have papers by \" H. V. Jagadish \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\";"
  },
  {
    "instruction": "How many students are there in each major?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*), major FROM student GROUP BY major"
  },
  {
    "instruction": "What is the total amount of grant money for research?",
    "input": "create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));create table `organisation_types` (`organisation_type` varchar(10) primary key, `organisation_type_description` varchar(255) not null);",
    "output": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type WHERE T3.organisation_type_description = 'Research'"
  },
  {
    "instruction": "Which flag is most widely used among all ships?",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));",
    "output": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS = 'Third-rate ship of the line'"
  },
  {
    "instruction": "What are all the characteristic names of product \"sesame\"?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\""
  },
  {
    "instruction": "find the names of people who are taller than 200 or lower than 190.",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));",
    "output": "SELECT name FROM people WHERE height > 200 OR height < 190"
  },
  {
    "instruction": "Count the number of tracks.",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT count(*) FROM track"
  },
  {
    "instruction": "What are the names of scientists who are not working on the project with the most hours?",
    "input": "create table scientists (ssn int, name char(30) not null, primary key (ssn));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table scientists (ssn int, name char(30) not null, primary key (ssn));create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT max(hours) FROM projects)"
  },
  {
    "instruction": "return me the number of keywords in VLDB conference .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid WHERE t2.name = \"VLDB\";"
  },
  {
    "instruction": "Show the most common apartment type code among apartments with more than 1 bathroom.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the birthdays of people in ascending order of height?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));",
    "output": "SELECT Birth_Date FROM People ORDER BY Height ASC"
  },
  {
    "instruction": "Find the id of the order made most recently.",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1"
  },
  {
    "instruction": "What are the ids of all students who played video games and sports?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games"
  },
  {
    "instruction": "Give me the start station and end station for the trips with the three oldest id.",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT start_station_name, end_station_name FROM trip ORDER BY id LIMIT 3"
  },
  {
    "instruction": "display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id, job_id FROM employees WHERE salary < ( SELECT min(salary) FROM employees WHERE job_id = 'MK_MAN' )"
  },
  {
    "instruction": "Find the personal names of students not enrolled in any course.",
    "input": "create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id"
  },
  {
    "instruction": "What are the names of the directors who made exactly one movie?",
    "input": "create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT director FROM Movie GROUP BY director HAVING count(*) = 1"
  },
  {
    "instruction": "Return the description for the courses named \"database\".",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));",
    "output": "SELECT course_description FROM COURSES WHERE course_name = \"database\""
  },
  {
    "instruction": "Which parties did not have any delegates in elections?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)"
  },
  {
    "instruction": "What are the mascots for schools with enrollments above the average?",
    "input": "create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));",
    "output": "SELECT mascot FROM school WHERE enrollment > (SELECT avg(enrollment) FROM school)"
  },
  {
    "instruction": "which state has the smallest population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state );"
  },
  {
    "instruction": "For each zip code, select all those that have an average mean visiblity below 10.",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles) < 10"
  },
  {
    "instruction": "Find all restaurant with Valet Service in Dallas Texas",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t1.state = \"Texas\" AND t2.category_name = \"Valet Service\" AND t3.category_name = \"restaurant\";"
  },
  {
    "instruction": "Find the movie which is classified in the most number of genres",
    "input": "create table \"genre\" (\"gid\" int, \"genre\" text, primary key(\"gid\"));create table \"classification\" (\"id\" int, \"msid\" int, \"gid\" int, primary key(\"id\"), foreign key(\"gid\") references `genre`(\"gid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid GROUP BY t3.title ORDER BY COUNT ( DISTINCT t2.genre ) DESC LIMIT 1;"
  },
  {
    "instruction": "For each party, return its theme and the name of its host.",
    "input": "create table \"party_host\" (\"Party_ID\" int, \"Host_ID\" int, \"Is_Main_in_Charge\" bool, primary key (\"Party_ID\",\"Host_ID\"), foreign key (\"Host_ID\") references `host`(\"Host_ID\"), foreign key (\"Party_ID\") references `party`(\"Party_ID\"));create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT T3.Party_Theme, T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID"
  },
  {
    "instruction": "What are the names of people in ascending alphabetical order?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT Name FROM People ORDER BY Name ASC"
  },
  {
    "instruction": "How many voting records do we have?",
    "input": "create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT count(*) FROM VOTING_RECORD"
  },
  {
    "instruction": "What are the names of all songs that have a lower rating than some song of blues genre?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT song_name FROM song WHERE rating < (SELECT max(rating) FROM song WHERE genre_is = \"blues\")"
  },
  {
    "instruction": "Find the name of the product that has the smallest capacity.",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1"
  },
  {
    "instruction": "Show all male student ids who don't play football.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Student WHERE sex = 'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname = \"Football\""
  },
  {
    "instruction": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT date, zip_code FROM weather WHERE max_temperature_f >= 80"
  },
  {
    "instruction": "give me a good arabic restaurant on buchanan in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "What are the average access counts of documents that have the functional area description \"Acknowledgement\"?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `document_functional_areas` (`document_code` varchar(15) not null, `functional_area_code` varchar(15) not null, foreign key (`document_code`) references `documents`(`document_code`), foreign key (`functional_area_code`) references `functional_areas`(`functional_area_code`));create table `functional_areas` (`functional_area_code` varchar(15) primary key, `parent_functional_area_code` varchar(15), `functional_area_description` varchar(80) not null);",
    "output": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code WHERE t3.functional_area_description = \"Acknowledgement\""
  },
  {
    "instruction": "What is the average age of female (sex is F) students?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(Age) FROM STUDENT WHERE Sex = \"F\""
  },
  {
    "instruction": "What is the first name of each student enrolled in class ACCT-211?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211'"
  },
  {
    "instruction": "What is the average length in feet of the bridges?",
    "input": "create table \"bridge\" (\"architect_id\" int, \"id\" int, \"name\" text, \"location\" text, \"length_meters\" real, \"length_feet\" real, primary key(\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));",
    "output": "SELECT avg(length_feet) FROM bridge"
  },
  {
    "instruction": "List the ids of all distinct orders ordered by placed date.",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed"
  },
  {
    "instruction": "what are the name of players who get more than the average points.",
    "input": "create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT name FROM player WHERE points > (SELECT avg(points) FROM player)"
  },
  {
    "instruction": "How many different kinds of lens brands are there?",
    "input": "create table \"camera_lens\" (\"id\" int, \"brand\" text, \"name\" text, \"focal_length_mm\" real, \"max_aperture\" real, primary key(\"id\"));",
    "output": "SELECT count(DISTINCT brand) FROM camera_lens"
  },
  {
    "instruction": "Show the party and the number of drivers in each party.",
    "input": "create table \"driver\" (\"Driver_ID\" int, \"Name\" text, \"Party\" text, \"Home_city\" text, \"Age\" int, primary key (\"Driver_ID\"));",
    "output": "SELECT party, count(*) FROM driver GROUP BY party"
  },
  {
    "instruction": "What is the description of the role named \"Proof Reader\"?",
    "input": "create table roles (role_code char(15) not null, role_name varchar(255), role_description varchar(255), primary key (role_code));",
    "output": "SELECT role_description FROM ROLES WHERE role_name = \"Proof Reader\""
  },
  {
    "instruction": "What are the countries that participated in both friendly and tournament type competitions?",
    "input": "create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));",
    "output": "SELECT country FROM competition WHERE competition_type = 'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type = 'Tournament'"
  },
  {
    "instruction": "Show the city and the number of branches opened before 2010 for each city.",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT city, count(*) FROM branch WHERE open_year < 2010 GROUP BY city"
  },
  {
    "instruction": "Count the number of patients who stayed in room 112.",
    "input": "create table stay (stayid integer primary key not null, patient integer not null, room integer not null, staystart datetime not null, stayend datetime not null, constraint fk_stay_patient_ssn foreign key(patient) references patient(ssn), constraint fk_stay_room_number foreign key(room) references room(roomnumber));",
    "output": "SELECT count(patient) FROM stay WHERE room = 112"
  },
  {
    "instruction": "What are keyphrases by Christof Dallermassl in 2000 ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"Christof Dallermassl\" AND t3.year = 2000;"
  },
  {
    "instruction": "give me a good arabic in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Find the name and building of the department with the highest budget.",
    "input": "create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));",
    "output": "SELECT dept_name, building FROM department ORDER BY budget DESC LIMIT 1"
  },
  {
    "instruction": "What are the ids of all students along with how many sports and games did they play?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID, count(*), sum(gamesplayed) FROM Sportsinfo GROUP BY StuID"
  },
  {
    "instruction": "papers that are coauthored by Peter Mertens and Dina Barbian",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "Count the number of different characteristic names the product 'cumin' has.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\""
  },
  {
    "instruction": "Find the actors who played in the latest movie by \" Quentin Tarantino \"",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));",
    "output": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN directed_by AS t2 ON t5.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t3.name = \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1;"
  },
  {
    "instruction": "Find the number of employees we have.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT count(*) FROM Employees"
  },
  {
    "instruction": "Find the states where have some college students in tryout and their decisions are yes.",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'"
  },
  {
    "instruction": "Please list the age and famous title of artists in descending order of age.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));",
    "output": "SELECT Famous_Title, Age FROM artist ORDER BY Age DESC"
  },
  {
    "instruction": "What is the id of the product that is booked for 3 times?",
    "input": "create table `products_booked` (`booking_id` integer not null, `product_id` integer not null, `returned_yn` varchar(1), `returned_late_yn` varchar(1), `booked_count` integer, `booked_amount` float null, primary key (`booking_id`, `product_id`) foreign key (`booking_id`) references `bookings`(`booking_id`), foreign key (`product_id`) references `products_for_hire`(`product_id`));",
    "output": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*) = 3"
  },
  {
    "instruction": "What are the first names for all students who are from the major numbered 600?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Fname FROM Student WHERE Major = 600"
  },
  {
    "instruction": "List the studios of each film and the number of films produced by that studio.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT Studio, COUNT(*) FROM film GROUP BY Studio"
  },
  {
    "instruction": "Find the full name of employee who supported the most number of customers.",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.first_name, T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the nickname of staff with first name as Janessa and last name as Sawayn?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
  },
  {
    "instruction": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance LIMIT 1"
  },
  {
    "instruction": "Show student ids who are on scholarship and have major 600.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Student WHERE major = 600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'"
  },
  {
    "instruction": "Show the product type codes which have at least two products.",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(15), `product_name` varchar(80), `product_price` double null);",
    "output": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*) >= 2"
  },
  {
    "instruction": "Return all reviewer names and movie names together in a single list.",
    "input": "create table reviewer(rid int primary key, name text);create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT name FROM Reviewer UNION SELECT title FROM Movie"
  },
  {
    "instruction": "Tell me the types of the policy used by the customer named \"Dayana Robel\".",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table customers_policies (customer_id integer not null, policy_id integer not null, date_opened date, date_closed date, primary key (customer_id, policy_id), foreign key (customer_id) references customers (customer_id), foreign key (policy_id) references available_policies (policy_id));create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));",
    "output": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = \"Dayana Robel\""
  },
  {
    "instruction": "List all names of courses with 1 credit?",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT CName FROM COURSE WHERE Credits = 1"
  },
  {
    "instruction": "What is the average high temperature for each day of week?",
    "input": "create table \"weekly_weather\" (\"station_id\" int, \"day_of_week\" text, \"high_temperature\" int, \"low_temperature\" int, \"precipitation\" real, \"wind_speed_mph\" int, primary key (\"station_id\", \"day_of_week\"), foreign key (\"station_id\") references \"station\"(\"id\"));",
    "output": "SELECT avg(high_temperature), day_of_week FROM weekly_weather GROUP BY day_of_week"
  },
  {
    "instruction": "What are the names of the aircraft that the least people are certified to fly?",
    "input": "create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What articles have been published since 2006 about the effects of juicing for cancer patients ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT paperid, title FROM paper WHERE title LIKE \"the effects of juicing for cancer patients\" AND YEAR > 2006;"
  },
  {
    "instruction": "Find the total quantity of products associated with the orders in the \"Cancelled\" status.",
    "input": "create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = \"Cancelled\""
  },
  {
    "instruction": "Show all the distinct districts for elections.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT DISTINCT District FROM election"
  },
  {
    "instruction": "Where is the birth place of \" Kevin Spacey \"",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));",
    "output": "SELECT birth_city FROM director WHERE name = \"director_name0\";"
  },
  {
    "instruction": "How many counties are there?",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT count(*) FROM county_public_safety"
  },
  {
    "instruction": "Who are the different directors of films which had market estimation in 1995?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));",
    "output": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Year = 1995"
  },
  {
    "instruction": "Find the number of scientists involved for each project name.",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));",
    "output": "SELECT count(*), T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name"
  },
  {
    "instruction": "Find the name and position of physicians who prescribe some medication whose brand is X?",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));create table medication (code integer primary key not null, name varchar(30) not null, brand varchar(30) not null, description varchar(30) not null);",
    "output": "SELECT DISTINCT T1.name, T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand = \"X\""
  },
  {
    "instruction": "Find the number of distinct currency codes used in drama workshop groups.",
    "input": "create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups"
  },
  {
    "instruction": "which country did participated in the most number of Tournament competitions?",
    "input": "create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));",
    "output": "SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many different courses offered by Physics department?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name = 'Physics'"
  },
  {
    "instruction": "Show the status of the city that has hosted the greatest number of competitions.",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));create table \"farm_competition\" (\"Competition_ID\" int, \"Year\" int, \"Theme\" text, \"Host_city_ID\" int, \"Hosts\" text, primary key (\"Competition_ID\"), foreign key (`host_city_id`) references `city`(`city_id`));",
    "output": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "keywords in the papers written by Luke Zettlemoyer",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Luke Zettlemoyer\";"
  },
  {
    "instruction": "Show all the buildings that have at least 10 professors.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT building FROM Faculty WHERE rank = \"Professor\" GROUP BY building HAVING count(*) >= 10"
  },
  {
    "instruction": "What are all the payment methods?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT DISTINCT payment_method FROM customers"
  },
  {
    "instruction": "Find all the female actors in the movie \" Saving Private Ryan \"",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.gender = \"female\" AND t3.title = \"Saving Private Ryan\";"
  },
  {
    "instruction": "What is the code of each location and the number of documents in that location?",
    "input": "create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT location_code, count(*) FROM Document_locations GROUP BY location_code"
  },
  {
    "instruction": "Which customer have the most policies? Give me the customer details.",
    "input": "create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));",
    "output": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\""
  },
  {
    "instruction": "Compute the average salary of the players in the team called 'Boston Red Stockings'.",
    "input": "create table salary (year integer, team_id text, league_id text, player_id text, salary integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'"
  },
  {
    "instruction": "Sort the first names of all the authors in alphabetical order.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));",
    "output": "SELECT fname FROM authors ORDER BY fname"
  },
  {
    "instruction": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?",
    "input": "create table \"mountain\" (\"id\" int, \"name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key(\"id\"));create table \"photos\" (\"id\" int, \"camera_lens_id\" int, \"mountain_id\" int, \"color\" text, \"name\" text, primary key(\"id\"), foreign key(\"camera_lens_id\") references `camera_lens`(\"id\"), foreign key(\"mountain_id\") references `mountain`(\"id\"));",
    "output": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.country = 'Ethiopia'"
  },
  {
    "instruction": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
    "input": "create table \"chip_model\" (\"Model_name\" text, \"Launch_year\" real, \"RAM_MiB\" real, \"ROM_MiB\" real, \"Slots\" text, \"WiFi\" text, \"Bluetooth\" text, primary key (\"Model_name\"));",
    "output": "SELECT Model_name, RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;"
  },
  {
    "instruction": "Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table first_notification_of_loss (fnol_id integer not null, customer_id integer not null, policy_id integer not null, service_id integer not null, primary key (fnol_id), unique (fnol_id), foreign key (service_id) references services (service_id), foreign key (customer_id, policy_id) references customers_policies (customer_id, policy_id));create table services (service_id integer not null, service_name varchar(40), primary key (service_id));create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table first_notification_of_loss (fnol_id integer not null, customer_id integer not null, policy_id integer not null, service_id integer not null, primary key (fnol_id), unique (fnol_id), foreign key (service_id) references services (service_id), foreign key (customer_id, policy_id) references customers_policies (customer_id, policy_id));create table services (service_id integer not null, service_name varchar(40), primary key (service_id));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"New policy application\""
  },
  {
    "instruction": "Return the duration of the actor with the greatest age.",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));",
    "output": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"
  },
  {
    "instruction": "Find the names of the regions which were affected by the storm that killed the greatest number of people.",
    "input": "create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1"
  },
  {
    "instruction": "Which major has between 2 and 30 number of students? List major and the number of students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Major, count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;"
  },
  {
    "instruction": "what is the highest point in the state with capital des moines",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital = \"des moines\" );"
  },
  {
    "instruction": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance DESC"
  },
  {
    "instruction": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT sum(Enrollment), affiliation FROM university WHERE founded > 1850 GROUP BY affiliation"
  },
  {
    "instruction": "where are some good arabics on buchanan in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "How many songs have 4 minute duration?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);",
    "output": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\""
  },
  {
    "instruction": "Return the names and ids of all products whose price is between 600 and 700.",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT product_name, product_id FROM products WHERE product_price BETWEEN 600 AND 700"
  },
  {
    "instruction": "Which county has the largest population? Give me the name of the county.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1"
  },
  {
    "instruction": "how many papers are based on ImageNet",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";"
  },
  {
    "instruction": "Please list all album titles in alphabetical order.",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT Title FROM ALBUM ORDER BY Title"
  },
  {
    "instruction": "Find the names of patients who are not using the medication of Procrastin-X.",
    "input": "create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));create table medication (code integer primary key not null, name varchar(30) not null, brand varchar(30) not null, description varchar(30) not null);",
    "output": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code WHERE T3.name = 'Procrastin-X'"
  },
  {
    "instruction": "When is the last day any resident moved in?",
    "input": "create table residents (resident_id integer not null, property_id integer not null, date_moved_in datetime not null, date_moved_out datetime not null, other_details varchar(255), primary key (resident_id, property_id, date_moved_in), foreign key (property_id) references properties (property_id));",
    "output": "SELECT max(date_moved_in) FROM Residents"
  },
  {
    "instruction": "Find the committees that have delegates both from from the democratic party and the liberal party.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Liberal\""
  },
  {
    "instruction": "what states have towns named springfield",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "What are the ids of the students who are under 20 years old and are involved in at least one activity.",
    "input": "create table participates_in (stuid integer, actid integer, foreign key(stuid) references student(stuid), foreign key(actid) references activity(actid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age < 20"
  },
  {
    "instruction": "How many students are enrolled in college?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT sum(enr) FROM College"
  },
  {
    "instruction": "Find the first name of the band mate that has performed in most songs.",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate = t2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what is the smallest state through which the longest river runs",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) ) ) AND state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );"
  },
  {
    "instruction": "For each airport name, how many routes start at that airport?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT count(*), T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name"
  },
  {
    "instruction": "conferences for Trophic Cascade",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Trophic Cascade\";"
  },
  {
    "instruction": "Find all the policy types that are used by more than 2 customers.",
    "input": "create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));",
    "output": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*) > 2"
  },
  {
    "instruction": "What is the nickname of the employee named Janessa Sawayn?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
  },
  {
    "instruction": "List the names of countries whose language is not \"German\".",
    "input": "create table \"country\" (\"Country_ID\" int, \"Name\" text, \"Population\" int, \"Area\" int, \"Languages\" text, primary key (\"Country_ID\"));",
    "output": "SELECT Name FROM country WHERE Languages != \"German\""
  },
  {
    "instruction": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
    "input": "create table `bookings` (`booking_id` integer primary key , `customer_id` integer not null, `booking_status_code` varchar(10) not null, `returned_damaged_yn` varchar(40), `booking_start_date` datetime, `booking_end_date` datetime, `count_hired` varchar(40), `amount_payable` decimal(19, 4), `amount_of_discount` decimal(19, 4), `amount_outstanding` decimal(19, 4), `amount_of_refund` decimal(19, 4), foreign key (`customer_id`) references `customers`(`customer_id`));create table `payments` (`payment_id` integer primary key, `booking_id` integer, `customer_id` integer not null, `payment_type_code` varchar(15) not null, `amount_paid_in_full_yn` varchar(1), `payment_date` datetime, `amount_due` decimal(19, 4), `amount_paid` decimal(19, 4), foreign key (`booking_id`) references `bookings`(`booking_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.booking_id, T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of distinct player positions.",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));",
    "output": "SELECT count(DISTINCT POSITION) FROM player"
  },
  {
    "instruction": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table first_notification_of_loss (fnol_id integer not null, customer_id integer not null, policy_id integer not null, service_id integer not null, primary key (fnol_id), unique (fnol_id), foreign key (service_id) references services (service_id), foreign key (customer_id, policy_id) references customers_policies (customer_id, policy_id));create table services (service_id integer not null, service_name varchar(40), primary key (service_id));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" OR t3.service_name = \"Upgrade a policy\""
  },
  {
    "instruction": "How many papers run experiments on ImageNet ?",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";"
  },
  {
    "instruction": "Find the year and semester when offers the largest number of courses.",
    "input": "create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);",
    "output": "SELECT semester, YEAR FROM SECTION GROUP BY semester, YEAR ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many products are there in the records?",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT count(*) FROM catalog_contents"
  },
  {
    "instruction": "Return the names of people, ordered by weight ascending.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT Name FROM People ORDER BY Weight ASC"
  },
  {
    "instruction": "Find the details of all the distinct customers who have orders with status \"On Road\".",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\""
  },
  {
    "instruction": "What is the first name, last name, and phone of the customer with account name 162?",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"162\""
  },
  {
    "instruction": "what is capital of the state with the lowest point",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t2.lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow ) ;"
  },
  {
    "instruction": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.first_name, T1.last_name, SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;"
  },
  {
    "instruction": "give me a good place on buchanan in san francisco for arabic food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Where is the best french restaurant in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" );"
  },
  {
    "instruction": "What is the total number of degrees granted after 2000 for each Orange county campus?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT T1.campus, sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T1.county = \"Orange\" AND T2.year >= 2000 GROUP BY T1.campus"
  },
  {
    "instruction": "Find the titles of all movies directed by steven spielberg.",
    "input": "create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
  },
  {
    "instruction": "What are the teams of the players, sorted in ascending alphabetical order?",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));",
    "output": "SELECT Team FROM player ORDER BY Team ASC"
  },
  {
    "instruction": "Find the average number of bedrooms of all the apartments.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT avg(bedroom_count) FROM Apartments"
  },
  {
    "instruction": "What are the names of all colleges that have two or more players?",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2"
  },
  {
    "instruction": "Which department has the lowest budget?",
    "input": "create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));",
    "output": "SELECT dept_name FROM department ORDER BY budget LIMIT 1"
  },
  {
    "instruction": "How many distinct birth places are there?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));",
    "output": "SELECT count(DISTINCT Birth_Place) FROM people"
  },
  {
    "instruction": "How many films have the word 'Dummy' in their titles?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Rank_in_series\" int, \"Number_in_season\" int, \"Title\" text, \"Directed_by\" text, \"Original_air_date\" text, \"Production_code\" text, primary key (\"Film_ID\"));",
    "output": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\""
  },
  {
    "instruction": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"
  },
  {
    "instruction": "List the most common result of the musicals.",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the account id and the number of transactions for each account",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `previous_transaction_id` integer, `account_id` integer not null, `card_id` integer not null, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` double null, `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`card_id`) references `customers_cards`(`card_id`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT account_id, count(*) FROM Financial_transactions GROUP BY account_id"
  },
  {
    "instruction": "Count the number of exhibitions that happened in or after 2005.",
    "input": "create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT count(*) FROM exhibition WHERE YEAR >= 2005"
  },
  {
    "instruction": "What is the address of the location \"UK Gallery\"?",
    "input": "create table locations (location_id integer not null, location_name varchar(255), address varchar(255), other_details varchar(255), primary key (location_id));",
    "output": "SELECT Address FROM LOCATIONS WHERE Location_Name = \"UK Gallery\""
  },
  {
    "instruction": "Give the neames of wines with prices below 50 and with appelations in Monterey county.",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50"
  },
  {
    "instruction": "Show the authors who have submissions to more than one workshop.",
    "input": "create table \"Acceptance\" (\"Submission_ID\" int, \"Workshop_ID\" int, \"Result\" text, primary key (\"Submission_ID\",\"Workshop_ID\"), foreign key (\"Submission_ID\") references `submission`(\"Submission_ID\"), foreign key (\"Workshop_ID\") references `workshop`(\"Workshop_ID\"));create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id) > 1"
  },
  {
    "instruction": "Which customers have made at least two orders? Give me each customer name and number of orders made.",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));",
    "output": "SELECT T2.customer_name, count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*) >= 2"
  },
  {
    "instruction": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Name FROM WINE WHERE YEAR < (SELECT min(YEAR) FROM WINE WHERE Winery = \"Brander\")"
  },
  {
    "instruction": "Return the id of the department with the fewest staff assignments.",
    "input": "create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "What are the names of storms that did not affect any regions?",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)"
  },
  {
    "instruction": "what are name and phone number of patients who had more than one appointment?",
    "input": "create table appointment (appointmentid integer primary key not null, patient integer not null, prepnurse integer, physician integer not null, start datetime not null, end datetime not null, examinationroom text not null, constraint fk_appointment_patient_ssn foreign key(patient) references patient(ssn), constraint fk_appointment_nurse_employeeid foreign key(prepnurse) references nurse(employeeid), constraint fk_appointment_physician_employeeid foreign key(physician) references physician(employeeid));create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));",
    "output": "SELECT name, phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count(*) > 1"
  },
  {
    "instruction": "Show names for all regions except for Denmark.",
    "input": "create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));",
    "output": "SELECT region_name FROM region WHERE region_name != 'Denmark'"
  },
  {
    "instruction": "monte carlo simulation later than 2011",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"monte carlo simulation\" AND t3.year > 2011;"
  },
  {
    "instruction": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "instruction": "List all every engineer's first name, last name, details and coresponding skill description.",
    "input": "create table `maintenance_engineers` (`engineer_id` integer primary key, `company_id` integer not null, `first_name` varchar(50), `last_name` varchar(50), `other_details` varchar(255), foreign key (`company_id`) references `third_party_companies`(`company_id`));create table `engineer_skills` (`engineer_id` integer not null, `skill_id` integer not null, foreign key (`engineer_id`) references `maintenance_engineers`(`engineer_id`), foreign key (`skill_id`) references `skills`(`skill_id`));create table `skills` (`skill_id` integer primary key, `skill_code` varchar(20), `skill_description` varchar(255));",
    "output": "SELECT T1.first_name, T1.last_name, T1.other_details, T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id"
  },
  {
    "instruction": "Show the names of products that are in at least two events.",
    "input": "create table products (product_id integer not null, product_type_code char(15), product_name varchar(255), product_price decimal(20, 4), primary key (product_id), unique (product_id));create table products_in_events (product_in_event_id integer not null, event_id integer not null, product_id integer not null, primary key (product_in_event_id), foreign key (event_id) references events (event_id), foreign key (product_id) references products (product_id));",
    "output": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "Find users whose average review rating is below 3",
    "input": "create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT t2.name FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id GROUP BY t2.name HAVING AVG ( t1.rating ) < 3;"
  },
  {
    "instruction": "where can i eat some good arabic food in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "how many states are in the usa",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT COUNT ( state_name ) FROM state;"
  },
  {
    "instruction": "Which events have the number of notes between one and three? List the event id and the property id.",
    "input": "create table customer_events (customer_event_id integer not null, customer_id integer, date_moved_in datetime, property_id integer, resident_id integer, thing_id integer not null, primary key (customer_event_id), foreign key (thing_id) references things (thing_id), foreign key (customer_id) references customers (customer_id), foreign key (resident_id, property_id, date_moved_in) references residents (resident_id, property_id, date_moved_in));create table customer_event_notes (customer_event_note_id integer not null, customer_event_id integer not null, service_type_code char(15) not null, resident_id integer not null, property_id integer not null, date_moved_in datetime not null, primary key (customer_event_note_id), foreign key (customer_event_id) references customer_events (customer_event_id));",
    "output": "SELECT T1.Customer_Event_ID, T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID = T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3"
  },
  {
    "instruction": "Show all allergy types.",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT DISTINCT allergytype FROM Allergy_type"
  },
  {
    "instruction": "List the first name of all employees with job code PROF ordered by their date of birth.",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);",
    "output": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob"
  },
  {
    "instruction": "What are the names of the songs whose title has the word \"the\"?",
    "input": "create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT title FROM songs WHERE title LIKE '% the %'"
  },
  {
    "instruction": "Count the number of members in club \"Bootup Baltimore\" whose age is above 18.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.age > 18"
  },
  {
    "instruction": "Number of ACL papers with more than 2 citations",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t2.venuename = \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid ) > 2;"
  },
  {
    "instruction": "How many kids stay in the rooms reserved by ROY SWEAZY?",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));",
    "output": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\";"
  },
  {
    "instruction": "What are the names of the different banks that have provided loans?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id"
  },
  {
    "instruction": "What is the name and date of the most recent race?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT name, date FROM races ORDER BY date DESC LIMIT 1"
  },
  {
    "instruction": "What is the name of the tallest building?",
    "input": "create table \"building\" (\"building_id\" text, \"Name\" text, \"Street_address\" text, \"Years_as_tallest\" text, \"Height_feet\" int, \"Floors\" int, primary key(\"building_id\"));",
    "output": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1"
  },
  {
    "instruction": "What are all the different product names, and how many complains has each received?",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `product_category_code` varchar(20) not null, `date_product_first_available` datetime, `date_product_discontinued` datetime, `product_name` varchar(80), `product_description` varchar(255), `product_price` decimal(19, 4));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.product_name, count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name"
  },
  {
    "instruction": "What is the country of origin of the artist who is female and produced a song in Bangla?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = \"Female\" AND T2.languages = \"bangla\""
  },
  {
    "instruction": "What nurses are on call with block floor 1 and block code 1? Tell me their names.",
    "input": "create table on_call (nurse integer not null, blockfloor integer not null, blockcode integer not null, oncallstart datetime not null, oncallend datetime not null, primary key(nurse, blockfloor, blockcode, oncallstart, oncallend), constraint fk_oncall_nurse_employeeid foreign key(nurse) references nurse(employeeid), constraint fk_oncall_block_floor foreign key(blockfloor, blockcode) references block(blockfloor, blockcode));",
    "output": "SELECT nurse FROM on_call WHERE blockfloor = 1 AND blockcode = 1"
  },
  {
    "instruction": "recent deep learning papers",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid, t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "Find the policy types more than 4 customers use. Show their type code.",
    "input": "create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));",
    "output": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*) > 4"
  },
  {
    "instruction": "Keyphrases used by Luke Zettlemoyer",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Luke Zettlemoyer\";"
  },
  {
    "instruction": "number of ACL papers by author",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t2.paperid ), t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"ACL\" GROUP BY t1.authorid;"
  },
  {
    "instruction": "List the information of all instructors ordered by their salary in ascending order.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT * FROM instructor ORDER BY salary"
  },
  {
    "instruction": "List the names of 5 users followed by the largest number of other users.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));",
    "output": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5"
  },
  {
    "instruction": "What are the names of wines that are more expensive then all wines made in the year 2006?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Name FROM WINE WHERE Price > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)"
  },
  {
    "instruction": "How many customers in total?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT count(*) FROM Customers;"
  },
  {
    "instruction": "how long is the rio grande",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT LENGTH FROM river WHERE river_name = \"rio grande\";"
  },
  {
    "instruction": "find the number of reviews written for \" Cafe Zinho \" restaurant in Texas",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id WHERE t1.name = \"Cafe Zinho\" AND t1.state = \"Texas\" AND t2.category_name = \"restaurant\";"
  },
  {
    "instruction": "who has the most papers in semantic parsing after 2005 ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"semantic parsing\" AND t4.year > 2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "What are all the songs in albums under label \"Universal Music Group\"?",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);create table \"Tracklists\" (\"AlbumId\" integer, \"Position\" integer, \"SongId\" integer , primary key(albumid, position), foreign key (songid) references songs(songid), foreign key (albumid) references albums(aid));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.label = \"Universal Music Group\""
  },
  {
    "instruction": "What is the name of all the people who are older than at least one engineer? Order them by age.",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT name FROM Person WHERE age > (SELECT min(age) FROM person WHERE job = 'engineer') ORDER BY age"
  },
  {
    "instruction": "What is ohad shamir 's highest cited paper ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'",
    "input": "create table \"mountain\" (\"id\" int, \"name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key(\"id\"));create table \"photos\" (\"id\" int, \"camera_lens_id\" int, \"mountain_id\" int, \"color\" text, \"name\" text, primary key(\"id\"), foreign key(\"camera_lens_id\") references `camera_lens`(\"id\"), foreign key(\"mountain_id\") references `mountain`(\"id\"));create table \"camera_lens\" (\"id\" int, \"brand\" text, \"name\" text, \"focal_length_mm\" real, \"max_aperture\" real, primary key(\"id\"));create table \"mountain\" (\"id\" int, \"name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key(\"id\"));create table \"photos\" (\"id\" int, \"camera_lens_id\" int, \"mountain_id\" int, \"color\" text, \"name\" text, primary key(\"id\"), foreign key(\"camera_lens_id\") references `camera_lens`(\"id\"), foreign key(\"mountain_id\") references `mountain`(\"id\"));create table \"camera_lens\" (\"id\" int, \"brand\" text, \"name\" text, \"focal_length_mm\" real, \"max_aperture\" real, primary key(\"id\"));",
    "output": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Lasta Massif'"
  },
  {
    "instruction": "Please give me a list of cities whose regional population is over 10000000.",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));",
    "output": "SELECT city FROM city WHERE regional_population > 10000000"
  },
  {
    "instruction": "how many papers are in sigir ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"sigir\";"
  },
  {
    "instruction": "datasets used for evaluating semantic parsing",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid WHERE t4.keyphrasename = \"semantic parsing\";"
  },
  {
    "instruction": "Count the number of characteristics of the product named 'laurel'.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"laurel\""
  },
  {
    "instruction": "what is id of students who registered some courses but the least number of courses in these students?",
    "input": "create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));",
    "output": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "What is the name of the highest mountain?",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"
  },
  {
    "instruction": "Which company was started by the entrepreneur with the greatest height?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1"
  },
  {
    "instruction": "Show all flight numbers with aircraft Airbus A340-300.",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = \"Airbus A340-300\""
  },
  {
    "instruction": "what is the elevation of death valley",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT lowest_elevation FROM highlow WHERE lowest_point = \"death valley\";"
  },
  {
    "instruction": "What are the types of vocals that the musician with the first name \"Solveig\" played in the song \"A Bar in Amsterdam\"?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = \"Solveig\" AND T2.title = \"A Bar In Amsterdam\""
  },
  {
    "instruction": "Compute the mean price of procedures physician John Wen was trained in.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table trained_in (physician integer not null, treatment integer not null, certificationdate datetime not null, certificationexpires datetime not null, constraint fk_trained_in_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_trained_in_procedures_code foreign key(treatment) references procedures(code), primary key(physician, treatment));create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\""
  },
  {
    "instruction": "Tell me the location of the club \"Hopkins Student Enterprises\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT clublocation FROM club WHERE clubname = \"Hopkins Student Enterprises\""
  },
  {
    "instruction": "which states does the ohio river pass through",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE river_name = \"ohio\";"
  },
  {
    "instruction": "What are the names and cities of bank branches that offer loans for business?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT T1.bname, T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T2.loan_type = 'Business'"
  },
  {
    "instruction": "Find the ids of the departments where any manager is managing 4 or more employees.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT DISTINCT department_id FROM employees GROUP BY department_id, manager_id HAVING COUNT(employee_id) >= 4"
  },
  {
    "instruction": "What are the first name and last name of Linda Smith's advisor?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T1.fname, T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T2.fname = \"Linda\" AND T2.lname = \"Smith\""
  },
  {
    "instruction": "Show the name, home city, and age for all drivers.",
    "input": "create table \"driver\" (\"Driver_ID\" int, \"Name\" text, \"Party\" text, \"Home_city\" text, \"Age\" int, primary key (\"Driver_ID\"));",
    "output": "SELECT name, home_city, age FROM driver"
  },
  {
    "instruction": "What are the total points of gymnasts, ordered by their floor exercise points descending?",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC"
  },
  {
    "instruction": "Find the three most expensive procedures.",
    "input": "create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT name FROM procedures ORDER BY cost LIMIT 3"
  },
  {
    "instruction": "Return the average horizontal bar points across all gymnasts.",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT avg(Horizontal_Bar_Points) FROM gymnast"
  },
  {
    "instruction": "What is the maximum and mininum number of stars a rating can receive?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT max(stars), min(stars) FROM Rating"
  },
  {
    "instruction": "Show the locations that have at least two performances.",
    "input": "create table \"performance\" (\"Performance_ID\" real, \"Date\" text, \"Host\" text, \"Location\" text, \"Attendance\" int, primary key (\"Performance_ID\"));",
    "output": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "Find the names of programs that are never broadcasted in the morning.",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));",
    "output": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Morning\""
  },
  {
    "instruction": "List the position of players and the average number of points of players of each position.",
    "input": "create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT POSITION, avg(Points) FROM player GROUP BY POSITION"
  },
  {
    "instruction": "how many places for french are there in palo alto ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"palo alto\" AND t1.food_type = \"french\";"
  },
  {
    "instruction": "In which state is the college that Charles attends?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE T3.pName = 'Charles'"
  },
  {
    "instruction": "What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, hire_date, salary, department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id"
  },
  {
    "instruction": "What datasets have jitendra malik used",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"jitendra malik\";"
  },
  {
    "instruction": "List the papers on TAIL that were published in NIPS",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"TAIL\" AND t4.venuename = \"NIPS\";"
  },
  {
    "instruction": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Rosalind\""
  },
  {
    "instruction": "return me the authors who have papers in PVLDB .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = \"PVLDB\";"
  },
  {
    "instruction": "how many parsing papers in ACL 2014",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"parsing\" AND t3.year = 2014 AND t4.venuename = \"ACL\";"
  },
  {
    "instruction": "Which restaurant in Dallas were reviewed by user Patrick ?",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.city = \"Dallas\" AND t2.category_name = \"restaurant\" AND t4.name = \"Patrick\";"
  },
  {
    "instruction": "HOw many engineers are older than 30?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT count(*) FROM Person WHERE age > 30 AND job = 'engineer'"
  },
  {
    "instruction": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
    "input": "create table `job_history` (`employee_id` decimal(6, 0) not null, `start_date` date not null, `end_date` date not null, `job_id` varchar(10) not null, `department_id` decimal(4, 0) default null, primary key (`employee_id`,`start_date`), foreign key (`employee_id`) references employees(`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM job_history AS T1 JOIN employees AS T2 ON T1.employee_id = T2.employee_id WHERE T2.salary >= 12000"
  },
  {
    "instruction": "Find all the papers published by \"Aaron Turon\".",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Aaron\" AND t1.lname = \"Turon\""
  },
  {
    "instruction": "List the year in which there are more than one festivals.",
    "input": "create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));",
    "output": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*) > 1"
  },
  {
    "instruction": "what capital is the largest in the us",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );"
  },
  {
    "instruction": "What are the different card types, and how many transactions have been made with each?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `previous_transaction_id` integer, `account_id` integer not null, `card_id` integer not null, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` double null, `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`card_id`) references `customers_cards`(`card_id`), foreign key (`account_id`) references `accounts`(`account_id`));create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT T2.card_type_code, count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code"
  },
  {
    "instruction": "How many enzymes do not have any interactions?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));",
    "output": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"
  },
  {
    "instruction": "List all customers\u2019 names in the alphabetical order.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);",
    "output": "SELECT name FROM accounts ORDER BY name"
  },
  {
    "instruction": "What are the names of all cities with more than one airport and how many airports do they have?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT city, count(*) FROM airports GROUP BY city HAVING count(*) > 1"
  },
  {
    "instruction": "Give me the temperature of Shanghai in January.",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"temperature\" (\"City_ID\" int, \"Jan\" real, \"Feb\" real, \"Mar\" real, \"Apr\" real, \"Jun\" real, \"Jul\" real, \"Aug\" real, \"Sep\" real, \"Oct\" real, \"Nov\" real, \"Dec\" real, primary key (\"City_ID\"), foreign key (`city_id`) references `city`(`city_id`));",
    "output": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\""
  },
  {
    "instruction": "How many wrestlers are there?",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT count(*) FROM wrestler"
  },
  {
    "instruction": "Find the name and attribute ID of the attribute definitions with attribute value 0.",
    "input": "create table `attribute_definitions` (`attribute_id` integer primary key, `attribute_name` varchar(30), `attribute_data_type` varchar(10));create table `catalog_contents_additional_attributes` (`catalog_entry_id` integer not null, `catalog_level_number` integer not null, `attribute_id` integer not null, `attribute_value` varchar(255) not null, foreign key (`catalog_entry_id`) references `catalog_contents`(`catalog_entry_id`), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT t1.attribute_name, t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0"
  },
  {
    "instruction": "Find the number and time of the train that goes from Chennai to Guruvayur.",
    "input": "create table \"train\" (\"id\" int, \"train_number\" int, \"name\" text, \"origin\" text, \"destination\" text, \"time\" text, \"interval\" text, primary key (\"id\"));",
    "output": "SELECT train_number, TIME FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur'"
  },
  {
    "instruction": "What is the phone number of the customer who has filed the most recent complaint?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1"
  },
  {
    "instruction": "What is the name of each aircraft and how many flights does each one complete?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T2.name, count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid"
  },
  {
    "instruction": "Return all the information for all employees without any department number.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM employees WHERE department_id = \"null\""
  },
  {
    "instruction": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name FROM instructor WHERE salary > (SELECT min(salary) FROM instructor WHERE dept_name = 'Biology')"
  },
  {
    "instruction": "top dependent types papers",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"dependent types\";"
  },
  {
    "instruction": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100"
  },
  {
    "instruction": "What are the unit of measure and category code for the 'chervil' product?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_product_categories` (`product_category_code` varchar(15) primary key, `product_category_description` varchar(80), `unit_of_measure` varchar(20));",
    "output": "SELECT t2.unit_of_measure, t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"chervil\""
  },
  {
    "instruction": "Tell me the employee id of the head of the department with the least employees.",
    "input": "create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));",
    "output": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"
  },
  {
    "instruction": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name, T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance > (SELECT avg(balance) FROM savings)"
  },
  {
    "instruction": "What are the average and minimum price (in Euro) of all products?",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT avg(price_in_euros), min(price_in_euros) FROM catalog_contents"
  },
  {
    "instruction": "What is the name of the activity with the most students?",
    "input": "create table activity (actid integer primary key, activity_name varchar(25));create table participates_in (stuid integer, actid integer, foreign key(stuid) references student(stuid), foreign key(actid) references activity(actid));",
    "output": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "who are the authors at NIPS ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"NIPS\";"
  },
  {
    "instruction": "how many states have cities named springfield",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( state_name ) FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "Which customer made the smallest amount of claim in one claim? Return the customer details.",
    "input": "create table claim_headers (claim_header_id integer not null, claim_status_code char(15) not null, claim_type_code char(15) not null, policy_id integer not null, date_of_claim datetime, date_of_settlement datetime, amount_claimed decimal(20, 4), amount_piad decimal(20, 4), primary key (claim_header_id), foreign key (policy_id) references policies (policy_id));create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table claim_headers (claim_header_id integer not null, claim_status_code char(15) not null, claim_type_code char(15) not null, policy_id integer not null, date_of_claim datetime, date_of_settlement datetime, amount_claimed decimal(20, 4), amount_piad decimal(20, 4), primary key (claim_header_id), foreign key (policy_id) references policies (policy_id));",
    "output": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = (SELECT min(amount_piad) FROM claim_headers)"
  },
  {
    "instruction": "How many papers related to deep reinforcement learning in nips ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"deep reinforcement learning\" AND t4.venuename = \"nips\";"
  },
  {
    "instruction": "Which rooms cost between 120 and 150? Give me the room names.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150"
  },
  {
    "instruction": "Find the name of people whose age is greater than any engineer sorted by their age.",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT name FROM Person WHERE age > (SELECT min(age) FROM person WHERE job = 'engineer') ORDER BY age"
  },
  {
    "instruction": "What are all the movies directed by \" Asghar Farhadi \" featuring \" Taraneh Alidoosti \" ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));",
    "output": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN directed_by AS t2 ON t4.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t1.name = \"Taraneh Alidoosti\" AND t3.name = \"Asghar Farhadi\";"
  },
  {
    "instruction": "Show publishers that have more than one publication.",
    "input": "create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));",
    "output": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1"
  },
  {
    "instruction": "Show the average amount of transactions for different lots.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));create table `transactions_lots` (`transaction_id` integer not null, `lot_id` integer not null, foreign key (`lot_id`) references `lots`(`lot_id`), foreign key (`transaction_id`) references `transactions`(`transaction_id`));",
    "output": "SELECT T2.lot_id, avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id"
  },
  {
    "instruction": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT customer_id, count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of players whose training hours is between 500 and 1500?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500"
  },
  {
    "instruction": "In what year was the most degrees conferred?",
    "input": "create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1"
  },
  {
    "instruction": "What is the name and salary of the employee with the id 242518965?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT name, salary FROM Employee WHERE eid = 242518965"
  },
  {
    "instruction": "most common topics at NIPS 2015",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t3.year = 2015 AND t4.venuename = \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
  },
  {
    "instruction": "return me the conference, which published \" Making database systems usable \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t1.name FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t2.title = \"Making database systems usable\";"
  },
  {
    "instruction": "What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT count(*), T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id"
  },
  {
    "instruction": "Find the detail of products whose detail contains the word \"Latte\" or the word \"Americano\"",
    "input": "create table `products` (`product_id` integer primary key, `product_details` varchar(255));",
    "output": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\""
  },
  {
    "instruction": "How many different professors are there for the different schools?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT count(*), T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code"
  },
  {
    "instruction": "What are the theme and year for all exhibitions that have a ticket price under 15?",
    "input": "create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT theme, YEAR FROM exhibition WHERE ticket_price < 15"
  },
  {
    "instruction": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"lapTimes\" (\"raceId\" integer, \"driverId\" integer, \"lap\" integer, \"position\" integer, \"time\" text, \"milliseconds\" integer, primary key(\"raceId\", \"driverId\", \"lap\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT T1.driverid, T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION = '1' GROUP BY T1.driverid HAVING count(*) >= 2"
  },
  {
    "instruction": "What are the names of all the physicians who took appointments.",
    "input": "create table appointment (appointmentid integer primary key not null, patient integer not null, prepnurse integer, physician integer not null, start datetime not null, end datetime not null, examinationroom text not null, constraint fk_appointment_patient_ssn foreign key(patient) references patient(ssn), constraint fk_appointment_nurse_employeeid foreign key(prepnurse) references nurse(employeeid), constraint fk_appointment_physician_employeeid foreign key(physician) references physician(employeeid));create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));",
    "output": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID"
  },
  {
    "instruction": "List the name of all the distinct customers who have orders with status \"Packing\".",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\""
  },
  {
    "instruction": "what is the smallest city in alaska",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city WHERE state_name = \"alaska\" ) AND state_name = \"alaska\";"
  },
  {
    "instruction": "How many lessons were taught by a staff member whose first name has the letter 'a' in it?",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\""
  },
  {
    "instruction": "List the name and the number of stations for all the cities that have at least 15 stations.",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15"
  },
  {
    "instruction": "What is the customer id of the customer who has the most orders?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "main topics of work by Brian DeRenzi",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphrasename, SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;"
  },
  {
    "instruction": "give me some good arabics in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Select the names and the prices of all the products in the store.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT name, price FROM products"
  },
  {
    "instruction": "How many storms occured in each region?",
    "input": "create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT T1.region_name, count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"
  },
  {
    "instruction": "Show the number of male and female assistant professors.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT sex, count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex"
  },
  {
    "instruction": "what is the most populous state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state );"
  },
  {
    "instruction": "Find the prices of products which has never received a single complaint.",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `product_category_code` varchar(20) not null, `date_product_first_available` datetime, `date_product_discontinued` datetime, `product_name` varchar(80), `product_description` varchar(255), `product_price` decimal(19, 4));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)"
  },
  {
    "instruction": "List the event venues and names that have the top 2 most number of people attended.",
    "input": "create table \"event\" (\"Event_ID\" int, \"Date\" text, \"Venue\" text, \"Name\" text, \"Event_Attendance\" int, primary key (\"Event_ID\"));",
    "output": "SELECT venue, name FROM event ORDER BY Event_Attendance DESC LIMIT 2"
  },
  {
    "instruction": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
    "input": "create table genres (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);create table media_types (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";"
  },
  {
    "instruction": "What is the highest acc percent score in the competition?",
    "input": "create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));",
    "output": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1"
  },
  {
    "instruction": "Return the founder of Sony.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT founder FROM manufacturers WHERE name = 'Sony'"
  },
  {
    "instruction": "how many residents live in california",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM state WHERE state_name = \"california\";"
  },
  {
    "instruction": "How many staff have the first name Ludie?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";"
  },
  {
    "instruction": "Give the first name and job id for all employees in the Finance department.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));",
    "output": "SELECT T1.first_name, T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance'"
  },
  {
    "instruction": "What are the names of all songs that are approximately 4 minutes long or are in English?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages = \"english\""
  },
  {
    "instruction": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
    "input": "create table \"browser\" (\"id\" int, \"name\" text, \"market_share\" real, primary key(\"id\"));create table \"accelerator_compatible_browser\" (\"accelerator_id\" int, \"browser_id\" int, \"compatible_since_year\" int, primary key(\"accelerator_id\", \"browser_id\"), foreign key (\"accelerator_id\") references `web_client_accelerator`(\"id\"), foreign key (\"browser_id\") references `browser`(\"id\"));create table \"Web_client_accelerator\" (\"id\" int, \"name\" text, \"Operating_system\" text, \"Client\" text, \"Connection\" text, primary key(\"id\"));",
    "output": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998"
  },
  {
    "instruction": "For each grant id, how many documents does it have, and which one has the most?",
    "input": "create table `documents` (`document_id` integer primary key, `document_type_code` varchar(10), `grant_id` integer not null, `sent_date` datetime not null, `response_received_date` datetime not null, `other_details` varchar(255) not null, foreign key (`document_type_code`) references `document_types`(`document_type_code`), foreign key (`grant_id`) references `grants`(`grant_id`));",
    "output": "SELECT grant_id, count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the paper about Question Answering ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "Show the name and phone of the customer without any mailshot.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `customer_phone` varchar(80), `customer_email` varchar(80), `customer_address` varchar(255), `customer_login` varchar(80), `customer_password` varchar(10));create table `mailshot_customers` (`mailshot_id` integer not null, `customer_id` integer not null, `outcome_code` varchar(15) not null, `mailshot_customer_date` datetime, foreign key (`customer_id`) references `customers`(`customer_id`), foreign key (`mailshot_id`) references `mailshot_campaigns`(`mailshot_id`));",
    "output": "SELECT customer_name, customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)"
  },
  {
    "instruction": "keyphrases by Luke Zettlemoyer",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Luke Zettlemoyer\";"
  },
  {
    "instruction": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));",
    "output": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\";"
  },
  {
    "instruction": "What is the phone and email for customer with first name Aniyah and last name Feest?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = \"Aniyah\" AND customer_last_name = \"Feest\""
  },
  {
    "instruction": "Which tourist attraction is associated with the photo \"game1\"? Return its name.",
    "input": "create table photos (photo_id integer not null, tourist_attraction_id integer not null, name varchar(255), description varchar(255), filename varchar(255), other_details varchar(255), primary key (photo_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = \"game1\""
  },
  {
    "instruction": "Which advisors are advising more than 2 students?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*) > 2"
  },
  {
    "instruction": "Find the users who have given tips on Pet Groomers",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"tip\" (\"tip_id\" int, \"business_id\" text, \"text\" text, \"user_id\" text, \"likes\" int, \"year\" int, \"month\" text, primary key(\"tip_id\") foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN tip AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = \"Pet Groomers\";"
  },
  {
    "instruction": "What is the average bike availability in stations that are not located in Palo Alto?",
    "input": "create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = \"Palo Alto\")"
  },
  {
    "instruction": "Compute the average age of the members in the club \"Tennis Club\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\""
  },
  {
    "instruction": "Find the number of reviews on businesses located in \" South Summerlin \" neighbourhood",
    "input": "create table \"neighbourhood\" (\"id\" int, \"business_id\" text, \"neighbourhood_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT COUNT ( DISTINCT t3.text ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id = t2.business_id JOIN review AS t3 ON t3.business_id = t2.business_id WHERE t1.neighbourhood_name = \"South Summerlin\";"
  },
  {
    "instruction": "List every individual's first name, middle name and last name in alphabetical order by last name.",
    "input": "create table `individuals` (`individual_id` integer primary key, `individual_first_name` varchar(80), `individual_middle_name` varchar(80), `inidividual_phone` varchar(80), `individual_email` varchar(80), `individual_address` varchar(255), `individual_last_name` varchar(80));",
    "output": "SELECT individual_first_name, individual_middle_name, individual_last_name FROM individuals ORDER BY individual_last_name"
  },
  {
    "instruction": "Show the company of the tallest entrepreneur.",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1"
  },
  {
    "instruction": "Find the IDs of customers whose name contains \"Diana\".",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));",
    "output": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""
  },
  {
    "instruction": "who writes papers with Noah A Smith ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Noah A Smith\";"
  },
  {
    "instruction": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.",
    "input": "create table genres (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);create table media_types (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";"
  },
  {
    "instruction": "Find the number of items without any review.",
    "input": "create table `item` (`i_id` integer not null , `title` varchar(20) default null , primary key (`i_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
  },
  {
    "instruction": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field.",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid'"
  },
  {
    "instruction": "Give me the name of each club.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT clubname FROM club"
  },
  {
    "instruction": "Show me the number of parks the state of NY has.",
    "input": "create table park (park_id text, park_name text, park_alias text, city text, state text, country text);",
    "output": "SELECT count(*) FROM park WHERE state = 'NY';"
  },
  {
    "instruction": "What are the names of artists that have not had any exhibitions?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)"
  },
  {
    "instruction": "find all films in which \" Rowan Atkinson \" acted as \" Mr. Bean \"",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Rowan Atkinson\" AND t3.role = \"Mr. Bean\";"
  },
  {
    "instruction": "Find the texts of assessment notes for teachers with last name \"Schuster\".",
    "input": "create table `assessment_notes` (`notes_id` integer not null , `student_id` integer, `teacher_id` integer not null, `date_of_notes` datetime, `text_of_notes` varchar(255), `other_details` varchar(255), foreign key (`student_id`) references `students`(`student_id`), foreign key (`teacher_id`) references `teachers`(`teacher_id`));create table `teachers` (`teacher_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `gender` varchar(1), `cell_mobile_number` varchar(40), `email_address` varchar(40), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schuster\""
  },
  {
    "instruction": "What is the receipt date of the document with id 3?",
    "input": "create table documents (document_id integer not null, document_status_code char(15) not null, document_type_code char(15) not null, shipping_agent_code char(15), receipt_date datetime, receipt_number varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (document_status_code) references ref_document_status (document_status_code), foreign key (shipping_agent_code) references ref_shipping_agents (shipping_agent_code));",
    "output": "SELECT receipt_date FROM Documents WHERE document_id = 3;"
  },
  {
    "instruction": "Show id, first name and last name for all customers and the number of accounts.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name, count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id"
  },
  {
    "instruction": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));",
    "output": "SELECT T1.fname, T1.lname, count(*), T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID"
  },
  {
    "instruction": "How many products are in the 'Spices' category and have a typical price of over 1000?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT count(*) FROM products WHERE product_category_code = \"Spices\" AND typical_buying_price > 1000"
  },
  {
    "instruction": "What are the personal names used both by some course authors and some students?",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students"
  },
  {
    "instruction": "What is the first name of the professor who is teaching CIS-220 and QM-261?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'"
  },
  {
    "instruction": "Show all locations which don't have a train station with at least 15 platforms.",
    "input": "create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));",
    "output": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms >= 15"
  },
  {
    "instruction": "Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));",
    "output": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\""
  },
  {
    "instruction": "Who is a coauthor with Noah A Smith ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Noah A Smith\";"
  },
  {
    "instruction": "Which month has the most happy hours?",
    "input": "create table \"happy_hour\" (\"HH_ID\" int, \"Shop_ID\" int, \"Month\" text, \"Num_of_shaff_in_charge\" int, primary key (\"HH_ID\",\"Shop_ID\",\"Month\"), foreign key (\"Shop_ID\") references `shop`(\"Shop_ID\"));",
    "output": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
    "input": "create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT Hardware_Model_name, Company_name FROM phone WHERE Accreditation_type LIKE 'Full';"
  },
  {
    "instruction": "What is the membership level with the most people?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));",
    "output": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Return the names of products in the category 'Spices'.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT product_name FROM products WHERE product_category_code = \"Spices\""
  },
  {
    "instruction": "which state is the smallest",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state );"
  },
  {
    "instruction": "Find the claims that led to more than two settlements or have the maximum claim value. For each of them, return the date the claim was made and the id of the claim.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));",
    "output": "SELECT T1.Date_Claim_Made, T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.Claim_id HAVING count(*) > 2 UNION SELECT T1.Date_Claim_Made, T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id WHERE T1.Amount_Claimed = ( SELECT max(Amount_Claimed) FROM Claims )"
  },
  {
    "instruction": "Return the names of products that have had complaints filed by the customer who has filed the fewest complaints.",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `product_category_code` varchar(20) not null, `date_product_first_available` datetime, `date_product_discontinued` datetime, `product_name` varchar(80), `product_description` varchar(255), `product_price` decimal(19, 4));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "Find the names of courses taught by the tutor who has personal name \"Julio\".",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));",
    "output": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.personal_name = \"Julio\""
  },
  {
    "instruction": "Which committees have delegates from both democratic party and liberal party?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Liberal\""
  },
  {
    "instruction": "Count the number of products with the 'hot' charactersitic.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"hot\""
  },
  {
    "instruction": "What are the first, middle, and last names of all staff?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT first_name, middle_name, last_name FROM Staff;"
  },
  {
    "instruction": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT min(membership_amount), max(membership_amount) FROM branch WHERE open_year = 2011 OR city = 'London'"
  },
  {
    "instruction": "Retrieve all the first and last names of authors in the alphabetical order of last names.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));",
    "output": "SELECT fname, lname FROM authors ORDER BY lname"
  },
  {
    "instruction": "For the airline ids with the top 10 most routes operated, what are their names?",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT T1.name, T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10"
  },
  {
    "instruction": "how long is the longest river in texas",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT LENGTH FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = \"texas\" ) AND traverse = \"texas\";"
  },
  {
    "instruction": "Find the number of distinct room types available.",
    "input": "create table room (roomnumber integer primary key not null, roomtype varchar(30) not null, blockfloor integer not null, blockcode integer not null, unavailable boolean not null, constraint fk_room_block_pk foreign key(blockfloor, blockcode) references block(blockfloor, blockcode));",
    "output": "SELECT count(DISTINCT roomtype) FROM room"
  },
  {
    "instruction": "Return the title of the film with the highest high estimate?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));",
    "output": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID ORDER BY high_estimate DESC LIMIT 1"
  },
  {
    "instruction": "return me the number of papers after 2000 in \" University of Michigan \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid WHERE t2.name = \"University of Michigan\" AND t4.year > 2000;"
  },
  {
    "instruction": "Which document type is described with the prefix 'Initial'?",
    "input": "create table `document_types` (`document_type_code` varchar(10) primary key, `document_description` varchar(255) not null);",
    "output": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'"
  },
  {
    "instruction": "List the actual delivery date for all the orders with quantity 1",
    "input": "create table customer_orders (order_id integer not null , customer_id integer not null, store_id integer not null, order_date datetime not null, planned_delivery_date datetime not null, actual_delivery_date datetime not null, other_order_details varchar(255), primary key (order_id), unique (order_id), foreign key (customer_id) references customers (customer_id), foreign key (store_id) references stores (store_id));create table order_items (order_item_id integer not null , order_id integer not null, product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), primary key (order_item_id), foreign key (order_id) references customer_orders (order_id), foreign key (product_id) references products (product_id));",
    "output": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1"
  },
  {
    "instruction": "What are the different software platforms for devices, ordered by frequency descending?",
    "input": "create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));",
    "output": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC"
  },
  {
    "instruction": "What are the names of all games played by Linda Smith?",
    "input": "create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = \"Smith\" AND T3.Fname = \"Linda\""
  },
  {
    "instruction": "what state has the shortest river",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT DISTINCT traverse FROM river WHERE LENGTH = ( SELECT MIN ( DISTINCT LENGTH ) FROM river );"
  },
  {
    "instruction": "How many movies about Iraq war were produced in 2015 ?",
    "input": "create table \"tags\" (\"id\" int, \"msid\" int, \"kid\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"kid\") references `keyword`(\"kid\"));create table \"keyword\" (\"id\" int, \"keyword\" text, primary key(\"id\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t3.title ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid WHERE t1.keyword = \"Iraq war\" AND t3.release_year = 2015;"
  },
  {
    "instruction": "Find the city the store named \"FJA Filming\" is in.",
    "input": "create table addresses (address_id varchar(100) not null, line_1 varchar(255), line_2 varchar(255), city_town varchar(255), state_county varchar(255), other_details varchar(255), primary key (address_id), unique (address_id));create table stores (store_id varchar(100) not null, address_id integer not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (store_id), unique (store_id), foreign key (address_id) references addresses (address_id), foreign key (marketing_region_code) references marketing_regions (marketing_region_code));",
    "output": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Store_Name = \"FJA Filming\""
  },
  {
    "instruction": "What are the mission codes, fates, and names of the ships involved?",
    "input": "create table \"mission\" (\"Mission_ID\" int, \"Ship_ID\" int, \"Code\" text, \"Launched_Year\" int, \"Location\" text, \"Speed_knots\" int, \"Fate\" text, primary key (\"Mission_ID\"), foreign key (\"Ship_ID\") references `ship`(\"Ship_ID\"));create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT T1.Code, T1.Fate, T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID"
  },
  {
    "instruction": "what is the maximum elevation of guadalupe peak",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_elevation FROM highlow WHERE highest_point = \"guadalupe peak\";"
  },
  {
    "instruction": "For each station, return its longitude and the average duration of trips that started from the station.",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT T1.name, T1.long, avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id"
  },
  {
    "instruction": "What is the most used instrument?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));",
    "output": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what is the most populous city",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );"
  },
  {
    "instruction": "what are the states that border the state with the greatest population",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );"
  },
  {
    "instruction": "What are the names of the counties of public safety, ordered by population descending?",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT Name FROM county_public_safety ORDER BY Population DESC"
  },
  {
    "instruction": "What are the descriptions of the categories that products with product descriptions that contain the letter t are in?",
    "input": "create table `ref_product_categories` (`product_category_code` varchar(15) primary key, `product_category_description` varchar(80), `unit_of_measure` varchar(20));create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%'"
  },
  {
    "instruction": "Are the customers holding coupons with amount 500 bad or good?",
    "input": "create table `customers` (`customer_id` integer primary key, `coupon_id` integer not null, `good_or_bad_customer` varchar(4), `first_name` varchar(80), `last_name` varchar(80), `gender_mf` varchar(1), `date_became_customer` datetime, `date_last_hire` datetime, foreign key (`coupon_id`) references `discount_coupons`(`coupon_id`));create table `discount_coupons` (`coupon_id` integer primary key, `date_issued` datetime, `coupon_amount` decimal(19, 4));",
    "output": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.coupon_amount = 500"
  },
  {
    "instruction": "where are some good places for arabic in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Find the papers which have \"Olin Shivers\" as an author.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Olin\" AND t1.lname = \"Shivers\""
  },
  {
    "instruction": "Find the number of different airports which are the destinations of the American Airlines.",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'"
  },
  {
    "instruction": "how many papers does David M. Blei have at AISTATS",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"David M. Blei\" AND t4.venuename = \"AISTATS\";"
  },
  {
    "instruction": "What is the minimum salary in each department?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT MIN(salary), department_id FROM employees GROUP BY department_id"
  },
  {
    "instruction": "What are the distinct salaries of all instructors who earned less than the maximum salary?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT max(salary) FROM instructor)"
  },
  {
    "instruction": "What were all the salary values of players in 2010 and 2001?",
    "input": "create table salary (year integer, team_id text, league_id text, player_id text, salary integer);create table salary (year integer, team_id text, league_id text, player_id text, salary integer);",
    "output": "SELECT salary FROM salary WHERE YEAR = 2010 UNION SELECT salary FROM salary WHERE YEAR = 2001"
  },
  {
    "instruction": "What are the official names of cities that have population over 1500 or less than 500?",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500"
  },
  {
    "instruction": "Papers by Peter Mertens and Dina Barbian",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
  },
  {
    "instruction": "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_gender` varchar(1), `staff_name` varchar(80));create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_gender` varchar(1), `staff_name` varchar(80));create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Sales Person\" EXCEPT SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Clerical Staff\""
  },
  {
    "instruction": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));create table inventory (inventory_id mediumint unsigned not null, film_id smallint unsigned not null, store_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (inventory_id), foreign key (store_id) references store (store_id), foreign key (film_id) references film (film_id));create table rental (rental_id int not null, rental_date datetime not null, inventory_id mediumint unsigned not null, customer_id smallint unsigned not null, return_date datetime default null, staff_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (rental_id), foreign key (staff_id) references staff (staff_id), foreign key (inventory_id) references inventory (inventory_id), foreign key (customer_id) references customer (customer_id));",
    "output": "SELECT T1.title, T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the name of the department with the most students enrolled?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of customers.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT count(*) FROM customers"
  },
  {
    "instruction": "How many cities are there in state \"Colorado\"?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `town_city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT count(*) FROM addresses WHERE state_province_county = \"Colorado\""
  },
  {
    "instruction": "For each nationality, how many different constructors are there?",
    "input": "create table \"constructors\" (\"constructorId\" integer primary key, \"constructorRef\" text, \"name\" text, \"nationality\" text, \"url\" text);",
    "output": "SELECT count(*), nationality FROM constructors GROUP BY nationality"
  },
  {
    "instruction": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2"
  },
  {
    "instruction": "Show the names of editors that are on at least two journal committees.",
    "input": "create table \"editor\" (\"Editor_ID\" int, \"Name\" text, \"Age\" real, primary key (\"Editor_ID\"));create table \"journal_committee\" (\"Editor_ID\" int, \"Journal_ID\" int, \"Work_Type\" text, primary key (\"Editor_ID\",\"Journal_ID\"), foreign key (\"Editor_ID\") references `editor`(\"Editor_ID\"), foreign key (\"Journal_ID\") references `journal`(\"Journal_ID\"));",
    "output": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "Show the name of each party and the corresponding number of delegates from that party.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T2.Party, COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party"
  },
  {
    "instruction": "Hom many musicians performed in the song \"Flash\"?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate = T2.id JOIN songs AS T3 ON T3.songid = T1.songid WHERE T3.Title = \"Flash\""
  },
  {
    "instruction": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
    "input": "create table `third_party_companies` (`company_id` integer primary key , `company_type` varchar(5) not null, `company_name` varchar(255), `company_address` varchar(255), `other_company_details` varchar(255));create table `maintenance_engineers` (`engineer_id` integer primary key, `company_id` integer not null, `first_name` varchar(50), `last_name` varchar(50), `other_details` varchar(255), foreign key (`company_id`) references `third_party_companies`(`company_id`));create table `third_party_companies` (`company_id` integer primary key , `company_type` varchar(5) not null, `company_name` varchar(255), `company_address` varchar(255), `other_company_details` varchar(255));create table `maintenance_contracts` (`maintenance_contract_id` integer primary key, `maintenance_contract_company_id` integer not null, `contract_start_date` datetime, `contract_end_date` datetime, `other_contract_details` varchar(255), foreign key (`maintenance_contract_company_id`) references `third_party_companies`(`company_id`));",
    "output": "SELECT T1.company_id, T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING count(*) >= 2 UNION SELECT T3.company_id, T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id = T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*) >= 2"
  },
  {
    "instruction": "What are the names and job titles of every person ordered alphabetically by name?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT name, job FROM Person ORDER BY name"
  },
  {
    "instruction": "Return the ids of the two department store chains with the most department stores.",
    "input": "create table `department_stores` (`dept_store_id` integer primary key, `dept_store_chain_id` integer, `store_name` varchar(80), `store_address` varchar(255), `store_phone` varchar(80), `store_email` varchar(80), foreign key (`dept_store_chain_id`) references `department_store_chain`(`dept_store_chain_id`));",
    "output": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2"
  },
  {
    "instruction": "What are the name and active date of the customers whose contact channel code is email?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_contact_channels` (`customer_id` integer not null, `channel_code` varchar(15) not null, `active_from_date` datetime not null, `active_to_date` datetime, `contact_number` varchar(50) not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.customer_name, t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'"
  },
  {
    "instruction": "who has written the most papers on semantic parsing since 2005 ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"semantic parsing\" AND t4.year > 2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "Show the names of members and the decoration themes they have.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Country\" text, \"College_ID\" int, primary key (\"Member_ID\"), foreign key (\"College_ID\") references `college`(\"College_ID\"));create table \"round\" (\"Round_ID\" int, \"Member_ID\" int, \"Decoration_Theme\" text, \"Rank_in_Round\" int, primary key (\"Member_ID\",\"Round_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"));",
    "output": "SELECT T1.Name, T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID"
  },
  {
    "instruction": "What is the id of the bike that traveled the most in 94002?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the id of each employee and the number of document destruction authorised by that employee?",
    "input": "create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT Destruction_Authorised_by_Employee_ID, count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID"
  },
  {
    "instruction": "return me the total citations of papers in the VLDB conference before 2005 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = \"VLDB\" AND t2.year < 2005;"
  },
  {
    "instruction": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\""
  },
  {
    "instruction": "What is the name of the marketing region that the store Rob Dinning belongs to?",
    "input": "create table marketing_regions (marketing_region_code char(15) not null, marketing_region_name varchar(255) not null, marketing_region_descriptrion varchar(255) not null, other_details varchar(255), primary key (marketing_region_code), unique (marketing_region_code));create table stores (store_id varchar(100) not null, address_id integer not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (store_id), unique (store_id), foreign key (address_id) references addresses (address_id), foreign key (marketing_region_code) references marketing_regions (marketing_region_code));",
    "output": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code WHERE T2.Store_Name = \"Rob Dinning\""
  },
  {
    "instruction": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < (SELECT avg(enrollment) FROM university)"
  },
  {
    "instruction": "what is the longest river in america",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );"
  },
  {
    "instruction": "Find the cities which have exactly two airports.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT city FROM airports GROUP BY city HAVING count(*) = 2"
  },
  {
    "instruction": "What is the team and starting year for each technician?",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Team, Starting_Year FROM technician"
  },
  {
    "instruction": "What are the names for all aircrafts with at least 2 flights?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count(*) >= 2"
  },
  {
    "instruction": "List the name of artworks whose type is not \"Program Talent Show\".",
    "input": "create table artwork (\"Artwork_ID\" int, \"Type\" text, \"Name\" text, primary key (\"Artwork_ID\"));",
    "output": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\""
  },
  {
    "instruction": "which rivers run through states that border the state with the capital atlanta",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital = \"atlanta\" ) );"
  },
  {
    "instruction": "What is the description of the claim status \"Open\"?",
    "input": "create table claims_processing_stages (claim_stage_id integer not null, next_claim_stage_id integer, claim_status_name varchar(255) not null, claim_status_description varchar(255) not null, primary key (claim_stage_id));",
    "output": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name = \"Open\""
  },
  {
    "instruction": "Show the minimum, average, maximum order quantity of all invoices.",
    "input": "create table invoices (invoice_id integer not null, order_id integer not null, payment_method_code char(15), product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), order_item_id integer not null, primary key (invoice_id), foreign key (order_id) references customer_orders (order_id), foreign key (order_id) references bookings (booking_id), foreign key (payment_method_code) references ref_payment_methods (payment_method_code));",
    "output": "SELECT min(Order_Quantity), avg(Order_Quantity), max(Order_Quantity) FROM INVOICES"
  },
  {
    "instruction": "List the journals related to Temporal Data",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Temporal Data\" GROUP BY t3.journalid;"
  },
  {
    "instruction": "what is the longest river in the state with the most major cities",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = ( SELECT state_name FROM city WHERE population > 150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;"
  },
  {
    "instruction": "Find the address of all customers that live in Germany and have invoice.",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `invoice` (`invoiceid` integer not null , `customerid` integer not null , `invoicedate` datetime not null , `billingaddress` varchar(70) default null , `billingcity` varchar(40) default null , `billingstate` varchar(40) default null , `billingcountry` varchar(40) default null , `billingpostalcode` varchar(10) default null , `total` decimal(10, 2) not null , primary key (`invoiceid`) , constraint `fk_invoicecustomerid` foreign key (`customerid`) references `customer` (`customerid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Germany\""
  },
  {
    "instruction": "Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT College FROM submission WHERE Scores > 90 INTERSECT SELECT College FROM submission WHERE Scores < 80"
  },
  {
    "instruction": "what are the order id and customer id of the oldest order?",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT order_id, customer_id FROM orders ORDER BY date_order_placed LIMIT 1"
  },
  {
    "instruction": "What is the average price of wines produced in appelations in Sonoma County?",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Sonoma\""
  },
  {
    "instruction": "Find the ids of orders which are shipped after 2000-01-01.",
    "input": "create table `shipments` (`shipment_id` integer primary key, `order_id` integer not null, `invoice_number` integer not null, `shipment_tracking_number` varchar(80), `shipment_date` datetime, `other_shipment_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`invoice_number`) references `invoices`(`invoice_number`));",
    "output": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\""
  },
  {
    "instruction": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4"
  },
  {
    "instruction": "how many rivers run through the states bordering colorado",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = \"colorado\" );"
  },
  {
    "instruction": "What are the names of the tourist attractions that have parking or shopping as their feature details?",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table tourist_attraction_features (tourist_attraction_id integer not null, feature_id integer not null, primary key (tourist_attraction_id, feature_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (feature_id) references features (feature_id));create table features (feature_id integer not null, feature_details varchar(255), primary key (feature_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table tourist_attraction_features (tourist_attraction_id integer not null, feature_id integer not null, primary key (tourist_attraction_id, feature_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (feature_id) references features (feature_id));create table features (feature_id integer not null, feature_details varchar(255), primary key (feature_id));",
    "output": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping'"
  },
  {
    "instruction": "Count the number of cities in Australia.",
    "input": "create table city (city_id smallint unsigned not null, city varchar(50) not null, country_id smallint unsigned not null, last_update timestamp not null default current_timestamp, primary key (city_id), foreign key (country_id) references country (country_id));create table country (country_id smallint unsigned not null, country varchar(50) not null, last_update timestamp not null default current_timestamp, primary key (country_id));",
    "output": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country = 'Australia'"
  },
  {
    "instruction": "Find the login name of the course author that teaches the course with name \"advanced database\".",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));",
    "output": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = \"advanced database\""
  },
  {
    "instruction": "What is the maximum and minimum grade point of students who live in NYC?",
    "input": "create table enrolled_in (stuid integer, cid varchar(7), grade varchar(2), foreign key(stuid) references student(stuid), foreign key(cid) references course(cid), foreign key(grade) references gradeconversion(lettergrade));create table gradeconversion (lettergrade varchar(2) primary key, gradepoint float);create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT max(T2.gradepoint), min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = \"NYC\""
  },
  {
    "instruction": "What are total transaction amounts for each transaction type?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT transaction_type, sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type"
  },
  {
    "instruction": "Show the names of players and names of their coaches.",
    "input": "create table \"player_coach\" (\"Player_ID\" int, \"Coach_ID\" int, \"Starting_year\" int, primary key (\"Player_ID\",\"Coach_ID\"), foreign key (`player_id`) references `player`(`player_id`), foreign key (`coach_id`) references `coach`(`coach_id`));create table \"coach\" (\"Coach_ID\" int, \"Coach_name\" text, \"Gender\" text, \"Club_ID\" int, \"Rank\" int, primary key (\"Coach_ID\"), foreign key (`club_id`) references `club`(`club_id`));create table \"player\" (\"Player_ID\" int, \"Sponsor_name\" text, \"Player_name\" text, \"Gender\" text, \"Residence\" text, \"Occupation\" text, \"Votes\" int, \"Rank\" text, primary key (\"Player_ID\"));",
    "output": "SELECT T3.Player_name, T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID"
  },
  {
    "instruction": "Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < 2"
  },
  {
    "instruction": "what state is springfield located in",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "Give me a list of all the distinct building descriptions.",
    "input": "create table apartment_buildings (building_id integer not null, building_short_name char(15), building_full_name varchar(80), building_description varchar(255), building_address varchar(255), building_manager varchar(50), building_phone varchar(80), primary key (building_id), unique (building_id));",
    "output": "SELECT DISTINCT building_description FROM Apartment_Buildings"
  },
  {
    "instruction": "Give the title and credits for the course that is taught in the classroom with the greatest capacity.",
    "input": "create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));",
    "output": "SELECT T3.title, T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = (SELECT max(capacity) FROM classroom)"
  },
  {
    "instruction": "Find the number of rooms located on each block floor.",
    "input": "create table block (blockfloor integer not null, blockcode integer not null, primary key(blockfloor, blockcode));create table room (roomnumber integer primary key not null, roomtype varchar(30) not null, blockfloor integer not null, blockcode integer not null, unavailable boolean not null, constraint fk_room_block_pk foreign key(blockfloor, blockcode) references block(blockfloor, blockcode));",
    "output": "SELECT count(*), T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockfloor"
  },
  {
    "instruction": "What are the types of competition and number of competitions for that type?",
    "input": "create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));",
    "output": "SELECT Competition_type, COUNT(*) FROM competition GROUP BY Competition_type"
  },
  {
    "instruction": "Advisor 1121 has how many students?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM Student WHERE Advisor = 1121;"
  },
  {
    "instruction": "What are the names of the schools with some players in the mid position but no goalies?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie'"
  },
  {
    "instruction": "what state has the smallest urban population",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) LIMIT 1;"
  },
  {
    "instruction": "Return the titles of films that include 'Deleted Scenes' in their special feature section.",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));",
    "output": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'"
  },
  {
    "instruction": "Which problem log was created most recently? Give me the log id.",
    "input": "create table `problem_log` (`problem_log_id` integer primary key, `assigned_to_staff_id` integer not null, `problem_id` integer not null, `problem_category_code` varchar(20) not null, `problem_status_code` varchar(20) not null, `log_entry_date` datetime, `log_entry_description` varchar(255), `log_entry_fix` varchar(255), `other_log_details` varchar(255), foreign key (`problem_category_code`) references `problem_category_codes`(`problem_category_code`), foreign key (`assigned_to_staff_id`) references `staff`(`staff_id`), foreign key (`problem_id`) references `problems`(`problem_id`), foreign key (`problem_status_code`) references `problem_status_codes`(`problem_status_code`));",
    "output": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1"
  },
  {
    "instruction": "How many customers live in Prague city?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*) FROM customers WHERE city = \"Prague\";"
  },
  {
    "instruction": "How many customers have email that contains \"gmail.com\"?",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\""
  },
  {
    "instruction": "What are the distinct majors that students with treasurer votes are studying?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote"
  },
  {
    "instruction": "What is the average GPA of students taking ACCT-211?",
    "input": "create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'"
  },
  {
    "instruction": "What are the speeds of the longest roller coaster?",
    "input": "create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1"
  },
  {
    "instruction": "What is the location code for the country \"Canada\"?",
    "input": "create table ref_locations (location_code char(15) not null, location_name varchar(255) not null, location_description varchar(255) not null, primary key (location_code));",
    "output": "SELECT location_code FROM Ref_locations WHERE location_name = \"Canada\""
  },
  {
    "instruction": "Return the names of musicals who have the nominee Bob Fosse.",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\""
  },
  {
    "instruction": "What are the names of technicians and the machine series that they repair?",
    "input": "create table \"repair_assignment\" (\"technician_id\" int, \"repair_ID\" int, \"Machine_ID\" int, primary key (\"technician_id\",\"repair_ID\",\"Machine_ID\"), foreign key (`technician_id`) references `technician`(`technician_id`), foreign key (`repair_id`) references `repair`(`repair_id`), foreign key (`machine_id`) references `machine`(`machine_id`));create table \"machine\" (\"Machine_ID\" int, \"Making_Year\" int, \"Class\" text, \"Team\" text, \"Machine_series\" text, \"value_points\" real, \"quality_rank\" int, primary key (\"Machine_ID\"));create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT T3.Name, T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID"
  },
  {
    "instruction": "Find the number of trains starting from each origin.",
    "input": "create table \"train\" (\"id\" int, \"train_number\" int, \"name\" text, \"origin\" text, \"destination\" text, \"time\" text, \"interval\" text, primary key (\"id\"));",
    "output": "SELECT origin, count(*) FROM train GROUP BY origin"
  },
  {
    "instruction": "What is average and maximum salary of all employees.",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT avg(salary), max(salary) FROM Employee"
  },
  {
    "instruction": "What is the total number of games played?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT sum(gamesplayed) FROM Sportsinfo"
  },
  {
    "instruction": "How many allergies have type animal?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT count(*) FROM Allergy_type WHERE allergytype = \"animal\""
  },
  {
    "instruction": "What is the nationality of \" Kevin Spacey \" ?",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));",
    "output": "SELECT nationality FROM director WHERE name = \"director_name0\";"
  },
  {
    "instruction": "How many different allergy types exist?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT count(DISTINCT allergytype) FROM Allergy_type"
  },
  {
    "instruction": "Find the name of captains whose rank are either Midshipman or Lieutenant.",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT name FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant'"
  },
  {
    "instruction": "What are the phone and email for customer Harold?",
    "input": "create table customers (customer_id varchar(100) not null, address_id integer not null, customer_name varchar(255), customer_phone varchar(255), customer_email_address varchar(255), other_details varchar(255), primary key (customer_id), unique (customer_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT Customer_Phone, Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name = \"Harold\""
  },
  {
    "instruction": "Return the average and minimum ages across artists from the United States.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT avg(age), min(age) FROM artist WHERE country = 'United States'"
  },
  {
    "instruction": "Show the names of all the donors except those whose donation amount less than 9.",
    "input": "create table \"endowment\" (\"endowment_id\" int, \"School_id\" int, \"donator_name\" text, \"amount\" real, primary key(\"endowment_id\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));create table \"endowment\" (\"endowment_id\" int, \"School_id\" int, \"donator_name\" text, \"amount\" real, primary key(\"endowment_id\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));",
    "output": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount < 9"
  },
  {
    "instruction": "what is the total length of all rivers in the usa",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT SUM ( LENGTH ) FROM river;"
  },
  {
    "instruction": "find the total percentage share of all channels owned by CCTV.",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));",
    "output": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER = 'CCTV'"
  },
  {
    "instruction": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500"
  },
  {
    "instruction": "Find the full name of the customer with the email \"luisg@embraer.com.br\".",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT FirstName, LastName FROM CUSTOMER WHERE Email = \"luisg@embraer.com.br\""
  },
  {
    "instruction": "What are the full names of actors who had roles in more than 30 films?",
    "input": "create table film_actor (actor_id smallint unsigned not null, film_id smallint unsigned not null, last_update timestamp not null default current_timestamp, primary key (actor_id, film_id), foreign key (actor_id) references actor (actor_id), foreign key (film_id) references film (film_id));create table actor (actor_id smallint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, last_update timestamp not null default current_timestamp, primary key (actor_id));",
    "output": "SELECT T2.first_name, T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING count(*) > 30"
  },
  {
    "instruction": "What instruments did the musician with the last name \"Heilo\" play in the song \"Le Pop\"?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));",
    "output": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = \"Heilo\" AND T3.title = \"Le Pop\""
  },
  {
    "instruction": "How many coaches does each club has? List the club id, name and the number of coaches.",
    "input": "create table \"club\" (\"Club_ID\" int, \"Club_name\" text, \"Region\" text, \"Start_year\" int, primary key (\"Club_ID\"));create table \"coach\" (\"Coach_ID\" int, \"Coach_name\" text, \"Gender\" text, \"Club_ID\" int, \"Rank\" int, primary key (\"Coach_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT T1.club_id, T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id"
  },
  {
    "instruction": "Find the names of products that were bought by at least two distinct customers.",
    "input": "create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, foreign key (`order_id`) references `customer_orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id) >= 2"
  },
  {
    "instruction": "what is the biggest capital city in the us",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );"
  },
  {
    "instruction": "What are the party emails associated with parties that used the party form that is the most common?",
    "input": "create table `parties` (`party_id` integer primary key, `payment_method_code` varchar(15) not null, `party_phone` varchar(80), `party_email` varchar(80));create table `party_forms` (`party_id` integer not null, `form_id` integer not null, `date_completion_started` datetime not null, `form_status_code` varchar(15) not null, `date_fully_completed` datetime, primary key (`party_id`, `form_id`), foreign key (`party_id`) references `parties`(`party_id`), foreign key (`form_id`) references `forms`(`form_id`));create table `party_forms` (`party_id` integer not null, `form_id` integer not null, `date_completion_started` datetime not null, `form_status_code` varchar(15) not null, `date_fully_completed` datetime, primary key (`party_id`, `form_id`), foreign key (`party_id`) references `parties`(`party_id`), foreign key (`form_id`) references `forms`(`form_id`));",
    "output": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE t2.form_id = (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "What are the average enrollment size of the universities that are founded before 1850?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT avg(enrollment) FROM university WHERE founded < 1850"
  },
  {
    "instruction": "Count the number of distinct instructors who have taught a course.",
    "input": "create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);",
    "output": "SELECT COUNT (DISTINCT id) FROM teaches"
  },
  {
    "instruction": "How many customers are there in the customer type with the most customers?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find all cities in which there is a restaurant called \" MGM Grand Buffet \"",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"MGM Grand Buffet\" AND t2.category_name = \"category_category_name0\";"
  },
  {
    "instruction": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT count(*), city FROM airports WHERE country = 'United States' GROUP BY city ORDER BY count(*) DESC"
  },
  {
    "instruction": "Count the number of departments which offer courses.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT count(DISTINCT dept_name) FROM course"
  },
  {
    "instruction": "Return the full name and id of the actor or actress who starred in the greatest number of films.",
    "input": "create table film_actor (actor_id smallint unsigned not null, film_id smallint unsigned not null, last_update timestamp not null default current_timestamp, primary key (actor_id, film_id), foreign key (actor_id) references actor (actor_id), foreign key (film_id) references film (film_id));create table actor (actor_id smallint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, last_update timestamp not null default current_timestamp, primary key (actor_id));",
    "output": "SELECT T2.first_name, T2.last_name, T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many students are from each city, and which cities have more than one cities?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*), city_code FROM student GROUP BY city_code HAVING count(*) > 1"
  },
  {
    "instruction": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'SF'"
  },
  {
    "instruction": "When did ameet soni publish ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"ameet soni\" GROUP BY t3.year ORDER BY t3.year;"
  },
  {
    "instruction": "What are the names of wines, sorted in alphabetical order?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT Name FROM WINE ORDER BY Name"
  },
  {
    "instruction": "How many video games do you have?",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT count(*) FROM Video_games"
  },
  {
    "instruction": "How many different kinds of clients are supported by the web clients accelerators?",
    "input": "create table \"Web_client_accelerator\" (\"id\" int, \"name\" text, \"Operating_system\" text, \"Client\" text, \"Connection\" text, primary key(\"id\"));",
    "output": "SELECT count(DISTINCT client) FROM web_client_accelerator"
  },
  {
    "instruction": "Find the city that hosted some events in the most recent year. What is the id of this city?",
    "input": "create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));",
    "output": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1"
  },
  {
    "instruction": "What are the student ids for those on scholarship in major number 600?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Student WHERE major = 600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'"
  },
  {
    "instruction": "What are the name, phone number and email address of the customer who made the largest number of orders?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name, T1.customer_phone, T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which payment method is used the most often?",
    "input": "create table payments (payment_id integer not null, settlement_id integer not null, payment_method_code varchar(255), date_payment_made date, amount_payment integer, primary key (payment_id), foreign key (settlement_id) references settlements (settlement_id));",
    "output": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List the maximum, minimum and average number of used kb in screen mode.",
    "input": "create table \"screen_mode\" (\"Graphics_mode\" real, \"Char_cells\" text, \"Pixels\" text, \"Hardware_colours\" real, \"used_kb\" real, \"map\" text, \"Type\" text, primary key (\"Graphics_mode\"));",
    "output": "SELECT max(used_kb), min(used_kb), avg(used_kb) FROM screen_mode;"
  },
  {
    "instruction": "which capitals are not major cities",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name WHERE t1.population <= 150000;"
  },
  {
    "instruction": "How many papers are presented in nature communications 2015 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"nature communications\";"
  },
  {
    "instruction": "What are the last names of faculty in building Barton, sorted by last name?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT Lname FROM FACULTY WHERE Building = \"Barton\" ORDER BY Lname"
  },
  {
    "instruction": "List the name of physicians who never took any appointment.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table appointment (appointmentid integer primary key not null, patient integer not null, prepnurse integer, physician integer not null, start datetime not null, end datetime not null, examinationroom text not null, constraint fk_appointment_patient_ssn foreign key(patient) references patient(ssn), constraint fk_appointment_nurse_employeeid foreign key(prepnurse) references nurse(employeeid), constraint fk_appointment_physician_employeeid foreign key(physician) references physician(employeeid));create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));",
    "output": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID"
  },
  {
    "instruction": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating DESC LIMIT 3"
  },
  {
    "instruction": "Find the number of rooms for different block code?",
    "input": "create table block (blockfloor integer not null, blockcode integer not null, primary key(blockfloor, blockcode));create table room (roomnumber integer primary key not null, roomtype varchar(30) not null, blockfloor integer not null, blockcode integer not null, unavailable boolean not null, constraint fk_room_block_pk foreign key(blockfloor, blockcode) references block(blockfloor, blockcode));",
    "output": "SELECT count(*), T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockcode"
  },
  {
    "instruction": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.",
    "input": "create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));",
    "output": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Louisville, Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Hiram, Georgia'"
  },
  {
    "instruction": "Find the payment method and phone of the party with email \"enrico09@example.com\".",
    "input": "create table `parties` (`party_id` integer primary key, `payment_method_code` varchar(15) not null, `party_phone` varchar(80), `party_email` varchar(80));",
    "output": "SELECT payment_method_code, party_phone FROM parties WHERE party_email = \"enrico09@example.com\""
  },
  {
    "instruction": "Give the id and product type of the product with the lowest price.",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT product_id, product_type_code FROM products ORDER BY product_price LIMIT 1"
  },
  {
    "instruction": "Find the cities corresponding to employees who help customers with the postal code 70174.",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `employee` (`employeeid` integer not null , `lastname` varchar(20) not null , `firstname` varchar(20) not null , `title` varchar(30) default null , `reportsto` integer default null , `birthdate` datetime default null , `hiredate` datetime default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) default null , primary key (`employeeid`) , constraint `fk_employeereportsto` foreign key (`reportsto`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = \"70174\""
  },
  {
    "instruction": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));",
    "output": "SELECT Elimination_Move FROM Elimination WHERE Team = \"Team Orton\""
  },
  {
    "instruction": "What are the different statement ids on accounts, and the number of accounts for each?",
    "input": "create table accounts (account_id integer not null, statement_id integer not null, account_details varchar(255), primary key (account_id), foreign key (statement_id) references statements (statement_id));",
    "output": "SELECT STATEMENT_ID, count(*) FROM Accounts GROUP BY STATEMENT_ID"
  },
  {
    "instruction": "What are the different product colors?",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `production_type_code` varchar(15) not null, `unit_price` decimal(19, 4), `product_name` varchar(80), `product_color` varchar(20), `product_size` varchar(20), foreign key (`production_type_code`) references `product_categories`(`production_type_code`));",
    "output": "SELECT DISTINCT product_color FROM Products"
  },
  {
    "instruction": "how many cities does texas have",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( city_name ) FROM city WHERE state_name = \"texas\";"
  },
  {
    "instruction": "Select the average price of each manufacturer's products, showing only the manufacturer's code.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT AVG(Price), Manufacturer FROM Products GROUP BY Manufacturer"
  },
  {
    "instruction": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT max(product_price), min(product_price), product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code"
  },
  {
    "instruction": "What is the first and last name of all students who are younger than average?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT fname, lname FROM student WHERE age < (SELECT avg(age) FROM student)"
  },
  {
    "instruction": "Return the channel code and contact number of the customer contact channel whose active duration was the longest.",
    "input": "create table `customer_contact_channels` (`customer_id` integer not null, `channel_code` varchar(15) not null, `active_from_date` datetime not null, `active_to_date` datetime, `contact_number` varchar(50) not null, foreign key (`customer_id`) references `customers`(`customer_id`));create table `customer_contact_channels` (`customer_id` integer not null, `channel_code` varchar(15) not null, `active_from_date` datetime not null, `active_to_date` datetime, `contact_number` varchar(50) not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT channel_code, contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date = (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)"
  },
  {
    "instruction": "Find the total amount claimed in the most recently created document.",
    "input": "create table claim_headers (claim_header_id integer not null, claim_status_code char(15) not null, claim_type_code char(15) not null, policy_id integer not null, date_of_claim datetime, date_of_settlement datetime, amount_claimed decimal(20, 4), amount_piad decimal(20, 4), primary key (claim_header_id), foreign key (policy_id) references policies (policy_id));create table claims_documents (claim_id integer not null, document_type_code char(15) not null, created_by_staff_id integer, created_date integer, primary key (claim_id, document_type_code), foreign key (claim_id) references claim_headers (claim_header_id), foreign key (created_by_staff_id) references staff (staff_id));create table claims_documents (claim_id integer not null, document_type_code char(15) not null, created_by_staff_id integer, created_date integer, primary key (claim_id, document_type_code), foreign key (claim_id) references claim_headers (claim_header_id), foreign key (created_by_staff_id) references staff (staff_id));",
    "output": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
  },
  {
    "instruction": "List all country and league names.",
    "input": "create table `country` (`id`\tinteger primary key autoincrement, `name`\ttext unique);create table `league` (`id`\tinteger primary key autoincrement, `country_id`\tinteger, `name`\ttext unique, foreign key(`country_id`) references `country`(`id`));",
    "output": "SELECT T1.name, T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id"
  },
  {
    "instruction": "What are the names and average salaries for departments with average salary higher than 42000?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT dept_name, AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary) > 42000"
  },
  {
    "instruction": "What are the names of members who are not in charge of any events?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));create table \"party_events\" (\"Event_ID\" int, \"Event_Name\" text, \"Party_ID\" int, \"Member_in_charge_ID\" int, primary key (\"Event_ID\"), foreign key (`party_id`) references `party`(`party_id`), foreign key (`member_in_charge_id`) references `member`(`member_id`));",
    "output": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id"
  },
  {
    "instruction": "List the type of bed and name of all traditional rooms.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName, bedType FROM Rooms WHERE decor = \"traditional\";"
  },
  {
    "instruction": "Which of the mill names contains the french word 'Moulin'?",
    "input": "create table \"mill\" (\"architect_id\" int, \"id\" int, \"location\" text, \"name\" text, \"type\" text, \"built_year\" int, \"notes\" text, primary key (\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));",
    "output": "SELECT name FROM mill WHERE name LIKE '%Moulin%'"
  },
  {
    "instruction": "which gender got the highest average uncertain ratio.",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1"
  },
  {
    "instruction": "For each zip code, how many times has the maximum wind speed reached 25 mph?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT zip_code, count(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code"
  },
  {
    "instruction": "What papers were published at CVPR in 2016 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.datasetname = \"RGB-D Object Dataset\" AND t3.title = \"Class consistent multi-modal fusion with binary features\" AND t3.year = 2016 AND t4.venuename = \"CVPR\";"
  },
  {
    "instruction": "What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?",
    "input": "create table \"pitStops\" (\"raceId\" integer, \"driverId\" integer, \"stop\" integer, \"lap\" integer, \"time\" text, \"duration\" text, \"milliseconds\" integer, primary key (\"raceId\", \"driverId\", \"stop\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"pitStops\" (\"raceId\" integer, \"driverId\" integer, \"stop\" integer, \"lap\" integer, \"time\" text, \"duration\" text, \"milliseconds\" integer, primary key (\"raceId\", \"driverId\", \"stop\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT DISTINCT driverid, STOP FROM pitstops WHERE duration > (SELECT min(duration) FROM pitstops WHERE raceid = 841)"
  },
  {
    "instruction": "What was the date of the earliest payment?",
    "input": "create table payment (payment_id smallint unsigned not null, customer_id smallint unsigned not null, staff_id tinyint unsigned not null, rental_id int default null, amount decimal(5, 2) not null, payment_date datetime not null, last_update timestamp default current_timestamp, primary key (payment_id), foreign key (rental_id) references rental (rental_id), foreign key (customer_id) references customer (customer_id), foreign key (staff_id) references staff (staff_id));",
    "output": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1"
  },
  {
    "instruction": "Show the zip code of the county with name \"Howard\".",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT Zip_code FROM county WHERE County_name = \"Howard\""
  },
  {
    "instruction": "How many gymnasts are there?",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT count(*) FROM gymnast"
  },
  {
    "instruction": "Find the names of all the customers and staff members.",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table staff (staff_id integer not null, staff_details varchar(255) not null, primary key (staff_id));",
    "output": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff"
  },
  {
    "instruction": "Return the names of all counties sorted by population in ascending order.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT County_name FROM county ORDER BY Population ASC"
  },
  {
    "instruction": "How many stations does Mountain View city has?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT COUNT(*) FROM station WHERE city = \"Mountain View\""
  },
  {
    "instruction": "What information is there on albums from 2010?",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);",
    "output": "SELECT * FROM Albums WHERE YEAR = 2010"
  },
  {
    "instruction": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
    "input": "create table `mailshot_customers` (`mailshot_id` integer not null, `customer_id` integer not null, `outcome_code` varchar(15) not null, `mailshot_customer_date` datetime, foreign key (`customer_id`) references `customers`(`customer_id`), foreign key (`mailshot_id`) references `mailshot_campaigns`(`mailshot_id`));create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `customer_phone` varchar(80), `customer_email` varchar(80), `customer_address` varchar(255), `customer_login` varchar(80), `customer_password` varchar(10));create table `mailshot_customers` (`mailshot_id` integer not null, `customer_id` integer not null, `outcome_code` varchar(15) not null, `mailshot_customer_date` datetime, foreign key (`customer_id`) references `customers`(`customer_id`), foreign key (`mailshot_id`) references `mailshot_campaigns`(`mailshot_id`));create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `customer_phone` varchar(80), `customer_email` varchar(80), `customer_address` varchar(255), `customer_login` varchar(80), `customer_password` varchar(10));",
    "output": "SELECT T2.customer_name, T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'Order' INTERSECT SELECT T2.customer_name, T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'No Response'"
  },
  {
    "instruction": "What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?",
    "input": "create table `suppliers` (`supplier_id` integer primary key, `supplier_name` varchar(80), `supplier_phone` varchar(80));create table `supplier_addresses` (`supplier_id` integer not null, `address_id` integer not null, `date_from` datetime not null, `date_to` datetime, primary key (`supplier_id`, `address_id`), foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`supplier_id`) references `suppliers`(`supplier_id`));create table `addresses` (`address_id` integer primary key, `address_details` varchar(255));",
    "output": "SELECT T1.supplier_name, T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY T3.address_details"
  },
  {
    "instruction": "how many colorado rivers are there",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( river_name ) FROM river WHERE river_name = \"colorado\";"
  },
  {
    "instruction": "what is the best american in the bay area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" );"
  },
  {
    "instruction": "Which student are enrolled in at least two courses? Give me the student ID and personal name.",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT T1.student_id, T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?",
    "input": "create table `tasks` (`task_id` integer primary key, `project_id` integer not null, `task_details` varchar(255) not null, `eg agree objectives` varchar(1), foreign key (`project_id`) references `projects`(`project_id`));create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `tasks` (`task_id` integer primary key, `project_id` integer not null, `task_details` varchar(255) not null, `eg agree objectives` varchar(1), foreign key (`project_id`) references `projects`(`project_id`));create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));",
    "output": "SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis' UNION SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.project_id HAVING count(*) > 2"
  },
  {
    "instruction": "List all the Seafood restaurant in \" Los Angeles \"",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"Seafood\" AND t3.category_name = \"restaurant\";"
  },
  {
    "instruction": "Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT stu_fname, stu_gpa FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student)"
  },
  {
    "instruction": "What are the ids of documents which don't have expense budgets?",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses"
  },
  {
    "instruction": "How many tips have been written in 2015",
    "input": "create table \"tip\" (\"tip_id\" int, \"business_id\" text, \"text\" text, \"user_id\" text, \"likes\" int, \"year\" int, \"month\" text, primary key(\"tip_id\") foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT COUNT ( DISTINCT text ) FROM tip WHERE YEAR = 2015;"
  },
  {
    "instruction": "Find the name of the tryout players who are from the college with largest size.",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T1.cName = (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)"
  },
  {
    "instruction": "Where does the customer with the first name Linda live? And what is her email?",
    "input": "create table customer (customer_id smallint unsigned not null, store_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, email varchar(50) default null, address_id smallint unsigned not null, active boolean not null default true, create_date datetime not null, last_update timestamp default current_timestamp, primary key (customer_id), foreign key (address_id) references address (address_id), foreign key (store_id) references store (store_id));create table address (address_id smallint unsigned not null, address varchar(50) not null, address2 varchar(50) default null, district varchar(20) not null, city_id smallint unsigned not null, postal_code varchar(10) default null, phone varchar(20) not null, last_update timestamp not null default current_timestamp, primary key (address_id), foreign key (city_id) references city (city_id));",
    "output": "SELECT T2.address, T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id = T1.address_id WHERE T1.first_name = 'LINDA'"
  },
  {
    "instruction": "how many states does the missouri run through",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( traverse ) FROM river WHERE river_name = \"missouri\";"
  },
  {
    "instruction": "Show each apartment type code, and the maximum and minimum number of rooms for each type.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_type_code, max(room_count), min(room_count) FROM Apartments GROUP BY apt_type_code"
  },
  {
    "instruction": "What are the monthly rentals of student addresses in Texas state?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1` varchar(120), `line_2` varchar(120), `line_3` varchar(120), `city` varchar(80), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));create table `student_addresses` (`student_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `date_address_to` datetime, `monthly_rental` decimal(19, 4), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Texas\""
  },
  {
    "instruction": "What are the names of counties that do not contain any cities?",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));",
    "output": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)"
  },
  {
    "instruction": "What are the names of the courses that have exactly 1 student enrollment?",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) = 1"
  },
  {
    "instruction": "What address was the document with id 4 mailed to?",
    "input": "create table addresses (address_id integer not null, address_details varchar(255), primary key (address_id));create table documents_mailed (document_id integer not null, mailed_to_address_id integer not null, mailing_date datetime, primary key (document_id, mailed_to_address_id), foreign key (document_id) references documents (document_id), foreign key (mailed_to_address_id) references addresses (address_id));",
    "output": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;"
  },
  {
    "instruction": "What is the name and date of the race that occurred most recently?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT name, date FROM races ORDER BY date DESC LIMIT 1"
  },
  {
    "instruction": "Show distinct types of artworks that are nominated in festivals in 2007.",
    "input": "create table nomination (\"Artwork_ID\" int, \"Festival_ID\" int, \"Result\" text, primary key (\"Artwork_ID\",\"Festival_ID\"), foreign key (\"Artwork_ID\") references `artwork`(\"Artwork_ID\"), foreign key (\"Festival_ID\") references `festival_detail`(\"Festival_ID\"));create table artwork (\"Artwork_ID\" int, \"Type\" text, \"Name\" text, primary key (\"Artwork_ID\"));create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));",
    "output": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T3.Year = 2007"
  },
  {
    "instruction": "Find all the policy type codes associated with the customer \"Dayana Robel\"",
    "input": "create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));",
    "output": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = \"Dayana Robel\""
  },
  {
    "instruction": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";"
  },
  {
    "instruction": "How many undergraduates are there in \"San Jose State University\" in year 2004?",
    "input": "create table \"discipline_enrollments\" (\"Campus\" integer, \"Discipline\" integer, \"Year\" integer, \"Undergraduate\" integer, \"Graduate\" integer, primary key (campus, discipline), foreign key (campus) references campuses(id));create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Jose State University\""
  },
  {
    "instruction": "How many songs were released for each format?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);",
    "output": "SELECT count(*), formats FROM files GROUP BY formats"
  },
  {
    "instruction": "what is the capital of the state with the highest elevation",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t2.highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Which locations have 2 or more cinemas with capacity over 300?",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) >= 2"
  },
  {
    "instruction": "In what city was \" Kevin Spacey \" born ?",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));",
    "output": "SELECT birth_city FROM director WHERE name = \"director_name0\";"
  },
  {
    "instruction": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
    "input": "create table \"department\" (\"Department_ID\" int, \"Name\" text, \"Creation\" text, \"Ranking\" int, \"Budget_in_Billions\" real, \"Num_Employees\" real, primary key (\"Department_ID\"));create table \"management\" (\"department_ID\" int, \"head_ID\" int, \"temporary_acting\" text, primary key (\"Department_ID\",\"head_ID\"), foreign key (\"Department_ID\") references `department`(\"Department_ID\"), foreign key (\"head_ID\") references `head`(\"head_ID\"));",
    "output": "SELECT T1.name, T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'"
  },
  {
    "instruction": "How many people whose age is greater 30 and job is engineer?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT count(*) FROM Person WHERE age > 30 AND job = 'engineer'"
  },
  {
    "instruction": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
    "input": "create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));create table services (service_id integer not null, service_type_code char(15), workshop_group_id integer not null, product_description varchar(255), product_name varchar(255), product_price decimal(20, 4), other_product_service_details varchar(255), primary key (service_id), unique (service_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id), foreign key (service_type_code) references ref_service_types (service_type_code));",
    "output": "SELECT T1.Store_Phone, T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID"
  },
  {
    "instruction": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
    "input": "create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));create table `research_staff` (`staff_id` integer primary key, `employer_organisation_id` integer not null, `staff_details` varchar(255) not null, foreign key (`employer_organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT T1.organisation_id, T1.organisation_type, T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show names of technicians who are assigned to repair machines with value point more than 70.",
    "input": "create table \"repair_assignment\" (\"technician_id\" int, \"repair_ID\" int, \"Machine_ID\" int, primary key (\"technician_id\",\"repair_ID\",\"Machine_ID\"), foreign key (`technician_id`) references `technician`(`technician_id`), foreign key (`repair_id`) references `repair`(`repair_id`), foreign key (`machine_id`) references `machine`(`machine_id`));create table \"machine\" (\"Machine_ID\" int, \"Making_Year\" int, \"Class\" text, \"Team\" text, \"Machine_series\" text, \"value_points\" real, \"quality_rank\" int, primary key (\"Machine_ID\"));create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70"
  },
  {
    "instruction": "What are the names of companies whose headquarters are not \"USA\"?",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT name FROM Companies WHERE Headquarters != 'USA'"
  },
  {
    "instruction": "Find the name of the department that offers the largest number of credits of all classes.",
    "input": "create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1"
  },
  {
    "instruction": "Show the names of people and the number of times they have been on the affirmative side of debates.",
    "input": "create table \"debate_people\" (\"Debate_ID\" int, \"Affirmative\" int, \"Negative\" int, \"If_Affirmative_Win\" bool, primary key (\"Debate_ID\",\"Affirmative\",\"Negative\"), foreign key (\"Debate_ID\") references `debate`(\"Debate_ID\"), foreign key (\"Affirmative\") references `people`(\"People_ID\"), foreign key (\"Negative\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"District\" text, \"Name\" text, \"Party\" text, \"Age\" int, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name, COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name"
  },
  {
    "instruction": "Which apartments have bookings with status code \"Confirmed\"? Return their apartment numbers.",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\""
  },
  {
    "instruction": "Find name of the services that has never been used.",
    "input": "create table `services` (`service_id` integer primary key, `service_type_code` varchar(15) not null, `service_name` varchar(80), `service_descriptio` varchar(255));create table `services` (`service_id` integer primary key, `service_type_code` varchar(15) not null, `service_name` varchar(80), `service_descriptio` varchar(255));create table `party_services` (`booking_id` integer not null , `customer_id` integer not null, `service_id` integer not null, `service_datetime` datetime not null, `booking_made_date` datetime, foreign key (`service_id`) references `services`(`service_id`), foreign key (`customer_id`) references `parties`(`party_id`));",
    "output": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id"
  },
  {
    "instruction": "What is the theme and artist name for the exhibition with a ticket price higher than the average?",
    "input": "create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T1.theme, T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.ticket_price > (SELECT avg(ticket_price) FROM exhibition)"
  },
  {
    "instruction": "Find all cities which has a \" Taj Mahal \" .",
    "input": "create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT city FROM business WHERE name = \"Taj Mahal\";"
  },
  {
    "instruction": "Give me a list of names and years of races that had any driver whose forename is Lewis?",
    "input": "create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);",
    "output": "SELECT T2.name, T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\""
  },
  {
    "instruction": "Show the ages of gymnasts in descending order of total points.",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T1.Total_Points DESC"
  },
  {
    "instruction": "Find the average height and weight for all males (sex is M).",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));",
    "output": "SELECT avg(height), avg(weight) FROM people WHERE sex = 'M'"
  },
  {
    "instruction": "return me the papers on PVLDB .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = \"PVLDB\";"
  },
  {
    "instruction": "list the states",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state;"
  },
  {
    "instruction": "display all the information of the employees whose salary if within the range of smallest salary and 2500.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500"
  },
  {
    "instruction": "How many papers does Christopher D. Manning have ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Christopher D. Manning\";"
  },
  {
    "instruction": "List the companies of entrepreneurs in descending order of money requested.",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC"
  },
  {
    "instruction": "What is the average number of gold medals for clubs?",
    "input": "create table \"club_rank\" (\"Rank\" real, \"Club_ID\" int, \"Gold\" real, \"Silver\" real, \"Bronze\" real, \"Total\" real, primary key (\"Rank\",\"Club_ID\") foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT avg(Gold) FROM club_rank"
  },
  {
    "instruction": "What are the maximum price and score of wines for each year?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT max(Price), max(Score), YEAR FROM WINE GROUP BY YEAR"
  },
  {
    "instruction": "How many artists do not have any album?",
    "input": "create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"
  },
  {
    "instruction": "Count the number of universities that do not participate in the baketball match.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));",
    "output": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)"
  },
  {
    "instruction": "How many tips has Michelle written in 2010",
    "input": "create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));create table \"tip\" (\"tip_id\" int, \"business_id\" text, \"text\" text, \"user_id\" text, \"likes\" int, \"year\" int, \"month\" text, primary key(\"tip_id\") foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t1.year = 2010 AND t2.name = \"Michelle\";"
  },
  {
    "instruction": "Which students not enrolled in any course? Find their personal names.",
    "input": "create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id"
  },
  {
    "instruction": "Find all Sci-Fi produced in year 2010",
    "input": "create table \"genre\" (\"gid\" int, \"genre\" text, primary key(\"gid\"));create table \"classification\" (\"id\" int, \"msid\" int, \"gid\" int, primary key(\"id\"), foreign key(\"gid\") references `genre`(\"gid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.genre = \"Sci-Fi\" AND t3.release_year = 2010;"
  },
  {
    "instruction": "Show the customer id and number of accounts with most accounts.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT customer_id, count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the different names for all songs that have a higher resolution than English songs?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT DISTINCT song_name FROM song WHERE resolution > (SELECT min(resolution) FROM song WHERE languages = \"english\")"
  },
  {
    "instruction": "List the teams of the players with the top 5 largest ages.",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));",
    "output": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5"
  },
  {
    "instruction": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT T1.claim_id, T1.date_claim_made, count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "which state has the lowest population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state );"
  },
  {
    "instruction": "What is the name of the youngest editor?",
    "input": "create table \"editor\" (\"Editor_ID\" int, \"Name\" text, \"Age\" real, primary key (\"Editor_ID\"));",
    "output": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1"
  },
  {
    "instruction": "What are the first name and last name of each male member in club \"Hopkins Student Enterprises\"?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t3.sex = \"M\""
  },
  {
    "instruction": "Find the first and last name of students who are not in the largest major.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT fname, lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "what is the smallest city of the smallest state in the us",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );"
  },
  {
    "instruction": "best paper in TACL 2014 ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid ), t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2014 AND t2.venuename = \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;"
  },
  {
    "instruction": "What are the first names of students studying in room 107?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT firstname FROM list WHERE classroom = 107"
  },
  {
    "instruction": "How many products are never booked with amount higher than 200?",
    "input": "create table `products_for_hire` (`product_id` integer primary key, `product_type_code` varchar(15) not null, `daily_hire_cost` decimal(19, 4), `product_name` varchar(80), `product_description` varchar(255));create table `products_booked` (`booking_id` integer not null, `product_id` integer not null, `returned_yn` varchar(1), `returned_late_yn` varchar(1), `booked_count` integer, `booked_amount` float null, primary key (`booking_id`, `product_id`) foreign key (`booking_id`) references `bookings`(`booking_id`), foreign key (`product_id`) references `products_for_hire`(`product_id`));",
    "output": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount > 200 )"
  },
  {
    "instruction": "Show the distinct countries of managers.",
    "input": "create table \"manager\" (\"Manager_ID\" int, \"Name\" text, \"Country\" text, \"Working_year_starts\" text, \"Age\" int, \"Level\" int, primary key (\"Manager_ID\"));",
    "output": "SELECT DISTINCT Country FROM manager"
  },
  {
    "instruction": "List the name of all playlist.",
    "input": "create table playlists (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT name FROM playlists;"
  },
  {
    "instruction": "What are the codes, names, and descriptions of the different document types?",
    "input": "create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));",
    "output": "SELECT document_type_code, document_type_name, document_type_description FROM Ref_document_types"
  },
  {
    "instruction": "What journals are Takashi Matsumoto 's articles published in ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Takashi Matsumoto\" GROUP BY t3.journalid;"
  },
  {
    "instruction": "List ids for all student who are on scholarship.",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'"
  },
  {
    "instruction": "How old is each student and how many students are each age?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT age, count(*) FROM Student GROUP BY age"
  },
  {
    "instruction": "Count the number of distinct channel owners.",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));",
    "output": "SELECT count(DISTINCT OWNER) FROM channel"
  },
  {
    "instruction": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT city FROM branch WHERE open_year = 2001 AND membership_amount > 100"
  },
  {
    "instruction": "What are the names of artists who have not released any albums?",
    "input": "create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));",
    "output": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId"
  },
  {
    "instruction": "What are the names of customers who live in Colorado state?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_addresses` (`customer_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `address_type` varchar(15) not null, `date_address_to` datetime, foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = \"Colorado\""
  },
  {
    "instruction": "How many residents does each property have? List property id and resident count.",
    "input": "create table properties (property_id integer not null, property_type_code char(15) not null, property_address varchar(255), other_details varchar(255), primary key (property_id));create table residents (resident_id integer not null, property_id integer not null, date_moved_in datetime not null, date_moved_out datetime not null, other_details varchar(255), primary key (resident_id, property_id, date_moved_in), foreign key (property_id) references properties (property_id));",
    "output": "SELECT T1.property_id, count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id"
  },
  {
    "instruction": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.",
    "input": "create table \"party_host\" (\"Party_ID\" int, \"Host_ID\" int, \"Is_Main_in_Charge\" bool, primary key (\"Party_ID\",\"Host_ID\"), foreign key (\"Host_ID\") references `host`(\"Host_ID\"), foreign key (\"Party_ID\") references `party`(\"Party_ID\"));create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT T3.Location, T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID ORDER BY T2.Age"
  },
  {
    "instruction": "give me a good restaurant in the yosemite and mono lake area for french food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"yosemite and mono lake area\" AND t1.food_type = \"french\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Return all distinct detention type codes.",
    "input": "create table `detention` (`detention_id` integer primary key, `detention_type_code` varchar(10) not null, `teacher_id` integer, `datetime_detention_start` datetime, `datetime_detention_end` datetime, `detention_summary` varchar(255), `other_details` varchar(255), foreign key (`detention_type_code`) references `ref_detention_type`(`detention_type_code`), foreign key (`teacher_id`) references `teachers`(`teacher_id`));",
    "output": "SELECT DISTINCT detention_type_code FROM Detention"
  },
  {
    "instruction": "List all cities of addresses in alphabetical order.",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1` varchar(120), `line_2` varchar(120), `line_3` varchar(120), `city` varchar(80), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT city FROM Addresses ORDER BY city"
  },
  {
    "instruction": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n",
    "input": "create table business_rates (business_rates_id integer not null, cmi_cross_ref_id integer not null, primary key (business_rates_id), foreign key (cmi_cross_ref_id) references cmi_cross_references (cmi_cross_ref_id));create table cmi_cross_references (cmi_cross_ref_id integer not null, master_customer_id integer not null, source_system_code char(15) not null, primary key (cmi_cross_ref_id), foreign key (master_customer_id) references customer_master_index (master_customer_id));",
    "output": "SELECT T2.cmi_cross_ref_id, T2.master_customer_id, count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id"
  },
  {
    "instruction": "Find the city that hosted the most events.",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));",
    "output": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the team with at least 2 technicians?",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "Which gender makes up the majority of the staff?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_name` varchar(255), `gender` varchar(1), `other_staff_details` varchar(255));",
    "output": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of managers in ascending order of level?",
    "input": "create table \"manager\" (\"Manager_ID\" int, \"Name\" text, \"Country\" text, \"Working_year_starts\" text, \"Age\" int, \"Level\" int, primary key (\"Manager_ID\"));",
    "output": "SELECT Name FROM manager ORDER BY LEVEL ASC"
  },
  {
    "instruction": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?",
    "input": "create table locations (location_id integer not null, location_name varchar(255), address varchar(255), other_details varchar(255), primary key (location_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"254 Ottilie Junction\" OR T2.How_to_Get_There = \"bus\""
  },
  {
    "instruction": "What are the full names of employees who with in department 70 or 90?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name FROM employees WHERE department_id = 70 OR department_id = 90"
  },
  {
    "instruction": "What are ids of the all distinct orders, sorted by placement date?",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed"
  },
  {
    "instruction": "List the dates of enrollment and completion of the student with personal name \"Karson\".",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT T1.date_of_enrolment, T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name = \"Karson\""
  },
  {
    "instruction": "Find all the order items whose product id is 11. What are the order item ids?",
    "input": "create table `order_items` (`order_item_id` integer primary key, `product_id` integer not null, `order_id` integer not null, `order_item_status` varchar(10) not null, `order_item_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT order_item_id FROM order_items WHERE product_id = 11"
  },
  {
    "instruction": "What is the first and last name of the professor in biology department?",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);",
    "output": "SELECT T3.EMP_FNAME, T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE DEPT_NAME = \"Biology\""
  },
  {
    "instruction": "Find the busiest source airport that runs most number of routes in China.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the actor who played \" Alan Turing \" in the movie \" The Imitation Game \"",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t2.role = \"Alan Turing\" AND t3.title = \"The Imitation Game\";"
  },
  {
    "instruction": "Count the number of items store 1 has in stock.",
    "input": "create table inventory (inventory_id mediumint unsigned not null, film_id smallint unsigned not null, store_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (inventory_id), foreign key (store_id) references store (store_id), foreign key (film_id) references film (film_id));",
    "output": "SELECT count(*) FROM inventory WHERE store_id = 1"
  },
  {
    "instruction": "who published the most in semantic parsing after 2005 ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"semantic parsing\" AND t4.year > 2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "Show all student IDs with the number of sports and total number of games played",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID, count(*), sum(gamesplayed) FROM Sportsinfo GROUP BY StuID"
  },
  {
    "instruction": "Show the names of members and names of colleges they go to.",
    "input": "create table \"college\" (\"College_ID\" int, \"Name\" text, \"Leader_Name\" text, \"College_Location\" text, primary key (\"College_ID\"));create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Country\" text, \"College_ID\" int, primary key (\"Member_ID\"), foreign key (\"College_ID\") references `college`(\"College_ID\"));",
    "output": "SELECT T2.Name, T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID"
  },
  {
    "instruction": "keyphrases used by Luke S Zettlemoyer for each year",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.keyphraseid, t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"Luke S Zettlemoyer\" ORDER BY t3.year, t2.keyphraseid;"
  },
  {
    "instruction": "Return the number of music festivals of each category.",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));",
    "output": "SELECT Category, COUNT(*) FROM music_festival GROUP BY Category"
  },
  {
    "instruction": "List the asset id, details, make and model for every asset.",
    "input": "create table `assets` (`asset_id` integer primary key, `maintenance_contract_id` integer not null, `supplier_company_id` integer not null, `asset_details` varchar(255), `asset_make` varchar(20), `asset_model` varchar(20), `asset_acquired_date` datetime, `asset_disposed_date` datetime, `other_asset_details` varchar(255), foreign key (`maintenance_contract_id`) references `maintenance_contracts`(`maintenance_contract_id`), foreign key (`supplier_company_id`) references `third_party_companies`(`company_id`));",
    "output": "SELECT asset_id, asset_details, asset_make, asset_model FROM Assets"
  },
  {
    "instruction": "How many party events do we have?",
    "input": "create table \"party_events\" (\"Event_ID\" int, \"Event_Name\" text, \"Party_ID\" int, \"Member_in_charge_ID\" int, primary key (\"Event_ID\"), foreign key (`party_id`) references `party`(`party_id`), foreign key (`member_in_charge_id`) references `member`(`member_id`));",
    "output": "SELECT count(*) FROM party_events"
  },
  {
    "instruction": "Compute the total amount of settlement across all the settlements.",
    "input": "create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT sum(Amount_Settled) FROM Settlements"
  },
  {
    "instruction": "what states in the united states have a city of springfield",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "what cities in wyoming have the highest populations",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"wyoming\" ) AND state_name = \"wyoming\";"
  },
  {
    "instruction": "what is the highest point in the smallest state",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t1.area = ( SELECT MIN ( area ) FROM state );"
  },
  {
    "instruction": "What are the full names of all students",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Fname, Lname FROM Student"
  },
  {
    "instruction": "What is the description of the club \"Pen and Paper Gaming\"?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT clubdesc FROM club WHERE clubname = \"Pen and Paper Gaming\""
  },
  {
    "instruction": "Show different tourist attractions' names, ids, and the corresponding number of visits.",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT T1.Name, T2.Tourist_Attraction_ID, COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID"
  },
  {
    "instruction": "Find all reviews about \" Kabob Palace \" in year 2014",
    "input": "create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Kabob Palace\" AND t2.year = 2014;"
  },
  {
    "instruction": "What are the maximum and minimum number of cows across all farms.",
    "input": "create table \"farm\" (\"Farm_ID\" int, \"Year\" int, \"Total_Horses\" real, \"Working_Horses\" real, \"Total_Cattle\" real, \"Oxen\" real, \"Bulls\" real, \"Cows\" real, \"Pigs\" real, \"Sheep_and_Goats\" real, primary key (\"Farm_ID\"));",
    "output": "SELECT max(Cows), min(Cows) FROM farm"
  },
  {
    "instruction": "For each product with some problems, list the count of problems and the product id.",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT count(*), T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id"
  },
  {
    "instruction": "List the names of patients who have made appointments.",
    "input": "create table appointment (appointmentid integer primary key not null, patient integer not null, prepnurse integer, physician integer not null, start datetime not null, end datetime not null, examinationroom text not null, constraint fk_appointment_patient_ssn foreign key(patient) references patient(ssn), constraint fk_appointment_nurse_employeeid foreign key(prepnurse) references nurse(employeeid), constraint fk_appointment_physician_employeeid foreign key(physician) references physician(employeeid));create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));",
    "output": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn"
  },
  {
    "instruction": "Which kind of part has the least number of faults? List the part name.",
    "input": "create table `parts` (`part_id` integer primary key, `part_name` varchar(255), `chargeable_yn` varchar(1), `chargeable_amount` varchar(20), `other_part_details` varchar(255));create table `part_faults` (`part_fault_id` integer primary key, `part_id` integer not null, `fault_short_name` varchar(20), `fault_description` varchar(255), `other_fault_details` varchar(255), foreign key (`part_id`) references `parts`(`part_id`));",
    "output": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "how many people live in boulder",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = \"boulder\";"
  },
  {
    "instruction": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".",
    "input": "create table apartment_buildings (building_id integer not null, building_short_name char(15), building_full_name varchar(80), building_description varchar(255), building_address varchar(255), building_manager varchar(50), building_phone varchar(80), primary key (building_id), unique (building_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT T2.apt_type_code, T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\""
  },
  {
    "instruction": "What are the names of modern rooms that have a base price lower than $160 and two beds.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName FROM Rooms WHERE basePrice < 160 AND beds = 2 AND decor = 'modern';"
  },
  {
    "instruction": "papers that used Question Answering",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "Find the payment method code used by more than 3 parties.",
    "input": "create table `parties` (`party_id` integer primary key, `payment_method_code` varchar(15) not null, `party_phone` varchar(80), `party_email` varchar(80));",
    "output": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*) > 3"
  },
  {
    "instruction": "Show the park of the roller coaster with the highest speed.",
    "input": "create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1"
  },
  {
    "instruction": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
    "input": "create table \"swimmer\" (\"ID\" int, \"name\" text, \"Nationality\" text, \"meter_100\" real, \"meter_200\" text, \"meter_300\" text, \"meter_400\" text, \"meter_500\" text, \"meter_600\" text, \"meter_700\" text, \"Time\" text, primary key (\"ID\"));",
    "output": "SELECT meter_200, meter_300 FROM swimmer WHERE nationality = 'Australia'"
  },
  {
    "instruction": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1"
  },
  {
    "instruction": "How many activities does Mark Giuliano participate in?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));",
    "output": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID WHERE T1.fname = \"Mark\" AND T1.lname = \"Giuliano\""
  },
  {
    "instruction": "How many movies about Persians were released after 1990 ?",
    "input": "create table \"tags\" (\"id\" int, \"msid\" int, \"kid\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"kid\") references `keyword`(\"kid\"));create table \"keyword\" (\"id\" int, \"keyword\" text, primary key(\"id\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t3.title ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid WHERE t1.keyword = \"Persians\" AND t3.release_year > 1990;"
  },
  {
    "instruction": "what is the lowest point of iowa",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT lowest_point FROM highlow WHERE state_name = \"iowa\";"
  },
  {
    "instruction": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.",
    "input": "create table locations (location_id integer not null, location_name varchar(255), address varchar(255), other_details varchar(255), primary key (location_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"660 Shea Crescent\" OR T2.How_to_Get_There = \"walk\""
  },
  {
    "instruction": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer primary key, `product_id` integer not null, `order_id` integer not null, `order_item_status` varchar(10) not null, `order_item_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));create table `products` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*) >= 1"
  },
  {
    "instruction": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?",
    "input": "create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT chip_model, screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\";"
  },
  {
    "instruction": "find the ids of reviewers who did not give 4 star.",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4"
  },
  {
    "instruction": "List the most common type of Status across cities.",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "what is the average population of the us by state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT AVG ( population ) FROM state;"
  },
  {
    "instruction": "List the names of shops that have no devices in stock.",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));create table \"stock\" (\"Shop_ID\" int, \"Device_ID\" int, \"Quantity\" int, primary key (\"Shop_ID\",\"Device_ID\"), foreign key (`shop_id`) references `shop`(`shop_id`), foreign key (`device_id`) references `device`(`device_id`));",
    "output": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)"
  },
  {
    "instruction": "How many Egyptian restaurant are there in Edinburgh ?",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = \"Edinburgh\" AND t2.category_name = \"restaurant\" AND t3.category_name = \"Egyptian\";"
  },
  {
    "instruction": "What is the payment method that were used the least often?",
    "input": "create table payments (payment_id integer not null, settlement_id integer not null, payment_method_code varchar(255), date_payment_made date, amount_payment integer, primary key (payment_id), foreign key (settlement_id) references settlements (settlement_id));",
    "output": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "how long is the shortest river in the usa",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT LENGTH FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river );"
  },
  {
    "instruction": "How many different scientists are assigned to any project?",
    "input": "create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));",
    "output": "SELECT count(DISTINCT scientist) FROM assignedto"
  },
  {
    "instruction": "What are all the locations with a cinema?",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT DISTINCT LOCATION FROM cinema"
  },
  {
    "instruction": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?",
    "input": "create table \"gas_station\" (\"Station_ID\" int, \"Open_Year\" int, \"Location\" text, \"Manager_Name\" text, \"Vice_Manager_Name\" text, \"Representative_Name\" text, primary key (\"Station_ID\"));",
    "output": "SELECT station_id, LOCATION, manager_name FROM gas_station ORDER BY open_year"
  },
  {
    "instruction": "what are the major cities of kansas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population > 150000 AND state_name = \"kansas\";"
  },
  {
    "instruction": "How many different positions of players are there?",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));",
    "output": "SELECT count(DISTINCT POSITION) FROM player"
  },
  {
    "instruction": "What is the most popular payment method?",
    "input": "create table payments (payment_id integer not null, settlement_id integer not null, payment_method_code varchar(255), date_payment_made date, amount_payment integer, primary key (payment_id), foreign key (settlement_id) references settlements (settlement_id));",
    "output": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of parties and their respective regions?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));create table \"region\" (\"Region_ID\" int, \"Region_name\" text, \"Date\" text, \"Label\" text, \"Format\" text, \"Catalogue\" text, primary key (\"Region_ID\"));",
    "output": "SELECT T1.party_name, T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id"
  },
  {
    "instruction": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
    "input": "create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(15) not null, `shipping_method_code` varchar(15) not null, `order_placed_datetime` datetime not null, `order_delivered_datetime` datetime, `order_shipping_charges` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT order_shipping_charges, customer_id FROM customer_orders WHERE order_status_code = 'Cancelled' OR order_status_code = 'Paid'"
  },
  {
    "instruction": "Check the invoices record and compute the average quantities ordered with the payment method \"MasterCard\".",
    "input": "create table invoices (invoice_id integer not null, order_id integer not null, payment_method_code char(15), product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), order_item_id integer not null, primary key (invoice_id), foreign key (order_id) references customer_orders (order_id), foreign key (order_id) references bookings (booking_id), foreign key (payment_method_code) references ref_payment_methods (payment_method_code));",
    "output": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code = \"MasterCard\""
  },
  {
    "instruction": "What are the companies and investors that correspond to each entrepreneur?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Company, Investor FROM entrepreneur"
  },
  {
    "instruction": "How many premises are there?",
    "input": "create table `premises` (`premise_id` integer primary key, `premises_type` varchar(15) not null, `premise_details` varchar(255));",
    "output": "SELECT count(*) FROM premises"
  },
  {
    "instruction": "What is the name of the document with the most number of sections?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `document_sections` (`section_id` integer primary key, `document_code` varchar(15) not null, `section_sequence` integer, `section_code` varchar(20), `section_title` varchar(80), foreign key (`document_code`) references `documents`(`document_code`));",
    "output": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the different carriers for devices, listed in alphabetical order?",
    "input": "create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));",
    "output": "SELECT Carrier FROM device ORDER BY Carrier ASC"
  },
  {
    "instruction": "Count the number of products that were never ordered.",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `production_type_code` varchar(15) not null, `unit_price` decimal(19, 4), `product_name` varchar(80), `product_color` varchar(20), `product_size` varchar(20), foreign key (`production_type_code`) references `product_categories`(`production_type_code`));create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
  },
  {
    "instruction": "What are the employee ids of employees who report to Payam, and what are their salaries?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id, salary FROM employees WHERE manager_id = (SELECT employee_id FROM employees WHERE first_name = 'Payam' )"
  },
  {
    "instruction": "Find the average age of the members in the club \"Bootup Baltimore\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\""
  },
  {
    "instruction": "what is the adjacent state of kentucky",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "Name all the products with next entry ID greater than 8.",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8"
  },
  {
    "instruction": "Return the minimum, maximum, and average seating across all tracks.",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT min(seating), max(seating), avg(seating) FROM track"
  },
  {
    "instruction": "Show the names of members whose country is \"United States\" or \"Canada\".",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Country\" text, \"College_ID\" int, primary key (\"Member_ID\"), foreign key (\"College_ID\") references `college`(\"College_ID\"));",
    "output": "SELECT Name FROM member WHERE Country = \"United States\" OR Country = \"Canada\""
  },
  {
    "instruction": "What are the first and last names of people who payed more than the rooms' base prices?",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT T1.firstname, T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Rate - T2.basePrice > 0"
  },
  {
    "instruction": "Which park had most attendances in 2008?",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));create table park (park_id text, park_name text, park_alias text, city text, state text, country text);",
    "output": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;"
  },
  {
    "instruction": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.",
    "input": "create table \"pitStops\" (\"raceId\" integer, \"driverId\" integer, \"stop\" integer, \"lap\" integer, \"time\" text, \"duration\" text, \"milliseconds\" integer, primary key (\"raceId\", \"driverId\", \"stop\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"pitStops\" (\"raceId\" integer, \"driverId\" integer, \"stop\" integer, \"lap\" integer, \"time\" text, \"duration\" text, \"milliseconds\" integer, primary key (\"raceId\", \"driverId\", \"stop\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT DISTINCT driverid, STOP FROM pitstops WHERE duration < (SELECT max(duration) FROM pitstops WHERE raceid = 841)"
  },
  {
    "instruction": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));",
    "output": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'"
  },
  {
    "instruction": "Give the districts which have two or more addresses.",
    "input": "create table address (address_id smallint unsigned not null, address varchar(50) not null, address2 varchar(50) default null, district varchar(20) not null, city_id smallint unsigned not null, postal_code varchar(10) default null, phone varchar(20) not null, last_update timestamp not null default current_timestamp, primary key (address_id), foreign key (city_id) references city (city_id));",
    "output": "SELECT district FROM address GROUP BY district HAVING count(*) >= 2"
  },
  {
    "instruction": "what papers do parsing papers typically cite ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citingpaperid WHERE t1.keyphrasename = \"parsing\";"
  },
  {
    "instruction": "List the name of artworks that are not nominated.",
    "input": "create table artwork (\"Artwork_ID\" int, \"Type\" text, \"Name\" text, primary key (\"Artwork_ID\"));create table nomination (\"Artwork_ID\" int, \"Festival_ID\" int, \"Result\" text, primary key (\"Artwork_ID\",\"Festival_ID\"), foreign key (\"Artwork_ID\") references `artwork`(\"Artwork_ID\"), foreign key (\"Festival_ID\") references `festival_detail`(\"Festival_ID\"));",
    "output": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)"
  },
  {
    "instruction": "return me the paper after 2000 in Databases area with the most citations .",
    "input": "create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));create table \"domain_publication\" (\"did\" int, \"pid\" int, primary key (\"did\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"did\") references \"domain\"(\"did\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did = t1.did JOIN publication AS t3 ON t3.pid = t1.pid WHERE t2.name = \"Databases\" AND t3.year > 2000 ORDER BY t3.citation_num DESC LIMIT 1;"
  },
  {
    "instruction": "Parsing papers from ACL 2014 using Jeopardy! Questions",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid = t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid = t3.paperid JOIN paper AS t2 ON t2.paperid = t3.paperid JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid = t1.keyphraseid WHERE t5.datasetname = \"Jeopardy! Questions\" AND t1.keyphrasename = \"Parsing\" AND t2.year = 2014 AND t6.venuename = \"ACL\";"
  },
  {
    "instruction": "Does sharon goldwater have any papers published ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "Show each premise type and the number of premises in that type.",
    "input": "create table `premises` (`premise_id` integer primary key, `premises_type` varchar(15) not null, `premise_details` varchar(255));",
    "output": "SELECT premises_type, count(*) FROM premises GROUP BY premises_type"
  },
  {
    "instruction": "what is ohad shamir 's most cited paper ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700"
  },
  {
    "instruction": "return me the number of papers by \" H. V. Jagadish \" on VLDB conference .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\" AND t2.name = \"VLDB\";"
  },
  {
    "instruction": "Has Christopher D. Manning published any papers ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Christopher D. Manning\";"
  },
  {
    "instruction": "What are the first names of the teachers who teach grade 1?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 1"
  },
  {
    "instruction": "top syntactic parsing author",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "List first name and last name of customers that have more than 2 payments.",
    "input": "create table `customer_payments` (`customer_id` integer not null, `datetime_payment` datetime not null, `payment_method_code` varchar(10) not null, `amount_payment` double null, primary key (`customer_id`,`datetime_payment`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T2.first_name, T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 2;"
  },
  {
    "instruction": "List the text of all tweets in the order of date.",
    "input": "create table `tweets` (`id` bigint(20) not null, `uid` int(11) not null, `text` char(140) not null, `createdate` datetime default current_timestamp, primary key (`id`), foreign key (`uid`) references `user_profiles`(`uid`));",
    "output": "SELECT text FROM tweets ORDER BY createdate"
  },
  {
    "instruction": "semantic parsing datasets",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid WHERE t4.keyphrasename = \"semantic parsing\";"
  },
  {
    "instruction": "Find the description of the club called \"Tennis Club\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT clubdesc FROM club WHERE clubname = \"Tennis Club\""
  },
  {
    "instruction": "What are the authors of submissions and their colleges?",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT Author, College FROM submission"
  },
  {
    "instruction": "Please show the most common reigns of wrestlers.",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the average credit score of the customers who do not have any loan.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)"
  },
  {
    "instruction": "Find the number of patients' prescriptions physician John Dorian made.",
    "input": "create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));",
    "output": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid WHERE T3.name = \"John Dorian\""
  },
  {
    "instruction": "Count the number of different directors.",
    "input": "create table \"movie\" (\"movie_id\" int, \"Title\" text, \"Year\" int, \"Director\" text, \"Budget_million\" real, \"Gross_worldwide\" int, primary key(\"movie_id\"));",
    "output": "SELECT COUNT (DISTINCT director) FROM movie"
  },
  {
    "instruction": "What are all the location codes and location names?",
    "input": "create table ref_locations (location_code char(15) not null, location_name varchar(255) not null, location_description varchar(255) not null, primary key (location_code));",
    "output": "SELECT location_code, location_name FROM Ref_locations"
  },
  {
    "instruction": "find the name of driver who is driving the school bus with the longest working history.",
    "input": "create table \"driver\" (\"Driver_ID\" int, \"Name\" text, \"Party\" text, \"Home_city\" text, \"Age\" int, primary key (\"Driver_ID\"));create table \"school_bus\" (\"School_ID\" int, \"Driver_ID\" int, \"Years_Working\" int, \"If_full_time\" bool, primary key (\"School_ID\",\"Driver_ID\"), foreign key (\"School_ID\") references `school`(\"School_ID\"), foreign key (\"Driver_ID\") references `driver`(\"Driver_ID\"));",
    "output": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id = t2.driver_id ORDER BY years_working DESC LIMIT 1"
  },
  {
    "instruction": "Show all locations and the total number of platforms and passengers for all train stations in each location.",
    "input": "create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));",
    "output": "SELECT LOCATION, sum(number_of_platforms), sum(total_passengers) FROM station GROUP BY LOCATION"
  },
  {
    "instruction": "what is the largest capital city in the usa",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );"
  },
  {
    "instruction": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));",
    "output": "SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'"
  },
  {
    "instruction": "How many clubs does \"Linda Smith\" belong to?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Linda\" AND t3.lname = \"Smith\""
  },
  {
    "instruction": "Which party had the most hosts? Give me the party location.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1"
  },
  {
    "instruction": "Give me the detail and opening hour for each museum.",
    "input": "create table museums (museum_id integer not null, museum_details varchar(255), primary key (museum_id), foreign key (museum_id) references tourist_attractions (tourist_attraction_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T1.Museum_Details, T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID"
  },
  {
    "instruction": "What are the distinct positions of the players from a country whose capital is Dublin?",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = \"Dublin\""
  },
  {
    "instruction": "Give the years and official names of the cities of each competition.",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));create table \"farm_competition\" (\"Competition_ID\" int, \"Year\" int, \"Theme\" text, \"Host_city_ID\" int, \"Hosts\" text, primary key (\"Competition_ID\"), foreign key (`host_city_id`) references `city`(`city_id`));",
    "output": "SELECT T2.Year, T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID"
  },
  {
    "instruction": "List the names of states that have more than 2 parks.",
    "input": "create table park (park_id text, park_name text, park_alias text, city text, state text, country text);",
    "output": "SELECT state FROM park GROUP BY state HAVING count(*) > 2;"
  },
  {
    "instruction": "What are all the customer phone numbers under the most popular policy type?",
    "input": "create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));",
    "output": "SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "Give me the theme and location of each party.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT Party_Theme, LOCATION FROM party"
  },
  {
    "instruction": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
    "input": "create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY count(*) >= 5"
  },
  {
    "instruction": "Find the last name of the author with first name \"Amal\".",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));",
    "output": "SELECT lname FROM authors WHERE fname = \"Amal\""
  },
  {
    "instruction": "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.",
    "input": "create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT avg(ticket_price), min(ticket_price), max(ticket_price) FROM exhibition WHERE YEAR < 2009"
  },
  {
    "instruction": "What is the average number of hours spent practicing for students who got rejected?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no'"
  },
  {
    "instruction": "How many customers in state of CA?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*) FROM customers WHERE state = \"CA\";"
  },
  {
    "instruction": "What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id, first_name, last_name, job_id FROM employees WHERE salary > ( SELECT max(salary) FROM employees WHERE job_id = 'PU_MAN' )"
  },
  {
    "instruction": "what are the major cities of the us",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population > 150000;"
  },
  {
    "instruction": "For each bed type, find the average base price of different bed type.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT bedType, avg(basePrice) FROM Rooms GROUP BY bedType;"
  },
  {
    "instruction": "Find the name of the first 5 customers.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(10) not null, `customer_name` varchar(80), `customer_phone` varchar(80), `customer_email` varchar(80), `date_became_customer` datetime);",
    "output": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5"
  },
  {
    "instruction": "papers published in eccv 2016 by ali farhadi",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"ali farhadi\" AND t3.year = 2016 AND t4.venuename = \"eccv\";"
  },
  {
    "instruction": "How many users are logged in?",
    "input": "create table `users` (`user_id` integer primary key, `role_code` varchar(15) not null, `user_name` varchar(40), `user_login` varchar(40), `password` varchar(40), foreign key (`role_code`) references `roles`(`role_code`));",
    "output": "SELECT count(*) FROM users WHERE user_login = 1"
  },
  {
    "instruction": "List first name and last name of customers lived in city Lockmanfurt.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT T1.first_name, T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";"
  },
  {
    "instruction": "What are the ids and details for all organizations that have grants of more than 6000 dollars?",
    "input": "create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));",
    "output": "SELECT T2.organisation_id, T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount) > 6000"
  },
  {
    "instruction": "What are the line 1 and average monthly rentals of all student addresses?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1` varchar(120), `line_2` varchar(120), `line_3` varchar(120), `city` varchar(80), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));create table `student_addresses` (`student_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `date_address_to` datetime, `monthly_rental` decimal(19, 4), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT T1.line_1, avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id"
  },
  {
    "instruction": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table affiliated_with (physician integer not null, department integer not null, primaryaffiliation boolean not null, constraint fk_affiliated_with_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_affiliated_with_department_departmentid foreign key(department) references department(departmentid), primary key(physician, department));create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table affiliated_with (physician integer not null, department integer not null, primaryaffiliation boolean not null, constraint fk_affiliated_with_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_affiliated_with_department_departmentid foreign key(department) references department(departmentid), primary key(physician, department));create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));",
    "output": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Psychiatry'"
  },
  {
    "instruction": "What are the names of customers who have both savings and checking accounts?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT cust_name FROM customer WHERE acc_type = 'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type = 'checking'"
  },
  {
    "instruction": "give me the best american in the bay area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" );"
  },
  {
    "instruction": "What is the count and code of the job with the most employee?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);",
    "output": "SELECT emp_jobcode, count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the title and director of each film?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Rank_in_series\" int, \"Number_in_season\" int, \"Title\" text, \"Directed_by\" text, \"Original_air_date\" text, \"Production_code\" text, primary key (\"Film_ID\"));",
    "output": "SELECT title, directed_by FROM film"
  },
  {
    "instruction": "Which apartment type code appears the most often?",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which room has the highest rate? List the room's full name, rate, check in and check out date.",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT T2.roomName, T1.Rate, T1.CheckIn, T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;"
  },
  {
    "instruction": "What are the hometowns of gymnasts and the corresponding number of gymnasts?",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Hometown, COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown"
  },
  {
    "instruction": "Which marketing region has the most drama workshop groups? Give me the region code.",
    "input": "create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the name and opening year for the branch that registered the most members in 2016?",
    "input": "create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT T2.name, T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?",
    "input": "create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);",
    "output": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010"
  },
  {
    "instruction": "Find the total capacity of all dorms.",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT sum(student_capacity) FROM dorm"
  },
  {
    "instruction": "What is the number of students playing as a goalie?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT count(*) FROM tryout WHERE pPos = 'goalie'"
  },
  {
    "instruction": "Find the number of students who is older than 20 in each dorm.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT count(*), T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name"
  },
  {
    "instruction": "Which cities have lower temperature in March than in July and have been once host cities?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"temperature\" (\"City_ID\" int, \"Jan\" real, \"Feb\" real, \"Mar\" real, \"Apr\" real, \"Jun\" real, \"Jul\" real, \"Aug\" real, \"Sep\" real, \"Oct\" real, \"Nov\" real, \"Dec\" real, primary key (\"City_ID\"), foreign key (`city_id`) references `city`(`city_id`));create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));",
    "output": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city"
  },
  {
    "instruction": "Who are Bob's friends?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Bob'"
  },
  {
    "instruction": "most recent papers by oren etzioni",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"oren etzioni\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "How many patients stay in room 112?",
    "input": "create table stay (stayid integer primary key not null, patient integer not null, room integer not null, staystart datetime not null, stayend datetime not null, constraint fk_stay_patient_ssn foreign key(patient) references patient(ssn), constraint fk_stay_room_number foreign key(room) references room(roomnumber));",
    "output": "SELECT count(patient) FROM stay WHERE room = 112"
  },
  {
    "instruction": "What is the software platform that is most common amongst all devices?",
    "input": "create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));",
    "output": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the distinct names of wines with prices higher than any wine from John Anthony winery.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT Name FROM WINE WHERE Price > (SELECT min(Price) FROM wine WHERE Winery = \"John Anthony\")"
  },
  {
    "instruction": "Find the unit of measurement and product category code of product named \"chervil\".",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_product_categories` (`product_category_code` varchar(15) primary key, `product_category_description` varchar(80), `unit_of_measure` varchar(20));",
    "output": "SELECT t2.unit_of_measure, t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"chervil\""
  },
  {
    "instruction": "Count the number of budget codes.",
    "input": "create table ref_budget_codes (budget_type_code char(15) not null, budget_type_description varchar(255) not null, primary key (budget_type_code));",
    "output": "SELECT count(*) FROM Ref_budget_codes"
  },
  {
    "instruction": "Sort the list of all the first and last names of authors in alphabetical order of the last names.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));",
    "output": "SELECT fname, lname FROM authors ORDER BY lname"
  },
  {
    "instruction": "Give me the best place in san francisco for french food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" );"
  },
  {
    "instruction": "Find the name of the user who gave the highest rating.",
    "input": "create table `useracct` (`u_id` integer not null , `name` varchar(128) default null , primary key (`u_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id ORDER BY T2.rating DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of all departments in alphabetical order?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT dept_name FROM department ORDER BY dept_name"
  },
  {
    "instruction": "latest deep learning papers",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid, t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "which movie has the most number of actors from China ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.nationality = \"China\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name ) DESC LIMIT 1;"
  },
  {
    "instruction": "What is the effective date of the claim that has the largest amount of total settlement?",
    "input": "create table claims (claim_id integer not null, fnol_id integer not null, effective_date date, primary key (claim_id), unique (claim_id), foreign key (fnol_id) references first_notification_of_loss (fnol_id));create table settlements (settlement_id integer not null, claim_id integer, effective_date date, settlement_amount real, primary key (settlement_id), unique (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1"
  },
  {
    "instruction": "Who are the players from Indonesia?",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = \"Indonesia\""
  },
  {
    "instruction": "Show origins of all flights with destination Honolulu.",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT origin FROM Flight WHERE destination = \"Honolulu\""
  },
  {
    "instruction": "Return the themes, dates, and attendance for exhibitions that happened in 2004.",
    "input": "create table \"exhibition_record\" (\"Exhibition_ID\" int, \"Date\" text, \"Attendance\" int, primary key (\"Exhibition_ID\",\"Date\"), foreign key (`exhibition_id`) references `exhibition`(`exhibition_id`));create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T2.theme, T1.date, T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004"
  },
  {
    "instruction": "List of papers in pldi 2015",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "What is the name of party with most number of members?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Please show different denominations and the corresponding number of schools in descending order.",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT Denomination, COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC"
  },
  {
    "instruction": "How many fault status codes are recorded in the fault log parts table?",
    "input": "create table `fault_log_parts` (`fault_log_entry_id` integer not null, `part_fault_id` integer not null, `fault_status` varchar(10) not null, foreign key (`part_fault_id`) references `part_faults`(`part_fault_id`), foreign key (`fault_log_entry_id`) references `fault_log`(`fault_log_entry_id`));",
    "output": "SELECT DISTINCT fault_status FROM Fault_Log_Parts"
  },
  {
    "instruction": "Find the average access count across all documents?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT avg(access_count) FROM documents"
  },
  {
    "instruction": "What are the maximum duration and resolution of songs grouped and ordered by languages?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT max(T1.duration), max(T2.resolution), T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.languages ORDER BY T2.languages"
  },
  {
    "instruction": "Find all movies written and produced by \" Woody Allen \"",
    "input": "create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"made_by\" (\"id\" int, \"msid\" int, \"pid\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"pid\") references `producer`(\"pid\"));create table \"producer\" (\"pid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"pid\"));create table \"written_by\" (\"id\" int, \"msid\" int, \"wid\" int, foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"wid\") references `writer`(\"wid\"));create table \"writer\" (\"wid\" int, \"gender\" text, \"name\" int, \"nationality\" int, \"num_of_episodes\" int, \"birth_city\" text, \"birth_year\" int, primary key(\"wid\"));",
    "output": "SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid = t3.msid JOIN producer AS t1 ON t1.pid = t3.pid JOIN written_by AS t5 ON t5.msid = t2.mid JOIN writer AS t4 ON t5.wid = t4.wid WHERE t1.name = \"Woody Allen\" AND t4.name = \"Woody Allen\";"
  },
  {
    "instruction": "What are the states, account types, and credit scores for customers who have 0 loans?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT state, acc_type, credit_score FROM customer WHERE no_of_loans = 0"
  },
  {
    "instruction": "What are the names of everybody who has exactly one friend?",
    "input": "create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*) = 1"
  },
  {
    "instruction": "What are the minimum, average, and maximum quantities ordered? Check all the invoices.",
    "input": "create table invoices (invoice_id integer not null, order_id integer not null, payment_method_code char(15), product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), order_item_id integer not null, primary key (invoice_id), foreign key (order_id) references customer_orders (order_id), foreign key (order_id) references bookings (booking_id), foreign key (payment_method_code) references ref_payment_methods (payment_method_code));",
    "output": "SELECT min(Order_Quantity), avg(Order_Quantity), max(Order_Quantity) FROM INVOICES"
  },
  {
    "instruction": "what is the area of new mexico in square kilometers",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT area FROM state WHERE state_name = \"new mexico\";"
  },
  {
    "instruction": "Show the names of people aged either 35 or 36.",
    "input": "create table \"people\" (\"People_ID\" int, \"District\" text, \"Name\" text, \"Party\" text, \"Age\" int, primary key (\"People_ID\"));",
    "output": "SELECT Name FROM people WHERE Age = 35 OR Age = 36"
  },
  {
    "instruction": "How many pilots are there?",
    "input": "create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));",
    "output": "SELECT count(*) FROM pilot"
  },
  {
    "instruction": "List all the activities we have.",
    "input": "create table activity (actid integer primary key, activity_name varchar(25));",
    "output": "SELECT activity_name FROM Activity"
  },
  {
    "instruction": "What is all the information about courses, ordered by credits ascending?",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT * FROM COURSE ORDER BY Credits"
  },
  {
    "instruction": "What is the id and last name of the driver who participated in the most races after 2010?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what is the capital of the state with the largest population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT capital FROM state WHERE population = ( SELECT MAX ( population ) FROM state );"
  },
  {
    "instruction": "Show the station name with at least two trains.",
    "input": "create table \"train_station\" (\"Train_ID\" int, \"Station_ID\" int, primary key (\"Train_ID\",\"Station_ID\"), foreign key (\"Train_ID\") references \"train\"(\"Train_ID\"), foreign key (\"Station_ID\") references \"station\"(\"Station_ID\"));create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));",
    "output": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id HAVING count(*) >= 2"
  },
  {
    "instruction": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));create table `tweets` (`id` bigint(20) not null, `uid` int(11) not null, `text` char(140) not null, `createdate` datetime default current_timestamp, primary key (`id`), foreign key (`uid`) references `user_profiles`(`uid`));",
    "output": "SELECT T1.name, count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count(*) > 1"
  },
  {
    "instruction": "Find the states where have the colleges whose enrollments are less than the largest size.",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT DISTINCT state FROM college WHERE enr < (SELECT max(enr) FROM college)"
  },
  {
    "instruction": "Count the number of countries.",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT count(*) FROM county_public_safety"
  },
  {
    "instruction": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
    "input": "create table \"budget\" (\"School_id\" int, \"Year\" int, \"Budgeted\" int, \"total_budget_percent_budgeted\" real, \"Invested\" int, \"total_budget_percent_invested\" real, \"Budget_invested_percent\" text, primary key(\"School_id\",\"YEAR\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));",
    "output": "SELECT count(*) FROM budget WHERE budgeted > 3000 AND YEAR <= 2001"
  },
  {
    "instruction": "For each zip code, return the average mean temperature of August there.",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT zip_code, avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code"
  },
  {
    "instruction": "What are the titles, years, and directors of all movies, ordered by budget in millions?",
    "input": "create table \"movie\" (\"movie_id\" int, \"Title\" text, \"Year\" int, \"Director\" text, \"Budget_million\" real, \"Gross_worldwide\" int, primary key(\"movie_id\"));",
    "output": "SELECT title, YEAR, director FROM movie ORDER BY budget_million"
  },
  {
    "instruction": "give me all the states of usa",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state;"
  },
  {
    "instruction": "Count the number of financial transactions that the account with the name 337 has.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = \"337\""
  },
  {
    "instruction": "What is the last name of the first individual contacted from the organization with the maximum UK Vat number across all organizations?",
    "input": "create table `organizations` (`organization_id` integer primary key, `date_formed` datetime, `organization_name` varchar(255), `uk_vat_number` varchar(20));create table `organization_contact_individuals` (`individual_id` integer not null, `organization_id` integer not null, `date_contact_from` datetime not null, `date_contact_to` datetime, primary key (`individual_id`,`organization_id`), foreign key (`organization_id`) references `organizations`(`organization_id`), foreign key (`individual_id`) references `individuals`(`individual_id`));create table `individuals` (`individual_id` integer primary key, `individual_first_name` varchar(80), `individual_middle_name` varchar(80), `inidividual_phone` varchar(80), `individual_email` varchar(80), `individual_address` varchar(255), `individual_last_name` varchar(80));create table `organizations` (`organization_id` integer primary key, `date_formed` datetime, `organization_name` varchar(255), `uk_vat_number` varchar(20));",
    "output": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.uk_vat_number = (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1"
  },
  {
    "instruction": "Display the first name, and department number for all employees whose last name is \"McEwen\".",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, department_id FROM employees WHERE last_name = 'McEwen'"
  },
  {
    "instruction": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT email_address, phone_number FROM customers ORDER BY email_address, phone_number"
  },
  {
    "instruction": "Count the number of accounts.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT count(*) FROM Accounts"
  },
  {
    "instruction": "What is the payment method code used by the most orders?",
    "input": "create table invoices (invoice_id integer not null, order_id integer not null, payment_method_code char(15), product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), order_item_id integer not null, primary key (invoice_id), foreign key (order_id) references customer_orders (order_id), foreign key (order_id) references bookings (booking_id), foreign key (payment_method_code) references ref_payment_methods (payment_method_code));",
    "output": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the name of school that has the smallest enrollment in each state?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT cName, state, min(enr) FROM college GROUP BY state"
  },
  {
    "instruction": "Return names of songs in volumes that are by artists that are at least 32 years old.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age >= 32"
  },
  {
    "instruction": "What are the names of all the customers?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT customer_name FROM customers"
  },
  {
    "instruction": "Find the name of rooms whose base price is between 120 and 150.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150"
  },
  {
    "instruction": "Show institution names along with the number of proteins for each institution.",
    "input": "create table \"Institution\" (\"Institution_id\" text, \"Institution\" text, \"Location\" text, \"Founded\" real, \"Type\" text, \"Enrollment\" int, \"Team\" text, \"Primary_Conference\" text, \"building_id\" text, primary key(\"Institution_id\"), foreign key (\"building_id\") references \"building\"(\"building_id\"));create table \"protein\" (\"common_name\" text, \"protein_name\" text, \"divergence_from_human_lineage\" real, \"accession_number\" text, \"sequence_length\" real, \"sequence_identity_to_human_protein\" text, \"Institution_id\" text, primary key(\"common_name\"), foreign key(\"Institution_id\") references \"Institution\"(\"Institution_id\"));",
    "output": "SELECT T1.institution, count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id"
  },
  {
    "instruction": "Which players won awards in both 1960 and 1961? Return their first names and last names.",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table player_award (player_id text, award_id text, year integer, league_id text, tie text, notes text, foreign key (player_id) references player(player_id));create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table player_award (player_id text, award_id text, year integer, league_id text, tie text, notes text, foreign key (player_id) references player(player_id));",
    "output": "SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1960 INTERSECT SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1961"
  },
  {
    "instruction": "What are the names of all female candidates in alphabetical order (sex is F)?",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name"
  },
  {
    "instruction": "what states border states that border states that border states that border texas",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border = t1.state_name JOIN border_info AS t3 ON t3.border = t2.state_name JOIN border_info AS t4 ON t4.border = t3.state_name WHERE t4.state_name = \"texas\";"
  },
  {
    "instruction": "What are the names, locations, and years of opening for tracks with seating higher than average?",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT name, LOCATION, year_opened FROM track WHERE seating > (SELECT avg(seating) FROM track)"
  },
  {
    "instruction": "How many members of \"Bootup Baltimore\" are older than 18?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.age > 18"
  },
  {
    "instruction": "What is the language used most often in the songs?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "return me the paper after 2000 in VLDB conference with the most citations .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = \"VLDB\" AND t2.year > 2000 ORDER BY t2.citation_num DESC LIMIT 1;"
  },
  {
    "instruction": "how many states border on the state whose capital is boston",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT COUNT ( border ) FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE capital = \"boston\" );"
  },
  {
    "instruction": "Which paper from EMNLP 2010 was cited most ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.citedpaperid, COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2010 AND t2.venuename = \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;"
  },
  {
    "instruction": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));",
    "output": "SELECT Adults FROM Reservations WHERE CheckIn = \"2010-10-23\" AND FirstName = \"CONRAD\" AND LastName = \"SELBIG\";"
  },
  {
    "instruction": "List the most common type of competition.",
    "input": "create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));",
    "output": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the most popular full name of the actors?",
    "input": "create table actor (actor_id smallint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, last_update timestamp not null default current_timestamp, primary key (actor_id));",
    "output": "SELECT first_name, last_name FROM actor GROUP BY first_name, last_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what is the population density of the state with the smallest population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT density FROM state WHERE population = ( SELECT MIN ( population ) FROM state );"
  },
  {
    "instruction": "Find all movies directed by \" Steven Spielberg \" after 2006",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Steven Spielberg\" AND t3.release_year > 2006;"
  },
  {
    "instruction": "What is the average gradepoint for students with the last name Smith?",
    "input": "create table enrolled_in (stuid integer, cid varchar(7), grade varchar(2), foreign key(stuid) references student(stuid), foreign key(cid) references course(cid), foreign key(grade) references gradeconversion(lettergrade));create table gradeconversion (lettergrade varchar(2) primary key, gradepoint float);create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = \"Smith\""
  },
  {
    "instruction": "What is the total time for all lessons taught by Janessa Sawayn?",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
  },
  {
    "instruction": "Find the number of students in total.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT count(*) FROM list"
  },
  {
    "instruction": "What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?",
    "input": "create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));",
    "output": "SELECT product FROM product WHERE max_page_size = \"A4\" AND pages_per_minute_color < 5"
  },
  {
    "instruction": "Show the names of roller coasters and names of country they are in.",
    "input": "create table \"country\" (\"Country_ID\" int, \"Name\" text, \"Population\" int, \"Area\" int, \"Languages\" text, primary key (\"Country_ID\"));create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT T2.Name, T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID"
  },
  {
    "instruction": "How many customers have an account?",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT count(DISTINCT customer_id) FROM Accounts"
  },
  {
    "instruction": "Show the transaction types and the total amount of transactions.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT transaction_type, sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type"
  },
  {
    "instruction": "What is the name and open year for the branch with most number of memberships registered in 2016?",
    "input": "create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT T2.name, T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the names of products and the number of events they are in, sorted by the number of events in descending order.",
    "input": "create table products (product_id integer not null, product_type_code char(15), product_name varchar(255), product_price decimal(20, 4), primary key (product_id), unique (product_id));create table products_in_events (product_in_event_id integer not null, event_id integer not null, product_id integer not null, primary key (product_in_event_id), foreign key (event_id) references events (event_id), foreign key (product_id) references products (product_id));",
    "output": "SELECT T1.Product_Name, COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC"
  },
  {
    "instruction": "Which paper did Richard Ladner present at chi ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Richard Ladner\" AND t4.venuename = \"chi\";"
  },
  {
    "instruction": "Give all information regarding instructors, in order of salary from least to greatest.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT * FROM instructor ORDER BY salary"
  },
  {
    "instruction": "Which campus has the most degrees conferred in all times?",
    "input": "create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1"
  },
  {
    "instruction": "How many employees have certificate.",
    "input": "create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT count(DISTINCT eid) FROM Certificate"
  },
  {
    "instruction": "Show the name of aircrafts with top three lowest distances.",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3"
  },
  {
    "instruction": "How many customers are there?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT count(*) FROM Customers;"
  },
  {
    "instruction": "What are the coupon amount of the coupons owned by both good and bad customers?",
    "input": "create table `discount_coupons` (`coupon_id` integer primary key, `date_issued` datetime, `coupon_amount` decimal(19, 4));create table `customers` (`customer_id` integer primary key, `coupon_id` integer not null, `good_or_bad_customer` varchar(4), `first_name` varchar(80), `last_name` varchar(80), `gender_mf` varchar(1), `date_became_customer` datetime, `date_last_hire` datetime, foreign key (`coupon_id`) references `discount_coupons`(`coupon_id`));create table `discount_coupons` (`coupon_id` integer primary key, `date_issued` datetime, `coupon_amount` decimal(19, 4));create table `customers` (`customer_id` integer primary key, `coupon_id` integer not null, `good_or_bad_customer` varchar(4), `first_name` varchar(80), `last_name` varchar(80), `gender_mf` varchar(1), `date_became_customer` datetime, `date_last_hire` datetime, foreign key (`coupon_id`) references `discount_coupons`(`coupon_id`));",
    "output": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'bad'"
  },
  {
    "instruction": "How many players are there?",
    "input": "create table \"player\" (\"Player_ID\" int, \"Sponsor_name\" text, \"Player_name\" text, \"Gender\" text, \"Residence\" text, \"Occupation\" text, \"Votes\" int, \"Rank\" text, primary key (\"Player_ID\"));",
    "output": "SELECT count(*) FROM player"
  },
  {
    "instruction": "Show the names and ids of tourist attractions that are visited at most once.",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT T1.Name, T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) <= 1"
  },
  {
    "instruction": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT DISTINCT song_name FROM song WHERE resolution > (SELECT min(resolution) FROM song WHERE languages = \"english\")"
  },
  {
    "instruction": "How many churches opened before 1850 are there?",
    "input": "create table \"church\" (\"Church_ID\" int, \"Name\" text, \"Organized_by\" text, \"Open_Date\" int, \"Continuation_of\" text, primary key (\"Church_ID\"));",
    "output": "SELECT count(*) FROM Church WHERE Open_Date < 1850"
  },
  {
    "instruction": "Count the number of different complaint type codes.",
    "input": "create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(DISTINCT complaint_type_code) FROM complaints"
  },
  {
    "instruction": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
    "input": "create table film_actor (actor_id smallint unsigned not null, film_id smallint unsigned not null, last_update timestamp not null default current_timestamp, primary key (actor_id, film_id), foreign key (actor_id) references actor (actor_id), foreign key (film_id) references film (film_id));create table actor (actor_id smallint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, last_update timestamp not null default current_timestamp, primary key (actor_id));",
    "output": "SELECT T2.first_name, T2.last_name, T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show all director names who have a movie in both year 1999 and 2000.",
    "input": "create table \"movie\" (\"movie_id\" int, \"Title\" text, \"Year\" int, \"Director\" text, \"Budget_million\" real, \"Gross_worldwide\" int, primary key(\"movie_id\"));create table \"movie\" (\"movie_id\" int, \"Title\" text, \"Year\" int, \"Director\" text, \"Budget_million\" real, \"Gross_worldwide\" int, primary key(\"movie_id\"));",
    "output": "SELECT director FROM movie WHERE YEAR = 2000 INTERSECT SELECT director FROM movie WHERE YEAR = 1999"
  },
  {
    "instruction": "Show the description and code of the attraction type most tourist attractions belong to.",
    "input": "create table ref_attraction_types (attraction_type_code char(15) not null, attraction_type_description varchar(255), primary key (attraction_type_code), unique (attraction_type_code));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T1.Attraction_Type_Description, T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the different names of the genres?",
    "input": "create table genres (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT DISTINCT name FROM genres;"
  },
  {
    "instruction": "How many models do not have the wifi function?",
    "input": "create table \"chip_model\" (\"Model_name\" text, \"Launch_year\" real, \"RAM_MiB\" real, \"ROM_MiB\" real, \"Slots\" text, \"WiFi\" text, \"Bluetooth\" text, primary key (\"Model_name\"));",
    "output": "SELECT count(*) FROM chip_model WHERE wifi = 'No'"
  },
  {
    "instruction": "Return the famous titles of the artist called \"Triumfall\".",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));",
    "output": "SELECT Famous_Title FROM artist WHERE Artist = \"Triumfall\""
  },
  {
    "instruction": "return me the area of the VLDB conference .",
    "input": "create table \"domain_conference\" (\"cid\" int, \"did\" int, primary key (\"did\", \"cid\"), foreign key(\"cid\") references `conference`(\"cid\"), foreign key(\"did\") references `domain`(\"did\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));",
    "output": "SELECT t2.name FROM domain_conference AS t3 JOIN conference AS t1 ON t3.cid = t1.cid JOIN DOMAIN AS t2 ON t2.did = t3.did WHERE t1.name = \"VLDB\";"
  },
  {
    "instruction": "What is the average salary of employees who have a commission percentage that is not null?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT department_id, AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id"
  },
  {
    "instruction": "What is the total likes on tips from Niloofar about \" Cafe Zinho \"",
    "input": "create table \"tip\" (\"tip_id\" int, \"business_id\" text, \"text\" text, \"user_id\" text, \"likes\" int, \"year\" int, \"month\" text, primary key(\"tip_id\") foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.name = \"Cafe Zinho\" AND t3.name = \"Niloofar\";"
  },
  {
    "instruction": "Which organizations are not a parent organization of others? List the organization id.",
    "input": "create table organizations (organization_id integer not null, parent_organization_id integer, organization_details varchar(255), primary key (organization_id));create table organizations (organization_id integer not null, parent_organization_id integer, organization_details varchar(255), primary key (organization_id));",
    "output": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations"
  },
  {
    "instruction": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));create table activity (actid integer primary key, activity_name varchar(25));",
    "output": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'"
  },
  {
    "instruction": "How many players are from each country?",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT Country_name, COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name"
  },
  {
    "instruction": "What is Astrid Gruber's email and phone number?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT email, phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";"
  },
  {
    "instruction": "What is the lowest and highest rating star?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT max(stars), min(stars) FROM Rating"
  },
  {
    "instruction": "What are the id and zip code of the address with the highest monthly rental?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1` varchar(120), `line_2` varchar(120), `line_3` varchar(120), `city` varchar(80), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));create table `student_addresses` (`student_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `date_address_to` datetime, `monthly_rental` decimal(19, 4), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT T2.address_id, T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY monthly_rental DESC LIMIT 1"
  },
  {
    "instruction": "Show the number of document types.",
    "input": "create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));",
    "output": "SELECT count(*) FROM Ref_document_types"
  },
  {
    "instruction": "How many items in inventory does store 1 have?",
    "input": "create table inventory (inventory_id mediumint unsigned not null, film_id smallint unsigned not null, store_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (inventory_id), foreign key (store_id) references store (store_id), foreign key (film_id) references film (film_id));",
    "output": "SELECT count(*) FROM inventory WHERE store_id = 1"
  },
  {
    "instruction": "Show the fleet series of the aircrafts flied by pilots younger than 34",
    "input": "create table \"pilot_record\" (\"Record_ID\" int, \"Pilot_ID\" int, \"Aircraft_ID\" int, \"Date\" text, primary key (\"Pilot_ID\", \"Aircraft_ID\", \"Date\"), foreign key (`pilot_id`) references `pilot`(`pilot_id`), foreign key (`aircraft_id`) references `aircraft`(`aircraft_id`));create table \"aircraft\" (\"Aircraft_ID\" int, \"Order_Year\" int, \"Manufacturer\" text, \"Model\" text, \"Fleet_Series\" text, \"Powertrain\" text, \"Fuel_Propulsion\" text, primary key (\"Aircraft_ID\"));create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));",
    "output": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID WHERE T3.Age < 34"
  },
  {
    "instruction": "What are the titles of papers published by \"Jeremy Gibbons\"?",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Jeremy\" AND t1.lname = \"Gibbons\""
  },
  {
    "instruction": "Show the maximum amount of transaction.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT max(amount_of_transaction) FROM TRANSACTIONS"
  },
  {
    "instruction": "How many different instruments are used in the song \"Badlands\"?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Badlands\""
  },
  {
    "instruction": "Find the emails of parties with the most popular party form.",
    "input": "create table `parties` (`party_id` integer primary key, `payment_method_code` varchar(15) not null, `party_phone` varchar(80), `party_email` varchar(80));create table `party_forms` (`party_id` integer not null, `form_id` integer not null, `date_completion_started` datetime not null, `form_status_code` varchar(15) not null, `date_fully_completed` datetime, primary key (`party_id`, `form_id`), foreign key (`party_id`) references `parties`(`party_id`), foreign key (`form_id`) references `forms`(`form_id`));create table `party_forms` (`party_id` integer not null, `form_id` integer not null, `date_completion_started` datetime not null, `form_status_code` varchar(15) not null, `date_fully_completed` datetime, primary key (`party_id`, `form_id`), foreign key (`party_id`) references `parties`(`party_id`), foreign key (`form_id`) references `forms`(`form_id`));",
    "output": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE t2.form_id = (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "which journal did Donald E Knuth publish his last paper ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.journalid, t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Donald E Knuth\" GROUP BY t3.journalid, t3.year ORDER BY t3.year DESC;"
  },
  {
    "instruction": "What are the gender and occupation of players?",
    "input": "create table \"player\" (\"Player_ID\" int, \"Sponsor_name\" text, \"Player_name\" text, \"Gender\" text, \"Residence\" text, \"Occupation\" text, \"Votes\" int, \"Rank\" text, primary key (\"Player_ID\"));",
    "output": "SELECT Gender, Occupation FROM player"
  },
  {
    "instruction": "Find the phone numbers of customers using the most common policy type among the available policies.",
    "input": "create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));",
    "output": "SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "What are the names of products produced by both Creative Labs and Sony?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony'"
  },
  {
    "instruction": "How many distinct colleges are associated with players from the team with name \"Columbus Crew\".",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));create table `team` (`team_id` int, `name` text, primary key (`team_id`));",
    "output": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\""
  },
  {
    "instruction": "Find the players' first name and last name who won award both in 1960 and in 1961.",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table player_award (player_id text, award_id text, year integer, league_id text, tie text, notes text, foreign key (player_id) references player(player_id));create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table player_award (player_id text, award_id text, year integer, league_id text, tie text, notes text, foreign key (player_id) references player(player_id));",
    "output": "SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1960 INTERSECT SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1961"
  },
  {
    "instruction": "Return the code of the card type that is most common.",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are some recent papers written in deep learning ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid, t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "Show the headquarters that have both companies in banking industry and companies in oil and gas industry.",
    "input": "create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));",
    "output": "SELECT Headquarters FROM company WHERE Industry = \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry = \"Oil and gas\""
  },
  {
    "instruction": "What are the maximum and minimum settlement amount on record?",
    "input": "create table settlements (settlement_id integer not null, claim_id integer, effective_date date, settlement_amount real, primary key (settlement_id), unique (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT max(settlement_amount), min(settlement_amount) FROM settlements"
  },
  {
    "instruction": "How many movies did \" Quentin Tarantino \" direct before 2010 ?",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t3.title ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Quentin Tarantino\" AND t3.release_year < 2010;"
  },
  {
    "instruction": "What is the number of different different airports that are destinations for American Airlines?",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'"
  },
  {
    "instruction": "What are the enrollments of schools whose denomination is not \"Catholic\"?",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\""
  },
  {
    "instruction": "What are the distinct names and phone numbers for suppliers who have red jeans?",
    "input": "create table `suppliers` (`supplier_id` integer primary key, `supplier_name` varchar(80), `supplier_phone` varchar(80));create table `product_suppliers` (`product_id` integer not null, `supplier_id` integer not null, `date_supplied_from` datetime not null, `date_supplied_to` datetime, `total_amount_purchased` varchar(80), `total_value_purchased` decimal(19, 4), primary key (`product_id`, `supplier_id`), foreign key (`supplier_id`) references `suppliers`(`supplier_id`), foreign key (`product_id`) references `products`(`product_id`));create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT DISTINCT T1.supplier_name, T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = \"red jeans\""
  },
  {
    "instruction": "What is the payment method of the customer that has purchased the least quantity of items?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1"
  },
  {
    "instruction": "return me the paper after 2000 with the most citations .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT title FROM publication WHERE YEAR > 2000 ORDER BY citation_num DESC LIMIT 1;"
  },
  {
    "instruction": "What is the name of the party form that is most common?",
    "input": "create table `forms` (`form_id` integer primary key, `form_type_code` varchar(15) not null, `service_id` integer, `form_number` varchar(50), `form_name` varchar(80), `form_description` varchar(255), foreign key (`service_id`) references `services`(`service_id`));create table `party_forms` (`party_id` integer not null, `form_id` integer not null, `date_completion_started` datetime not null, `form_status_code` varchar(15) not null, `date_fully_completed` datetime, primary key (`party_id`, `form_id`), foreign key (`party_id`) references `parties`(`party_id`), foreign key (`form_id`) references `forms`(`form_id`));",
    "output": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));create table `problem_log` (`problem_log_id` integer primary key, `assigned_to_staff_id` integer not null, `problem_id` integer not null, `problem_category_code` varchar(20) not null, `problem_status_code` varchar(20) not null, `log_entry_date` datetime, `log_entry_description` varchar(255), `log_entry_fix` varchar(255), `other_log_details` varchar(255), foreign key (`problem_category_code`) references `problem_category_codes`(`problem_category_code`), foreign key (`assigned_to_staff_id`) references `staff`(`staff_id`), foreign key (`problem_id`) references `problems`(`problem_id`), foreign key (`problem_status_code`) references `problem_status_codes`(`problem_status_code`));",
    "output": "SELECT DISTINCT staff_first_name, staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1"
  },
  {
    "instruction": "Show the name and date for each race and its track name.",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT T1.name, T1.date, T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id"
  },
  {
    "instruction": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));",
    "output": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled <= ( SELECT avg(Amount_Settled) FROM Claims )"
  },
  {
    "instruction": "Return all the distinct payment methods used by customers.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT DISTINCT payment_method FROM customers"
  },
  {
    "instruction": "How many airports' names have the word Interanation in them?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT count(*) FROM airports WHERE name LIKE '%International%'"
  },
  {
    "instruction": "For each branch id, what are the names of the branches that were registered after 2015?",
    "input": "create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT T2.name, count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id"
  },
  {
    "instruction": "List the number of invoices and the invoice total from California.",
    "input": "create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT billing_state, COUNT(*), SUM(total) FROM invoices WHERE billing_state = \"CA\";"
  },
  {
    "instruction": "Find the classrooms in which grade 4 is studying.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT classroom FROM list WHERE grade = 4"
  },
  {
    "instruction": "how many states have cities or towns named springfield",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( state_name ) FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "What are the different states that had students successfully try out?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'"
  },
  {
    "instruction": "what are the major cities in the states through which the major river in virginia runs",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population > 150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH > 750 AND traverse = \"virginia\" ) );"
  },
  {
    "instruction": "Retrieve all the last names of authors in alphabetical order.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));",
    "output": "SELECT lname FROM authors ORDER BY lname"
  },
  {
    "instruction": "Which problems are reported by the staff with last name \"Bosco\"? Show the ids of the problems.",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));",
    "output": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\""
  },
  {
    "instruction": "How many courses does the department of Computer Information Systmes offer?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = \"Computer Info. Systems\""
  },
  {
    "instruction": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.",
    "input": "create table \"manufacturer\" (\"Manufacturer_ID\" int, \"Open_Year\" real, \"Name\" text, \"Num_of_Factories\" int, \"Num_of_Shops\" int, primary key (\"Manufacturer_ID\"));",
    "output": "SELECT max(num_of_shops), avg(Num_of_Factories) FROM manufacturer WHERE open_year < 1990"
  },
  {
    "instruction": "number of papers published in ACL 2015",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"ACL\";"
  },
  {
    "instruction": "How many papers are about deep learning ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\";"
  },
  {
    "instruction": "give me a good restaurant on bethel island rd in bethel island ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"bethel island\" AND t2.street_name = \"bethel island rd\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Return the type name, type description, and date of creation for each document.",
    "input": "create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT T1.document_type_name, T1.document_type_description, T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code"
  },
  {
    "instruction": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(15), `customer_number` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_date` datetime not null, `order_status_code` varchar(15), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_method_code = 'Credit Card' GROUP BY T1.customer_id HAVING count(*) > 2"
  },
  {
    "instruction": "When does Michael Stonebraker publish the GIS Database paper ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"Michael Stonebraker\" AND t5.keyphrasename = \"GIS Database\";"
  },
  {
    "instruction": "What is the name of the county with the greatest population?",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
  },
  {
    "instruction": "Show all majors and corresponding number of students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT major, count(*) FROM Student GROUP BY major"
  },
  {
    "instruction": "what is the biggest american city in a state with a river",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT DISTINCT t1.city_name FROM city AS t1 JOIN river AS t2 ON t2.traverse = t1.state_name WHERE t1.population = ( SELECT MAX ( t1.population ) FROM river AS t2 JOIN city AS t1 ON t2.traverse = t1.state_name );"
  },
  {
    "instruction": "return me the year of \" Making database systems usable \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT YEAR FROM publication WHERE title = \"Making database systems usable\";"
  },
  {
    "instruction": "Which cities' temperature in March is lower than that in July or higher than that in Oct?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"temperature\" (\"City_ID\" int, \"Jan\" real, \"Feb\" real, \"Mar\" real, \"Apr\" real, \"Jun\" real, \"Jul\" real, \"Aug\" real, \"Sep\" real, \"Oct\" real, \"Nov\" real, \"Dec\" real, primary key (\"City_ID\"), foreign key (`city_id`) references `city`(`city_id`));",
    "output": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct"
  },
  {
    "instruction": "how many programs are broadcast in each time section of the day?",
    "input": "create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));",
    "output": "SELECT count(*), time_of_day FROM broadcast GROUP BY time_of_day"
  },
  {
    "instruction": "Find the names of customers who either have an deputy policy or uniformed policy.",
    "input": "create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));",
    "output": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\" OR t1.policy_type_code = \"Uniform\""
  },
  {
    "instruction": "How many colors are there?",
    "input": "create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT count(*) FROM ref_colors"
  },
  {
    "instruction": "Find the name and hours of project that has the most number of scientists.",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));",
    "output": "SELECT T1.name, T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the ids of the problems that are from the product \"voluptatem\" and are reported after 1995?",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\""
  },
  {
    "instruction": "what paper has Richard Ladner published in chi ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Richard Ladner\" AND t4.venuename = \"chi\";"
  },
  {
    "instruction": "Peter Mertens and Dina Barbian as co-authors",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "Find the name all districts with city area greater than 10 or population larger than 100000",
    "input": "create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000"
  },
  {
    "instruction": "How many papers were published on convolutional neural networks in 2016 ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"convolutional neural networks\" AND t3.year = 2016;"
  },
  {
    "instruction": "Give the name and building of the departments with greater than average budget.",
    "input": "create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));",
    "output": "SELECT dept_name, building FROM department WHERE budget > (SELECT avg(budget) FROM department)"
  },
  {
    "instruction": "Which publishers did not publish a book in 1989?",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR = 1989"
  },
  {
    "instruction": "return me the conference, which have the most number of papers by \" H. V. Jagadish \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;"
  },
  {
    "instruction": "Which employees do not authorize destruction for any document? Give me their employee ids.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"
  },
  {
    "instruction": "Show the names and total passengers for all train stations not in London.",
    "input": "create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));",
    "output": "SELECT name, total_passengers FROM station WHERE LOCATION != 'London'"
  },
  {
    "instruction": "Who has friends that are younger than the average age?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age < (SELECT avg(age) FROM person)"
  },
  {
    "instruction": "How many people graduated from San Francisco State University in 2004?",
    "input": "create table \"discipline_enrollments\" (\"Campus\" integer, \"Discipline\" integer, \"Year\" integer, \"Undergraduate\" integer, \"Graduate\" integer, primary key (campus, discipline), foreign key (campus) references campuses(id));create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Francisco State University\""
  },
  {
    "instruction": "What are the first year and last year of the parties whose theme is \"Spring\" or \"Teqnology\"?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT First_year, Last_year FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\""
  },
  {
    "instruction": "What are the distinct hometowns of gymnasts with total points more than 57.5?",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5"
  },
  {
    "instruction": "What are the job ids for jobs done more than once for a period of more than 300 days?",
    "input": "create table `job_history` (`employee_id` decimal(6, 0) not null, `start_date` date not null, `end_date` date not null, `job_id` varchar(10) not null, `department_id` decimal(4, 0) default null, primary key (`employee_id`,`start_date`), foreign key (`employee_id`) references employees(`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT job_id FROM job_history WHERE end_date - start_date > 300 GROUP BY job_id HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "What is the flight number and its distance for the one with the maximum price?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT flno, distance FROM Flight ORDER BY price DESC LIMIT 1"
  },
  {
    "instruction": "What is the average minimum and price of the rooms for each different decor.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT decor, avg(basePrice), min(basePrice) FROM Rooms GROUP BY decor;"
  },
  {
    "instruction": "Give me the descriptions of the service types that cost more than 100.",
    "input": "create table ref_service_types (service_type_code char(15) not null, parent_service_type_code char(15), service_type_description varchar(255), primary key (service_type_code), unique (service_type_code));create table services (service_id integer not null, service_type_code char(15), workshop_group_id integer not null, product_description varchar(255), product_name varchar(255), product_price decimal(20, 4), other_product_service_details varchar(255), primary key (service_id), unique (service_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id), foreign key (service_type_code) references ref_service_types (service_type_code));",
    "output": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100"
  },
  {
    "instruction": "List the names of people that are not perpetrators.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Home Town\" text, primary key (\"People_ID\"));create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)"
  },
  {
    "instruction": "What are the latest publications on deep learning ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid, t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "Which authors belong to the institution \"Google\"? Show the first names and last names.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT DISTINCT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\""
  },
  {
    "instruction": "What are the ids, full names, and phones of each customer?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers"
  },
  {
    "instruction": "What are the three products that have the most problems?s",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "Give the different positions of players who play for the country with the capital Dublin.",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = \"Dublin\""
  },
  {
    "instruction": "what are the population densities of each us state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT density FROM state;"
  },
  {
    "instruction": "What are the types of vocals that the band member with the first name \"Solveig\" played the most?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the different cities where students live?",
    "input": "create table addresses (address_id integer not null, line_1 varchar(80), line_2 varchar(80), city varchar(50), zip_postcode char(20), state_province_county varchar(50), country varchar(50), primary key (address_id));create table people_addresses (person_address_id integer not null, person_id integer not null, address_id integer not null, date_from datetime, date_to datetime, primary key (person_address_id), foreign key (person_id) references people (person_id), foreign key (address_id) references addresses (address_id));create table students (student_id integer not null, student_details varchar(255), primary key (student_id), foreign key (student_id) references people (person_id));",
    "output": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
  },
  {
    "instruction": "Count the number of submissions.",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT count(*) FROM submission"
  },
  {
    "instruction": "return me the year of \" Making database systems usable \"",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT YEAR FROM publication WHERE title = \"Making database systems usable\";"
  },
  {
    "instruction": "Show the type of school and the number of buses for each type.",
    "input": "create table \"school_bus\" (\"School_ID\" int, \"Driver_ID\" int, \"Years_Working\" int, \"If_full_time\" bool, primary key (\"School_ID\",\"Driver_ID\"), foreign key (\"School_ID\") references `school`(\"School_ID\"), foreign key (\"Driver_ID\") references `driver`(\"Driver_ID\"));create table \"school\" (\"School_ID\" int, \"Grade\" text, \"School\" text, \"Location\" text, \"Type\" text, primary key (\"School_ID\"));",
    "output": "SELECT T2.type, count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type"
  },
  {
    "instruction": "What is the location of the festival with the largest number of audience?",
    "input": "create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));",
    "output": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1"
  },
  {
    "instruction": "Papers on WebKB",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"WebKB\";"
  },
  {
    "instruction": "What are the names of all people who do not have friends?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend"
  },
  {
    "instruction": "Show each gender code and the corresponding count of guests sorted by the count in descending order.",
    "input": "create table guests (guest_id integer not null , gender_code char(1), guest_first_name varchar(80), guest_last_name varchar(80), date_of_birth datetime, primary key (guest_id), unique (guest_id));",
    "output": "SELECT gender_code, COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"
  },
  {
    "instruction": "What are the maximum price and score of wines produced by St. Helena appelation?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT max(Price), max(Score) FROM WINE WHERE Appelation = \"St. Helena\""
  },
  {
    "instruction": "What are the names of artist whose exhibitions draw over 200 attendees on average?",
    "input": "create table \"exhibition_record\" (\"Exhibition_ID\" int, \"Date\" text, \"Attendance\" int, primary key (\"Exhibition_ID\",\"Date\"), foreign key (`exhibition_id`) references `exhibition`(`exhibition_id`));create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id JOIN artist AS T3 ON T3.artist_id = T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance) > 200"
  },
  {
    "instruction": "What are the first names of all teachers who have taught a course and the corresponding descriptions?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T2.emp_fname, T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code"
  },
  {
    "instruction": "what are the rivers in illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = \"illinois\";"
  },
  {
    "instruction": "Show the most common headquarter for companies.",
    "input": "create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));",
    "output": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is average salary of the players in the team named 'Boston Red Stockings' ?",
    "input": "create table salary (year integer, team_id text, league_id text, player_id text, salary integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'"
  },
  {
    "instruction": "Which nations have both hosts of age above 45 and hosts of age below 35?",
    "input": "create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));",
    "output": "SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35"
  },
  {
    "instruction": "Find the first names of students with age above 22.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Fname FROM STUDENT WHERE Age > 22"
  },
  {
    "instruction": "How many customers have opened an account?",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(DISTINCT customer_id) FROM Accounts"
  },
  {
    "instruction": "What are the names of the technicians that are assigned to repair machines with more point values than 70?",
    "input": "create table \"repair_assignment\" (\"technician_id\" int, \"repair_ID\" int, \"Machine_ID\" int, primary key (\"technician_id\",\"repair_ID\",\"Machine_ID\"), foreign key (`technician_id`) references `technician`(`technician_id`), foreign key (`repair_id`) references `repair`(`repair_id`), foreign key (`machine_id`) references `machine`(`machine_id`));create table \"machine\" (\"Machine_ID\" int, \"Making_Year\" int, \"Class\" text, \"Team\" text, \"Machine_series\" text, \"value_points\" real, \"quality_rank\" int, primary key (\"Machine_ID\"));create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70"
  },
  {
    "instruction": "What conferences did li dong submit to in 2016 ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"li dong\" AND t3.year = 2016;"
  },
  {
    "instruction": "How many customers do we have?",
    "input": "create table customers (customer_id varchar(100) not null, address_id integer not null, customer_name varchar(255), customer_phone varchar(255), customer_email_address varchar(255), other_details varchar(255), primary key (customer_id), unique (customer_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT count(*) FROM CUSTOMERS"
  },
  {
    "instruction": "What year is the movie \" The Imitation Game \" from ?",
    "input": "create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT release_year FROM movie WHERE title = \"The Imitation Game\";"
  },
  {
    "instruction": "What procedures cost less than 5000 and have John Wen as a trained physician?",
    "input": "create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table trained_in (physician integer not null, treatment integer not null, certificationdate datetime not null, certificationexpires datetime not null, constraint fk_trained_in_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_trained_in_procedures_code foreign key(treatment) references procedures(code), primary key(physician, treatment));create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT name FROM procedures WHERE cost < 5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\""
  },
  {
    "instruction": "Journal Papers by mohammad rastegari",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"mohammad rastegari\" AND t3.journalid >= 0;"
  },
  {
    "instruction": "Please show the software platforms of devices in descending order of the count.",
    "input": "create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));",
    "output": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC"
  },
  {
    "instruction": "Return the names and ids of each account, as well as the number of transactions.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T2.account_name, T1.account_id, count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id"
  },
  {
    "instruction": "Show the name and location for all tracks.",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT name, LOCATION FROM track"
  },
  {
    "instruction": "List the names of all courses ordered by their titles and credits.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT title FROM course ORDER BY title, credits"
  },
  {
    "instruction": "On which day was the order placed whose shipment tracking number is 3452?",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `shipments` (`shipment_id` integer primary key, `order_id` integer not null, `invoice_number` integer not null, `shipment_tracking_number` varchar(80), `shipment_date` datetime, `other_shipment_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`invoice_number`) references `invoices`(`invoice_number`));",
    "output": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452"
  },
  {
    "instruction": "Give me the best french restaurant in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" );"
  },
  {
    "instruction": "What are the descriptions and names of the courses that have student enrollment bigger than 2?",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT T1.course_description, T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) > 2"
  },
  {
    "instruction": "what river traverses the most states",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;"
  },
  {
    "instruction": "brian curless 's papers on convolution",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"brian curless\" AND t5.keyphrasename = \"convolution\";"
  },
  {
    "instruction": "What is the average cost of procedures that physician John Wen was trained in?",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table trained_in (physician integer not null, treatment integer not null, certificationdate datetime not null, certificationexpires datetime not null, constraint fk_trained_in_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_trained_in_procedures_code foreign key(treatment) references procedures(code), primary key(physician, treatment));create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\""
  },
  {
    "instruction": "What is the name of the bank branch that has lent the greatest amount?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1"
  },
  {
    "instruction": "Find the number of people who is under 40 for each gender.",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT count(*), gender FROM Person WHERE age < 40 GROUP BY gender"
  },
  {
    "instruction": "How many members have the black membership card?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Membership_card\" text, \"Age\" int, \"Time_of_purchase\" int, \"Level_of_membership\" int, \"Address\" text, primary key (\"Member_ID\"));",
    "output": "SELECT count(*) FROM member WHERE Membership_card = 'Black'"
  },
  {
    "instruction": "How many tasks are there?",
    "input": "create table `tasks` (`task_id` integer primary key, `project_id` integer not null, `task_details` varchar(255) not null, `eg agree objectives` varchar(1), foreign key (`project_id`) references `projects`(`project_id`));",
    "output": "SELECT count(*) FROM Tasks"
  },
  {
    "instruction": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?",
    "input": "create table \"accelerator_compatible_browser\" (\"accelerator_id\" int, \"browser_id\" int, \"compatible_since_year\" int, primary key(\"accelerator_id\", \"browser_id\"), foreign key (\"accelerator_id\") references `web_client_accelerator`(\"id\"), foreign key (\"browser_id\") references `browser`(\"id\"));create table \"browser\" (\"id\" int, \"name\" text, \"market_share\" real, primary key(\"id\"));create table \"Web_client_accelerator\" (\"id\" int, \"name\" text, \"Operating_system\" text, \"Client\" text, \"Connection\" text, primary key(\"id\"));",
    "output": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'"
  },
  {
    "instruction": "What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id, first_name, last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )"
  },
  {
    "instruction": "which rivers do not run through tennessee",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse = \"tennessee\" );"
  },
  {
    "instruction": "How many customers do we have?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT count(*) FROM Customers"
  },
  {
    "instruction": "Which player has the most all star game experiences? Give me the first name, last name and id of the player, as well as the number of times the player participated in all star game.",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table all_star (player_id text, year integer, game_num integer, game_id text, team_id text, league_id text, gp numeric, starting_pos numeric, foreign key (player_id) references player(player_id));",
    "output": "SELECT T1.name_first, T1.name_last, T1.player_id, count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "instruction": "What are the names, details and data types of the characteristics which are never used by any product?",
    "input": "create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT characteristic_name, other_characteristic_details, characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name, t1.other_characteristic_details, t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id"
  },
  {
    "instruction": "What is the average price across all products?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT avg(price) FROM products"
  },
  {
    "instruction": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?",
    "input": "create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000"
  },
  {
    "instruction": "Which customers do not have a first notification of loss record? Give me the customer names.",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table first_notification_of_loss (fnol_id integer not null, customer_id integer not null, policy_id integer not null, service_id integer not null, primary key (fnol_id), unique (fnol_id), foreign key (service_id) references services (service_id), foreign key (customer_id, policy_id) references customers_policies (customer_id, policy_id));",
    "output": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id"
  },
  {
    "instruction": "What is the name of the track that has had the greatest number of races?",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List the names of phones in ascending order of price.",
    "input": "create table \"phone\" (\"Name\" text, \"Phone_ID\" int, \"Memory_in_G\" int, \"Carrier\" text, \"Price\" real, primary key (\"Phone_ID\"));",
    "output": "SELECT Name FROM phone ORDER BY Price ASC"
  },
  {
    "instruction": "what major rivers run through illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH > 750 AND traverse = \"illinois\";"
  },
  {
    "instruction": "What are the movie titles and average rating of the movies with the lowest average rating?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1"
  },
  {
    "instruction": "find the name of pilots who did not win the matches held in the country of Australia.",
    "input": "create table `pilot` (`pilot_id` int(11) not null, `name` varchar(50) not null, `age` int(11) not null, primary key (`pilot_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot FROM MATCH WHERE country = 'Australia')"
  },
  {
    "instruction": "List all information regarding the basketball match.",
    "input": "create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));",
    "output": "SELECT * FROM basketball_match"
  },
  {
    "instruction": "Find the number of teachers who teach the student called CHRISSY NABOZNY.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"CHRISSY\" AND T1.lastname = \"NABOZNY\""
  },
  {
    "instruction": "How many gas companies are there?",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT count(*) FROM company"
  },
  {
    "instruction": "what is a good restaurant in alameda ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"alameda\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_name` varchar(255), `gender` varchar(1), `other_staff_details` varchar(255));create table `engineer_visits` (`engineer_visit_id` integer primary key, `contact_staff_id` integer, `engineer_id` integer not null, `fault_log_entry_id` integer not null, `fault_status` varchar(10) not null, `visit_start_datetime` datetime, `visit_end_datetime` datetime, `other_visit_details` varchar(255), foreign key (`fault_log_entry_id`) references `fault_log`(`fault_log_entry_id`), foreign key (`engineer_id`) references `maintenance_engineers`(`engineer_id`), foreign key (`contact_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.staff_name, count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name"
  },
  {
    "instruction": "How many citations does luke zettlemoyer have per year",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.citedpaperid ), t3.year FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"luke zettlemoyer\" GROUP BY t3.year;"
  },
  {
    "instruction": "How many faculty is there in total in the year of 2002?",
    "input": "create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));",
    "output": "SELECT sum(faculty) FROM faculty WHERE YEAR = 2002"
  },
  {
    "instruction": "Return the categories of music festivals that have the result \"Awarded\".",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));",
    "output": "SELECT Category FROM music_festival WHERE RESULT = \"Awarded\""
  },
  {
    "instruction": "Find the first name of students who is older than 20.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT fname FROM student WHERE age > 20"
  },
  {
    "instruction": "What is all the information about the Marketing department?",
    "input": "create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));",
    "output": "SELECT * FROM departments WHERE department_name = 'Marketing'"
  },
  {
    "instruction": "What are the ids of the problems which are reported before 1978-06-26?",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\""
  },
  {
    "instruction": "What are the names of enzymes whose product is not 'Heme'?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT name FROM enzyme WHERE product != 'Heme'"
  },
  {
    "instruction": "Find the names of the top 10 airlines that operate the most number of routes.",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT T1.name, T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10"
  },
  {
    "instruction": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4 ORDER BY T1.year"
  },
  {
    "instruction": "Show the manager name with most number of gas stations opened after 2000.",
    "input": "create table \"gas_station\" (\"Station_ID\" int, \"Open_Year\" int, \"Location\" text, \"Manager_Name\" text, \"Vice_Manager_Name\" text, \"Representative_Name\" text, primary key (\"Station_ID\"));",
    "output": "SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List the companies and the investors of entrepreneurs.",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Company, Investor FROM entrepreneur"
  },
  {
    "instruction": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
    "input": "create table \"player\" (\"Player_ID\" int, \"Sponsor_name\" text, \"Player_name\" text, \"Gender\" text, \"Residence\" text, \"Occupation\" text, \"Votes\" int, \"Rank\" text, primary key (\"Player_ID\"));",
    "output": "SELECT Sponsor_name FROM player WHERE Residence = \"Brandon\" OR Residence = \"Birtle\""
  },
  {
    "instruction": "What are the days that had the smallest temperature range, and what was that range?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT date, max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1"
  },
  {
    "instruction": "Retrieve the title of the paper that has the largest number of authors.",
    "input": "create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));",
    "output": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE t1.authorder = (SELECT max(authorder) FROM authorship)"
  },
  {
    "instruction": "Count the number of different affected regions.",
    "input": "create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT count(DISTINCT region_id) FROM affected_region"
  },
  {
    "instruction": "Who performed the song named \"Badlands\"? Show the first name and the last name.",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Badlands\""
  },
  {
    "instruction": "where are some restaurants good for arabic food in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Find the name of the club that has the most female students.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.sex = \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many schools are there?",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT count(*) FROM school"
  },
  {
    "instruction": "Find the name of the department that has the biggest number of students minored in?",
    "input": "create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);create table minor_in (stuid integer, dno integer, foreign key(stuid) references student(stuid), foreign key(dno) references department(dno));",
    "output": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List the problem id and log id which are assigned to the staff named Rylan Homenick.",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));create table `problem_log` (`problem_log_id` integer primary key, `assigned_to_staff_id` integer not null, `problem_id` integer not null, `problem_category_code` varchar(20) not null, `problem_status_code` varchar(20) not null, `log_entry_date` datetime, `log_entry_description` varchar(255), `log_entry_fix` varchar(255), `other_log_details` varchar(255), foreign key (`problem_category_code`) references `problem_category_codes`(`problem_category_code`), foreign key (`assigned_to_staff_id`) references `staff`(`staff_id`), foreign key (`problem_id`) references `problems`(`problem_id`), foreign key (`problem_status_code`) references `problem_status_codes`(`problem_status_code`));",
    "output": "SELECT DISTINCT T2.problem_id, T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\""
  },
  {
    "instruction": "Find the number of distinct courses that have enrolled students.",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT count(course_id) FROM Student_Course_Enrolment"
  },
  {
    "instruction": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?",
    "input": "create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";"
  },
  {
    "instruction": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.",
    "input": "create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Country FROM perpetrator WHERE Injured > 50 INTERSECT SELECT Country FROM perpetrator WHERE Injured < 20"
  },
  {
    "instruction": "What are the resident details containing the substring 'Miss'?",
    "input": "create table residents (resident_id integer not null, property_id integer not null, date_moved_in datetime not null, date_moved_out datetime not null, other_details varchar(255), primary key (resident_id, property_id, date_moved_in), foreign key (property_id) references properties (property_id));",
    "output": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'"
  },
  {
    "instruction": "List the name of a building along with the name of a company whose office is in the building.",
    "input": "create table \"Office_locations\" (\"building_id\" int, \"company_id\" int, \"move_in_year\" int, primary key (\"building_id\", \"company_id\"), foreign key (\"building_id\") references \"buildings\"(\"id\"), foreign key (\"company_id\") references \"Companies\"(\"id\"));create table \"buildings\" (\"id\" int, \"name\" text, \"City\" text, \"Height\" int, \"Stories\" int, \"Status\" text, primary key(\"id\"));create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT T3.name, T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id"
  },
  {
    "instruction": "Return the official native languages of countries who have players from Maryland or Duke colleges.",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = \"Maryland\" OR T2.College = \"Duke\""
  },
  {
    "instruction": "What is the role of the employee named Koby?",
    "input": "create table roles (role_code char(15) not null, role_description varchar(255), primary key (role_code));create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";"
  },
  {
    "instruction": "Show the order ids and the number of invoices for each order.",
    "input": "create table `invoices` (`invoice_number` integer primary key, `order_id` integer not null, `invoice_date` datetime, foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT order_id, count(*) FROM Invoices GROUP BY order_id"
  },
  {
    "instruction": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, salary FROM employees WHERE commission_pct = \"null\""
  },
  {
    "instruction": "return me the conference that has the most number of papers containing keyword \" Relational Database \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid WHERE t1.keyword = \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;"
  },
  {
    "instruction": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)"
  },
  {
    "instruction": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `town_city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\""
  },
  {
    "instruction": "When was the document named \"Marry CV\" stored? Give me the date.",
    "input": "create table all_documents (document_id integer not null, date_stored datetime, document_type_code char(15) not null, document_name char(255), document_description char(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (date_stored) references ref_calendar (calendar_date));",
    "output": "SELECT date_stored FROM All_documents WHERE Document_name = \"Marry CV\""
  },
  {
    "instruction": "how many people live in the capital of texas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE state_name = \"texas\" );"
  },
  {
    "instruction": "What are the different regions of clubs in ascending alphabetical order?",
    "input": "create table \"club\" (\"Club_ID\" int, \"name\" text, \"Region\" text, \"Start_year\" text, primary key (\"Club_ID\"));",
    "output": "SELECT DISTINCT Region FROM club ORDER BY Region ASC"
  },
  {
    "instruction": "How many students are there in total?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM STUDENT"
  },
  {
    "instruction": "which states border states through which the mississippi traverses",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );"
  },
  {
    "instruction": "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `airport_aircraft` (\"ID\" int, \"Airport_ID\" int, \"Aircraft_ID\" int, primary key (\"Airport_ID\",\"Aircraft_ID\"), foreign key (\"Airport_ID\") references `airport`(`airport_id`), foreign key (\"Aircraft_ID\") references `aircraft`(`aircraft_id`));create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T1.Aircraft = \"Robinson R-22\""
  },
  {
    "instruction": "What are the names of studios that have made two or more films?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"",
    "input": "create table \"screen_mode\" (\"Graphics_mode\" real, \"Char_cells\" text, \"Pixels\" text, \"Hardware_colours\" real, \"used_kb\" real, \"map\" text, \"Type\" text, primary key (\"Graphics_mode\"));create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT T2.Hardware_Model_name, T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\";"
  },
  {
    "instruction": "Show all branch names with the number of members in each branch registered after 2015.",
    "input": "create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT T2.name, count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id"
  },
  {
    "instruction": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'"
  },
  {
    "instruction": "How many students have advisors?",
    "input": "create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);",
    "output": "SELECT count(DISTINCT s_id) FROM advisor"
  },
  {
    "instruction": "what is the lowest point in the united states",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT lowest_point FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Find the average fee on a CSU campus in 1996",
    "input": "create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));",
    "output": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 1996"
  },
  {
    "instruction": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.first_name, T2.last_name, count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;"
  },
  {
    "instruction": "What is the name of the customer who has made the minimum amount of payment in one claim?",
    "input": "create table claim_headers (claim_header_id integer not null, claim_status_code char(15) not null, claim_type_code char(15) not null, policy_id integer not null, date_of_claim datetime, date_of_settlement datetime, amount_claimed decimal(20, 4), amount_piad decimal(20, 4), primary key (claim_header_id), foreign key (policy_id) references policies (policy_id));create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table claim_headers (claim_header_id integer not null, claim_status_code char(15) not null, claim_type_code char(15) not null, policy_id integer not null, date_of_claim datetime, date_of_settlement datetime, amount_claimed decimal(20, 4), amount_piad decimal(20, 4), primary key (claim_header_id), foreign key (policy_id) references policies (policy_id));",
    "output": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = (SELECT min(amount_piad) FROM claim_headers)"
  },
  {
    "instruction": "In how many different cities are banks located?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT count(DISTINCT city) FROM bank"
  },
  {
    "instruction": "How many types of products have Rodrick Heaney bought in total?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\""
  },
  {
    "instruction": "How many states that have some college students playing in the mid position but not in the goalie position.",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie')"
  },
  {
    "instruction": "How many documents correspond with each project id?",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT project_id, count(*) FROM Documents GROUP BY project_id"
  },
  {
    "instruction": "datasets used in papers written by jitendra malik ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"jitendra malik\";"
  },
  {
    "instruction": "how is the most prolific author in chi ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ), t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;"
  },
  {
    "instruction": "Find the physician who was trained in the most expensive procedure?",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table trained_in (physician integer not null, treatment integer not null, certificationdate datetime not null, certificationexpires datetime not null, constraint fk_trained_in_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_trained_in_procedures_code foreign key(treatment) references procedures(code), primary key(physician, treatment));create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment ORDER BY T3.cost DESC LIMIT 1"
  },
  {
    "instruction": "Show all ages and corresponding number of students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT age, count(*) FROM Student GROUP BY age"
  },
  {
    "instruction": "Show the most common type code across products.",
    "input": "create table products (product_id integer not null, product_type_code char(15), product_name varchar(255), product_price decimal(20, 4), primary key (product_id), unique (product_id));",
    "output": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the name, city, and country of the airport that has the highest latitude.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT name, city, country FROM airports ORDER BY elevation DESC LIMIT 1"
  },
  {
    "instruction": "what are the papers in NIPS about TAIL ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"TAIL\" AND t4.venuename = \"NIPS\";"
  },
  {
    "instruction": "List the name for storms and the number of affected regions for each storm.",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT T1.name, count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id"
  },
  {
    "instruction": "How many books fall into each category?",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT category, count(*) FROM book_club GROUP BY category"
  },
  {
    "instruction": "What are the names of all directors who made one movie?",
    "input": "create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT director FROM Movie GROUP BY director HAVING count(*) = 1"
  },
  {
    "instruction": "What is the list of program names, sorted by the order of launch date?",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));",
    "output": "SELECT name FROM program ORDER BY launch"
  },
  {
    "instruction": "What are the first names for students who have an \"a\" in their first name?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'"
  },
  {
    "instruction": "where can we find a restaurant on bethel island rd in bethel island ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"bethel island\" AND t2.street_name = \"bethel island rd\";"
  },
  {
    "instruction": "which state is springfield in",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "How many companies operates airlines in each airport?",
    "input": "create table \"operate_company\" (\"id\" int, \"name\" text, \"Type\" text, \"Principal_activities\" text, \"Incorporated_in\" text, \"Group_Equity_Shareholding\" real, primary key (\"id\"));create table \"flight\" (\"id\" int, \"Vehicle_Flight_number\" text, \"Date\" text, \"Pilot\" text, \"Velocity\" real, \"Altitude\" real, \"airport_id\" int, \"company_id\" int, primary key (\"id\"), foreign key (\"airport_id\") references `airport`(\"id\"), foreign key (\"company_id\") references `operate_company`(\"id\"));create table \"airport\" (\"id\" int, \"City\" text, \"Country\" text, \"IATA\" text, \"ICAO\" text, \"name\" text, primary key(\"id\"));",
    "output": "SELECT T3.id, count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id JOIN airport AS T3 ON T2.airport_id = T3.id GROUP BY T3.id"
  },
  {
    "instruction": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT address_line_1, address_line_2 FROM customers WHERE email_address = \"vbogisich@example.org\""
  },
  {
    "instruction": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.",
    "input": "create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));",
    "output": "SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3"
  },
  {
    "instruction": "Show the enrollment and primary_conference of the oldest college.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT enrollment, primary_conference FROM university ORDER BY founded LIMIT 1"
  },
  {
    "instruction": "What city does the employee who helps the customer with postal code 70174 live in?",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `employee` (`employeeid` integer not null , `lastname` varchar(20) not null , `firstname` varchar(20) not null , `title` varchar(30) default null , `reportsto` integer default null , `birthdate` datetime default null , `hiredate` datetime default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) default null , primary key (`employeeid`) , constraint `fk_employeereportsto` foreign key (`reportsto`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = \"70174\""
  },
  {
    "instruction": "How many different projects are there?",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT count(DISTINCT name) FROM projects"
  },
  {
    "instruction": "Which papers did the author \"Olin Shivers\" write? Give me the paper titles.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Olin\" AND t1.lname = \"Shivers\""
  },
  {
    "instruction": "List the top 5 genres by number of tracks. List genres name and total tracks.",
    "input": "create table genres (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.name, COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;"
  },
  {
    "instruction": "What are the first name and gender of the students who have allergy to milk but can put up with cats?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT fname, sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")"
  },
  {
    "instruction": "Show the ids for projects with at least 2 documents.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*) >= 2"
  },
  {
    "instruction": "Find the names of artists that do not have any albums.",
    "input": "create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));",
    "output": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId"
  },
  {
    "instruction": "Which part has the least chargeable amount? List the part id and amount.",
    "input": "create table `parts` (`part_id` integer primary key, `part_name` varchar(255), `chargeable_yn` varchar(1), `chargeable_amount` varchar(20), `other_part_details` varchar(255));",
    "output": "SELECT part_id, chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1"
  },
  {
    "instruction": "Which authors have submitted to more than one workshop?",
    "input": "create table \"Acceptance\" (\"Submission_ID\" int, \"Workshop_ID\" int, \"Result\" text, primary key (\"Submission_ID\",\"Workshop_ID\"), foreign key (\"Submission_ID\") references `submission`(\"Submission_ID\"), foreign key (\"Workshop_ID\") references `workshop`(\"Workshop_ID\"));create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id) > 1"
  },
  {
    "instruction": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Grape, Winery, YEAR FROM WINE WHERE Price > 100 ORDER BY YEAR"
  },
  {
    "instruction": "Find the last name of the staff member who processed the complaint of the cheapest product.",
    "input": "create table `staff` (`staff_id` integer primary key, `gender` varchar(1), `first_name` varchar(80), `last_name` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `products` (`product_id` integer primary key, `parent_product_id` integer, `product_category_code` varchar(20) not null, `date_product_first_available` datetime, `date_product_discontinued` datetime, `product_name` varchar(80), `product_description` varchar(255), `product_price` decimal(19, 4));",
    "output": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id JOIN products AS t3 ON t2.product_id = t3.product_id ORDER BY t3.product_price LIMIT 1"
  },
  {
    "instruction": "Find the number of apartments that have no facility.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));create table apartment_facilities (apt_id integer not null, facility_code char(15) not null, primary key (apt_id, facility_code), foreign key (apt_id) references apartments (apt_id));",
    "output": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)"
  },
  {
    "instruction": "Find the claim id and the number of settlements made for the claim with the most recent settlement date.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT count(*), T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1"
  },
  {
    "instruction": "Find the location and all games score of the school that has Clemson as its team name.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));",
    "output": "SELECT t2.All_Games, t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'"
  },
  {
    "instruction": "How many papers was published in nature communications in 2015",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"nature communications\";"
  },
  {
    "instruction": "Return the poll resource associated with the most candidates.",
    "input": "create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the product with the highest height? Give me the catalog entry name.",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"
  },
  {
    "instruction": "give me some restaurants on bethel island rd in bethel island ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"bethel island\" AND t2.street_name = \"bethel island rd\";"
  },
  {
    "instruction": "Show the names of customers who have the most mailshots.",
    "input": "create table `mailshot_customers` (`mailshot_id` integer not null, `customer_id` integer not null, `outcome_code` varchar(15) not null, `mailshot_customer_date` datetime, foreign key (`customer_id`) references `customers`(`customer_id`), foreign key (`mailshot_id`) references `mailshot_campaigns`(`mailshot_id`));create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `customer_phone` varchar(80), `customer_email` varchar(80), `customer_address` varchar(255), `customer_login` varchar(80), `customer_password` varchar(10));",
    "output": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the type codes and descriptions of each budget type?",
    "input": "create table ref_budget_codes (budget_type_code char(15) not null, budget_type_description varchar(255) not null, primary key (budget_type_code));",
    "output": "SELECT budget_type_code, budget_type_description FROM Ref_budget_codes"
  },
  {
    "instruction": "What are project ids of projects that have 2 or more corresponding documents?",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*) >= 2"
  },
  {
    "instruction": "papers that were not published in the last year",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT paperid FROM paper WHERE YEAR != 2015;"
  },
  {
    "instruction": "Find the number and averaged salary of all instructors who are in the department with the highest budget.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));",
    "output": "SELECT avg(T1.salary), count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1"
  },
  {
    "instruction": "Show all video games with type Collectible card game.",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT gname FROM Video_games WHERE gtype = \"Collectible card game\""
  },
  {
    "instruction": "What is the name of the body builder with the greatest body weight?",
    "input": "create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
  },
  {
    "instruction": "how many cities are in texas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( city_name ) FROM city WHERE state_name = \"texas\";"
  },
  {
    "instruction": "Find the payment method that is used most frequently.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of colors.",
    "input": "create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT count(*) FROM ref_colors"
  },
  {
    "instruction": "What are the names of stations that have latitude lower than 37.5?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT name FROM station WHERE lat < 37.5"
  },
  {
    "instruction": "What are the average, maximum and total revenues of all companies?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT avg(revenue), max(revenue), sum(revenue) FROM manufacturers"
  },
  {
    "instruction": "Find the names of customers who are not living in the state of California.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(10) not null, `customer_name` varchar(80), `customer_phone` varchar(80), `customer_email` varchar(80), `date_became_customer` datetime);create table `customers` (`customer_id` integer primary key, `payment_method` varchar(10) not null, `customer_name` varchar(80), `customer_phone` varchar(80), `customer_email` varchar(80), `date_became_customer` datetime);create table `customer_addresses` (`customer_id` integer not null, `address_id` integer not null, `date_from` datetime not null, `address_type` varchar(10) not null, `date_to` datetime, foreign key (`customer_id`) references `customers`(`customer_id`), foreign key (`address_id`) references `addresses`(`address_id`));create table `addresses` (`address_id` integer primary key, `address_details` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'"
  },
  {
    "instruction": "What are the team and starting year of technicians?",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Team, Starting_Year FROM technician"
  },
  {
    "instruction": "What are the states with the most invoices?",
    "input": "create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;"
  },
  {
    "instruction": "what are the major lakes in united states",
    "input": "create table `lake` (`lake_name` text , `area` double default null , `country_name` varchar(3) not null default '' , `state_name` text);",
    "output": "SELECT lake_name FROM lake WHERE area > 750;"
  },
  {
    "instruction": "Find the number of reviews.",
    "input": "create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT count(*) FROM review"
  },
  {
    "instruction": "papers from pldi 2015",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "What are the distinct secretary votes in the fall election cycle?",
    "input": "create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE = \"Fall\""
  },
  {
    "instruction": "Find the id and rank of the team that has the highest average attendance rate in 2014.",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT T2.team_id, T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;"
  },
  {
    "instruction": "number of citizens in boulder",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = \"boulder\";"
  },
  {
    "instruction": "List the first names of people in alphabetical order?",
    "input": "create table people (person_id integer not null, first_name varchar(255), middle_name varchar(255), last_name varchar(255), cell_mobile_number varchar(40), email_address varchar(40), login_name varchar(40), password varchar(40), primary key (person_id));",
    "output": "SELECT first_name FROM people ORDER BY first_name"
  },
  {
    "instruction": "What are the names of the customers who have made two or less orders?",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));",
    "output": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*) <= 2"
  },
  {
    "instruction": "What are the names of buildings sorted in descending order of building height?",
    "input": "create table \"buildings\" (\"id\" int, \"name\" text, \"City\" text, \"Height\" int, \"Stories\" int, \"Status\" text, primary key(\"id\"));",
    "output": "SELECT name FROM buildings ORDER BY Height DESC"
  },
  {
    "instruction": "Show the residences that have at least two players.",
    "input": "create table \"player\" (\"Player_ID\" int, \"Sponsor_name\" text, \"Player_name\" text, \"Gender\" text, \"Residence\" text, \"Occupation\" text, \"Votes\" int, \"Rank\" text, primary key (\"Player_ID\"));",
    "output": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "Find all actors born in \" Tehran \"",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT name FROM actor WHERE birth_city = \"Tehran\";"
  },
  {
    "instruction": "What are the first names of all students who live in the dorm with the most amenities?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "what are the average and maximum attendances of all events?",
    "input": "create table \"event\" (\"Event_ID\" int, \"Date\" text, \"Venue\" text, \"Name\" text, \"Event_Attendance\" int, primary key (\"Event_ID\"));",
    "output": "SELECT avg(Event_Attendance), max(Event_Attendance) FROM event"
  },
  {
    "instruction": "Find employee with ID and name of the country presently where (s)he is working.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));create table `locations` (`location_id` decimal(4, 0) not null default '0', `street_address` varchar(40) default null, `postal_code` varchar(12) default null, `city` varchar(30) not null, `state_province` varchar(25) default null, `country_id` varchar(2) default null, primary key (`location_id`), foreign key (`country_id`) references countries(`country_id`));create table `countries` (`country_id` varchar(2) not null, `country_name` varchar(40) default null, `region_id` decimal(10, 0) default null, primary key (`country_id`), foreign key (`region_id`) references regions (`region_id`));",
    "output": "SELECT T1.employee_id, T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id"
  },
  {
    "instruction": "What is the campus fee of \"San Jose State University\" in year 1996?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));",
    "output": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND T2.year = 1996"
  },
  {
    "instruction": "What are the names of circuits that belong to UK or Malaysia?",
    "input": "create table \"circuits\" (\"circuitId\" integer primary key, \"circuitRef\" text, \"name\" text, \"location\" text, \"country\" text, \"lat\" real, \"lng\" real, \"alt\" text, \"url\" text);",
    "output": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\""
  },
  {
    "instruction": "return me the papers by \" H. V. Jagadish \" .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t1.name = \"H. V. Jagadish\";"
  },
  {
    "instruction": "How many distinct claim outcome codes are there?",
    "input": "create table claims_processing (claim_processing_id integer not null, claim_id integer not null, claim_outcome_code char(15) not null, claim_stage_id integer not null, staff_id integer, primary key (claim_processing_id), foreign key (claim_id) references claim_headers (claim_header_id), foreign key (staff_id) references staff (staff_id));",
    "output": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing"
  },
  {
    "instruction": "Find the distinct student first names of all students that have grade point at least 3.8 in one course.",
    "input": "create table enrolled_in (stuid integer, cid varchar(7), grade varchar(2), foreign key(stuid) references student(stuid), foreign key(cid) references course(cid), foreign key(grade) references gradeconversion(lettergrade));create table gradeconversion (lettergrade varchar(2) primary key, gradepoint float);create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T2.gradepoint >= 3.8"
  },
  {
    "instruction": "Show the names of members that have a rank in round higher than 3.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Country\" text, \"College_ID\" int, primary key (\"Member_ID\"), foreign key (\"College_ID\") references `college`(\"College_ID\"));create table \"round\" (\"Round_ID\" int, \"Member_ID\" int, \"Decoration_Theme\" text, \"Rank_in_Round\" int, primary key (\"Member_ID\",\"Round_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"));",
    "output": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Rank_in_Round > 3"
  },
  {
    "instruction": "Which semeseter and year had the fewest students?",
    "input": "create table takes (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), grade varchar(2), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references student (id)\n        ON delete cascade);",
    "output": "SELECT semester, YEAR FROM takes GROUP BY semester, YEAR ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown != \"Santo Domingo\""
  },
  {
    "instruction": "What is the mean longitude for all stations that have never had more than 10 bikes available?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));",
    "output": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available) > 10)"
  },
  {
    "instruction": "How many transactions correspond to each invoice number?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT invoice_number, count(*) FROM Financial_transactions GROUP BY invoice_number"
  },
  {
    "instruction": "List the name of film studio that have the most number of films.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT lname FROM student WHERE sex = 'F' AND city_code = 'BAL' UNION SELECT lname FROM student WHERE sex = 'M' AND age < 20"
  },
  {
    "instruction": "Which student visited restaurant most often? List student's first name and last name.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table visits_restaurant (stuid integer, resid integer, time timestamp, spent float, foreign key(stuid) references student(stuid), foreign key(resid) references restaurant(resid));",
    "output": "SELECT Student.Fname, Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "instruction": "Which friend of Zach has the longest-lasting friendship?",
    "input": "create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT friend FROM PersonFriend WHERE name = 'Zach' AND YEAR = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')"
  },
  {
    "instruction": "what is the highest point of the state with the largest area",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name = t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );"
  },
  {
    "instruction": "Find the total budgets of the Marketing or Finance department.",
    "input": "create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));",
    "output": "SELECT sum(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'"
  },
  {
    "instruction": "What are the first and last names for all customers?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT first_name, last_name FROM Customers;"
  },
  {
    "instruction": "return me the journals, which have papers by \" H. V. Jagadish \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\";"
  },
  {
    "instruction": "In zip code 94107, on which day neither Fog nor Rain was not observed?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\""
  },
  {
    "instruction": "List all countries and their number of airlines in the descending order of number of airlines.",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);",
    "output": "SELECT country, count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC"
  },
  {
    "instruction": "Find the number of phones for each accreditation type.",
    "input": "create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT Accreditation_type, count(*) FROM phone GROUP BY Accreditation_type"
  },
  {
    "instruction": "datasets with semantic parsing",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid WHERE t4.keyphrasename = \"semantic parsing\";"
  },
  {
    "instruction": "Find the name of accounts whose checking balance is higher than corresponding saving balance.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T2.balance > T3.balance"
  },
  {
    "instruction": "Count the total number of apartment bookings.",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));",
    "output": "SELECT count(*) FROM Apartment_Bookings"
  },
  {
    "instruction": "papers that mention Question Answering",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "What is the total quantity of products purchased by \"Rodrick Heaney\"?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\""
  },
  {
    "instruction": "Find all movies featuring \" Jason Robards \" and \" Woody Strode \"",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN CAST AS t3 ON t4.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid WHERE t1.name = \"Woody Strode\" AND t2.name = \"Jason Robards\";"
  },
  {
    "instruction": "What is the sex of the candidate who had the highest unsure rate?",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1"
  },
  {
    "instruction": "Find the name of dorms that can accommodate more than 300 students.",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT dorm_name FROM dorm WHERE student_capacity > 300"
  },
  {
    "instruction": "How many budgets are above 3000 in year 2001 or before?",
    "input": "create table \"budget\" (\"School_id\" int, \"Year\" int, \"Budgeted\" int, \"total_budget_percent_budgeted\" real, \"Invested\" int, \"total_budget_percent_invested\" real, \"Budget_invested_percent\" text, primary key(\"School_id\",\"YEAR\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));",
    "output": "SELECT count(*) FROM budget WHERE budgeted > 3000 AND YEAR <= 2001"
  },
  {
    "instruction": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT count(*) FROM Companies WHERE Industry = \"Banking\" OR Industry = \"Conglomerate\""
  },
  {
    "instruction": "how many people live in the united states",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT SUM ( population ) FROM state;"
  },
  {
    "instruction": "For each project id, how many tasks are there?",
    "input": "create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `tasks` (`task_id` integer primary key, `project_id` integer not null, `task_details` varchar(255) not null, `eg agree objectives` varchar(1), foreign key (`project_id`) references `projects`(`project_id`));",
    "output": "SELECT count(*), T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id"
  },
  {
    "instruction": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"",
    "input": "create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));",
    "output": "SELECT Price FROM publication WHERE Publisher = \"Person\" OR Publisher = \"Wiley\""
  },
  {
    "instruction": "Find the id of the product ordered the most often on invoices.",
    "input": "create table invoices (invoice_id integer not null, order_id integer not null, payment_method_code char(15), product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), order_item_id integer not null, primary key (invoice_id), foreign key (order_id) references customer_orders (order_id), foreign key (order_id) references bookings (booking_id), foreign key (payment_method_code) references ref_payment_methods (payment_method_code));",
    "output": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the name of each dorm that has a TV Lounge but no study rooms?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'"
  },
  {
    "instruction": "Find all the directors who are from Afghanistan",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));",
    "output": "SELECT name FROM director WHERE nationality = \"Afghanistan\";"
  },
  {
    "instruction": "What categories have two or more corresponding books that were made after 1989?",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT category FROM book_club WHERE YEAR > 1989 GROUP BY category HAVING count(*) >= 2"
  },
  {
    "instruction": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.first_name, T1.last_name, COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;"
  },
  {
    "instruction": "What are card ids, customer ids, card types, and card numbers for each customer card?",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards"
  },
  {
    "instruction": "List the software platform shared by the greatest number of devices.",
    "input": "create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));",
    "output": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT lname, sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = \"Works of Widenius\")"
  },
  {
    "instruction": "Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"HOU\""
  },
  {
    "instruction": "what is the best french restaurant in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" );"
  },
  {
    "instruction": "What are the student ID and login name of the student who are enrolled in the most courses?",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT T1.student_id, T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT T1.name, T1.lat, min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id"
  },
  {
    "instruction": "Give me a list of the names of all songs ordered by their resolution.",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT song_name FROM song ORDER BY resolution"
  },
  {
    "instruction": "Show card type codes with at least 5 cards.",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*) >= 5"
  },
  {
    "instruction": "give me the largest state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "How many publications does Christopher D. Manning have ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Christopher D. Manning\";"
  },
  {
    "instruction": "Return the description of the budget type that has the code ORG.",
    "input": "create table ref_budget_codes (budget_type_code char(15) not null, budget_type_description varchar(255) not null, primary key (budget_type_code));",
    "output": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code = \"ORG\""
  },
  {
    "instruction": "papers before 2010 about character recognition",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"character recognition\" AND t3.year < 2010;"
  },
  {
    "instruction": "Show the first name, last name, and phone number for all female faculty members.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT Fname, Lname, phone FROM Faculty WHERE Sex = 'F'"
  },
  {
    "instruction": "return me the papers by \" H. V. Jagadish \" after 2000 .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t1.name = \"H. V. Jagadish\" AND t3.year > 2000;"
  },
  {
    "instruction": "Return the claim start date for the claims whose claimed amount is no more than the average",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));",
    "output": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled <= ( SELECT avg(Amount_Settled) FROM Claims )"
  },
  {
    "instruction": "which states does not border texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name = \"texas\" );"
  },
  {
    "instruction": "what state that borders california is the largest",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" );"
  },
  {
    "instruction": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"lapTimes\" (\"raceId\" integer, \"driverId\" integer, \"lap\" integer, \"position\" integer, \"time\" text, \"milliseconds\" integer, primary key(\"raceId\", \"driverId\", \"lap\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT T1.driverid, T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION = '1' GROUP BY T1.driverid HAVING count(*) >= 2"
  },
  {
    "instruction": "Find the first names of all professors in the Accounting department who is teaching some course and the class room.",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.emp_fname, T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'"
  },
  {
    "instruction": "authors of acl 2016 papers",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2016 AND t3.venuename = \"acl\";"
  },
  {
    "instruction": "How many different students are involved in sports?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT count(DISTINCT StuID) FROM Sportsinfo"
  },
  {
    "instruction": "What is the document type code for document type \"Paper\"?",
    "input": "create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));",
    "output": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name = \"Paper\""
  },
  {
    "instruction": "List the first name and last name of all customers.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT first_name, last_name FROM Customers;"
  },
  {
    "instruction": "Show the name of buildings that do not have any institution.",
    "input": "create table \"building\" (\"building_id\" text, \"Name\" text, \"Street_address\" text, \"Years_as_tallest\" text, \"Height_feet\" int, \"Floors\" int, primary key(\"building_id\"));create table \"Institution\" (\"Institution_id\" text, \"Institution\" text, \"Location\" text, \"Founded\" real, \"Type\" text, \"Enrollment\" int, \"Team\" text, \"Primary_Conference\" text, \"building_id\" text, primary key(\"Institution_id\"), foreign key (\"building_id\") references \"building\"(\"building_id\"));",
    "output": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)"
  },
  {
    "instruction": "list papers published in chi",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"chi\";"
  },
  {
    "instruction": "What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);create table \"Tracklists\" (\"AlbumId\" integer, \"Position\" integer, \"SongId\" integer , primary key(albumid, position), foreign key (songid) references songs(songid), foreign key (albumid) references albums(aid));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE T1.title = \"A Kiss Before You Go: Live in Hamburg\""
  },
  {
    "instruction": "Find the ids of the problems that are reported by the staff whose last name is Bosco.",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));",
    "output": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\""
  },
  {
    "instruction": "Count the number of climbers.",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));",
    "output": "SELECT count(*) FROM climber"
  },
  {
    "instruction": "What are the name and publication date of the catalogs with catalog level number above 5?",
    "input": "create table `catalogs` (`catalog_id` integer primary key, `catalog_name` varchar(50), `catalog_publisher` varchar(80), `date_of_publication` datetime, `date_of_latest_revision` datetime);create table `catalog_structure` (`catalog_level_number` integer primary key, `catalog_id` integer not null, `catalog_level_name` varchar(50), foreign key (`catalog_id`) references `catalogs`(`catalog_id`));",
    "output": "SELECT t1.catalog_name, t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5"
  },
  {
    "instruction": "How many songs, on average, are sung by a female artist?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = \"Female\""
  },
  {
    "instruction": "Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\""
  },
  {
    "instruction": "Show the ids of the employees who don't authorize destruction for any document.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"
  },
  {
    "instruction": "List the name of staff who has been assigned multiple jobs.",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_gender` varchar(1), `staff_name` varchar(80));create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*) > 1"
  },
  {
    "instruction": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer ids.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""
  },
  {
    "instruction": "what is the longest river in the us",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );"
  },
  {
    "instruction": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.",
    "input": "create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));",
    "output": "SELECT Snatch, Clean_Jerk FROM body_builder ORDER BY Snatch ASC"
  },
  {
    "instruction": "show the train name and station name for each train.",
    "input": "create table \"train_station\" (\"Train_ID\" int, \"Station_ID\" int, primary key (\"Train_ID\",\"Station_ID\"), foreign key (\"Train_ID\") references \"train\"(\"Train_ID\"), foreign key (\"Station_ID\") references \"station\"(\"Station_ID\"));create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));create table \"train\" (\"Train_ID\" int, \"Name\" text, \"Time\" text, \"Service\" text, primary key (\"Train_ID\"));",
    "output": "SELECT T2.name, T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id"
  },
  {
    "instruction": "What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT phone_number, email_address FROM Customers WHERE amount_outstanding > 2000;"
  },
  {
    "instruction": "find the total market rate of the furnitures that have the top 2 market shares.",
    "input": "create table \"furniture\" (\"Furniture_ID\" int, \"Name\" text, \"Num_of_Component\" int, \"Market_Rate\" real, primary key (\"Furniture_ID\"));",
    "output": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2"
  },
  {
    "instruction": "return me the number of citations of \" Making database systems usable \" in each year .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT YEAR, SUM ( citation_num ) FROM publication WHERE title = \"Making database systems usable\" GROUP BY YEAR;"
  },
  {
    "instruction": "Which activity has the most faculty members participating in? Find the activity name.",
    "input": "create table activity (actid integer primary key, activity_name varchar(25));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));",
    "output": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many students have cat allergies?",
    "input": "create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT count(*) FROM Has_allergy WHERE Allergy = \"Cat\""
  },
  {
    "instruction": "display all the details from Employees table for those employees who was hired before 2002-06-21.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM employees WHERE hire_date < '2002-06-21'"
  },
  {
    "instruction": "How many exhibitions has each artist had?",
    "input": "create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT T2.name, count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id"
  },
  {
    "instruction": "What are the names of all the songs whose album is under the label of \"Universal Music Group\"?",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);create table \"Tracklists\" (\"AlbumId\" integer, \"Position\" integer, \"SongId\" integer , primary key(albumid, position), foreign key (songid) references songs(songid), foreign key (albumid) references albums(aid));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.label = \"Universal Music Group\""
  },
  {
    "instruction": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?",
    "input": "create table artists (id integer primary key autoincrement, name varchar(120));create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'"
  },
  {
    "instruction": "Find the titles of all movies that have no ratings.",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)"
  },
  {
    "instruction": "Find the last names of students with major 50.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT LName FROM STUDENT WHERE Major = 50"
  },
  {
    "instruction": "What is the age of student Linda Smith?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
  },
  {
    "instruction": "How many accounts are there?",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(*) FROM Accounts"
  },
  {
    "instruction": "Find the number and average age of students living in each city.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*), avg(age), city_code FROM student GROUP BY city_code"
  },
  {
    "instruction": "Show all directors.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Rank_in_series\" int, \"Number_in_season\" int, \"Title\" text, \"Directed_by\" text, \"Original_air_date\" text, \"Production_code\" text, primary key (\"Film_ID\"));",
    "output": "SELECT DISTINCT directed_by FROM film"
  },
  {
    "instruction": "How many distinct currency codes are there for all drama workshop groups?",
    "input": "create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups"
  },
  {
    "instruction": "where is the most populated area of wyoming",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"wyoming\" ) AND state_name = \"wyoming\";"
  },
  {
    "instruction": "What are the first names and birthdates of the professors in charge of ACCT-211?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT DISTINCT T1.EMP_FNAME, T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\""
  },
  {
    "instruction": "What is the name and the average gpa of department whose students have the highest average gpa?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.dept_name, avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1"
  },
  {
    "instruction": "For each movie that received more than 3 reviews, what is the average rating?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT mID, avg(stars) FROM Rating GROUP BY mID HAVING count(*) >= 2"
  },
  {
    "instruction": "What are all the company names that have a book published by Alyson?",
    "input": "create table \"culture_company\" (\"Company_name\" text, \"Type\" text, \"Incorporated_in\" text, \"Group_Equity_Shareholding\" real, \"book_club_id\" text, \"movie_id\" text, primary key(\"Company_name\"), foreign key (\"book_club_id\") references \"book_club\"(\"book_club_id\"), foreign key (\"movie_id\") references \"movie\"(\"movie_id\"));create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id WHERE T2.publisher = 'Alyson'"
  },
  {
    "instruction": "What are the papers of Liwen Xiong in 2015",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Liwen Xiong\" AND t3.year = 2015;"
  },
  {
    "instruction": "What are the average, maximum, and minimum number of floors for all buildings?",
    "input": "create table \"building\" (\"building_id\" text, \"Name\" text, \"Street_address\" text, \"Years_as_tallest\" text, \"Height_feet\" int, \"Floors\" int, primary key(\"building_id\"));",
    "output": "SELECT avg(floors), max(floors), min(floors) FROM building"
  },
  {
    "instruction": "What are the ids of the problems which are reported after 1978-06-26?",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\""
  },
  {
    "instruction": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT grade, count(DISTINCT classroom), count(*) FROM list GROUP BY grade"
  },
  {
    "instruction": "Return the addresses of the course authors or tutors whose personal name is \"Cathrine\".",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));",
    "output": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = \"Cathrine\""
  },
  {
    "instruction": "return me the number of papers by \" H. V. Jagadish \" on PVLDB .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\" AND t2.name = \"PVLDB\";"
  },
  {
    "instruction": "How many railways are there?",
    "input": "create table \"railway\" (\"Railway_ID\" int, \"Railway\" text, \"Builder\" text, \"Built\" text, \"Wheels\" text, \"Location\" text, \"ObjectNumber\" text, primary key (\"Railway_ID\"));",
    "output": "SELECT count(*) FROM railway"
  },
  {
    "instruction": "What is the name of the organization that was formed most recently?",
    "input": "create table `organizations` (`organization_id` integer primary key, `date_formed` datetime, `organization_name` varchar(255), `uk_vat_number` varchar(20));",
    "output": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1"
  },
  {
    "instruction": "Find the last name of the individuals that have been contact individuals of an organization.",
    "input": "create table `individuals` (`individual_id` integer primary key, `individual_first_name` varchar(80), `individual_middle_name` varchar(80), `inidividual_phone` varchar(80), `individual_email` varchar(80), `individual_address` varchar(255), `individual_last_name` varchar(80));create table `organization_contact_individuals` (`individual_id` integer not null, `organization_id` integer not null, `date_contact_from` datetime not null, `date_contact_to` datetime, primary key (`individual_id`,`organization_id`), foreign key (`organization_id`) references `organizations`(`organization_id`), foreign key (`individual_id`) references `individuals`(`individual_id`));",
    "output": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id"
  },
  {
    "instruction": "What are the names of all the circuits that are in the UK or Malaysia?",
    "input": "create table \"circuits\" (\"circuitId\" integer primary key, \"circuitRef\" text, \"name\" text, \"location\" text, \"country\" text, \"lat\" real, \"lng\" real, \"alt\" text, \"url\" text);",
    "output": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\""
  },
  {
    "instruction": "What is department name and office for the professor whose last name is Heffington?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T3.dept_name, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'"
  },
  {
    "instruction": "List the distinct hometowns that are not associated with any gymnast.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID"
  },
  {
    "instruction": "Which tourist attractions are visited at least twice? Give me their names and ids.",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT T1.Name, T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) >= 2"
  },
  {
    "instruction": "How many events are there for each party?",
    "input": "create table \"party_events\" (\"Event_ID\" int, \"Event_Name\" text, \"Party_ID\" int, \"Member_in_charge_ID\" int, primary key (\"Event_ID\"), foreign key (`party_id`) references `party`(`party_id`), foreign key (`member_in_charge_id`) references `member`(`member_id`));create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT T2.party_name, count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"
  },
  {
    "instruction": "How many flights do we have?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT count(*) FROM Flight"
  },
  {
    "instruction": "return me the number of journals which have papers by \" H. V. Jagadish \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\";"
  },
  {
    "instruction": "Show the account id with most number of transactions.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which department has the highest average instructor salary?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1"
  },
  {
    "instruction": "where can we find some restaurants on bethel island rd in bethel island ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"bethel island\" AND t2.street_name = \"bethel island rd\";"
  },
  {
    "instruction": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
    "input": "create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);",
    "output": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' AND T3.name = 'American Airlines'"
  },
  {
    "instruction": "Show the names of trains and locations of railways they are in.",
    "input": "create table \"railway\" (\"Railway_ID\" int, \"Railway\" text, \"Builder\" text, \"Built\" text, \"Wheels\" text, \"Location\" text, \"ObjectNumber\" text, primary key (\"Railway_ID\"));create table \"train\" (\"Train_ID\" int, \"Train_Num\" text, \"Name\" text, \"\nFROM\" text, \"Arrival\" text, \"Railway_ID\" int, primary key (\"Train_ID\"), foreign key (\"Railway_ID\") references `railway`(\"Railway_ID\"));",
    "output": "SELECT T2.Name, T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID"
  },
  {
    "instruction": "return me the papers by \" H. V. Jagadish \" on PVLDB after 2000 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\" AND t2.name = \"PVLDB\" AND t4.year > 2000;"
  },
  {
    "instruction": "List the names of journalists in ascending order of years working.",
    "input": "create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));",
    "output": "SELECT Name FROM journalist ORDER BY Years_working ASC"
  },
  {
    "instruction": "what kind of papers does Luke Zettlemoyer publish",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Luke Zettlemoyer\";"
  },
  {
    "instruction": "what is the biggest city in the us",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );"
  },
  {
    "instruction": "Find names of the document without any images.",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `document_sections` (`section_id` integer primary key, `document_code` varchar(15) not null, `section_sequence` integer, `section_code` varchar(20), `section_title` varchar(80), foreign key (`document_code`) references `documents`(`document_code`));create table `document_sections_images` (`section_id` integer not null, `image_id` integer not null, primary key (`section_id`,`image_id`), foreign key (`section_id`) references `document_sections`(`section_id`), foreign key (`image_id`) references `images`(`image_id`));",
    "output": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id"
  },
  {
    "instruction": "What papers has written by sharon goldwater ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "List the id of students who registered course statistics in the order of registration date.",
    "input": "create table courses (course_id varchar(100) not null, course_name varchar(120), course_description varchar(255), other_details varchar(255), primary key (course_id));create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));",
    "output": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
  },
  {
    "instruction": "How many students, on average, does each college have enrolled?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT avg(enr) FROM College"
  },
  {
    "instruction": "What are the last name and office of all history professors?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T1.emp_lname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'"
  },
  {
    "instruction": "Which country and state does staff with first name as Janessa and last name as Sawayn lived?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.country, T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
  },
  {
    "instruction": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT f_id FROM song WHERE resolution > (SELECT max(resolution) FROM song WHERE rating < 8)"
  },
  {
    "instruction": "what states have a capital that is the highest point in the state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT t1.state_name FROM state AS t1 JOIN highlow AS t2 ON t1.capital = t2.highest_point;"
  },
  {
    "instruction": "What is first names of the top 5 staff who have handled the greatest number of complaints?",
    "input": "create table `staff` (`staff_id` integer primary key, `gender` varchar(1), `first_name` varchar(80), `last_name` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5"
  },
  {
    "instruction": "Papers authored by sharon goldwater",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "Find the name and college of students whose decisions are yes in the tryout.",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT T1.pName, T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'"
  },
  {
    "instruction": "Return the names and ids of customers who have TN in their address.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));",
    "output": "SELECT customer_name, customer_id FROM customers WHERE customer_address LIKE \"%TN%\""
  },
  {
    "instruction": "What are the publishers who have published a book in both 1989 and 1990?",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT publisher FROM book_club WHERE YEAR = 1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR = 1990"
  }
]