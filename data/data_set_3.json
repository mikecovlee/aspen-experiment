[
  {
    "instruction": "What are the ids of all vehicles?",
    "input": "create table `vehicles` (`vehicle_id` integer primary key, `vehicle_details` varchar(255));",
    "output": "SELECT vehicle_id FROM Vehicles;"
  },
  {
    "instruction": "What is the title of the newest movie?",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT title FROM Movie WHERE YEAR = (SELECT max(YEAR) FROM Movie)"
  },
  {
    "instruction": "How many people have membership in the club \"Pen and Paper Gaming\"?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Pen and Paper Gaming\""
  },
  {
    "instruction": "What is the id and name of the aircraft that can cover the maximum distance?",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT aid, name FROM Aircraft ORDER BY distance DESC LIMIT 1"
  },
  {
    "instruction": "How long does student Linda Smith spend on the restaurant in total?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table visits_restaurant (stuid integer, resid integer, time timestamp, spent float, foreign key(stuid) references student(stuid), foreign key(resid) references restaurant(resid));",
    "output": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";"
  },
  {
    "instruction": "Show the names of buildings except for those having an institution founded in 2003.",
    "input": "create table \"building\" (\"building_id\" text, \"Name\" text, \"Street_address\" text, \"Years_as_tallest\" text, \"Height_feet\" int, \"Floors\" int, primary key(\"building_id\"));create table \"building\" (\"building_id\" text, \"Name\" text, \"Street_address\" text, \"Years_as_tallest\" text, \"Height_feet\" int, \"Floors\" int, primary key(\"building_id\"));create table \"Institution\" (\"Institution_id\" text, \"Institution\" text, \"Location\" text, \"Founded\" real, \"Type\" text, \"Enrollment\" int, \"Team\" text, \"Primary_Conference\" text, \"building_id\" text, primary key(\"Institution_id\"), foreign key (\"building_id\") references \"building\"(\"building_id\"));",
    "output": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded = 2003"
  },
  {
    "instruction": "what is the capital of texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT capital FROM state WHERE state_name = \"texas\";"
  },
  {
    "instruction": "What is the complete description of the researcher role.",
    "input": "create table `staff_roles` (`role_code` varchar(10) primary key, `role_description` varchar(255) not null);",
    "output": "SELECT role_description FROM Staff_Roles WHERE role_code = 'researcher'"
  },
  {
    "instruction": "How many reviewers are there?",
    "input": "create table reviewer(rid int primary key, name text);",
    "output": "SELECT count(*) FROM Reviewer"
  },
  {
    "instruction": "How many employees live in Canada?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*) FROM employees WHERE country = \"Canada\";"
  },
  {
    "instruction": "What are the ids of the students who registered for course 301 most recently?",
    "input": "create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"
  },
  {
    "instruction": "What is all the information about employees who have never had a job in the past?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `job_history` (`employee_id` decimal(6, 0) not null, `start_date` date not null, `end_date` date not null, `job_id` varchar(10) not null, `department_id` decimal(4, 0) default null, primary key (`employee_id`,`start_date`), foreign key (`employee_id`) references employees(`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"
  },
  {
    "instruction": "where is the best restaurant in the bay area for american food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" );"
  },
  {
    "instruction": "Find the name of instructors who didn't teach any courses?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);",
    "output": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
  },
  {
    "instruction": "what is the biggest state in the usa",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "List the names of buildings with at least 200 feet of height and with at least 20 floors.",
    "input": "create table \"building\" (\"building_id\" text, \"Name\" text, \"Street_address\" text, \"Years_as_tallest\" text, \"Height_feet\" int, \"Floors\" int, primary key(\"building_id\"));",
    "output": "SELECT name FROM building WHERE height_feet >= 200 AND floors >= 20"
  },
  {
    "instruction": "Find all the locations whose names contain the word \"film\".",
    "input": "create table locations (location_id integer not null, location_name varchar(255), address varchar(255), other_details varchar(255), primary key (location_id));",
    "output": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\""
  },
  {
    "instruction": "Show the name, open date, and organizer for all churches.",
    "input": "create table \"church\" (\"Church_ID\" int, \"Name\" text, \"Organized_by\" text, \"Open_Date\" int, \"Continuation_of\" text, primary key (\"Church_ID\"));",
    "output": "SELECT name, open_date, organized_by FROM Church"
  },
  {
    "instruction": "How many customers are there?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT count(*) FROM customers"
  },
  {
    "instruction": "Return the names of all counties sorted by county name in descending alphabetical order.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT County_name FROM county ORDER BY County_name DESC"
  },
  {
    "instruction": "What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?",
    "input": "create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT avg(ticket_price), min(ticket_price), max(ticket_price) FROM exhibition WHERE YEAR < 2009"
  },
  {
    "instruction": "Find the average access counts of documents with functional area \"Acknowledgement\".",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `document_functional_areas` (`document_code` varchar(15) not null, `functional_area_code` varchar(15) not null, foreign key (`document_code`) references `documents`(`document_code`), foreign key (`functional_area_code`) references `functional_areas`(`functional_area_code`));create table `functional_areas` (`functional_area_code` varchar(15) primary key, `parent_functional_area_code` varchar(15), `functional_area_description` varchar(80) not null);",
    "output": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code WHERE t3.functional_area_description = \"Acknowledgement\""
  },
  {
    "instruction": "Show the names and genders of players with a coach starting after 2011.",
    "input": "create table \"player_coach\" (\"Player_ID\" int, \"Coach_ID\" int, \"Starting_year\" int, primary key (\"Player_ID\",\"Coach_ID\"), foreign key (`player_id`) references `player`(`player_id`), foreign key (`coach_id`) references `coach`(`coach_id`));create table \"coach\" (\"Coach_ID\" int, \"Coach_name\" text, \"Gender\" text, \"Club_ID\" int, \"Rank\" int, primary key (\"Coach_ID\"), foreign key (`club_id`) references `club`(`club_id`));create table \"player\" (\"Player_ID\" int, \"Sponsor_name\" text, \"Player_name\" text, \"Gender\" text, \"Residence\" text, \"Occupation\" text, \"Votes\" int, \"Rank\" text, primary key (\"Player_ID\"));",
    "output": "SELECT T3.Player_name, T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T1.Starting_year > 2011"
  },
  {
    "instruction": "What are the names of the airports in the city of Goroka?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT name FROM airports WHERE city = 'Goroka'"
  },
  {
    "instruction": "Show id and location of railways that are associated with more than one train.",
    "input": "create table \"railway\" (\"Railway_ID\" int, \"Railway\" text, \"Builder\" text, \"Built\" text, \"Wheels\" text, \"Location\" text, \"ObjectNumber\" text, primary key (\"Railway_ID\"));create table \"train\" (\"Train_ID\" int, \"Train_Num\" text, \"Name\" text, \"\nFROM\" text, \"Arrival\" text, \"Railway_ID\" int, primary key (\"Train_ID\"), foreign key (\"Railway_ID\") references `railway`(\"Railway_ID\"));",
    "output": "SELECT T2.Railway_ID, T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*) > 1"
  },
  {
    "instruction": "Please list all songs in volumes in ascending alphabetical order.",
    "input": "create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT Song FROM volume ORDER BY Song"
  },
  {
    "instruction": "How many colors are never used by any product?",
    "input": "create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )"
  },
  {
    "instruction": "How many paper does Christopher D. Manning have ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Christopher D. Manning\";"
  },
  {
    "instruction": "What papers were published at acl in 2012 were about Parsing ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"Parsing\" AND t3.year = 2012 AND t4.venuename = \"acl\";"
  },
  {
    "instruction": "give me some restaurants good for french food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t1.food_type = \"french\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "List the names of technicians who have not been assigned to repair machines.",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));create table \"repair_assignment\" (\"technician_id\" int, \"repair_ID\" int, \"Machine_ID\" int, primary key (\"technician_id\",\"repair_ID\",\"Machine_ID\"), foreign key (`technician_id`) references `technician`(`technician_id`), foreign key (`repair_id`) references `repair`(`repair_id`), foreign key (`machine_id`) references `machine`(`machine_id`));",
    "output": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)"
  },
  {
    "instruction": "What are the names of members and their corresponding parties?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT T1.member_name, T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id"
  },
  {
    "instruction": "Find the number of courses provided in each semester and year.",
    "input": "create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);",
    "output": "SELECT count(*), semester, YEAR FROM SECTION GROUP BY semester, YEAR"
  },
  {
    "instruction": "Show the average transaction amount for different transaction types.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT transaction_type_code, avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code"
  },
  {
    "instruction": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));",
    "output": "SELECT T1.id, T1.Name, T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY count(*) DESC"
  },
  {
    "instruction": "What is the name of the aircraft that has won an award the most?",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the date of enrollment of the course named \"Spanish\"?",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\""
  },
  {
    "instruction": "What are names of customers who never ordered product Latte.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));create table `products` (`product_id` integer primary key, `product_details` varchar(255));",
    "output": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte'"
  },
  {
    "instruction": "List the names of aircrafts and the number of times it won matches.",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT T1.Aircraft, COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft"
  },
  {
    "instruction": "What are the names of banks in the state of New York?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT bname FROM bank WHERE state = 'New York'"
  },
  {
    "instruction": "Find the author for each submission and list them in ascending order of submission score.",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT Author FROM submission ORDER BY Scores ASC"
  },
  {
    "instruction": "What are the names of representatives whose party is not \"Republican\"?",
    "input": "create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));",
    "output": "SELECT Name FROM Representative WHERE Party != \"Republican\""
  },
  {
    "instruction": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT sum(revenue) FROM manufacturers WHERE revenue > (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')"
  },
  {
    "instruction": "What is the total amount of products purchased before 2018-03-17 07:13:53?",
    "input": "create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_date < \"2018-03-17 07:13:53\""
  },
  {
    "instruction": "Count the number of ships.",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));",
    "output": "SELECT count(*) FROM ship"
  },
  {
    "instruction": "What are the name and population of each county?",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT County_name, Population FROM county"
  },
  {
    "instruction": "What are the names of the climbers, ordered by points descending?",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));",
    "output": "SELECT Name FROM climber ORDER BY Points DESC"
  },
  {
    "instruction": "when was the first deep learning paper published ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;"
  },
  {
    "instruction": "Give the maximum and minimum weeks on top across all volumes.",
    "input": "create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT max(Weeks_on_Top), min(Weeks_on_Top) FROM volume"
  },
  {
    "instruction": "Which countries has the most number of airlines whose active status is 'Y'?",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);",
    "output": "SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "how many citizens does the biggest city have in the usa",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE population = ( SELECT MAX ( population ) FROM city );"
  },
  {
    "instruction": "What is the name of the project with the most hours?",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1"
  },
  {
    "instruction": "Find the name of different colleges involved in the tryout in alphabetical order.",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT DISTINCT cName FROM tryout ORDER BY cName"
  },
  {
    "instruction": "What is the average age of students who are living in the dorm with the largest capacity?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.student_capacity = (SELECT max(student_capacity) FROM dorm)"
  },
  {
    "instruction": "Show the ids of the students who don't participate in any activity.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table participates_in (stuid integer, actid integer, foreign key(stuid) references student(stuid), foreign key(actid) references activity(actid));",
    "output": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in"
  },
  {
    "instruction": "What are the names of wrestlers days held less than 100?",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT Name FROM wrestler WHERE Days_held < 100"
  },
  {
    "instruction": "What are all the different first names of the drivers who are in position as standing and won?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"driverStandings\" (\"driverStandingsId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"points\" real, \"position\" integer, \"positionText\" text, \"wins\" integer, foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1"
  },
  {
    "instruction": "What is the description of the type of the company who concluded its contracts most recently?",
    "input": "create table `third_party_companies` (`company_id` integer primary key , `company_type` varchar(5) not null, `company_name` varchar(255), `company_address` varchar(255), `other_company_details` varchar(255));create table `maintenance_contracts` (`maintenance_contract_id` integer primary key, `maintenance_contract_company_id` integer not null, `contract_start_date` datetime, `contract_end_date` datetime, `other_contract_details` varchar(255), foreign key (`maintenance_contract_company_id`) references `third_party_companies`(`company_id`));",
    "output": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code = T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of documents that contain the substring \"CV\"?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\""
  },
  {
    "instruction": "List all the businesses with more than 4.5 stars",
    "input": "create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT name FROM business WHERE rating > 4.5;"
  },
  {
    "instruction": "name the longest river in us",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );"
  },
  {
    "instruction": "What products are sold at the store named Miramichi?",
    "input": "create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));create table \"store_product\" (\"Store_ID\" int, \"Product_ID\" int, primary key (\"Store_ID\",\"Product_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`product_id`) references `product`(`product_id`));create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));",
    "output": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id WHERE t3.store_name = \"Miramichi\""
  },
  {
    "instruction": "return me the keywords, which have been contained by more than 100 papers in PVLDB .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid WHERE t3.name = \"PVLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t2.title ) > 100;"
  },
  {
    "instruction": "How many games were played in park \"Columbia Park\" in 1907?",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));create table park (park_id text, park_name text, park_alias text, city text, state text, country text);",
    "output": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';"
  },
  {
    "instruction": "How many farms are there?",
    "input": "create table \"farm\" (\"Farm_ID\" int, \"Year\" int, \"Total_Horses\" real, \"Working_Horses\" real, \"Total_Cattle\" real, \"Oxen\" real, \"Bulls\" real, \"Cows\" real, \"Pigs\" real, \"Sheep_and_Goats\" real, primary key (\"Farm_ID\"));",
    "output": "SELECT count(*) FROM farm"
  },
  {
    "instruction": "What are the denomination more than one school have?",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*) > 1"
  },
  {
    "instruction": "list all the businesses which have a review by Niloofar",
    "input": "create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t3.name = \"Niloofar\";"
  },
  {
    "instruction": "Find the last and first name of students who are playing Football or Lacrosse.",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T2.lname, T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.SportName = \"Football\" OR T1.SportName = \"Lacrosse\""
  },
  {
    "instruction": "Show the name for regions not affected.",
    "input": "create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)"
  },
  {
    "instruction": "Show all publishers which do not have a book in 1989.",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR = 1989"
  },
  {
    "instruction": "What are the first names and last names of the employees who live in Calgary city.",
    "input": "create table `employee` (`employeeid` integer not null , `lastname` varchar(20) not null , `firstname` varchar(20) not null , `title` varchar(30) default null , `reportsto` integer default null , `birthdate` datetime default null , `hiredate` datetime default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) default null , primary key (`employeeid`) , constraint `fk_employeereportsto` foreign key (`reportsto`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT FirstName, LastName FROM EMPLOYEE WHERE City = \"Calgary\""
  },
  {
    "instruction": "What is the aircraft name for the flight with number 99",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99"
  },
  {
    "instruction": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?",
    "input": "create table `assessment_notes` (`notes_id` integer not null , `student_id` integer, `teacher_id` integer not null, `date_of_notes` datetime, `text_of_notes` varchar(255), `other_details` varchar(255), foreign key (`student_id`) references `students`(`student_id`), foreign key (`teacher_id`) references `teachers`(`teacher_id`));create table `teachers` (`teacher_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `gender` varchar(1), `cell_mobile_number` varchar(40), `email_address` varchar(40), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.teacher_id, T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "What are the first and last name of the president of the club \"Bootup Baltimore\"?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t2.position = \"President\""
  },
  {
    "instruction": "What is the location of the party with the most hosts?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1"
  },
  {
    "instruction": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\""
  },
  {
    "instruction": "What is the id of the product that was ordered the most often?",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, foreign key (`order_id`) references `customer_orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?",
    "input": "create table customer_master_index (master_customer_id integer not null, cmi_details varchar(255), primary key (master_customer_id));create table cmi_cross_references (cmi_cross_ref_id integer not null, master_customer_id integer not null, source_system_code char(15) not null, primary key (cmi_cross_ref_id), foreign key (master_customer_id) references customer_master_index (master_customer_id));",
    "output": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.cmi_details = 'Gottlieb, Becker and Wyman'"
  },
  {
    "instruction": "journal papers for instance segmentation",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"instance segmentation\" AND t3.journalid >= 0;"
  },
  {
    "instruction": "What are the names of the three artists who have produced the most songs, and how many works did they produce?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.artist_name, count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "papers citing Daniel Jurafsky",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Daniel Jurafsky\";"
  },
  {
    "instruction": "What is the placement date of the order whose invoice number is 10?",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `shipments` (`shipment_id` integer primary key, `order_id` integer not null, `invoice_number` integer not null, `shipment_tracking_number` varchar(80), `shipment_date` datetime, `other_shipment_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`invoice_number`) references `invoices`(`invoice_number`));",
    "output": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10"
  },
  {
    "instruction": "What are the roles with three or more employees? Give me the role codes.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*) >= 3"
  },
  {
    "instruction": "What are the birth date and birth place of the body builder with the highest total points?",
    "input": "create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Birth_Date, T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1"
  },
  {
    "instruction": "Find the first names of students studying in room 108.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT firstname FROM list WHERE classroom = 108"
  },
  {
    "instruction": "What is the total number of purchases for members with level 6?",
    "input": "create table \"purchase\" (\"Member_ID\" int, \"Branch_ID\" text, \"Year\" text, \"Total_pounds\" real, primary key (\"Member_ID\",\"Branch_ID\",\"Year\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));",
    "output": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T2.level = 6"
  },
  {
    "instruction": "How many drivers are from Hartford city or younger than 40?",
    "input": "create table \"driver\" (\"Driver_ID\" int, \"Name\" text, \"Party\" text, \"Home_city\" text, \"Age\" int, primary key (\"Driver_ID\"));",
    "output": "SELECT count(*) FROM driver WHERE home_city = 'Hartford' OR age < 40"
  },
  {
    "instruction": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?",
    "input": "create table candidates (candidate_id integer not null , candidate_details varchar(255), primary key (candidate_id), foreign key (candidate_id) references people (person_id));create table candidate_assessments (candidate_id integer not null, qualification char(15) not null, assessment_date datetime not null, asessment_outcome_code char(15) not null, primary key (candidate_id, qualification), foreign key (candidate_id) references candidates (candidate_id));create table people (person_id integer not null, first_name varchar(255), middle_name varchar(255), last_name varchar(255), cell_mobile_number varchar(40), email_address varchar(40), login_name varchar(40), password varchar(40), primary key (person_id));",
    "output": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
  },
  {
    "instruction": "List the name of all rooms sorted by their prices.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName FROM Rooms ORDER BY basePrice;"
  },
  {
    "instruction": "how many of dan klein 's papers cite michael i. jordan",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN cite AS t5 ON t3.paperid = t5.citedpaperid JOIN writes AS t4 ON t4.paperid = t5.citingpaperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"michael i. jordan\" AND t1.authorname = \"dan klein\";"
  },
  {
    "instruction": "Show all card type codes.",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT DISTINCT card_type_code FROM Customers_Cards"
  },
  {
    "instruction": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_contact_channels` (`customer_id` integer not null, `channel_code` varchar(15) not null, `active_from_date` datetime not null, `active_to_date` datetime, `contact_number` varchar(50) not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\""
  },
  {
    "instruction": "How many papers are written by authors from the institution \"University of Pennsylvania\"?",
    "input": "create table papers (paperid integer, title text, primary key (paperid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Pennsylvania\""
  },
  {
    "instruction": "Show the name, average attendance, total attendance for stadiums where no accidents happened.",
    "input": "create table \"stadium\" (\"id\" int, \"name\" text, \"Home_Games\" int, \"Average_Attendance\" real, \"Total_Attendance\" real, \"Capacity_Percentage\" real, primary key (\"id\"));create table \"game\" (\"stadium_id\" int, \"id\" int, \"Season\" int, \"Date\" text, \"Home_team\" text, \"Away_team\" text, \"Score\" text, \"Competition\" text, primary key (\"id\"), foreign key (\"stadium_id\") references `stadium`(\"id\"));create table \"stadium\" (\"id\" int, \"name\" text, \"Home_Games\" int, \"Average_Attendance\" real, \"Total_Attendance\" real, \"Capacity_Percentage\" real, primary key (\"id\"));create table \"injury_accident\" (\"game_id\" int, \"id\" int, \"Player\" text, \"Injury\" text, \"Number_of_matches\" text, \"Source\" text, primary key (\"id\"), foreign key (\"game_id\") references `game`(\"id\"));",
    "output": "SELECT name, average_attendance, total_attendance FROM stadium EXCEPT SELECT T2.name, T2.average_attendance, T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id"
  },
  {
    "instruction": "papers on Question Answering",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "Count the number of farms.",
    "input": "create table \"farm\" (\"Farm_ID\" int, \"Year\" int, \"Total_Horses\" real, \"Working_Horses\" real, \"Total_Cattle\" real, \"Oxen\" real, \"Bulls\" real, \"Cows\" real, \"Pigs\" real, \"Sheep_and_Goats\" real, primary key (\"Farm_ID\"));",
    "output": "SELECT count(*) FROM farm"
  },
  {
    "instruction": "How many counties correspond to each police force?",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT Police_force, COUNT(*) FROM county_public_safety GROUP BY Police_force"
  },
  {
    "instruction": "Find the first names and offices of all professors sorted by alphabetical order of their first name.",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);",
    "output": "SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY T2.emp_fname"
  },
  {
    "instruction": "find the total checkins in Moroccan restaurant in \" Los Angeles \" on Friday",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"checkin\" (\"cid\" int, \"business_id\" text, \"count\" int, \"day\" text, primary key(\"cid\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"Moroccan\" AND t3.category_name = \"restaurant\" AND t4.day = \"Friday\";"
  },
  {
    "instruction": "List the authors who do not have submission to any workshop.",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));create table \"Acceptance\" (\"Submission_ID\" int, \"Workshop_ID\" int, \"Result\" text, primary key (\"Submission_ID\",\"Workshop_ID\"), foreign key (\"Submission_ID\") references `submission`(\"Submission_ID\"), foreign key (\"Workshop_ID\") references `workshop`(\"Workshop_ID\"));",
    "output": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)"
  },
  {
    "instruction": "What are the positions of players whose average number of points scored by that position is larger than 20?",
    "input": "create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points) >= 20"
  },
  {
    "instruction": "What are the first names of students, ordered by age from greatest to least?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Fname FROM STUDENT ORDER BY Age DESC"
  },
  {
    "instruction": "What is the id for the employee called Ebba?",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT employee_ID FROM Employees WHERE employee_name = \"Ebba\""
  },
  {
    "instruction": "Report the distinct registration date and the election cycle.",
    "input": "create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT Registration_Date, Election_Cycle FROM VOTING_RECORD"
  },
  {
    "instruction": "Find the customer name and date of the orders that have the status \"Delivered\".",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.customer_name, t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\""
  },
  {
    "instruction": "Find all cities in Texas in which there is a restaurant called \" MGM Grand Buffet \"",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"MGM Grand Buffet\" AND t1.state = \"Texas\" AND t2.category_name = \"restaurant\";"
  },
  {
    "instruction": "What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table customers_policies (customer_id integer not null, policy_id integer not null, date_opened date, date_closed date, primary key (customer_id, policy_id), foreign key (customer_id) references customers (customer_id), foreign key (policy_id) references available_policies (policy_id));",
    "output": "SELECT t2.date_opened, t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\""
  },
  {
    "instruction": "Show all ministers and parties they belong to in descending order of the time they took office.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT minister, party_name FROM party ORDER BY took_office DESC"
  },
  {
    "instruction": "List all the restaurant rated more than 3.5",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.rating > 3.5 AND t2.category_name = \"restaurant\";"
  },
  {
    "instruction": "How many papers did Mirella Lapata cite ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t3 ON t2.paperid = t3.citingpaperid WHERE t1.authorname = \"Mirella Lapata\";"
  },
  {
    "instruction": "what states border the most populous state",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );"
  },
  {
    "instruction": "what rivers are in illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = \"illinois\";"
  },
  {
    "instruction": "papers with Question Answering in keyphrases",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "what is the largest city of wyoming",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"wyoming\" ) AND state_name = \"wyoming\";"
  },
  {
    "instruction": "How many different source system code for the cmi cross references are there?",
    "input": "create table cmi_cross_references (cmi_cross_ref_id integer not null, master_customer_id integer not null, source_system_code char(15) not null, primary key (cmi_cross_ref_id), foreign key (master_customer_id) references customer_master_index (master_customer_id));",
    "output": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references"
  },
  {
    "instruction": "What are the nicknames of schools whose division is not 1?",
    "input": "create table \"school_details\" (\"School_ID\" int, \"Nickname\" text, \"Colors\" text, \"League\" text, \"Class\" text, \"Division\" text, primary key (\"School_Id\"), foreign key (`school_id`) references `school`(`school_id`));",
    "output": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\""
  },
  {
    "instruction": "List all the contact channel codes that were used less than 5 times.",
    "input": "create table `customer_contact_channels` (`customer_id` integer not null, `channel_code` varchar(15) not null, `active_from_date` datetime not null, `active_to_date` datetime, `contact_number` varchar(50) not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id) < 5"
  },
  {
    "instruction": "what are the capitals of the states that border texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border WHERE t1.state_name = \"texas\";"
  },
  {
    "instruction": "what city has the largest population",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );"
  },
  {
    "instruction": "Find the first names and offices of all instructors who have taught some course and also find the course description.",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T2.emp_fname, T4.prof_office, T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num"
  },
  {
    "instruction": "Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Badlands\" AND T1.StagePosition = \"back\""
  },
  {
    "instruction": "Give me the papers written by Su-In Lee before 2012 .",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Su-In Lee\" AND t3.year < 2012;"
  },
  {
    "instruction": "Find the name, headquarter and founder of the manufacturer that has the highest revenue.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT name, headquarter, founder FROM manufacturers ORDER BY revenue DESC LIMIT 1"
  },
  {
    "instruction": "where is the ohio river",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE river_name = \"ohio\";"
  },
  {
    "instruction": "Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\".",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));",
    "output": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = \"operating system\" OR T2.course_name = \"data structure\""
  },
  {
    "instruction": "How many different teams have had eliminated wrestlers?",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));",
    "output": "SELECT COUNT (DISTINCT team) FROM elimination"
  },
  {
    "instruction": "Who are the members of the club named \"Bootup Baltimore\"? Give me their last names.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\""
  },
  {
    "instruction": "Paper on parsing with most citations",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "How many different countries are all the swimmers from?",
    "input": "create table \"swimmer\" (\"ID\" int, \"name\" text, \"Nationality\" text, \"meter_100\" real, \"meter_200\" text, \"meter_300\" text, \"meter_400\" text, \"meter_500\" text, \"meter_600\" text, \"meter_700\" text, \"Time\" text, primary key (\"ID\"));",
    "output": "SELECT count(DISTINCT nationality) FROM swimmer"
  },
  {
    "instruction": "Show different colleges along with the number of authors of submission from each college.",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT College, COUNT(*) FROM submission GROUP BY College"
  },
  {
    "instruction": "Give me the dates when the max temperature was higher than 85.",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT date FROM weather WHERE max_temperature_f > 85"
  },
  {
    "instruction": "What are the distinct wineries which produce wines costing between 50 and 100?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100"
  },
  {
    "instruction": "how many ACL 2012 papers have more than 7 citations ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT ( t1.paperid ), COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2012 AND t2.venuename = \"ACL\" GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid ) > 7;"
  },
  {
    "instruction": "What was the budget of the movie Juno from 2007 ?",
    "input": "create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT budget FROM movie WHERE release_year = 2007 AND title = \"Juno\";"
  },
  {
    "instruction": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name, T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1"
  },
  {
    "instruction": "How many accelerators are not compatible with the browsers listed ?",
    "input": "create table \"Web_client_accelerator\" (\"id\" int, \"name\" text, \"Operating_system\" text, \"Client\" text, \"Connection\" text, primary key(\"id\"));create table \"accelerator_compatible_browser\" (\"accelerator_id\" int, \"browser_id\" int, \"compatible_since_year\" int, primary key(\"accelerator_id\", \"browser_id\"), foreign key (\"accelerator_id\") references `web_client_accelerator`(\"id\"), foreign key (\"browser_id\") references `browser`(\"id\"));",
    "output": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );"
  },
  {
    "instruction": "Show the title and director for all films.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Rank_in_series\" int, \"Number_in_season\" int, \"Title\" text, \"Directed_by\" text, \"Original_air_date\" text, \"Production_code\" text, primary key (\"Film_ID\"));",
    "output": "SELECT title, directed_by FROM film"
  },
  {
    "instruction": "What is oren etzioni 's latest paper ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"oren etzioni\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "What is the total salary expenses of team Boston Red Stockings in 2010?",
    "input": "create table salary (year integer, team_id text, league_id text, player_id text, salary integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2010"
  },
  {
    "instruction": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award = \"Drama Desk Award\""
  },
  {
    "instruction": "What papers are authored by sharon goldwater ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "What is the name and distance for aircraft with id 12?",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT name, distance FROM Aircraft WHERE aid = 12"
  },
  {
    "instruction": "Find the description and code of the service type that is performed the most times.",
    "input": "create table ref_service_types (service_type_code char(15) not null, parent_service_type_code char(15), service_type_description varchar(255), primary key (service_type_code), unique (service_type_code));create table services (service_id integer not null, service_type_code char(15), workshop_group_id integer not null, product_description varchar(255), product_name varchar(255), product_price decimal(20, 4), other_product_service_details varchar(255), primary key (service_id), unique (service_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id), foreign key (service_type_code) references ref_service_types (service_type_code));",
    "output": "SELECT T1.Service_Type_Description, T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the names of instructors who didn't each any courses in any Spring semester.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);",
    "output": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester = 'Spring')"
  },
  {
    "instruction": "What is the county that produces the most wines scoring higher than 90?",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What papers talk about Question Answering ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "How many services are there?",
    "input": "create table services (service_id integer not null, service_name varchar(40), primary key (service_id));",
    "output": "SELECT count(*) FROM services"
  },
  {
    "instruction": "Find the patient who has the most recent undergoing treatment?",
    "input": "create table undergoes (patient integer not null, procedures integer not null, stay integer not null, dateundergoes datetime not null, physician integer not null, assistingnurse integer, primary key(patient, procedures, stay, dateundergoes), constraint fk_undergoes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_undergoes_procedures_code foreign key(procedures) references procedures(code), constraint fk_undergoes_stay_stayid foreign key(stay) references stay(stayid), constraint fk_undergoes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_undergoes_nurse_employeeid foreign key(assistingnurse) references nurse(employeeid));",
    "output": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1"
  },
  {
    "instruction": "Find the number of products with category \"Spices\" and typically sold above 1000.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT count(*) FROM products WHERE product_category_code = \"Spices\" AND typical_buying_price > 1000"
  },
  {
    "instruction": "What are the staff ids and genders of all staffs whose job title is Department Manager?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_gender` varchar(1), `staff_name` varchar(80));create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.staff_id, T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Department Manager\""
  },
  {
    "instruction": "What are names for top three branches with most number of membership?",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3"
  },
  {
    "instruction": "What are the vocal types used in song \"Le Pop\"?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\""
  },
  {
    "instruction": "Find the employee id for all employees who earn more than the average salary.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id FROM employees WHERE salary > (SELECT AVG(salary) FROM employees)"
  },
  {
    "instruction": "How many times in total did the team Boston Red Stockings participate in postseason games?",
    "input": "create table postseason (year integer, round text, team_id_winner text, league_id_winner text, team_id_loser text, league_id_loser text, wins integer, losses integer, ties integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);create table postseason (year integer, round text, team_id_winner text, league_id_winner text, team_id_loser text, league_id_loser text, wins integer, losses integer, ties integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' );"
  },
  {
    "instruction": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\""
  },
  {
    "instruction": "How many papers does michael i. jordan have in 2016 ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"michael i. jordan\" AND t3.year = 2016;"
  },
  {
    "instruction": "What is the average balance in checking accounts?",
    "input": "create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT avg(balance) FROM checking"
  },
  {
    "instruction": "What is the average unit price of tracks that belong to Jazz genre?",
    "input": "create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Jazz\""
  },
  {
    "instruction": "Which complaint status has more than 3 records on file?",
    "input": "create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*) > 3"
  },
  {
    "instruction": "what state which the mississippi runs through has the largest population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );"
  },
  {
    "instruction": "What is the name of the race that occurred most recently?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT name FROM races ORDER BY date DESC LIMIT 1"
  },
  {
    "instruction": "What are the official names of cities, ordered descending by population?",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT Official_Name FROM city ORDER BY Population DESC"
  },
  {
    "instruction": "Find the average age of students living in each dorm and the name of dorm.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT avg(T1.age), T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name"
  },
  {
    "instruction": "Find the number of users called Michelle",
    "input": "create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT COUNT ( DISTINCT name ) FROM USER WHERE name = \"Michelle\";"
  },
  {
    "instruction": "Find the name of physicians whose position title contains the word 'senior'.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));",
    "output": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'"
  },
  {
    "instruction": "What is the name and country for the artist with most number of exhibitions?",
    "input": "create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT T2.name, T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the total enrollments of universities of each affiliation type?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT sum(enrollment), affiliation FROM university GROUP BY affiliation"
  },
  {
    "instruction": "Return the distinct customer details.",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));",
    "output": "SELECT DISTINCT customer_details FROM Customers"
  },
  {
    "instruction": "How many projects are there?",
    "input": "create table projects (project_id integer not null, project_details varchar(255), primary key (project_id));",
    "output": "SELECT count(*) FROM Projects"
  },
  {
    "instruction": "How many lessons did the customer with the first name Ray take?",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Ray\""
  },
  {
    "instruction": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?",
    "input": "create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical Staff')"
  },
  {
    "instruction": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `customer_phone` varchar(80), `customer_email` varchar(80), `customer_address` varchar(255), `customer_login` varchar(80), `customer_password` varchar(10));create table `mailshot_customers` (`mailshot_id` integer not null, `customer_id` integer not null, `outcome_code` varchar(15) not null, `mailshot_customer_date` datetime, foreign key (`customer_id`) references `customers`(`customer_id`), foreign key (`mailshot_id`) references `mailshot_campaigns`(`mailshot_id`));",
    "output": "SELECT T1.customer_name, T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.outcome_code = 'No Response'"
  },
  {
    "instruction": "How many students live in each city and what are their average ages?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*), avg(age), city_code FROM student GROUP BY city_code"
  },
  {
    "instruction": "Find the types of documents with more than 4 documents.",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*) > 4"
  },
  {
    "instruction": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT T1.director, T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 5"
  },
  {
    "instruction": "What are the papers of brian curless in convolution ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"brian curless\" AND t5.keyphrasename = \"convolution\";"
  },
  {
    "instruction": "can you tell me the capital of texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT capital FROM state WHERE state_name = \"texas\";"
  },
  {
    "instruction": "papers by Liwen Xiong from 2015",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Liwen Xiong\" AND t3.year = 2015;"
  },
  {
    "instruction": "how many people in boulder",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = \"boulder\";"
  },
  {
    "instruction": "how many people live in the state with the largest population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM state WHERE density = ( SELECT MAX ( density ) FROM state );"
  },
  {
    "instruction": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT count(*), affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation"
  },
  {
    "instruction": "which countries did participated in both Friendly and Tournament type competitions.",
    "input": "create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));",
    "output": "SELECT country FROM competition WHERE competition_type = 'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type = 'Tournament'"
  },
  {
    "instruction": "Show the names of players coached by the rank 1 coach.",
    "input": "create table \"player_coach\" (\"Player_ID\" int, \"Coach_ID\" int, \"Starting_year\" int, primary key (\"Player_ID\",\"Coach_ID\"), foreign key (`player_id`) references `player`(`player_id`), foreign key (`coach_id`) references `coach`(`coach_id`));create table \"coach\" (\"Coach_ID\" int, \"Coach_name\" text, \"Gender\" text, \"Club_ID\" int, \"Rank\" int, primary key (\"Coach_ID\"), foreign key (`club_id`) references `club`(`club_id`));create table \"player\" (\"Player_ID\" int, \"Sponsor_name\" text, \"Player_name\" text, \"Gender\" text, \"Residence\" text, \"Occupation\" text, \"Votes\" int, \"Rank\" text, primary key (\"Player_ID\"));",
    "output": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T2.Rank = 1"
  },
  {
    "instruction": "What are the maximum and minimum population of the counties?",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT max(Population), min(Population) FROM county"
  },
  {
    "instruction": "What are ids and total number of hours played for each game?",
    "input": "create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));",
    "output": "SELECT gameid, sum(hours_played) FROM Plays_games GROUP BY gameid"
  },
  {
    "instruction": "Who has coauthored with Noah A Smith ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Noah A Smith\";"
  },
  {
    "instruction": "Show names of musicals which have at least three actors.",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3"
  },
  {
    "instruction": "What are the names of the cameras that have taken picture of the most mountains?",
    "input": "create table \"photos\" (\"id\" int, \"camera_lens_id\" int, \"mountain_id\" int, \"color\" text, \"name\" text, primary key(\"id\"), foreign key(\"camera_lens_id\") references `camera_lens`(\"id\"), foreign key(\"mountain_id\") references `mountain`(\"id\"));create table \"camera_lens\" (\"id\" int, \"brand\" text, \"name\" text, \"focal_length_mm\" real, \"max_aperture\" real, primary key(\"id\"));",
    "output": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many faculty lines are there at San Francisco State University in 2004?",
    "input": "create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2004 AND T2.campus = \"San Francisco State University\""
  },
  {
    "instruction": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Please show the employee first names and ids of employees who serve at least 10 customers.",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `employee` (`employeeid` integer not null , `lastname` varchar(20) not null , `firstname` varchar(20) not null , `title` varchar(30) default null , `reportsto` integer default null , `birthdate` datetime default null , `hiredate` datetime default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) default null , primary key (`employeeid`) , constraint `fk_employeereportsto` foreign key (`reportsto`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.FirstName, T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) >= 10"
  },
  {
    "instruction": "Show the county name and population of all counties.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT County_name, Population FROM county"
  },
  {
    "instruction": "what is the population of the capital of the smallest state",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );"
  },
  {
    "instruction": "Find the id and local authority of the station with has the highest average high temperature.",
    "input": "create table \"weekly_weather\" (\"station_id\" int, \"day_of_week\" text, \"high_temperature\" int, \"low_temperature\" int, \"precipitation\" real, \"wind_speed_mph\" int, primary key (\"station_id\", \"day_of_week\"), foreign key (\"station_id\") references \"station\"(\"id\"));create table \"station\" (\"id\" int, \"network_name\" text, \"services\" text, \"local_authority\" text, primary key (\"id\"));",
    "output": "SELECT t2.id, t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1"
  },
  {
    "instruction": "Find the the date of enrollment of the \"Spanish\" course.",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\""
  },
  {
    "instruction": "What is the name, location and seating for the most recently opened track?",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT name, LOCATION, seating FROM track ORDER BY year_opened DESC LIMIT 1"
  },
  {
    "instruction": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Give the ids of the three products purchased in the largest amounts.",
    "input": "create table `product_suppliers` (`product_id` integer not null, `supplier_id` integer not null, `date_supplied_from` datetime not null, `date_supplied_to` datetime, `total_amount_purchased` varchar(80), `total_value_purchased` decimal(19, 4), primary key (`product_id`, `supplier_id`), foreign key (`supplier_id`) references `suppliers`(`supplier_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3"
  },
  {
    "instruction": "What keywords are in papers by Luke Zettlemoyer ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Luke Zettlemoyer\";"
  },
  {
    "instruction": "List all location codes and location names.",
    "input": "create table ref_locations (location_code char(15) not null, location_name varchar(255) not null, location_description varchar(255) not null, primary key (location_code));",
    "output": "SELECT location_code, location_name FROM Ref_locations"
  },
  {
    "instruction": "What are the first names of all teachers who have taught a course and the corresponding course codes?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);",
    "output": "SELECT T2.emp_fname, T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num"
  },
  {
    "instruction": "What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?",
    "input": "create table \"pitStops\" (\"raceId\" integer, \"driverId\" integer, \"stop\" integer, \"lap\" integer, \"time\" text, \"duration\" text, \"milliseconds\" integer, primary key (\"raceId\", \"driverId\", \"stop\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"pitStops\" (\"raceId\" integer, \"driverId\" integer, \"stop\" integer, \"lap\" integer, \"time\" text, \"duration\" text, \"milliseconds\" integer, primary key (\"raceId\", \"driverId\", \"stop\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT DISTINCT driverid, STOP FROM pitstops WHERE duration < (SELECT max(duration) FROM pitstops WHERE raceid = 841)"
  },
  {
    "instruction": "Who has a friend that is from new york city?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.city = 'new york city'"
  },
  {
    "instruction": "what is the largest river in texas state",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = \"texas\" ) AND traverse = \"texas\";"
  },
  {
    "instruction": "List the organisation id with the maximum outcome count, and the count.",
    "input": "create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));",
    "output": "SELECT T1.organisation_id, count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of customers who have an account.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(DISTINCT customer_id) FROM Accounts"
  },
  {
    "instruction": "List the project details of the projects which did not hire any staff for a researcher role.",
    "input": "create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code = 'researcher' )"
  },
  {
    "instruction": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT document_type_code, document_name, document_description FROM Documents WHERE document_name = 'Noel CV' OR document_name = 'King Book'"
  },
  {
    "instruction": "what year had the most NIPS papers ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ), t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;"
  },
  {
    "instruction": "Show names of technicians and series of machines they are assigned to repair.",
    "input": "create table \"repair_assignment\" (\"technician_id\" int, \"repair_ID\" int, \"Machine_ID\" int, primary key (\"technician_id\",\"repair_ID\",\"Machine_ID\"), foreign key (`technician_id`) references `technician`(`technician_id`), foreign key (`repair_id`) references `repair`(`repair_id`), foreign key (`machine_id`) references `machine`(`machine_id`));create table \"machine\" (\"Machine_ID\" int, \"Making_Year\" int, \"Class\" text, \"Team\" text, \"Machine_series\" text, \"value_points\" real, \"quality_rank\" int, primary key (\"Machine_ID\"));create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT T3.Name, T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID"
  },
  {
    "instruction": "What instrument did the musician with last name \"Heilo\" use in the song \"Badlands\"?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));",
    "output": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = \"Heilo\" AND T3.title = \"Badlands\""
  },
  {
    "instruction": "What are the rank, first name, and last name of the faculty members?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT rank, Fname, Lname FROM Faculty"
  },
  {
    "instruction": "For each position, what is the minimum time students spent practicing?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT min(T2.HS), T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY T1.pPos"
  },
  {
    "instruction": "What are the codes of the locations with at least three documents?",
    "input": "create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*) >= 3"
  },
  {
    "instruction": "Find the total credits of all classes offered by each department.",
    "input": "create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT sum(T1.crs_credit), T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code"
  },
  {
    "instruction": "What are the average and minimum weights for people of each sex?",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));",
    "output": "SELECT avg(weight), min(weight), sex FROM people GROUP BY sex"
  },
  {
    "instruction": "What are the average prices of products, grouped by manufacturer code?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT AVG(Price), Manufacturer FROM Products GROUP BY Manufacturer"
  },
  {
    "instruction": "What are the names and ids of customers whose address contains TN?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));",
    "output": "SELECT customer_name, customer_id FROM customers WHERE customer_address LIKE \"%TN%\""
  },
  {
    "instruction": "Find the average age of female students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(Age) FROM STUDENT WHERE Sex = \"F\""
  },
  {
    "instruction": "Find the first name and office of the professor who is in the history department and has a Ph.D. degree.",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T1.emp_fname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code WHERE T3.dept_name = 'History' AND T2.prof_high_degree = 'Ph.D.'"
  },
  {
    "instruction": "what is the most cited paper of ohad shamir ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "Count the number of cities in the state of Colorado.",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `town_city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT count(*) FROM addresses WHERE state_province_county = \"Colorado\""
  },
  {
    "instruction": "return me the number of papers published on PVLDB before 2000 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = \"PVLDB\" AND t2.year < 2000;"
  },
  {
    "instruction": "what state has the highest elevation",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "most cited papers on parsing",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "Return the apartment numbers of the apartments with type code \"Flat\".",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_number FROM Apartments WHERE apt_type_code = \"Flat\""
  },
  {
    "instruction": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.",
    "input": "create table products (product_id integer not null, product_type_code char(15), product_name varchar(255), product_price decimal(20, 4), primary key (product_id), unique (product_id));create table products (product_id integer not null, product_type_code char(15), product_name varchar(255), product_price decimal(20, 4), primary key (product_id), unique (product_id));",
    "output": "SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price < 3000"
  },
  {
    "instruction": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.",
    "input": "create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table trained_in (physician integer not null, treatment integer not null, certificationdate datetime not null, certificationexpires datetime not null, constraint fk_trained_in_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_trained_in_procedures_code foreign key(treatment) references procedures(code), primary key(physician, treatment));create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT name FROM procedures WHERE cost > 1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\""
  },
  {
    "instruction": "What are the most common types of interactions between enzymes and medicine, and how many types are there?",
    "input": "create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));",
    "output": "SELECT interaction_type, count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of entrepreneurs.",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT count(*) FROM entrepreneur"
  },
  {
    "instruction": "Return the budget type codes, budget type descriptions and document ids for documents with expenses.",
    "input": "create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));create table ref_budget_codes (budget_type_code char(15) not null, budget_type_description varchar(255) not null, primary key (budget_type_code));",
    "output": "SELECT T2.budget_type_code, T2.budget_type_description, T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code"
  },
  {
    "instruction": "Which tests have \"Pass\" results? Return the dates when the tests were taken.",
    "input": "create table `student_tests_taken` (`registration_id` integer not null, `date_test_taken` datetime not null, `test_result` varchar(255), foreign key (`registration_id`) references `student_course_enrolment`(`registration_id`));",
    "output": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = \"Pass\""
  },
  {
    "instruction": "how many citizens live in california",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM state WHERE state_name = \"california\";"
  },
  {
    "instruction": "Which cities have regional population above 10000000?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));",
    "output": "SELECT city FROM city WHERE regional_population > 10000000"
  },
  {
    "instruction": "How many faculty, in total, are there in the year 2002?",
    "input": "create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));",
    "output": "SELECT sum(faculty) FROM faculty WHERE YEAR = 2002"
  },
  {
    "instruction": "List the first and last name of the students who do not have any food type allergy.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT fname, lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")"
  },
  {
    "instruction": "What is the project detail for the project with document \"King Book\"?",
    "input": "create table projects (project_id integer not null, project_details varchar(255), primary key (project_id));create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id WHERE T2.document_name = \"King Book\""
  },
  {
    "instruction": "papers published at pldi 2015",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "What are the names of projects that require between 100 and 300 hours?",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300"
  },
  {
    "instruction": "Return the maximum and minimum number of cows across all farms.",
    "input": "create table \"farm\" (\"Farm_ID\" int, \"Year\" int, \"Total_Horses\" real, \"Working_Horses\" real, \"Total_Cattle\" real, \"Oxen\" real, \"Bulls\" real, \"Cows\" real, \"Pigs\" real, \"Sheep_and_Goats\" real, primary key (\"Farm_ID\"));",
    "output": "SELECT max(Cows), min(Cows) FROM farm"
  },
  {
    "instruction": "How many different colleges were represented at tryouts?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT count(DISTINCT cName) FROM tryout"
  },
  {
    "instruction": "which topics were most popular at NIPS 2015",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t3.year = 2015 AND t4.venuename = \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
  },
  {
    "instruction": "Show all student ids and the number of hours played.",
    "input": "create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));",
    "output": "SELECT Stuid, sum(hours_played) FROM Plays_games GROUP BY Stuid"
  },
  {
    "instruction": "Find the distinct Advisor of students who have treasurer votes in the spring election cycle.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote WHERE T2.Election_Cycle = \"Spring\""
  },
  {
    "instruction": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
    "input": "create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Support_rate, Consider_rate, Oppose_rate FROM candidate ORDER BY unsure_rate"
  },
  {
    "instruction": "What are all the policy types of the customer named \"Dayana Robel\"?",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table customers_policies (customer_id integer not null, policy_id integer not null, date_opened date, date_closed date, primary key (customer_id, policy_id), foreign key (customer_id) references customers (customer_id), foreign key (policy_id) references available_policies (policy_id));create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));",
    "output": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = \"Dayana Robel\""
  },
  {
    "instruction": "Find the name of product that is produced by both companies Creative Labs and Sony.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony'"
  },
  {
    "instruction": "What is the first name, gpa and phone number of the top 5 students with highest gpa?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT stu_gpa, stu_phone, stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5"
  },
  {
    "instruction": "What conference does Daniella Coelho publish in ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Daniella Coelho\";"
  },
  {
    "instruction": "What is the number of employees?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT count(*) FROM Employee"
  },
  {
    "instruction": "Give the distinct headquarters of manufacturers.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT DISTINCT headquarter FROM manufacturers"
  },
  {
    "instruction": "give me the cities which are in texas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE state_name = \"texas\";"
  },
  {
    "instruction": "What is the oldest age among the students?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT max(Age) FROM STUDENT"
  },
  {
    "instruction": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000"
  },
  {
    "instruction": "Papers published in 2015 by Liwen Xiong",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Liwen Xiong\" AND t3.year = 2015;"
  },
  {
    "instruction": "Find the grade studying in room 105.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT grade FROM list WHERE classroom = 105"
  },
  {
    "instruction": "What is the total revenue of companies started by founder?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT sum(revenue), founder FROM manufacturers GROUP BY founder"
  },
  {
    "instruction": "Which customer uses the most policies? Give me the customer name.",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table customers_policies (customer_id integer not null, policy_id integer not null, date_opened date, date_closed date, primary key (customer_id, policy_id), foreign key (customer_id) references customers (customer_id), foreign key (policy_id) references available_policies (policy_id));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "return me the number of papers by \" H. V. Jagadish \" after 2000 .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t1.name = \"H. V. Jagadish\" AND t3.year > 2000;"
  },
  {
    "instruction": "Show all the ranks and the number of male and female faculty for each rank.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT rank, sex, count(*) FROM Faculty GROUP BY rank, sex"
  },
  {
    "instruction": "List the names of wrestlers that have not been eliminated.",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));",
    "output": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)"
  },
  {
    "instruction": "Find the number of records of each policy type and its type code.",
    "input": "create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));",
    "output": "SELECT policy_type_code, count(*) FROM policies GROUP BY policy_type_code"
  },
  {
    "instruction": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.",
    "input": "create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));",
    "output": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*) > 2"
  },
  {
    "instruction": "List top 10 employee work longest in the company. List employee's first and last name.",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT first_name, last_name FROM employees ORDER BY hire_date ASC LIMIT 10;"
  },
  {
    "instruction": "What is the average age of students who have city code \"NYC\" and have secretary votes for the spring election cycle?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.city_code = \"NYC\" AND T2.Election_Cycle = \"Spring\""
  },
  {
    "instruction": "List the name of browsers in descending order by market share.",
    "input": "create table \"browser\" (\"id\" int, \"name\" text, \"market_share\" real, primary key(\"id\"));",
    "output": "SELECT name FROM browser ORDER BY market_share DESC"
  },
  {
    "instruction": "Return the login names of the students whose family name is \"Ward\".",
    "input": "create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT login_name FROM Students WHERE family_name = \"Ward\""
  },
  {
    "instruction": "What is the zip code of the customer Carole Bernhard?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\""
  },
  {
    "instruction": "What are the different names of mountains ascended by climbers from the country of West Germany?",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = \"West Germany\""
  },
  {
    "instruction": "How many actors are there?",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));",
    "output": "SELECT count(*) FROM actor"
  },
  {
    "instruction": "list datasets for semantic parsing",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid WHERE t4.keyphrasename = \"semantic parsing\";"
  },
  {
    "instruction": "What are the first and last names of all the employees and how many people report to them?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.first_name, T2.last_name, count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;"
  },
  {
    "instruction": "List the names of mountains that do not have any climber.",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));",
    "output": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)"
  },
  {
    "instruction": "What is the party of the youngest people?",
    "input": "create table \"people\" (\"People_ID\" int, \"District\" text, \"Name\" text, \"Party\" text, \"Age\" int, primary key (\"People_ID\"));",
    "output": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1"
  },
  {
    "instruction": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
    "input": "create table \"architect\" (\"id\" text, \"name\" text, \"nationality\" text, \"gender\" text, primary key(\"id\"));",
    "output": "SELECT name, nationality, id FROM architect WHERE gender = 'male' ORDER BY name"
  },
  {
    "instruction": "On which day has it neither been foggy nor rained in the zip code of 94107?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\""
  },
  {
    "instruction": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",
    "input": "create table cmi_cross_references (cmi_cross_ref_id integer not null, master_customer_id integer not null, source_system_code char(15) not null, primary key (cmi_cross_ref_id), foreign key (master_customer_id) references customer_master_index (master_customer_id));create table benefits_overpayments (council_tax_id integer not null, cmi_cross_ref_id integer not null, primary key (council_tax_id), foreign key (cmi_cross_ref_id) references cmi_cross_references (cmi_cross_ref_id));",
    "output": "SELECT T1.source_system_code, T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id ORDER BY T2.council_tax_id"
  },
  {
    "instruction": "Who is the director of movie Avatar?",
    "input": "create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT director FROM Movie WHERE title = 'Avatar'"
  },
  {
    "instruction": "return me the number of authors who have papers in the VLDB conference .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = \"VLDB\";"
  },
  {
    "instruction": "Show the name for regions and the number of storms for each region.",
    "input": "create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT T1.region_name, count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id"
  },
  {
    "instruction": "which state is the city springfield located in",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "Give the hometowns from which two or more gymnasts are from.",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "What are each physician's employee id and department id primarily affiliated.",
    "input": "create table affiliated_with (physician integer not null, department integer not null, primaryaffiliation boolean not null, constraint fk_affiliated_with_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_affiliated_with_department_departmentid foreign key(department) references department(departmentid), primary key(physician, department));",
    "output": "SELECT physician, department FROM affiliated_with WHERE primaryaffiliation = 1"
  },
  {
    "instruction": "How many registed students do each course have? List course name and the number of their registered students?",
    "input": "create table students (student_id integer not null, student_details varchar(255), primary key (student_id), foreign key (student_id) references people (person_id));create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));create table courses (course_id varchar(100) not null, course_name varchar(120), course_description varchar(255), other_details varchar(255), primary key (course_id));",
    "output": "SELECT T3.course_name, count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
  },
  {
    "instruction": "How many students have personal names that contain the word \"son\"?",
    "input": "create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\""
  },
  {
    "instruction": "What is the id of the trip that has the shortest duration?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT id FROM trip ORDER BY duration LIMIT 1"
  },
  {
    "instruction": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.",
    "input": "create table address (address_id smallint unsigned not null, address varchar(50) not null, address2 varchar(50) default null, district varchar(20) not null, city_id smallint unsigned not null, postal_code varchar(10) default null, phone varchar(20) not null, last_update timestamp not null default current_timestamp, primary key (address_id), foreign key (city_id) references city (city_id));",
    "output": "SELECT phone, postal_code FROM address WHERE address = '1031 Daugavpils Parkway'"
  },
  {
    "instruction": "What are the first names and offices of history professors who don't have Ph.D.s?",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree != 'Ph.D.'"
  },
  {
    "instruction": "Show the names of members and the location of the performances they attended.",
    "input": "create table \"member_attendance\" (\"Member_ID\" int, \"Performance_ID\" int, \"Num_of_Pieces\" int, primary key (\"Member_ID\",\"Performance_ID\"), foreign key (\"Member_ID\") references `member`(\"Member_ID\"), foreign key (\"Performance_ID\") references `performance`(\"Performance_ID\"));create table \"member\" (\"Member_ID\" text, \"Name\" text, \"Nationality\" text, \"Role\" text, primary key (\"Member_ID\"));create table \"performance\" (\"Performance_ID\" real, \"Date\" text, \"Host\" text, \"Location\" text, \"Attendance\" int, primary key (\"Performance_ID\"));",
    "output": "SELECT T2.Name, T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID"
  },
  {
    "instruction": "what year had the most number of NIPS papers ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ), t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;"
  },
  {
    "instruction": "Count the total number of bookings made.",
    "input": "create table bookings (booking_id integer not null , customer_id integer not null, workshop_group_id varchar(100) not null, status_code char(15) not null, store_id integer not null, order_date datetime not null, planned_delivery_date datetime not null, actual_delivery_date datetime not null, other_order_details varchar(255), primary key (booking_id), unique (booking_id), foreign key (customer_id) references clients (client_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id));",
    "output": "SELECT count(*) FROM BOOKINGS"
  },
  {
    "instruction": "Show the 3 counties with the smallest population.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3"
  },
  {
    "instruction": "Return the name, rate, check in and check out date for the room with the highest rate.",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT T2.roomName, T1.Rate, T1.CheckIn, T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;"
  },
  {
    "instruction": "List the names of climbers whose country is not Switzerland.",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));",
    "output": "SELECT Name FROM climber WHERE Country != \"Switzerland\""
  },
  {
    "instruction": "Return the names and classes of ships that do not have a captain?",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT name, CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)"
  },
  {
    "instruction": "What are the ids of all students and number of hours played?",
    "input": "create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));",
    "output": "SELECT Stuid, sum(hours_played) FROM Plays_games GROUP BY Stuid"
  },
  {
    "instruction": "what is the population of the smallest state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM state WHERE area = ( SELECT MIN ( area ) FROM state );"
  },
  {
    "instruction": "Which classrooms are used by grade 5?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT classroom FROM list WHERE grade = 5"
  },
  {
    "instruction": "Find all actors from Austin born after 1980",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT name FROM actor WHERE birth_city = \"Austin\" AND birth_year > 1980;"
  },
  {
    "instruction": "Find the name of the customers who use the most frequently used payment method.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT customer_name FROM customers WHERE payment_method = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "How many different cities do have some airport in the country of Greenland?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT count(DISTINCT city) FROM airports WHERE country = 'Greenland'"
  },
  {
    "instruction": "What are the first names of all students in Smith Hall?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall'"
  },
  {
    "instruction": "Show all majors.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT Major FROM Student"
  },
  {
    "instruction": "how many cities are there in the united states",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( city_name ) FROM city;"
  },
  {
    "instruction": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\""
  },
  {
    "instruction": "How many male students (sex is 'M') are allergic to any type of food?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT count(*) FROM Student WHERE sex = \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")"
  },
  {
    "instruction": "How many females are in the network?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT count(*) FROM Person WHERE gender = 'female'"
  },
  {
    "instruction": "conferences that mention ImageNet",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"ImageNet\";"
  },
  {
    "instruction": "what is capital of texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT capital FROM state WHERE state_name = \"texas\";"
  },
  {
    "instruction": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT T1.Claim_id, count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id"
  },
  {
    "instruction": "count the states which have elevations lower than what alabama has",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( state_name ) FROM highlow WHERE lowest_elevation < ( SELECT lowest_elevation FROM highlow WHERE state_name = \"alabama\" );"
  },
  {
    "instruction": "Which claim processing stage has the most claims? Show the claim status name.",
    "input": "create table claims_processing (claim_processing_id integer not null, claim_id integer not null, claim_outcome_code char(15) not null, claim_stage_id integer not null, staff_id integer, primary key (claim_processing_id), foreign key (claim_id) references claim_headers (claim_header_id), foreign key (staff_id) references staff (staff_id));create table claims_processing_stages (claim_stage_id integer not null, next_claim_stage_id integer, claim_status_name varchar(255) not null, claim_status_description varchar(255) not null, primary key (claim_stage_id));",
    "output": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the student IDs and middle names of the students enrolled in at most two courses?",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT T1.student_id, T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) <= 2"
  },
  {
    "instruction": "Who are Noah A Smith 's co-authors",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Noah A Smith\";"
  },
  {
    "instruction": "Which department has the highest average student GPA, and what is the average gpa?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.dept_name, avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1"
  },
  {
    "instruction": "What is the structure of the document with the least number of accesses?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `document_structures` (`document_structure_code` varchar(15) primary key, `parent_document_structure_code` varchar(15), `document_structure_description` varchar(80));",
    "output": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is total amount claimed summed across all the claims?",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));",
    "output": "SELECT sum(Amount_Claimed) FROM Claims"
  },
  {
    "instruction": "What are the instruments are used in the song \"Le Pop\"?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\""
  },
  {
    "instruction": "Find the average grade point of student whose last name is Smith.",
    "input": "create table enrolled_in (stuid integer, cid varchar(7), grade varchar(2), foreign key(stuid) references student(stuid), foreign key(cid) references course(cid), foreign key(grade) references gradeconversion(lettergrade));create table gradeconversion (lettergrade varchar(2) primary key, gradepoint float);create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = \"Smith\""
  },
  {
    "instruction": "what are the major cities of the united states",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population > 150000;"
  },
  {
    "instruction": "What are the names of players who have the best dribbling?",
    "input": "create table `player` (`id`\tinteger primary key autoincrement, `player_api_id`\tinteger unique, `player_name`\ttext, `player_fifa_api_id`\tinteger unique, `birthday`\ttext, `height`\tinteger, `weight`\tinteger);create table \"Player_Attributes\" (`id`\tinteger primary key autoincrement, `player_fifa_api_id`\tinteger, `player_api_id`\tinteger, `date`\ttext, `overall_rating`\tinteger, `potential`\tinteger, `preferred_foot`\ttext, `attacking_work_rate`\ttext, `defensive_work_rate`\ttext, `crossing`\tinteger, `finishing`\tinteger, `heading_accuracy`\tinteger, `short_passing`\tinteger, `volleys`\tinteger, `dribbling`\tinteger, `curve`\tinteger, `free_kick_accuracy`\tinteger, `long_passing`\tinteger, `ball_control`\tinteger, `acceleration`\tinteger, `sprint_speed`\tinteger, `agility`\tinteger, `reactions`\tinteger, `balance`\tinteger, `shot_power`\tinteger, `jumping`\tinteger, `stamina`\tinteger, `strength`\tinteger, `long_shots`\tinteger, `aggression`\tinteger, `interceptions`\tinteger, `positioning`\tinteger, `vision`\tinteger, `penalties`\tinteger, `marking`\tinteger, `standing_tackle`\tinteger, `sliding_tackle`\tinteger, `gk_diving`\tinteger, `gk_handling`\tinteger, `gk_kicking`\tinteger, `gk_positioning`\tinteger, `gk_reflexes`\tinteger, foreign key(`player_fifa_api_id`) references `player`(`player_fifa_api_id`), foreign key(`player_api_id`) references `player`(`player_api_id`));create table \"Player_Attributes\" (`id`\tinteger primary key autoincrement, `player_fifa_api_id`\tinteger, `player_api_id`\tinteger, `date`\ttext, `overall_rating`\tinteger, `potential`\tinteger, `preferred_foot`\ttext, `attacking_work_rate`\ttext, `defensive_work_rate`\ttext, `crossing`\tinteger, `finishing`\tinteger, `heading_accuracy`\tinteger, `short_passing`\tinteger, `volleys`\tinteger, `dribbling`\tinteger, `curve`\tinteger, `free_kick_accuracy`\tinteger, `long_passing`\tinteger, `ball_control`\tinteger, `acceleration`\tinteger, `sprint_speed`\tinteger, `agility`\tinteger, `reactions`\tinteger, `balance`\tinteger, `shot_power`\tinteger, `jumping`\tinteger, `stamina`\tinteger, `strength`\tinteger, `long_shots`\tinteger, `aggression`\tinteger, `interceptions`\tinteger, `positioning`\tinteger, `vision`\tinteger, `penalties`\tinteger, `marking`\tinteger, `standing_tackle`\tinteger, `sliding_tackle`\tinteger, `gk_diving`\tinteger, `gk_handling`\tinteger, `gk_kicking`\tinteger, `gk_positioning`\tinteger, `gk_reflexes`\tinteger, foreign key(`player_fifa_api_id`) references `player`(`player_fifa_api_id`), foreign key(`player_api_id`) references `player`(`player_api_id`));",
    "output": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling = ( SELECT max(overall_rating) FROM Player_Attributes)"
  },
  {
    "instruction": "What is the first and last name of the oldest employee?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);",
    "output": "SELECT emp_fname, emp_lname FROM employee ORDER BY emp_dob LIMIT 1"
  },
  {
    "instruction": "What are the full names and hire dates for employees in the same department as someone with the first name Clara?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, hire_date FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = \"Clara\")"
  },
  {
    "instruction": "What are the campuses that opened in 1958?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE YEAR = 1958"
  },
  {
    "instruction": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT cName FROM College WHERE enr < 13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr > 15000 AND state = \"LA\""
  },
  {
    "instruction": "What are the distinct ages of the heads who are acting?",
    "input": "create table \"management\" (\"department_ID\" int, \"head_ID\" int, \"temporary_acting\" text, primary key (\"Department_ID\",\"head_ID\"), foreign key (\"Department_ID\") references `department`(\"Department_ID\"), foreign key (\"head_ID\") references `head`(\"head_ID\"));create table \"head\" (\"head_ID\" int, \"name\" text, \"born_state\" text, \"age\" real, primary key (\"head_ID\"));",
    "output": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'"
  },
  {
    "instruction": "Find the total and average amount paid in claim headers.",
    "input": "create table claim_headers (claim_header_id integer not null, claim_status_code char(15) not null, claim_type_code char(15) not null, policy_id integer not null, date_of_claim datetime, date_of_settlement datetime, amount_claimed decimal(20, 4), amount_piad decimal(20, 4), primary key (claim_header_id), foreign key (policy_id) references policies (policy_id));",
    "output": "SELECT sum(amount_piad), avg(amount_piad) FROM claim_headers"
  },
  {
    "instruction": "What is the name of the department with the fewest professors?",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "Show the party that has the most people.",
    "input": "create table \"people\" (\"People_ID\" int, \"District\" text, \"Name\" text, \"Party\" text, \"Age\" int, primary key (\"People_ID\"));",
    "output": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which products has been complained by the customer who has filed least amount of complaints?",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `product_category_code` varchar(20) not null, `date_product_first_available` datetime, `date_product_discontinued` datetime, `product_name` varchar(80), `product_description` varchar(255), `product_price` decimal(19, 4));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT customer_status_code, cell_mobile_phone_number, email_address FROM Customers WHERE first_name = \"Marina\" OR last_name = \"Kohler\""
  },
  {
    "instruction": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));",
    "output": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'"
  },
  {
    "instruction": "How many papers were written on Multiuser Receiver in the Decision Feedback this year ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Multiuser Receiver in the Decision Feedback\" AND t3.year = 2016 GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename ) > 1;"
  },
  {
    "instruction": "Show the premise type and address type code for all customer addresses.",
    "input": "create table `customer_addresses` (`customer_id` integer not null, `premise_id` integer not null, `date_address_from` datetime not null, `address_type_code` varchar(15) not null, `date_address_to` datetime, foreign key (`premise_id`) references `premises`(`premise_id`) foreign key (`customer_id`) references `customers`(`customer_id`));create table `premises` (`premise_id` integer primary key, `premises_type` varchar(15) not null, `premise_details` varchar(255));",
    "output": "SELECT T2.premises_type, T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id"
  },
  {
    "instruction": "Find the names of customers who never placed an order.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id"
  },
  {
    "instruction": "Count the number of female Professors we have.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT count(*) FROM Faculty WHERE Sex = 'F' AND Rank = \"Professor\""
  },
  {
    "instruction": "Show the title and publication dates of books.",
    "input": "create table \"book\" (\"Book_ID\" int, \"Title\" text, \"Issues\" real, \"Writer\" text, primary key (\"Book_ID\"));create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));",
    "output": "SELECT T1.Title, T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID"
  },
  {
    "instruction": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1"
  },
  {
    "instruction": "Find the names of users who have more than one tweet.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));create table `tweets` (`id` bigint(20) not null, `uid` int(11) not null, `text` char(140) not null, `createdate` datetime default current_timestamp, primary key (`id`), foreign key (`uid`) references `user_profiles`(`uid`));",
    "output": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count(*) > 1"
  },
  {
    "instruction": "What are the department ids for which more than 10 employees had a commission?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10"
  },
  {
    "instruction": "Find the name of accounts whose checking balance is below the average checking balance.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT avg(balance) FROM checking)"
  },
  {
    "instruction": "Show ids for all employees with at least 100000 salary.",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT eid FROM Employee WHERE salary > 100000"
  },
  {
    "instruction": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2"
  },
  {
    "instruction": "Find all the reviews for all Pet Groomers with more than 100 reviews",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT t3.text FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id WHERE t1.review_count > 100 AND t2.category_name = \"Pet Groomers\";"
  },
  {
    "instruction": "Which catalog publishers have substring \"Murray\" in their names?",
    "input": "create table `catalogs` (`catalog_id` integer primary key, `catalog_name` varchar(50), `catalog_publisher` varchar(80), `date_of_publication` datetime, `date_of_latest_revision` datetime);",
    "output": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\""
  },
  {
    "instruction": "What are the distinct ids of customers who made an order after any order that was Cancelled?",
    "input": "create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date > (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code = \"Cancelled\")"
  },
  {
    "instruction": "List the names of products that are not in any event.",
    "input": "create table products (product_id integer not null, product_type_code char(15), product_name varchar(255), product_price decimal(20, 4), primary key (product_id), unique (product_id));create table products_in_events (product_in_event_id integer not null, event_id integer not null, product_id integer not null, primary key (product_in_event_id), foreign key (event_id) references events (event_id), foreign key (product_id) references products (product_id));",
    "output": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)"
  },
  {
    "instruction": "What is the name of department where has the smallest number of professors?",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "Find the name of companies whose revenue is between 100 and 150.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150"
  },
  {
    "instruction": "topics used by Luke Zettlemoyer",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Luke Zettlemoyer\";"
  },
  {
    "instruction": "return me the author in the \" University of Michigan \" in Databases area whose papers have more than 5000 total citations .",
    "input": "create table \"domain_author\" (\"aid\" int, \"did\" int, primary key (\"did\", \"aid\"), foreign key(\"aid\") references `author`(\"aid\"), foreign key(\"did\") references `domain`(\"did\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT t1.name FROM domain_author AS t6 JOIN author AS t1 ON t6.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t6.did JOIN organization AS t5 ON t5.oid = t1.oid JOIN writes AS t2 ON t2.aid = t1.aid JOIN publication AS t4 ON t2.pid = t4.pid WHERE t3.name = \"Databases\" AND t5.name = \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num ) > 5000;"
  },
  {
    "instruction": "Find the total claimed amount of all the claims.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));",
    "output": "SELECT sum(Amount_Claimed) FROM Claims"
  },
  {
    "instruction": "Give the names of mountains in alphabetical order.",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT Name FROM mountain ORDER BY Name ASC"
  },
  {
    "instruction": "What paper by ohad shamir has the most citation ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "Show the themes of parties and the names of the party hosts.",
    "input": "create table \"party_host\" (\"Party_ID\" int, \"Host_ID\" int, \"Is_Main_in_Charge\" bool, primary key (\"Party_ID\",\"Host_ID\"), foreign key (\"Host_ID\") references `host`(\"Host_ID\"), foreign key (\"Party_ID\") references `party`(\"Party_ID\"));create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT T3.Party_Theme, T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID"
  },
  {
    "instruction": "papers by sharon goldwater",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "Find names and times of trains that run through stations for the local authority Chiltern.",
    "input": "create table \"station\" (\"id\" int, \"network_name\" text, \"services\" text, \"local_authority\" text, primary key (\"id\"));create table \"route\" (\"train_id\" int, \"station_id\" int, primary key (\"train_id\", \"station_id\"), foreign key (\"train_id\") references `train`(\"id\"), foreign key (\"station_id\") references `station`(\"id\"));create table \"train\" (\"id\" int, \"train_number\" int, \"name\" text, \"origin\" text, \"destination\" text, \"time\" text, \"interval\" text, primary key (\"id\"));",
    "output": "SELECT t3.name, t3.time FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\""
  },
  {
    "instruction": "what is the longest river",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );"
  },
  {
    "instruction": "What is the date of the performance with the highest number of attendees?",
    "input": "create table \"performance\" (\"Performance_ID\" real, \"Date\" text, \"Host\" text, \"Location\" text, \"Attendance\" int, primary key (\"Performance_ID\"));",
    "output": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1"
  },
  {
    "instruction": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB after 2005 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid = t4.jid JOIN writes AS t3 ON t3.pid = t6.pid JOIN writes AS t5 ON t5.pid = t6.pid JOIN author AS t1 ON t5.aid = t1.aid JOIN author AS t2 ON t3.aid = t2.aid WHERE t2.name = \"H. V. Jagadish\" AND t1.name = \"Yunyao Li\" AND t4.name = \"PVLDB\" AND t6.year > 2005;"
  },
  {
    "instruction": "what states border the ohio river",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE river_name = \"ohio\";"
  },
  {
    "instruction": "Show all team names.",
    "input": "create table `team` (`team_id` int, `name` text, primary key (`team_id`));",
    "output": "SELECT Name FROM Team"
  },
  {
    "instruction": "What is the name of the ship that is commanded by the youngest captain?",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id ORDER BY t2.age LIMIT 1"
  },
  {
    "instruction": "Find the patient who most recently stayed in room 111.",
    "input": "create table stay (stayid integer primary key not null, patient integer not null, room integer not null, staystart datetime not null, stayend datetime not null, constraint fk_stay_patient_ssn foreign key(patient) references patient(ssn), constraint fk_stay_room_number foreign key(room) references room(roomnumber));",
    "output": "SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC LIMIT 1"
  },
  {
    "instruction": "what is the highest point in the states bordering colorado",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;"
  },
  {
    "instruction": "What are the names of all of Alice's friends of friends?",
    "input": "create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name WHERE T2.name = 'Alice' AND T4.name != 'Alice'"
  },
  {
    "instruction": "Find the average age of all students living in the each city.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(age), city_code FROM student GROUP BY city_code"
  },
  {
    "instruction": "When did customer with first name as Carole and last name as Bernhard became a customer?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";"
  },
  {
    "instruction": "How many journalists are there?",
    "input": "create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));",
    "output": "SELECT count(*) FROM journalist"
  },
  {
    "instruction": "What are the names of the regions in alphabetical order?",
    "input": "create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));",
    "output": "SELECT region_name FROM region ORDER BY region_name"
  },
  {
    "instruction": "What are the details of the student who registered for the most number of courses?",
    "input": "create table students (student_id integer not null, student_details varchar(255), primary key (student_id), foreign key (student_id) references people (person_id));create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));",
    "output": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many players played each position?",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT POSITION, COUNT(*) FROM match_season GROUP BY POSITION"
  },
  {
    "instruction": "Show the date of the tallest perpetrator.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Home Town\" text, primary key (\"People_ID\"));create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
  },
  {
    "instruction": "Show the crime rate of counties with a city having white percentage more than 90.",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90"
  },
  {
    "instruction": "Find the id of users who are followed by Mary or Susan.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));create table `follows` (`f1` int(11) not null, `f2` int(11) not null, primary key (`f1`,`f2`), foreign key (`f1`) references `user_profiles`(`uid`), foreign key (`f2`) references `user_profiles`(`uid`));",
    "output": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Mary\" OR T1.name = \"Susan\""
  },
  {
    "instruction": "What are the ids of documents with the type code CV that do not have expenses.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT document_id FROM Documents WHERE document_type_code = \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses"
  },
  {
    "instruction": "Find the total amount of loans provided by bank branches in the state of New York.",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T1.state = 'New York'"
  },
  {
    "instruction": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
    "input": "create table `catalogs` (`catalog_id` integer primary key, `catalog_name` varchar(50), `catalog_publisher` varchar(80), `date_of_publication` datetime, `date_of_latest_revision` datetime);create table `catalog_structure` (`catalog_level_number` integer primary key, `catalog_id` integer not null, `catalog_level_name` varchar(50), foreign key (`catalog_id`) references `catalogs`(`catalog_id`));",
    "output": "SELECT t1.catalog_name, t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5"
  },
  {
    "instruction": "What is the description of the most popular role among users that have logged in?",
    "input": "create table `roles` (`role_code` varchar(15) primary key, `role_description` varchar(80));create table `users` (`user_id` integer primary key, `role_code` varchar(15) not null, `user_name` varchar(40), `user_login` varchar(40), `password` varchar(40), foreign key (`role_code`) references `roles`(`role_code`));",
    "output": "SELECT role_description FROM ROLES WHERE role_code = (SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "What is the most common status across all cities?",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the number of airlines based in Russia?",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);",
    "output": "SELECT count(*) FROM airlines WHERE country = 'Russia'"
  },
  {
    "instruction": "through which states does the ohio run",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE river_name = \"ohio\";"
  },
  {
    "instruction": "Which start station had the most trips starting from August? Give me the name and id of the station.",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT start_station_name, start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "what is the size of new mexico",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT area FROM state WHERE state_name = \"new mexico\";"
  },
  {
    "instruction": "Find the name of players whose card is yes in the descending order of training hours.",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT pName FROM Player WHERE yCard = 'yes' ORDER BY HS DESC"
  },
  {
    "instruction": "Find the ids of the nurses who are on call in block floor 1 and block code 1.",
    "input": "create table on_call (nurse integer not null, blockfloor integer not null, blockcode integer not null, oncallstart datetime not null, oncallend datetime not null, primary key(nurse, blockfloor, blockcode, oncallstart, oncallend), constraint fk_oncall_nurse_employeeid foreign key(nurse) references nurse(employeeid), constraint fk_oncall_block_floor foreign key(blockfloor, blockcode) references block(blockfloor, blockcode));",
    "output": "SELECT nurse FROM on_call WHERE blockfloor = 1 AND blockcode = 1"
  },
  {
    "instruction": "Find the number of customers who live in the city called Lake Geovannyton.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_addresses` (`customer_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `address_type` varchar(15) not null, `date_address_to` datetime, foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = \"Lake Geovannyton\""
  },
  {
    "instruction": "What is the date when the document \"Marry CV\" was stored?",
    "input": "create table all_documents (document_id integer not null, date_stored datetime, document_type_code char(15) not null, document_name char(255), document_description char(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (date_stored) references ref_calendar (calendar_date));",
    "output": "SELECT date_stored FROM All_documents WHERE Document_name = \"Marry CV\""
  },
  {
    "instruction": "Find all movies featuring \" Woody Strode \" and \" Jason Robards \"",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN CAST AS t3 ON t4.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid WHERE t1.name = \"Woody Strode\" AND t2.name = \"Jason Robards\";"
  },
  {
    "instruction": "how many papers in nature communications 2015",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"nature communications\";"
  },
  {
    "instruction": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?",
    "input": "create table genres (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);create table media_types (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";"
  },
  {
    "instruction": "Show locations and nicknames of schools.",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));create table \"school_details\" (\"School_ID\" int, \"Nickname\" text, \"Colors\" text, \"League\" text, \"Class\" text, \"Division\" text, primary key (\"School_Id\"), foreign key (`school_id`) references `school`(`school_id`));",
    "output": "SELECT T1.Location, T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID"
  },
  {
    "instruction": "Find the average elevation of all airports for each country.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT avg(elevation), country FROM airports GROUP BY country"
  },
  {
    "instruction": "Find the payment method that is used the most often in all the invoices. Give me its code.",
    "input": "create table invoices (invoice_id integer not null, order_id integer not null, payment_method_code char(15), product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), order_item_id integer not null, primary key (invoice_id), foreign key (order_id) references customer_orders (order_id), foreign key (order_id) references bookings (booking_id), foreign key (payment_method_code) references ref_payment_methods (payment_method_code));",
    "output": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the names and details of all the staff members.",
    "input": "create table staff (staff_id integer not null, tourist_attraction_id integer not null, name varchar(40), other_details varchar(255), primary key (staff_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id));",
    "output": "SELECT Name, Other_Details FROM Staff"
  },
  {
    "instruction": "What are the name of courses that have at least five enrollments?",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));create table enrolled_in (stuid integer, cid varchar(7), grade varchar(2), foreign key(stuid) references student(stuid), foreign key(cid) references course(cid), foreign key(grade) references gradeconversion(lettergrade));",
    "output": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT(*) >= 5"
  },
  {
    "instruction": "Find the average unit price of jazz tracks.",
    "input": "create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Jazz\""
  },
  {
    "instruction": "Show the name of technicians aged either 36 or 37",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37"
  },
  {
    "instruction": "Find the name and description of the role with code \"MG\".",
    "input": "create table roles (role_code char(15) not null, role_name varchar(255), role_description varchar(255), primary key (role_code));",
    "output": "SELECT role_name, role_description FROM ROLES WHERE role_code = \"MG\""
  },
  {
    "instruction": "What are the top 3 artists with the largest number of songs in the language Bangla?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "What are all the employee ids and the names of the countries in which they work?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));create table `locations` (`location_id` decimal(4, 0) not null default '0', `street_address` varchar(40) default null, `postal_code` varchar(12) default null, `city` varchar(30) not null, `state_province` varchar(25) default null, `country_id` varchar(2) default null, primary key (`location_id`), foreign key (`country_id`) references countries(`country_id`));create table `countries` (`country_id` varchar(2) not null, `country_name` varchar(40) default null, `region_id` decimal(10, 0) default null, primary key (`country_id`), foreign key (`region_id`) references regions (`region_id`));",
    "output": "SELECT T1.employee_id, T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id"
  },
  {
    "instruction": "where is a good arabic restaurant on buchanan in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "List the publication dates of publications with 3 lowest prices.",
    "input": "create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));",
    "output": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3"
  },
  {
    "instruction": "return me the number of keywords in the papers of \" University of Michigan \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.keyword ) FROM organization AS t6 JOIN author AS t2 ON t6.oid = t2.oid JOIN writes AS t4 ON t4.aid = t2.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN publication_keyword AS t3 ON t5.pid = t3.pid JOIN keyword AS t1 ON t3.kid = t1.kid WHERE t6.name = \"University of Michigan\";"
  },
  {
    "instruction": "What is the description of the color for most products?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many musicians play in the song \"Flash\"?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate = T2.id JOIN songs AS T3 ON T3.songid = T1.songid WHERE T3.Title = \"Flash\""
  },
  {
    "instruction": "eccv 2014 papers using ImageNet",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.datasetname = \"ImageNet\" AND t3.year = 2014 AND t4.venuename = \"eccv\";"
  },
  {
    "instruction": "How many schools are there?",
    "input": "create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));",
    "output": "SELECT count(*) FROM school"
  },
  {
    "instruction": "For each zip code, return how many times max wind speed reached 25?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT zip_code, count(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code"
  },
  {
    "instruction": "How many departments are in the division AS?",
    "input": "create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);",
    "output": "SELECT count(*) FROM DEPARTMENT WHERE Division = \"AS\""
  },
  {
    "instruction": "Which company started the earliest the maintenance contract? Show the company name.",
    "input": "create table `third_party_companies` (`company_id` integer primary key , `company_type` varchar(5) not null, `company_name` varchar(255), `company_address` varchar(255), `other_company_details` varchar(255));create table `maintenance_contracts` (`maintenance_contract_id` integer primary key, `maintenance_contract_company_id` integer not null, `contract_start_date` datetime, `contract_end_date` datetime, `other_contract_details` varchar(255), foreign key (`maintenance_contract_company_id`) references `third_party_companies`(`company_id`));",
    "output": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1"
  },
  {
    "instruction": "What is the name of the game that has been played the most?",
    "input": "create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1"
  },
  {
    "instruction": "What document status codes do we have?",
    "input": "create table ref_document_status (document_status_code char(15) not null, document_status_description varchar(255) not null, primary key (document_status_code));",
    "output": "SELECT document_status_code FROM Ref_Document_Status;"
  },
  {
    "instruction": "Return the hosts of competitions for which the theme is not Aliens?",
    "input": "create table \"farm_competition\" (\"Competition_ID\" int, \"Year\" int, \"Theme\" text, \"Host_city_ID\" int, \"Hosts\" text, primary key (\"Competition_ID\"), foreign key (`host_city_id`) references `city`(`city_id`));",
    "output": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'"
  },
  {
    "instruction": "Who are the owners of the programs that broadcast both in the morning and at night?",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));",
    "output": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Night\""
  },
  {
    "instruction": "What is the first and last name of artist who performed \"Le Pop\"?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Le Pop\""
  },
  {
    "instruction": "What are the personal names and family names of the students? Sort the result in alphabetical order of the family name.",
    "input": "create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT personal_name, family_name FROM Students ORDER BY family_name"
  },
  {
    "instruction": "For each election cycle, report the number of voting records.",
    "input": "create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT Election_Cycle, count(*) FROM VOTING_RECORD GROUP BY Election_Cycle"
  },
  {
    "instruction": "How many different FDA approval statuses exist for medicines?",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));",
    "output": "SELECT count(DISTINCT FDA_approved) FROM medicine"
  },
  {
    "instruction": "What are the ids and full names of customers who hold two or more cards?",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2"
  },
  {
    "instruction": "papers for Question Answering",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "Who is the person that has no friend?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend"
  },
  {
    "instruction": "What are the first names, office locations of all lecturers who have taught some course?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T2.emp_fname, T4.prof_office, T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num"
  },
  {
    "instruction": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_type_code, COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC"
  },
  {
    "instruction": "which state has the ohio river",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE river_name = \"ohio\";"
  },
  {
    "instruction": "What is the description, code and the corresponding count of each service type?",
    "input": "create table ref_service_types (service_type_code char(15) not null, parent_service_type_code char(15), service_type_description varchar(255), primary key (service_type_code), unique (service_type_code));create table services (service_id integer not null, service_type_code char(15), workshop_group_id integer not null, product_description varchar(255), product_name varchar(255), product_price decimal(20, 4), other_product_service_details varchar(255), primary key (service_id), unique (service_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id), foreign key (service_type_code) references ref_service_types (service_type_code));",
    "output": "SELECT T1.Service_Type_Description, T2.Service_Type_Code, COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code"
  },
  {
    "instruction": "What is the forename and surname of the driver with the shortest laptime?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"lapTimes\" (\"raceId\" integer, \"driverId\" integer, \"lap\" integer, \"position\" integer, \"time\" text, \"milliseconds\" integer, primary key(\"raceId\", \"driverId\", \"lap\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1"
  },
  {
    "instruction": "Which countries has the most number of airlines?",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);",
    "output": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "For each company, return the company name and the name of the building its office is located in.",
    "input": "create table \"Office_locations\" (\"building_id\" int, \"company_id\" int, \"move_in_year\" int, primary key (\"building_id\", \"company_id\"), foreign key (\"building_id\") references \"buildings\"(\"id\"), foreign key (\"company_id\") references \"Companies\"(\"id\"));create table \"buildings\" (\"id\" int, \"name\" text, \"City\" text, \"Height\" int, \"Stories\" int, \"Status\" text, primary key(\"id\"));create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT T3.name, T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id"
  },
  {
    "instruction": "how many cities are there in us",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( city_name ) FROM city;"
  },
  {
    "instruction": "Which papers' first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? Give me the titles of the papers.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"Japan\" AND t2.authorder = 1 AND t1.lname = \"Ohori\""
  },
  {
    "instruction": "Find all restaurant that serve Seafood in \" Los Angeles \"",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"Seafood\" AND t3.category_name = \"restaurant\";"
  },
  {
    "instruction": "Show the average age for male and female students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(age), sex FROM Student GROUP BY sex"
  },
  {
    "instruction": "List all payment methods and number of payments using each payment methods.",
    "input": "create table `customer_payments` (`customer_id` integer not null, `datetime_payment` datetime not null, `payment_method_code` varchar(10) not null, `amount_payment` double null, primary key (`customer_id`,`datetime_payment`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT payment_method_code, count(*) FROM Customer_Payments GROUP BY payment_method_code;"
  },
  {
    "instruction": "datasets in semantic parsing papers",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid WHERE t4.keyphrasename = \"semantic parsing\";"
  },
  {
    "instruction": "Which major has the most students?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Where is the history department?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT dept_address FROM department WHERE dept_name = 'History'"
  },
  {
    "instruction": "What are the details for the projects which were launched by the organization with the most projects?",
    "input": "create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )"
  },
  {
    "instruction": "How many courses are offered?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT crs_code) FROM CLASS"
  },
  {
    "instruction": "Show all artist names with an average exhibition attendance over 200.",
    "input": "create table \"exhibition_record\" (\"Exhibition_ID\" int, \"Date\" text, \"Attendance\" int, primary key (\"Exhibition_ID\",\"Date\"), foreign key (`exhibition_id`) references `exhibition`(`exhibition_id`));create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id JOIN artist AS T3 ON T3.artist_id = T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance) > 200"
  },
  {
    "instruction": "What is the average age of all artists?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));",
    "output": "SELECT avg(Age) FROM artist"
  },
  {
    "instruction": "What are the last names of the teachers who teach the student called GELL TAMI?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"GELL\" AND T1.lastname = \"TAMI\""
  },
  {
    "instruction": "What is the name of the ship with the largest tonnage?",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1"
  },
  {
    "instruction": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?",
    "input": "create table invoices (invoice_id integer not null, order_id integer not null, payment_method_code char(15), product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), order_item_id integer not null, primary key (invoice_id), foreign key (order_id) references customer_orders (order_id), foreign key (order_id) references bookings (booking_id), foreign key (payment_method_code) references ref_payment_methods (payment_method_code));",
    "output": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code = \"MasterCard\""
  },
  {
    "instruction": "Show times of elimination of wrestlers with days held more than 50.",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held > 50"
  },
  {
    "instruction": "Return the most common full name among all actors.",
    "input": "create table actor (actor_id smallint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, last_update timestamp not null default current_timestamp, primary key (actor_id));",
    "output": "SELECT first_name, last_name FROM actor GROUP BY first_name, last_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which buildings do not have any company office? Give me the building names.",
    "input": "create table \"buildings\" (\"id\" int, \"name\" text, \"City\" text, \"Height\" int, \"Stories\" int, \"Status\" text, primary key(\"id\"));create table \"Office_locations\" (\"building_id\" int, \"company_id\" int, \"move_in_year\" int, primary key (\"building_id\", \"company_id\"), foreign key (\"building_id\") references \"buildings\"(\"id\"), foreign key (\"company_id\") references \"Companies\"(\"id\"));",
    "output": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)"
  },
  {
    "instruction": "Which college has any student who is a goalie and succeeded in the tryout.",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT cName FROM tryout WHERE decision = 'yes' AND pPos = 'goalie'"
  },
  {
    "instruction": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.",
    "input": "create table \"screen_mode\" (\"Graphics_mode\" real, \"Char_cells\" text, \"Pixels\" text, \"Hardware_colours\" real, \"used_kb\" real, \"map\" text, \"Type\" text, primary key (\"Graphics_mode\"));create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name = \"Nokia Corporation\" AND T1.Type != \"Text\";"
  },
  {
    "instruction": "What are the different card types, and how many cards are there of each?",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT card_type_code, count(*) FROM Customers_cards GROUP BY card_type_code"
  },
  {
    "instruction": "return me the number of papers published in the VLDB conference in each year .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ), t2.year FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = \"VLDB\" GROUP BY t2.year;"
  },
  {
    "instruction": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.",
    "input": "create table `product_suppliers` (`product_id` integer not null, `supplier_id` integer not null, `date_supplied_from` datetime not null, `date_supplied_to` datetime, `total_amount_purchased` varchar(80), `total_value_purchased` decimal(19, 4), primary key (`product_id`, `supplier_id`), foreign key (`supplier_id`) references `suppliers`(`supplier_id`), foreign key (`product_id`) references `products`(`product_id`));create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 2 AND T2.product_price > (SELECT avg(product_price) FROM products)"
  },
  {
    "instruction": "What are the region names affected by the storm with a number of deaths of least 10?",
    "input": "create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10"
  },
  {
    "instruction": "What are the names of the ships that are not involved in any missions?",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));create table \"mission\" (\"Mission_ID\" int, \"Ship_ID\" int, \"Code\" text, \"Launched_Year\" int, \"Location\" text, \"Speed_knots\" int, \"Fate\" text, primary key (\"Mission_ID\"), foreign key (\"Ship_ID\") references `ship`(\"Ship_ID\"));",
    "output": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)"
  },
  {
    "instruction": "Show the number of all customers without an account.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
  },
  {
    "instruction": "What is the number of restaurant in Pittsburgh rated 4.5",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Pittsburgh\" AND t1.rating = 4.5 AND t2.category_name = \"restaurant\";"
  },
  {
    "instruction": "What are the average prices of hotels grouped by their pet policy.",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT pets_allowed_yn, avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn"
  },
  {
    "instruction": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t2.name = \"H. V. Jagadish\" AND t1.name = \"Divesh Srivastava\" AND t5.year < 2000;"
  },
  {
    "instruction": "What are the first and last name of the faculty who has the most students?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T1.fname, T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the majors only less than three students are studying?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*) < 3"
  },
  {
    "instruction": "Which range contains the most mountains?",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the distinct names of customers who have purchased at least three different products?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, foreign key (`order_id`) references `customer_orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id) >= 3"
  },
  {
    "instruction": "Which apartments have type code \"Flat\"? Give me their apartment numbers.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_number FROM Apartments WHERE apt_type_code = \"Flat\""
  },
  {
    "instruction": "What are the prices of wines produced before the year of 2010?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Price FROM WINE WHERE YEAR < 2010"
  },
  {
    "instruction": "What is the course title of the prerequisite of course Mobile Computing?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')"
  },
  {
    "instruction": "What are all the distinct asset models?",
    "input": "create table `assets` (`asset_id` integer primary key, `maintenance_contract_id` integer not null, `supplier_company_id` integer not null, `asset_details` varchar(255), `asset_make` varchar(20), `asset_model` varchar(20), `asset_acquired_date` datetime, `asset_disposed_date` datetime, `other_asset_details` varchar(255), foreign key (`maintenance_contract_id`) references `maintenance_contracts`(`maintenance_contract_id`), foreign key (`supplier_company_id`) references `third_party_companies`(`company_id`));",
    "output": "SELECT DISTINCT asset_model FROM Assets"
  },
  {
    "instruction": "What are the first names of all professors who teach more than one class?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);",
    "output": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING count(*) > 1"
  },
  {
    "instruction": "Find the number of classes in each school.",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(*), T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code"
  },
  {
    "instruction": "What are the names of the dorm that does not have a TV Lounge?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'"
  },
  {
    "instruction": "Find the names of students who have taken any course in the fall semester of year 2003.",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table takes (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), grade varchar(2), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references student (id)\n        ON delete cascade);",
    "output": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003)"
  },
  {
    "instruction": "What is the name of all tracks in the Rock genre?",
    "input": "create table genres (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
  },
  {
    "instruction": "What conferences does Daniella Coelho submit to ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Daniella Coelho\";"
  },
  {
    "instruction": "What is the area of the appelation that produces the highest number of wines before the year of 2010?",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING T2.year < 2010 ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many stadiums are not in country \"Russia\"?",
    "input": "create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));",
    "output": "SELECT count(*) FROM stadium WHERE country != 'Russia'"
  },
  {
    "instruction": "Count the number of Professors who have office in building NEB.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT count(*) FROM Faculty WHERE Rank = \"Professor\" AND building = \"NEB\""
  },
  {
    "instruction": "How many characteristics does the product named \"laurel\" have?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"laurel\""
  },
  {
    "instruction": "give me the keywords used by Luke Zettlemoyer",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Luke Zettlemoyer\";"
  },
  {
    "instruction": "Find the titles of items that received both a rating higher than 8 and a rating below 5.",
    "input": "create table `item` (`i_id` integer not null , `title` varchar(20) default null , primary key (`i_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));create table `item` (`i_id` integer not null , `title` varchar(20) default null , primary key (`i_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5"
  },
  {
    "instruction": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT minister, took_office, left_office FROM party ORDER BY left_office"
  },
  {
    "instruction": "Show the transaction type code that occurs the most frequently.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the id of students who registered courses or attended courses?",
    "input": "create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"
  },
  {
    "instruction": "Which course author teaches the \"advanced database\" course? Give me his or her login name.",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));",
    "output": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = \"advanced database\""
  },
  {
    "instruction": "Find the id of courses which are registered or attended by student whose id is 121?",
    "input": "create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"
  },
  {
    "instruction": "How many customer cards are there?",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT count(*) FROM Customers_cards"
  },
  {
    "instruction": "What are the ids and names for each of the documents?",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT document_id, document_name FROM Documents"
  },
  {
    "instruction": "what is the highest point in the united states",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT cName FROM College WHERE enr < 13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr > 15000 AND state = \"LA\""
  },
  {
    "instruction": "How many activities do we have?",
    "input": "create table activity (actid integer primary key, activity_name varchar(25));",
    "output": "SELECT count(*) FROM Activity"
  },
  {
    "instruction": "what datasets do papers at ACL use most ?",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t4.venuename = \"ACL\";"
  },
  {
    "instruction": "Find the names of states that have some college students playing in the mid position but not in the goalie position.",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'"
  },
  {
    "instruction": "Return the text of tweets about the topic 'intern'.",
    "input": "create table `tweets` (`id` bigint(20) not null, `uid` int(11) not null, `text` char(140) not null, `createdate` datetime default current_timestamp, primary key (`id`), foreign key (`uid`) references `user_profiles`(`uid`));",
    "output": "SELECT text FROM tweets WHERE text LIKE '%intern%'"
  },
  {
    "instruction": "Find the average number of followers for the users who do not have any tweet.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));create table `tweets` (`id` bigint(20) not null, `uid` int(11) not null, `text` char(140) not null, `createdate` datetime default current_timestamp, primary key (`id`), foreign key (`uid`) references `user_profiles`(`uid`));",
    "output": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)"
  },
  {
    "instruction": "Find the number of routes that have destination John F Kennedy International Airport.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.name = 'John F Kennedy International Airport'"
  },
  {
    "instruction": "return me the papers on VLDB conference after 2000 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = \"VLDB\" AND t2.year > 2000;"
  },
  {
    "instruction": "Count the number of students who did not enroll in any course.",
    "input": "create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)"
  },
  {
    "instruction": "Show all transaction ids with transaction code 'PUR'.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code = 'PUR'"
  },
  {
    "instruction": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `invoice` (`invoiceid` integer not null , `customerid` integer not null , `invoicedate` datetime not null , `billingaddress` varchar(70) default null , `billingcity` varchar(40) default null , `billingstate` varchar(40) default null , `billingcountry` varchar(40) default null , `billingpostalcode` varchar(10) default null , `total` decimal(10, 2) not null , primary key (`invoiceid`) , constraint `fk_invoicecustomerid` foreign key (`customerid`) references `customer` (`customerid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\""
  },
  {
    "instruction": "give me a good restaurant in alameda ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"alameda\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "authors who collaborated with Noah A Smith",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Noah A Smith\";"
  },
  {
    "instruction": "How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT count(*), T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1"
  },
  {
    "instruction": "what is the highest point in delaware in meters",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_elevation FROM highlow WHERE state_name = \"delaware\";"
  },
  {
    "instruction": "where is a good arabic on buchanan in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "How many medications are prescribed for each brand?",
    "input": "create table medication (code integer primary key not null, name varchar(30) not null, brand varchar(30) not null, description varchar(30) not null);create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));",
    "output": "SELECT count(*), T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand"
  },
  {
    "instruction": "What is the name of the customer who has greatest total loan amount?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1"
  },
  {
    "instruction": "Return the names of the regions affected by storms that had a death count of at least 10.",
    "input": "create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10"
  },
  {
    "instruction": "How many albums has Billy Cobam released?",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);create table artists (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"
  },
  {
    "instruction": "what is the height of the highest point in the usa",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT MAX ( highest_elevation ) FROM highlow;"
  },
  {
    "instruction": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".",
    "input": "create table nomination (\"Artwork_ID\" int, \"Festival_ID\" int, \"Result\" text, primary key (\"Artwork_ID\",\"Festival_ID\"), foreign key (\"Artwork_ID\") references `artwork`(\"Artwork_ID\"), foreign key (\"Festival_ID\") references `festival_detail`(\"Festival_ID\"));create table artwork (\"Artwork_ID\" int, \"Type\" text, \"Name\" text, primary key (\"Artwork_ID\"));create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));",
    "output": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T2.Type = \"Program Talent Show\""
  },
  {
    "instruction": "Find the booking start date and end date for the apartments that have more than two bedrooms.",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2"
  },
  {
    "instruction": "Show ids for all documents in type CV without expense budgets.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT document_id FROM Documents WHERE document_type_code = \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses"
  },
  {
    "instruction": "return me the number of citations of \" Making database systems usable \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT citation_num FROM publication WHERE title = \"Making database systems usable\";"
  },
  {
    "instruction": "Find the first name of students not enrolled in any course.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table enrolled_in (stuid integer, cid varchar(7), grade varchar(2), foreign key(stuid) references student(stuid), foreign key(cid) references course(cid), foreign key(grade) references gradeconversion(lettergrade));",
    "output": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)"
  },
  {
    "instruction": "Count the total number of roles listed.",
    "input": "create table roles (role_code char(15) not null, role_name varchar(255), role_description varchar(255), primary key (role_code));",
    "output": "SELECT count(*) FROM ROLES"
  },
  {
    "instruction": "What is the headquarter of the company with the largest sales?",
    "input": "create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));",
    "output": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1"
  },
  {
    "instruction": "How many faculty members are at the university that gave the least number of degrees in 2001?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2001 ORDER BY t3.degrees LIMIT 1"
  },
  {
    "instruction": "Return all the information for each election record.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT * FROM election"
  },
  {
    "instruction": "What is allergy type of a cat allergy?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT allergytype FROM Allergy_type WHERE allergy = \"Cat\""
  },
  {
    "instruction": "How many students and instructors are in each department?",
    "input": "create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT count(DISTINCT T2.id), count(DISTINCT T3.id), T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name GROUP BY T3.dept_name"
  },
  {
    "instruction": "Find the name of companies that do not make DVD drive.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T1.name = 'DVD drive'"
  },
  {
    "instruction": "Which winery is the wine that has the highest score from?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1"
  },
  {
    "instruction": "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table reviewer(rid int primary key, name text);",
    "output": "SELECT DISTINCT T3.name, T2.title, T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name"
  },
  {
    "instruction": "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = \"Central Coast\" AND T2.year < 2005"
  },
  {
    "instruction": "What is the number of checkins for \" Cafe Zinho \" on Friday",
    "input": "create table \"checkin\" (\"cid\" int, \"business_id\" text, \"count\" int, \"day\" text, primary key(\"cid\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t2.count FROM checkin AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Cafe Zinho\" AND t2.day = \"Friday\";"
  },
  {
    "instruction": "What are the areas and counties for all appelations?",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);",
    "output": "SELECT Area, County FROM APPELLATIONS"
  },
  {
    "instruction": "Does Peter Mertens ever collaborated with Dina Barbian ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "Show student ids for all male students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT StuID FROM Student WHERE Sex = 'M'"
  },
  {
    "instruction": "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT Comptroller, COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "give me some good places on buchanan in san francisco for arabic food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "How many services are there?",
    "input": "create table `services` (`service_id` integer primary key, `service_type_code` varchar(15) not null, `service_name` varchar(80), `service_descriptio` varchar(255));",
    "output": "SELECT count(*) FROM services"
  },
  {
    "instruction": "How many students does each advisor have?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT advisor, count(*) FROM Student GROUP BY advisor"
  },
  {
    "instruction": "Who is the author of the paper titled \"Binders Unbound\"? Give me the last name.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Binders Unbound\""
  },
  {
    "instruction": "How many patients do each physician take care of? List their names and number of patients they take care of.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));",
    "output": "SELECT T1.name, count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid"
  },
  {
    "instruction": "What is the name of the youngest captain?",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT name FROM captain ORDER BY age LIMIT 1"
  },
  {
    "instruction": "Group by ships by flag, and return number of ships that have each flag.",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));",
    "output": "SELECT count(*), flag FROM ship GROUP BY flag"
  },
  {
    "instruction": "What are the GDP and population of the city that already served as a host more than once?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));",
    "output": "SELECT t1.gdp, t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY t2.Host_City HAVING count(*) > 1"
  },
  {
    "instruction": "What is the count of cities with more than 3 airports?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*) > 3)"
  },
  {
    "instruction": "How many members are there?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Country\" text, \"College_ID\" int, primary key (\"Member_ID\"), foreign key (\"College_ID\") references `college`(\"College_ID\"));",
    "output": "SELECT count(*) FROM member"
  },
  {
    "instruction": "What is the name of tracks whose genre is Rock?",
    "input": "create table genres (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
  },
  {
    "instruction": "Show all distinct cities in the address record.",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT DISTINCT city FROM addresses"
  },
  {
    "instruction": "How many companies are there?",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT count(*) FROM Companies"
  },
  {
    "instruction": "What are the names of staff who have been assigned multiple jobs?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_gender` varchar(1), `staff_name` varchar(80));create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*) > 1"
  },
  {
    "instruction": "Show all game names played by at least 1000 hours.",
    "input": "create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid HAVING sum(hours_played) >= 1000"
  },
  {
    "instruction": "Show the years and the official names of the host cities of competitions.",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));create table \"farm_competition\" (\"Competition_ID\" int, \"Year\" int, \"Theme\" text, \"Host_city_ID\" int, \"Hosts\" text, primary key (\"Competition_ID\"), foreign key (`host_city_id`) references `city`(`city_id`));",
    "output": "SELECT T2.Year, T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID"
  },
  {
    "instruction": "What are the public schools and what are their locations?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT school, LOCATION FROM university WHERE affiliation = 'Public'"
  },
  {
    "instruction": "How many phones belongs to each accreditation type?",
    "input": "create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT Accreditation_type, count(*) FROM phone GROUP BY Accreditation_type"
  },
  {
    "instruction": "Which event names were used more than twice for party events?",
    "input": "create table \"party_events\" (\"Event_ID\" int, \"Event_Name\" text, \"Party_ID\" int, \"Member_in_charge_ID\" int, primary key (\"Event_ID\"), foreign key (`party_id`) references `party`(`party_id`), foreign key (`member_in_charge_id`) references `member`(`member_id`));",
    "output": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*) > 2"
  },
  {
    "instruction": "What is the code of the school where the accounting department belongs to?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT school_code FROM department WHERE dept_name = \"Accounting\""
  },
  {
    "instruction": "Give the average price and case of wines made from Zinfandel grapes in the year 2009.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT AVG(Price), AVG(Cases) FROM WINE WHERE YEAR = 2009 AND Grape = \"Zinfandel\""
  },
  {
    "instruction": "What are the names of departments that have at least one employee.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));",
    "output": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id"
  },
  {
    "instruction": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo, Japan\""
  },
  {
    "instruction": "What is the total number of campuses?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT count(*) FROM campuses"
  },
  {
    "instruction": "What are the characters of actors in descending order of age?",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));",
    "output": "SELECT Character FROM actor ORDER BY age DESC"
  },
  {
    "instruction": "author published acl 2016",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2016 AND t3.venuename = \"acl\";"
  },
  {
    "instruction": "Find the name of project that continues for the longest time.",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1"
  },
  {
    "instruction": "How many courses are there in total?",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT count(*) FROM COURSE"
  },
  {
    "instruction": "What are the card numbers, names, and hometowns of every member ordered by descending level?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));",
    "output": "SELECT card_number, name, hometown FROM member ORDER BY LEVEL DESC"
  },
  {
    "instruction": "What is the type of the organization with the most research staff?",
    "input": "create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));create table `research_staff` (`staff_id` integer primary key, `employer_organisation_id` integer not null, `staff_details` varchar(255) not null, foreign key (`employer_organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));create table inventory (inventory_id mediumint unsigned not null, film_id smallint unsigned not null, store_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (inventory_id), foreign key (store_id) references store (store_id), foreign key (film_id) references film (film_id));",
    "output": "SELECT title, film_id FROM film WHERE rental_rate = 0.99 INTERSECT SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id HAVING count(*) < 3"
  },
  {
    "instruction": "does ras bodik publish a lot ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT COUNT ( t3.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"ras bodik\";"
  },
  {
    "instruction": "Which room has the highest base price?",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;"
  },
  {
    "instruction": "What are the names of the artists who sang the shortest song?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);",
    "output": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id ORDER BY T2.duration LIMIT 1"
  },
  {
    "instruction": "what are the names of people who did not participate in the candidate election.",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)"
  },
  {
    "instruction": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100"
  },
  {
    "instruction": "What are the titles of all movies that were not reviewed by Chris Jackson?",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table reviewer(rid int primary key, name text);",
    "output": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'"
  },
  {
    "instruction": "How many students are older than 20 in each dorm?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT count(*), T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name"
  },
  {
    "instruction": "where is the best american in the bay area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" );"
  },
  {
    "instruction": "What is the maximum number that a certain service is provided? List the service id, details and number.",
    "input": "create table services (service_id integer not null, organization_id integer not null, service_type_code char(15) not null, service_details varchar(255), primary key (service_id), foreign key (organization_id) references organizations (organization_id));create table residents_services (resident_id integer not null, service_id integer not null, date_moved_in datetime, property_id integer, date_requested datetime, date_provided datetime, other_details varchar(255), primary key (resident_id, service_id), foreign key (service_id) references services (service_id), foreign key (resident_id, property_id, date_moved_in) references residents (resident_id, property_id, date_moved_in));",
    "output": "SELECT T1.service_id, T1.service_details, count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id = T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the number of clubs where \"Tracy Kim\" is a member.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Tracy\" AND t3.lname = \"Kim\""
  },
  {
    "instruction": "Return the full names and salaries for employees with first names that end with the letter m.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, salary FROM employees WHERE first_name LIKE '%m'"
  },
  {
    "instruction": "What are the purchase details of transactions with amount bigger than 10000?",
    "input": "create table `purchases` (`purchase_transaction_id` integer not null, `purchase_details` varchar(255) not null, foreign key (`purchase_transaction_id`) references `transactions`(`transaction_id`));create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000"
  },
  {
    "instruction": "What is the name of the airport with the most number of routes that start in China?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many churches have a wedding in year 2016?",
    "input": "create table \"wedding\" (\"Church_ID\" int, \"Male_ID\" int, \"Female_ID\" int, \"Year\" int, primary key (\"Church_ID\",\"Male_ID\",\"Female_ID\"), foreign key (\"Church_ID\") references `church`(\"Church_ID\"), foreign key (\"Male_ID\") references `people`(\"People_ID\"), foreign key (\"Female_ID\") references `people`(\"People_ID\"));",
    "output": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR = 2016"
  },
  {
    "instruction": "Show the headquarters shared by more than two companies.",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*) > 2"
  },
  {
    "instruction": "How many papers has Christopher D. Manning ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Christopher D. Manning\";"
  },
  {
    "instruction": "What are the names of all cities and states?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `town_city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `town_city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses"
  },
  {
    "instruction": "Show the working years of managers in descending order of their level.",
    "input": "create table \"manager\" (\"Manager_ID\" int, \"Name\" text, \"Country\" text, \"Working_year_starts\" text, \"Age\" int, \"Level\" int, primary key (\"Manager_ID\"));",
    "output": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC"
  },
  {
    "instruction": "List Aerosmith's albums.",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);create table artists (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";"
  },
  {
    "instruction": "How many movies did \" Shahab Hosseini \" act in ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Shahab Hosseini\";"
  },
  {
    "instruction": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_type_code, COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC"
  },
  {
    "instruction": "Find the physicians who are trained in a procedure that costs more than 5000.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table trained_in (physician integer not null, treatment integer not null, certificationdate datetime not null, certificationexpires datetime not null, constraint fk_trained_in_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_trained_in_procedures_code foreign key(treatment) references procedures(code), primary key(physician, treatment));create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000"
  },
  {
    "instruction": "Find the name of rooms whose price is higher than the average price.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName FROM Rooms WHERE basePrice > ( SELECT avg(basePrice) FROM Rooms );"
  },
  {
    "instruction": "What are the student ids of students who don't have any allergies?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy"
  },
  {
    "instruction": "Find the name of amenities of the dorm where the student with last name Smith is living in.",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE T5.lname = 'Smith'"
  },
  {
    "instruction": "What are the different parties of representative? Show the party name and the number of representatives in each party.",
    "input": "create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));",
    "output": "SELECT Party, COUNT(*) FROM representative GROUP BY Party"
  },
  {
    "instruction": "Return each apartment type code along with the maximum and minimum number of rooms among each type.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_type_code, max(room_count), min(room_count) FROM Apartments GROUP BY apt_type_code"
  },
  {
    "instruction": "Return the number of customers who have at least one order with \"Cancelled\" status.",
    "input": "create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status = \"Cancelled\""
  },
  {
    "instruction": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = \"Central Coast\" AND T2.year < 2005"
  },
  {
    "instruction": "return me the authors who have papers containing keyword \" Relational Database \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t1.keyword = \"Relational Database\";"
  },
  {
    "instruction": "What are the names of wines made from red grapes and with prices above 50?",
    "input": "create table \"grapes\" (\"ID\" integer primary key, \"Grape\" text unique, \"Color\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"Red\" AND T2.price > 50"
  },
  {
    "instruction": "What is the average number of attendance at home games for each year?",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));",
    "output": "SELECT YEAR, avg(attendance) FROM home_game GROUP BY YEAR;"
  },
  {
    "instruction": "How many medicines have the FDA approval status 'No' ?",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));",
    "output": "SELECT count(*) FROM medicine WHERE FDA_approved = 'No'"
  },
  {
    "instruction": "Count the number of wines produced at Robert Biale winery.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT count(*) FROM WINE WHERE Winery = \"Robert Biale\""
  },
  {
    "instruction": "what are the papers that have Peter Mertens and Dina Barbian as co-authors",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "List the locations that are shared by more than two wrestlers.",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*) > 2"
  },
  {
    "instruction": "What details do we have on the students who registered for courses most recently?",
    "input": "create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));create table students (student_id integer not null, student_details varchar(255), primary key (student_id), foreign key (student_id) references people (person_id));",
    "output": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1"
  },
  {
    "instruction": "What is the largest and smallest customer codes?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));",
    "output": "SELECT max(customer_code), min(customer_code) FROM Customers"
  },
  {
    "instruction": "TAIL papers used in NIPS",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"TAIL\" AND t4.venuename = \"NIPS\";"
  },
  {
    "instruction": "What is the most common interaction type between enzymes and medicine? And how many are there?",
    "input": "create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));",
    "output": "SELECT interaction_type, count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many courses do the student whose id is 171 attend?",
    "input": "create table courses (course_id varchar(100) not null, course_name varchar(120), course_description varchar(255), other_details varchar(255), primary key (course_id));create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171"
  },
  {
    "instruction": "Select the name of each manufacturer along with the name and price of its most expensive product.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT T1.Name, max(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name"
  },
  {
    "instruction": "Show the facility codes of apartments with more than 4 bedrooms.",
    "input": "create table apartment_facilities (apt_id integer not null, facility_code char(15) not null, primary key (apt_id, facility_code), foreign key (apt_id) references apartments (apt_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4"
  },
  {
    "instruction": "find all dependent names who have a spouse relation with some employee.",
    "input": "create table dependent(essn integer, dependent_name text, sex text, bdate text, relationship text, primary key(essn, dependent_name));",
    "output": "SELECT Dependent_name FROM dependent WHERE relationship = 'Spouse'"
  },
  {
    "instruction": "What are the life spans of representatives from New York state or Indiana state?",
    "input": "create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));",
    "output": "SELECT Lifespan FROM representative WHERE State = \"New York\" OR State = \"Indiana\""
  },
  {
    "instruction": "What are the statuses and average populations of each city?",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT Status, avg(Population) FROM city GROUP BY Status"
  },
  {
    "instruction": "Return the different countries for artists.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT DISTINCT country FROM artist"
  },
  {
    "instruction": "How many proteins are associated with an institution in a building with at least 20 floors?",
    "input": "create table \"Institution\" (\"Institution_id\" text, \"Institution\" text, \"Location\" text, \"Founded\" real, \"Type\" text, \"Enrollment\" int, \"Team\" text, \"Primary_Conference\" text, \"building_id\" text, primary key(\"Institution_id\"), foreign key (\"building_id\") references \"building\"(\"building_id\"));create table \"protein\" (\"common_name\" text, \"protein_name\" text, \"divergence_from_human_lineage\" real, \"accession_number\" text, \"sequence_length\" real, \"sequence_identity_to_human_protein\" text, \"Institution_id\" text, primary key(\"common_name\"), foreign key(\"Institution_id\") references \"Institution\"(\"Institution_id\"));create table \"building\" (\"building_id\" text, \"Name\" text, \"Street_address\" text, \"Years_as_tallest\" text, \"Height_feet\" int, \"Floors\" int, primary key(\"building_id\"));",
    "output": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id JOIN building AS T3 ON T3.building_id = T1.building_id WHERE T3.floors >= 20"
  },
  {
    "instruction": "what states border kentucky",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "What is the most common mill type, and how many are there?",
    "input": "create table \"mill\" (\"architect_id\" int, \"id\" int, \"location\" text, \"name\" text, \"type\" text, \"built_year\" int, \"notes\" text, primary key (\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));",
    "output": "SELECT TYPE, count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what is the length of the colorado river in texas",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT LENGTH FROM river WHERE river_name = \"colorado\" AND traverse = \"texas\";"
  },
  {
    "instruction": "Show names of pilots that have more than one record.",
    "input": "create table \"pilot_record\" (\"Record_ID\" int, \"Pilot_ID\" int, \"Aircraft_ID\" int, \"Date\" text, primary key (\"Pilot_ID\", \"Aircraft_ID\", \"Date\"), foreign key (`pilot_id`) references `pilot`(`pilot_id`), foreign key (`aircraft_id`) references `aircraft`(`aircraft_id`));create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));",
    "output": "SELECT T2.Pilot_name, COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*) > 1"
  },
  {
    "instruction": "Which campus has the most faculties in year 2003?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));",
    "output": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of students the teacher LORIA ONDERSMA teaches.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"LORIA\" AND T2.lastname = \"ONDERSMA\""
  },
  {
    "instruction": "Find the name of instructors who are advising more than one student.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);",
    "output": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING count(*) > 1"
  },
  {
    "instruction": "Which accelerator name contains substring \"Opera\"?",
    "input": "create table \"Web_client_accelerator\" (\"id\" int, \"name\" text, \"Operating_system\" text, \"Client\" text, \"Connection\" text, primary key(\"id\"));",
    "output": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""
  },
  {
    "instruction": "List the names of companies by ascending number of sales.",
    "input": "create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));",
    "output": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC"
  },
  {
    "instruction": "Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it.",
    "input": "create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table scientists (ssn int, name char(30) not null, primary key (ssn));create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT T2.name, T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT min(hours) FROM projects)"
  },
  {
    "instruction": "What are the movie titles with the highest average rating and what are those ratings?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1"
  },
  {
    "instruction": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, hire_date FROM employees WHERE department_id = ( SELECT department_id FROM employees WHERE first_name = \"Clara\") AND first_name != \"Clara\""
  },
  {
    "instruction": "What are the phone numbers of all customers and suppliers.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `suppliers` (`supplier_id` integer primary key, `supplier_name` varchar(80), `supplier_phone` varchar(80));",
    "output": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers"
  },
  {
    "instruction": "Give the different hometowns of gymnasts that have a total point score of above 57.5.",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5"
  },
  {
    "instruction": "Return the last name of the staff member who handled the complaint with the earliest date raised.",
    "input": "create table `staff` (`staff_id` integer primary key, `gender` varchar(1), `first_name` varchar(80), `last_name` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1"
  },
  {
    "instruction": "List the name and phone number of all suppliers in the alphabetical order of their addresses.",
    "input": "create table `suppliers` (`supplier_id` integer primary key, `supplier_name` varchar(80), `supplier_phone` varchar(80));create table `supplier_addresses` (`supplier_id` integer not null, `address_id` integer not null, `date_from` datetime not null, `date_to` datetime, primary key (`supplier_id`, `address_id`), foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`supplier_id`) references `suppliers`(`supplier_id`));create table `addresses` (`address_id` integer primary key, `address_details` varchar(255));",
    "output": "SELECT T1.supplier_name, T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY T3.address_details"
  },
  {
    "instruction": "what state borders the state with the smallest population",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MIN ( population ) FROM state ) );"
  },
  {
    "instruction": "How many users are there?",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));",
    "output": "SELECT count(*) FROM user_profiles"
  },
  {
    "instruction": "What are the names and decor of rooms with a king bed? Sort them by their price",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName, decor FROM Rooms WHERE bedtype = 'King' ORDER BY basePrice;"
  },
  {
    "instruction": "How many accounts does each customer have? List the number and customer id.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(*), customer_id FROM Accounts GROUP BY customer_id"
  },
  {
    "instruction": "Find the name of all the clubs at \"AKW\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT clubname FROM club WHERE clublocation = \"AKW\""
  },
  {
    "instruction": "how many people live in the smallest state bordering wyoming",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT population FROM state WHERE population = ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"wyoming\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"wyoming\" );"
  },
  {
    "instruction": "How many climbers are there?",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));",
    "output": "SELECT count(*) FROM climber"
  },
  {
    "instruction": "How many actors from China have acted in \" Rush Hour 3 \"",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.nationality = \"China\" AND t3.title = \"Rush Hour 3\";"
  },
  {
    "instruction": "Return the color description that is most common across all products.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the statement ids, statement details, and account details, for all accounts?",
    "input": "create table accounts (account_id integer not null, statement_id integer not null, account_details varchar(255), primary key (account_id), foreign key (statement_id) references statements (statement_id));create table statements (statement_id integer not null, statement_details varchar(255), primary key (statement_id), foreign key (statement_id) references documents (document_id));",
    "output": "SELECT T1.statement_id, T2.statement_details, T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id"
  },
  {
    "instruction": "Show all the buildings along with the number of faculty members the buildings have.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT building, count(*) FROM Faculty GROUP BY building"
  },
  {
    "instruction": "What are the names of the technicians that have not been assigned to repair machines?",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));create table \"repair_assignment\" (\"technician_id\" int, \"repair_ID\" int, \"Machine_ID\" int, primary key (\"technician_id\",\"repair_ID\",\"Machine_ID\"), foreign key (`technician_id`) references `technician`(`technician_id`), foreign key (`repair_id`) references `repair`(`repair_id`), foreign key (`machine_id`) references `machine`(`machine_id`));",
    "output": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)"
  },
  {
    "instruction": "What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));",
    "output": "SELECT T1.fname, T1.lname, count(*), T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID"
  },
  {
    "instruction": "Show the ministers and the time they took and left office, listed by the time they left office.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT minister, took_office, left_office FROM party ORDER BY left_office"
  },
  {
    "instruction": "What are all the policy types of the customer that has the most policies listed?",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table customers_policies (customer_id integer not null, policy_id integer not null, date_opened date, date_closed date, primary key (customer_id, policy_id), foreign key (customer_id) references customers (customer_id), foreign key (policy_id) references available_policies (policy_id));create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table customers_policies (customer_id integer not null, policy_id integer not null, date_opened date, date_closed date, primary key (customer_id, policy_id), foreign key (customer_id) references customers (customer_id), foreign key (policy_id) references available_policies (policy_id));",
    "output": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "List the name and count of each product in all orders.",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer primary key, `product_id` integer not null, `order_id` integer not null, `order_item_status` varchar(10) not null, `order_item_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));create table `products` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT T3.product_name, count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id"
  },
  {
    "instruction": "Give the advisor with the most students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the captain rank that has no captain in Third-rate ship of the line class.",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS = 'Third-rate ship of the line'"
  },
  {
    "instruction": "Show the protein name and the institution name.",
    "input": "create table \"Institution\" (\"Institution_id\" text, \"Institution\" text, \"Location\" text, \"Founded\" real, \"Type\" text, \"Enrollment\" int, \"Team\" text, \"Primary_Conference\" text, \"building_id\" text, primary key(\"Institution_id\"), foreign key (\"building_id\") references \"building\"(\"building_id\"));create table \"protein\" (\"common_name\" text, \"protein_name\" text, \"divergence_from_human_lineage\" real, \"accession_number\" text, \"sequence_length\" real, \"sequence_identity_to_human_protein\" text, \"Institution_id\" text, primary key(\"common_name\"), foreign key(\"Institution_id\") references \"Institution\"(\"Institution_id\"));",
    "output": "SELECT T2.protein_name, T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id"
  },
  {
    "instruction": "What are the ids of the students who registered for some courses but had the least number of courses for all students?",
    "input": "create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));",
    "output": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "Show the names of journalists from \"England\" or \"Wales\".",
    "input": "create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));",
    "output": "SELECT Name FROM journalist WHERE Nationality = \"England\" OR Nationality = \"Wales\""
  },
  {
    "instruction": "Find the order dates of the orders with price above 1000.",
    "input": "create table customer_orders (order_id integer not null , customer_id integer not null, store_id integer not null, order_date datetime not null, planned_delivery_date datetime not null, actual_delivery_date datetime not null, other_order_details varchar(255), primary key (order_id), unique (order_id), foreign key (customer_id) references customers (customer_id), foreign key (store_id) references stores (store_id));create table order_items (order_item_id integer not null , order_id integer not null, product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), primary key (order_item_id), foreign key (order_id) references customer_orders (order_id), foreign key (product_id) references products (product_id));create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_price > 1000"
  },
  {
    "instruction": "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"
  },
  {
    "instruction": "What is the mail date of the document with id 7?",
    "input": "create table documents_mailed (document_id integer not null, mailed_to_address_id integer not null, mailing_date datetime, primary key (document_id, mailed_to_address_id), foreign key (document_id) references documents (document_id), foreign key (mailed_to_address_id) references addresses (address_id));",
    "output": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;"
  },
  {
    "instruction": "What is the role with the smallest number of employees? Find the role codes.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "What are the building full names that contain the word \"court\"?",
    "input": "create table apartment_buildings (building_id integer not null, building_short_name char(15), building_full_name varchar(80), building_description varchar(255), building_address varchar(255), building_manager varchar(50), building_phone varchar(80), primary key (building_id), unique (building_id));",
    "output": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\""
  },
  {
    "instruction": "What is the name of the shop that has the greatest quantity of devices in stock?",
    "input": "create table \"stock\" (\"Shop_ID\" int, \"Device_ID\" int, \"Quantity\" int, primary key (\"Shop_ID\",\"Device_ID\"), foreign key (`shop_id`) references `shop`(`shop_id`), foreign key (`device_id`) references `device`(`device_id`));create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1"
  },
  {
    "instruction": "Count the total number of settlements made.",
    "input": "create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT count(*) FROM Settlements"
  },
  {
    "instruction": "What is the title of the film that has the highest high market estimation.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));",
    "output": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID ORDER BY high_estimate DESC LIMIT 1"
  },
  {
    "instruction": "what is the largest capital",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );"
  },
  {
    "instruction": "What are the distinct first names for students with a grade point of 3.8 or above in at least one course?",
    "input": "create table enrolled_in (stuid integer, cid varchar(7), grade varchar(2), foreign key(stuid) references student(stuid), foreign key(cid) references course(cid), foreign key(grade) references gradeconversion(lettergrade));create table gradeconversion (lettergrade varchar(2) primary key, gradepoint float);create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T2.gradepoint >= 3.8"
  },
  {
    "instruction": "How many customers are living in city \"Lake Geovannyton\"?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_addresses` (`customer_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `address_type` varchar(15) not null, `date_address_to` datetime, foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = \"Lake Geovannyton\""
  },
  {
    "instruction": "Who are the customers that had more than 1 policy? List the customer details and id.",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table customer_policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date date, end_date date, primary key (policy_id), foreign key (customer_id) references customers (customer_id));",
    "output": "SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING count(*) > 1"
  },
  {
    "instruction": "What is the apartment number of the apartment with the most beds?",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1"
  },
  {
    "instruction": "what is the density of the wyoming",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT density FROM state WHERE state_name = \"wyoming\";"
  },
  {
    "instruction": "What are the price ranges of hotels?",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT price_range FROM HOTELS"
  },
  {
    "instruction": "Show ids, first names, last names, and phones for all customers.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers"
  },
  {
    "instruction": "What are the maximum and minimum number of silver medals for clubs.",
    "input": "create table \"club_rank\" (\"Rank\" real, \"Club_ID\" int, \"Gold\" real, \"Silver\" real, \"Bronze\" real, \"Total\" real, primary key (\"Rank\",\"Club_ID\") foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT max(Silver), min(Silver) FROM club_rank"
  },
  {
    "instruction": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));",
    "output": "SELECT RESULT, COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC"
  },
  {
    "instruction": "What are the name and description for location code x?",
    "input": "create table ref_locations (location_code char(15) not null, location_name varchar(255) not null, location_description varchar(255) not null, primary key (location_code));",
    "output": "SELECT location_name, location_description FROM Ref_locations WHERE location_code = \"x\""
  },
  {
    "instruction": "What are the names of all the Japanese constructors that have earned more than 5 points?",
    "input": "create table \"constructors\" (\"constructorId\" integer primary key, \"constructorRef\" text, \"name\" text, \"nationality\" text, \"url\" text);create table \"constructorStandings\" (\"constructorStandingsId\" integer primary key, \"raceId\" integer, \"constructorId\" integer, \"points\" real, \"position\" integer, \"positionText\" text, \"wins\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"));",
    "output": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5"
  },
  {
    "instruction": "what state has the largest population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MAX ( density ) FROM state );"
  },
  {
    "instruction": "What is the address content of the customer named \"Maudie Kertzmann\"?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_addresses` (`customer_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `address_type` varchar(15) not null, `date_address_to` datetime, foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.customer_name = \"Maudie Kertzmann\""
  },
  {
    "instruction": "For each classroom, report the classroom number and the number of grades using it.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT classroom, count(DISTINCT grade) FROM list GROUP BY classroom"
  },
  {
    "instruction": "How many female students (sex is F) whose age is below 25?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM student WHERE sex = 'F' AND age < 25"
  },
  {
    "instruction": "What are the names and location of the wrestlers?",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT Name, LOCATION FROM wrestler"
  },
  {
    "instruction": "What are the star rating descriptions of the hotels with price above 10000?",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));create table ref_hotel_star_ratings (star_rating_code char(15) not null, star_rating_description varchar(80), primary key (star_rating_code), unique (star_rating_code));",
    "output": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000"
  },
  {
    "instruction": "pldi best paper award 2015",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "pldi 2015 conference",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars > (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = \"James Cameron\")"
  },
  {
    "instruction": "Show the names of employees with role name Editor.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));create table roles (role_code char(15) not null, role_name varchar(255), role_description varchar(255), primary key (role_code));",
    "output": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = \"Editor\""
  },
  {
    "instruction": "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT f_id FROM files WHERE formats = \"mp4\" UNION SELECT f_id FROM song WHERE resolution > 720"
  },
  {
    "instruction": "What is the total number of hours per week and number of games played by students under 20?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT sum(hoursperweek), sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.age < 20"
  },
  {
    "instruction": "What are the types of every competition and in which countries are they located?",
    "input": "create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));",
    "output": "SELECT Competition_type, Country FROM competition"
  },
  {
    "instruction": "what states border the state with the smallest area",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );"
  },
  {
    "instruction": "how many big cities are in texas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( city_name ) FROM city WHERE population > 150000 AND state_name = \"texas\";"
  },
  {
    "instruction": "papers about TAIL published at NIPS",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"TAIL\" AND t4.venuename = \"NIPS\";"
  },
  {
    "instruction": "What are the draft pick numbers and draft classes for players who play the Defender position?",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE POSITION = \"Defender\""
  },
  {
    "instruction": "What is the average song rating for each language?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT avg(rating), languages FROM song GROUP BY languages"
  },
  {
    "instruction": "What are the last names that are used by customers and staff?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff"
  },
  {
    "instruction": "Find all movies directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \"",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));",
    "output": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN directed_by AS t2 ON t4.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t1.name = \"Taraneh Alidoosti\" AND t3.name = \"Asghar Farhadi\";"
  },
  {
    "instruction": "What are all the distinct last names of all the engineers?",
    "input": "create table `maintenance_engineers` (`engineer_id` integer primary key, `company_id` integer not null, `first_name` varchar(50), `last_name` varchar(50), `other_details` varchar(255), foreign key (`company_id`) references `third_party_companies`(`company_id`));",
    "output": "SELECT DISTINCT last_name FROM Maintenance_Engineers"
  },
  {
    "instruction": "what is the best restaurant in bay area for american food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" );"
  },
  {
    "instruction": "Which paper has the most authors? Give me the paper title.",
    "input": "create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));",
    "output": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE t1.authorder = (SELECT max(authorder) FROM authorship)"
  },
  {
    "instruction": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
    "input": "create table film_actor (actor_id smallint unsigned not null, film_id smallint unsigned not null, last_update timestamp not null default current_timestamp, primary key (actor_id, film_id), foreign key (actor_id) references actor (actor_id), foreign key (film_id) references film (film_id));create table actor (actor_id smallint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, last_update timestamp not null default current_timestamp, primary key (actor_id));",
    "output": "SELECT T2.first_name, T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING count(*) > 30"
  },
  {
    "instruction": "What is the average credit score for customers who have taken a loan?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)"
  },
  {
    "instruction": "Find all actors who are from Afghanistan",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT name FROM actor WHERE nationality = \"Afghanistan\";"
  },
  {
    "instruction": "What is the average attendance of stadiums with capacity percentage higher than 100%?",
    "input": "create table \"stadium\" (\"id\" int, \"name\" text, \"Home_Games\" int, \"Average_Attendance\" real, \"Total_Attendance\" real, \"Capacity_Percentage\" real, primary key (\"id\"));",
    "output": "SELECT average_attendance FROM stadium WHERE capacity_percentage > 100"
  },
  {
    "instruction": "Count the members of the club \"Tennis Club\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\""
  },
  {
    "instruction": "what year was the first deep learning paper published ?",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.datasetid, t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN paper AS t4 ON t4.paperid = t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid = t5.keyphraseid WHERE t5.keyphrasename = \"deep learning\" ORDER BY t4.year ASC;"
  },
  {
    "instruction": "What are the distinct names of wines that have appellations in the North Coast area?",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = \"North Coast\""
  },
  {
    "instruction": "return me the number of authors of \" Making database systems usable \" .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t3.title = \"Making database systems usable\";"
  },
  {
    "instruction": "papers at NIPS related to TAIL",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"TAIL\" AND t4.venuename = \"NIPS\";"
  },
  {
    "instruction": "What are the names and years of all races that had a driver with the last name Lewis?",
    "input": "create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);",
    "output": "SELECT T2.name, T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\""
  },
  {
    "instruction": "where are some good arabics in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "How many players did Boston Red Stockings have in 2000?",
    "input": "create table salary (year integer, team_id text, league_id text, player_id text, salary integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2000"
  },
  {
    "instruction": "Show all allergies and their types.",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT allergy, allergytype FROM Allergy_type"
  },
  {
    "instruction": "List all the information about course authors and tutors in alphabetical order of the personal name.",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));",
    "output": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name"
  },
  {
    "instruction": "Who are the top 3 players in terms of overall rating?",
    "input": "create table `player` (`id`\tinteger primary key autoincrement, `player_api_id`\tinteger unique, `player_name`\ttext, `player_fifa_api_id`\tinteger unique, `birthday`\ttext, `height`\tinteger, `weight`\tinteger);create table \"Player_Attributes\" (`id`\tinteger primary key autoincrement, `player_fifa_api_id`\tinteger, `player_api_id`\tinteger, `date`\ttext, `overall_rating`\tinteger, `potential`\tinteger, `preferred_foot`\ttext, `attacking_work_rate`\ttext, `defensive_work_rate`\ttext, `crossing`\tinteger, `finishing`\tinteger, `heading_accuracy`\tinteger, `short_passing`\tinteger, `volleys`\tinteger, `dribbling`\tinteger, `curve`\tinteger, `free_kick_accuracy`\tinteger, `long_passing`\tinteger, `ball_control`\tinteger, `acceleration`\tinteger, `sprint_speed`\tinteger, `agility`\tinteger, `reactions`\tinteger, `balance`\tinteger, `shot_power`\tinteger, `jumping`\tinteger, `stamina`\tinteger, `strength`\tinteger, `long_shots`\tinteger, `aggression`\tinteger, `interceptions`\tinteger, `positioning`\tinteger, `vision`\tinteger, `penalties`\tinteger, `marking`\tinteger, `standing_tackle`\tinteger, `sliding_tackle`\tinteger, `gk_diving`\tinteger, `gk_handling`\tinteger, `gk_kicking`\tinteger, `gk_positioning`\tinteger, `gk_reflexes`\tinteger, foreign key(`player_fifa_api_id`) references `player`(`player_fifa_api_id`), foreign key(`player_api_id`) references `player`(`player_api_id`));",
    "output": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY overall_rating DESC LIMIT 3"
  },
  {
    "instruction": "what is the capital of states that have cities named durham",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.state_name = t1.state_name WHERE t1.city_name = \"durham\";"
  },
  {
    "instruction": "Find the name of all the cities and states.",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `town_city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `town_city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses"
  },
  {
    "instruction": "How many total pounds were purchased in the year 2018 at all London branches?",
    "input": "create table \"purchase\" (\"Member_ID\" int, \"Branch_ID\" text, \"Year\" text, \"Total_pounds\" real, primary key (\"Member_ID\",\"Branch_ID\",\"Year\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T2.city = 'London' AND T1.year = 2018"
  },
  {
    "instruction": "What are the titles of all the albums alphabetically ascending?",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT title FROM albums ORDER BY title;"
  },
  {
    "instruction": "what is the best american restaurant in the bay area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" );"
  },
  {
    "instruction": "In which year did the most recent crime happen?",
    "input": "create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT max(YEAR) FROM perpetrator;"
  },
  {
    "instruction": "For each faculty rank, show the number of faculty members who have it.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT rank, count(*) FROM Faculty GROUP BY rank"
  },
  {
    "instruction": "List countries that have more than one swimmer.",
    "input": "create table \"swimmer\" (\"ID\" int, \"name\" text, \"Nationality\" text, \"meter_100\" real, \"meter_200\" text, \"meter_300\" text, \"meter_400\" text, \"meter_500\" text, \"meter_600\" text, \"meter_700\" text, \"Time\" text, primary key (\"ID\"));",
    "output": "SELECT nationality, count(*) FROM swimmer GROUP BY nationality HAVING count(*) > 1"
  },
  {
    "instruction": "Find the number of patients who are not using the medication of Procrastin-X.",
    "input": "create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));create table medication (code integer primary key not null, name varchar(30) not null, brand varchar(30) not null, description varchar(30) not null);",
    "output": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication = T2.Code WHERE T2.name = 'Procrastin-X' )"
  },
  {
    "instruction": "How many characteristics does the product named \"sesame\" have?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"sesame\""
  },
  {
    "instruction": "What are the names of the songs that do not have back vocals?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"back\""
  },
  {
    "instruction": "what ACL papers have less than 5 citations ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t2.venuename = \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid ) < 5;"
  },
  {
    "instruction": "Show the most common nationality of hosts.",
    "input": "create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));",
    "output": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the denomination of the school that has the most players.",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the types of schools that have two schools.",
    "input": "create table \"school\" (\"School_ID\" int, \"Grade\" text, \"School\" text, \"Location\" text, \"Type\" text, primary key (\"School_ID\"));",
    "output": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*) = 2"
  },
  {
    "instruction": "Return the average, minimum, maximum, and total transaction amounts.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT avg(transaction_amount), min(transaction_amount), max(transaction_amount), sum(transaction_amount) FROM Financial_transactions"
  },
  {
    "instruction": "What are the names of companies that do not make DVD drives?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T1.name = 'DVD drive'"
  },
  {
    "instruction": "which river runs through the most states",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;"
  },
  {
    "instruction": "How many sections does course ACCT-211 has?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211'"
  },
  {
    "instruction": "Who are the authors with the most published papers in syntactic parsing ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "Show the account id and name with at least 4 transactions.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.account_id, T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count(*) >= 4"
  },
  {
    "instruction": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?",
    "input": "create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table trained_in (physician integer not null, treatment integer not null, certificationdate datetime not null, certificationexpires datetime not null, constraint fk_trained_in_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_trained_in_procedures_code foreign key(treatment) references procedures(code), primary key(physician, treatment));create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT name FROM procedures WHERE cost > 1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\""
  },
  {
    "instruction": "How many games are played for all football games by students on scholarship?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname = \"Football\" AND onscholarship = 'Y'"
  },
  {
    "instruction": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = \"West Germany\""
  },
  {
    "instruction": "What city and state is the bank with the name morningside in?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT city, state FROM bank WHERE bname = 'morningside'"
  },
  {
    "instruction": "Find the id of users who are followed by Mary and Susan.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));create table `follows` (`f1` int(11) not null, `f2` int(11) not null, primary key (`f1`,`f2`), foreign key (`f1`) references `user_profiles`(`uid`), foreign key (`f2`) references `user_profiles`(`uid`));create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));create table `follows` (`f1` int(11) not null, `f2` int(11) not null, primary key (`f1`,`f2`), foreign key (`f1`) references `user_profiles`(`uid`), foreign key (`f2`) references `user_profiles`(`uid`));",
    "output": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Susan\""
  },
  {
    "instruction": "Show names and phones of customers who do not have address information.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(15), `customer_number` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_address_history` (`customer_id` integer not null, `address_id` integer not null, `date_from` datetime not null, `date_to` datetime, foreign key (`customer_id`) references `customers`(`customer_id`), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT customer_name, customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)"
  },
  {
    "instruction": "Find the names of Japanese constructors that have once earned more than 5 points?",
    "input": "create table \"constructors\" (\"constructorId\" integer primary key, \"constructorRef\" text, \"name\" text, \"nationality\" text, \"url\" text);create table \"constructorStandings\" (\"constructorStandingsId\" integer primary key, \"raceId\" integer, \"constructorId\" integer, \"points\" real, \"position\" integer, \"positionText\" text, \"wins\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"));",
    "output": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5"
  },
  {
    "instruction": "Show the range that has the most number of mountains.",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What papers has sharon goldwater written ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "List all the distinct president votes and the vice president votes.",
    "input": "create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT President_Vote, VICE_President_Vote FROM VOTING_RECORD"
  },
  {
    "instruction": "List the names and origins of people who are not body builders.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));",
    "output": "SELECT Name, birth_place FROM people EXCEPT SELECT T1.Name, T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id"
  },
  {
    "instruction": "What are the ids of documents with letter 's' in the name with any expense budgets.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name LIKE '%s%'"
  },
  {
    "instruction": "How many aircrafts do we have?",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT count(*) FROM Aircraft"
  },
  {
    "instruction": "What are the countries that have both mountains that are higher than 5600 and lower than 5200?",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200"
  },
  {
    "instruction": "return me the authors who have more than 10 papers in the VLDB conference .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = \"VLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title ) > 10;"
  },
  {
    "instruction": "find the number of medicines offered by each trade.",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));",
    "output": "SELECT trade_name, count(*) FROM medicine GROUP BY trade_name"
  },
  {
    "instruction": "how many rivers are in the state with the highest point.",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse = t2.state_name WHERE t2.highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "What are the code and description of the least frequent detention type ?",
    "input": "create table `detention` (`detention_id` integer primary key, `detention_type_code` varchar(10) not null, `teacher_id` integer, `datetime_detention_start` datetime, `datetime_detention_end` datetime, `detention_summary` varchar(255), `other_details` varchar(255), foreign key (`detention_type_code`) references `ref_detention_type`(`detention_type_code`), foreign key (`teacher_id`) references `teachers`(`teacher_id`));create table `ref_detention_type` (`detention_type_code` varchar(10) primary key, `detention_type_description` varchar(80));",
    "output": "SELECT T1.detention_type_code, T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "Which programs' origins are not \"Beijing\"? Give me the program names.",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));",
    "output": "SELECT name FROM program WHERE origin != 'Beijing'"
  },
  {
    "instruction": "How many friends does Dan have?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Dan'"
  },
  {
    "instruction": "Find the name and age of the person who is a friend of both Dan and Alice.",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' INTERSECT SELECT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice'"
  },
  {
    "instruction": "papers at chi",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"chi\";"
  },
  {
    "instruction": "What is all the customer information for customers in NY state?",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT * FROM CUSTOMER WHERE State = \"NY\""
  },
  {
    "instruction": "How many distinct payment methods are used by parties?",
    "input": "create table `parties` (`party_id` integer primary key, `payment_method_code` varchar(15) not null, `party_phone` varchar(80), `party_email` varchar(80));",
    "output": "SELECT count(DISTINCT payment_method_code) FROM parties"
  },
  {
    "instruction": "For each classroom, show the classroom number and find how many students are using it.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT classroom, count(*) FROM list GROUP BY classroom"
  },
  {
    "instruction": "Show all allergies with type food.",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = \"food\""
  },
  {
    "instruction": "Find the name of customers who have loans of both Mortgages and Auto.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Auto'"
  },
  {
    "instruction": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.",
    "input": "create table \"journal_committee\" (\"Editor_ID\" int, \"Journal_ID\" int, \"Work_Type\" text, primary key (\"Editor_ID\",\"Journal_ID\"), foreign key (\"Editor_ID\") references `editor`(\"Editor_ID\"), foreign key (\"Journal_ID\") references `journal`(\"Journal_ID\"));create table \"editor\" (\"Editor_ID\" int, \"Name\" text, \"Age\" real, primary key (\"Editor_ID\"));create table \"journal\" (\"Journal_ID\" int, \"Date\" text, \"Theme\" text, \"Sales\" int, primary key (\"Journal_ID\"));",
    "output": "SELECT T2.Name, T2.age, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme ASC"
  },
  {
    "instruction": "where is the highest point in texas",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE state_name = \"texas\";"
  },
  {
    "instruction": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",
    "input": "create table \"phone_market\" (\"Market_ID\" int, \"Phone_ID\" text, \"Num_of_stock\" int, primary key (\"Market_ID\",\"Phone_ID\"), foreign key (\"Market_ID\") references `market`(\"Market_ID\"), foreign key (\"Phone_ID\") references `phone`(\"Phone_ID\"));create table \"phone\" (\"Name\" text, \"Phone_ID\" int, \"Memory_in_G\" int, \"Carrier\" text, \"Price\" real, primary key (\"Phone_ID\"));",
    "output": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock) >= 2000 ORDER BY sum(T1.Num_of_stock) DESC"
  },
  {
    "instruction": "Find the number of employees of each gender whose salary is lower than 50000.",
    "input": "create table employee(fname text, minit text, lname text, ssn integer primary key, bdate text, address text, sex text, salary integer, super_ssn integer, dno integer);",
    "output": "SELECT count(*), sex FROM employee WHERE salary < 50000 GROUP BY sex"
  },
  {
    "instruction": "monte carlo simulation papers later than 2011",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"monte carlo simulation\" AND t3.year > 2011;"
  },
  {
    "instruction": "What is the average number of attendees for performances?",
    "input": "create table \"performance\" (\"Performance_ID\" real, \"Date\" text, \"Host\" text, \"Location\" text, \"Attendance\" int, primary key (\"Performance_ID\"));",
    "output": "SELECT avg(Attendance) FROM performance"
  },
  {
    "instruction": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code = \"PIT\""
  },
  {
    "instruction": "What are the details of the markets that can be accessed by walk or bus?",
    "input": "create table street_markets (market_id integer not null, market_details varchar(255), primary key (market_id), foreign key (market_id) references tourist_attractions (tourist_attraction_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\" OR T2.How_to_Get_There = \"bus\""
  },
  {
    "instruction": "Show the average price of hotels for different pet policy.",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT pets_allowed_yn, avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn"
  },
  {
    "instruction": "What are the series in which \" Scott Foley \" is an actor ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"tv_series\" (\"sid\" int, \"title\" text, \"release_year\" int, \"num_of_seasons\" int, \"num_of_episodes\" int, \"title_aka\" text, \"budget\" text, primary key(\"sid\"));",
    "output": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN tv_series AS t2 ON t2.sid = t3.msid WHERE t1.name = \"Scott Foley\";"
  },
  {
    "instruction": "What is the least common media type in all tracks?",
    "input": "create table `mediatype` (`mediatypeid` integer not null , `name` varchar(120) default null , primary key (`mediatypeid`));create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1"
  },
  {
    "instruction": "Which program is broadcast most frequently? Give me the program name.",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));",
    "output": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what rivers flow through illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = \"illinois\";"
  },
  {
    "instruction": "what are the lakes in states bordering texas",
    "input": "create table `lake` (`lake_name` text , `area` double default null , `country_name` varchar(3) not null default '' , `state_name` text);create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" );"
  },
  {
    "instruction": "What are the names of parties that do not have delegates in election?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)"
  },
  {
    "instruction": "What are the wifi and screen mode type of the hardware model named \"LG-P760\"?",
    "input": "create table \"chip_model\" (\"Model_name\" text, \"Launch_year\" real, \"RAM_MiB\" real, \"ROM_MiB\" real, \"Slots\" text, \"WiFi\" text, \"Bluetooth\" text, primary key (\"Model_name\"));create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));create table \"screen_mode\" (\"Graphics_mode\" real, \"Char_cells\" text, \"Pixels\" text, \"Hardware_colours\" real, \"used_kb\" real, \"map\" text, \"Type\" text, primary key (\"Graphics_mode\"));",
    "output": "SELECT T1.WiFi, T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";"
  },
  {
    "instruction": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table reviewer(rid int primary key, name text);",
    "output": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000"
  },
  {
    "instruction": "what is the capital of the texas state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT capital FROM state WHERE state_name = \"texas\";"
  },
  {
    "instruction": "What are all the instruments used?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));",
    "output": "SELECT DISTINCT instrument FROM Instruments"
  },
  {
    "instruction": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT T1.director, T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 5"
  },
  {
    "instruction": "Show the name of the customer who has the most orders.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(15), `customer_number` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_date` datetime not null, `order_status_code` varchar(15), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name FROM instructor WHERE salary > (SELECT max(salary) FROM instructor WHERE dept_name = 'Biology')"
  },
  {
    "instruction": "How many airlines operate out of each country in descending order?",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);",
    "output": "SELECT country, count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC"
  },
  {
    "instruction": "What are the names of all clubs that do not have any players?",
    "input": "create table \"club\" (\"Club_ID\" int, \"name\" text, \"Region\" text, \"Start_year\" text, primary key (\"Club_ID\"));create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
  },
  {
    "instruction": "Find the accreditation level that more than 3 phones use.",
    "input": "create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*) > 3"
  },
  {
    "instruction": "How many students are there?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM student"
  },
  {
    "instruction": "List every album ordered by album title in ascending order.",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT title FROM albums ORDER BY title;"
  },
  {
    "instruction": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"enrollments\" (\"Campus\" integer, \"Year\" integer, \"TotalEnrollment_AY\" integer, \"FTE_AY\" integer, primary key(campus, year), foreign key (campus) references campuses(id));",
    "output": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200"
  },
  {
    "instruction": "When did Michael Stonebraker publish his GIS Database paper ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"Michael Stonebraker\" AND t5.keyphrasename = \"GIS Database\";"
  },
  {
    "instruction": "What are the names of every person who has a friend over 40 and under 30?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)"
  },
  {
    "instruction": "Show the customer name, customer address city, date from, and date to for each customer address history.",
    "input": "create table `customer_address_history` (`customer_id` integer not null, `address_id` integer not null, `date_from` datetime not null, `date_to` datetime, foreign key (`customer_id`) references `customers`(`customer_id`), foreign key (`address_id`) references `addresses`(`address_id`));create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(15), `customer_number` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT T2.customer_name, T3.city, T1.date_from, T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id"
  },
  {
    "instruction": "Find the name of the department that has no students minored in?",
    "input": "create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);create table minor_in (stuid integer, dno integer, foreign key(stuid) references student(stuid), foreign key(dno) references department(dno));",
    "output": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO"
  },
  {
    "instruction": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT sum(Enrollment), affiliation FROM university WHERE founded > 1850 GROUP BY affiliation"
  },
  {
    "instruction": "What is the name and hours for the project which has the most scientists assigned to it?",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));",
    "output": "SELECT T1.name, T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names and genders of staff who were assigned in 2016?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_gender` varchar(1), `staff_name` varchar(80));create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\""
  },
  {
    "instruction": "Find the department name that is in Building \"Mergenthaler\".",
    "input": "create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);",
    "output": "SELECT DName FROM DEPARTMENT WHERE Building = \"Mergenthaler\""
  },
  {
    "instruction": "What are the names of all movies that received 3 or 4 stars?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 4"
  },
  {
    "instruction": "What is the most common birth place of people?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));",
    "output": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the total number of hours per work and number of games played by David Shieber?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT sum(hoursperweek), sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = \"David\" AND T2.Lname = \"Shieber\""
  },
  {
    "instruction": "What is the total number of hours for all projects?",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT sum(hours) FROM projects"
  },
  {
    "instruction": "return me the authors who have cited the papers by \" H. V. Jagadish \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"cite\" (\"cited\" int, \"citing\" int, foreign key(\"cited\") references \"publication\"(\"pid\"), foreign key(\"citing\") references \"publication\"(\"pid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t2.name FROM publication AS t7 JOIN cite AS t5 ON t7.pid = t5.citing JOIN publication AS t6 ON t6.pid = t5.cited JOIN writes AS t3 ON t3.pid = t7.pid JOIN writes AS t4 ON t4.pid = t6.pid JOIN author AS t2 ON t3.aid = t2.aid JOIN author AS t1 ON t4.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\";"
  },
  {
    "instruction": "where is a good restaurant in mountain view for arabic food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Find the name of the target user with the lowest trust score.",
    "input": "create table `useracct` (`u_id` integer not null , `name` varchar(128) default null , primary key (`u_id`));create table \"trust\" (`source_u_id` integer not null, `target_u_id` integer not null, `trust` integer not null, foreign key (`source_u_id`) references `useracct`(`u_id`), foreign key (`target_u_id`) references `useracct`(`u_id`));",
    "output": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id ORDER BY trust LIMIT 1"
  },
  {
    "instruction": "Find the maximum and minimum millisecond lengths of pop tracks.",
    "input": "create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT max(Milliseconds), min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Pop\""
  },
  {
    "instruction": "Tell me the highest, lowest, and average cost of procedures.",
    "input": "create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT MAX(cost), MIN(cost), AVG(cost) FROM procedures"
  },
  {
    "instruction": "What activities do we have?",
    "input": "create table activity (actid integer primary key, activity_name varchar(25));",
    "output": "SELECT activity_name FROM Activity"
  },
  {
    "instruction": "List the name of albums that are released by aritist whose name has 'Led'",
    "input": "create table artists (id integer primary key autoincrement, name varchar(120));create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'"
  },
  {
    "instruction": "What are the booking start and end dates of the apartments with type code \"Duplex\"?",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\""
  },
  {
    "instruction": "Show all flight number from Los Angeles.",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT flno FROM Flight WHERE origin = \"Los Angeles\""
  },
  {
    "instruction": "return me the authors who have papers in VLDB conference in 2002 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = \"VLDB\" AND t4.year = 2002;"
  },
  {
    "instruction": "What are the amenities in the dorm that a student who has the last name of Smith lives in?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE T5.lname = 'Smith'"
  },
  {
    "instruction": "What are all the employees without a department number?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM employees WHERE department_id = \"null\""
  },
  {
    "instruction": "find the program owners that have some programs in both morning and night time.",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));",
    "output": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Night\""
  },
  {
    "instruction": "What is the day Number and date of all the documents?",
    "input": "create table all_documents (document_id integer not null, date_stored datetime, document_type_code char(15) not null, document_name char(255), document_description char(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (date_stored) references ref_calendar (calendar_date));create table ref_calendar (calendar_date datetime not null, day_number integer, primary key (calendar_date));",
    "output": "SELECT T2.day_Number, T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date"
  },
  {
    "instruction": "Find the title and star rating of the movie that got the least rating star for each reviewer.",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, T1.rID, T1.stars, min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.rID"
  },
  {
    "instruction": "Find the total number of hours have done for all students in each department.",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT sum(stu_hrs), dept_code FROM student GROUP BY dept_code"
  },
  {
    "instruction": "How many songs appear in studio albums?",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);create table \"Tracklists\" (\"AlbumId\" integer, \"Position\" integer, \"SongId\" integer , primary key(albumid, position), foreign key (songid) references songs(songid), foreign key (albumid) references albums(aid));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.type = \"Studio\""
  },
  {
    "instruction": "What is the most frequent status of bookings?",
    "input": "create table bookings (booking_id integer not null , customer_id integer not null, workshop_group_id varchar(100) not null, status_code char(15) not null, store_id integer not null, order_date datetime not null, planned_delivery_date datetime not null, actual_delivery_date datetime not null, other_order_details varchar(255), primary key (booking_id), unique (booking_id), foreign key (customer_id) references clients (client_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id));",
    "output": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",
    "input": "create table documents (document_id integer not null, document_status_code char(15) not null, document_type_code char(15) not null, shipping_agent_code char(15), receipt_date datetime, receipt_number varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (document_status_code) references ref_document_status (document_status_code), foreign key (shipping_agent_code) references ref_shipping_agents (shipping_agent_code));create table documents (document_id integer not null, document_status_code char(15) not null, document_type_code char(15) not null, shipping_agent_code char(15), receipt_date datetime, receipt_number varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (document_status_code) references ref_document_status (document_status_code), foreign key (shipping_agent_code) references ref_shipping_agents (shipping_agent_code));create table ref_shipping_agents (shipping_agent_code char(15) not null, shipping_agent_name varchar(255) not null, shipping_agent_description varchar(255) not null, primary key (shipping_agent_code));",
    "output": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
  },
  {
    "instruction": "What is the name of the customer who has the most policies listed?",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table customers_policies (customer_id integer not null, policy_id integer not null, date_opened date, date_closed date, primary key (customer_id, policy_id), foreign key (customer_id) references customers (customer_id), foreign key (policy_id) references available_policies (policy_id));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what are the cities in texas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE state_name = \"texas\";"
  },
  {
    "instruction": "How many customers do not have an account?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
  },
  {
    "instruction": "In which buildings are there at least ten professors?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT building FROM Faculty WHERE rank = \"Professor\" GROUP BY building HAVING count(*) >= 10"
  },
  {
    "instruction": "Which vocal type did the musician with first name \"Solveig\" played in the song with title \"A Bar in Amsterdam\"?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = \"Solveig\" AND T2.title = \"A Bar In Amsterdam\""
  },
  {
    "instruction": "Find the salary and manager number for those employees who is working under a manager.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT salary, manager_id FROM employees WHERE manager_id != \"null\""
  },
  {
    "instruction": "return me the authors who have papers in PVLDB after 2010 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = \"PVLDB\" AND t4.year > 2010;"
  },
  {
    "instruction": "What are the names of customers who never made an order.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id"
  },
  {
    "instruction": "What is the number of movies in which \" Jennifer Aniston \" acted after 2010 ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Jennifer Aniston\" AND t2.release_year > 2010;"
  },
  {
    "instruction": "what is the highest point in the state with the capital des moines",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital = \"des moines\" );"
  },
  {
    "instruction": "find the names of programs whose origin is not in Beijing.",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));",
    "output": "SELECT name FROM program WHERE origin != 'Beijing'"
  },
  {
    "instruction": "Find the players whose names contain letter 'a'.",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'"
  },
  {
    "instruction": "List the id of students who attended  statistics courses in the order of attendance date.",
    "input": "create table courses (course_id varchar(100) not null, course_name varchar(120), course_description varchar(255), other_details varchar(255), primary key (course_id));create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance"
  },
  {
    "instruction": "Which schools do not have any player? Give me the school locations.",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));",
    "output": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)"
  },
  {
    "instruction": "What is the maximum total amount paid by a customer? List the customer id and amount.",
    "input": "create table `payments` (`payment_id` integer primary key, `booking_id` integer, `customer_id` integer not null, `payment_type_code` varchar(15) not null, `amount_paid_in_full_yn` varchar(1), `payment_date` datetime, `amount_due` decimal(19, 4), `amount_paid` decimal(19, 4), foreign key (`booking_id`) references `bookings`(`booking_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT customer_id, sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Lieutenant'"
  },
  {
    "instruction": "Show statement id, statement detail, account detail for accounts.",
    "input": "create table accounts (account_id integer not null, statement_id integer not null, account_details varchar(255), primary key (account_id), foreign key (statement_id) references statements (statement_id));create table statements (statement_id integer not null, statement_details varchar(255), primary key (statement_id), foreign key (statement_id) references documents (document_id));",
    "output": "SELECT T1.statement_id, T2.statement_details, T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id"
  },
  {
    "instruction": "How many transactions do we have?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT count(*) FROM Financial_transactions"
  },
  {
    "instruction": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.",
    "input": "create table guests (guest_id integer not null , gender_code char(1), guest_first_name varchar(80), guest_last_name varchar(80), date_of_birth datetime, primary key (guest_id), unique (guest_id));",
    "output": "SELECT gender_code, COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"
  },
  {
    "instruction": "return me the number of papers in PVLDB containing keyword \" Keyword search \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid = t1.kid JOIN publication AS t4 ON t4.pid = t2.pid JOIN journal AS t3 ON t4.jid = t3.jid WHERE t3.name = \"PVLDB\" AND t1.keyword = \"Keyword search\";"
  },
  {
    "instruction": "What is the name of the player with the largest number of votes?",
    "input": "create table \"player\" (\"Player_ID\" int, \"Sponsor_name\" text, \"Player_name\" text, \"Gender\" text, \"Residence\" text, \"Occupation\" text, \"Votes\" int, \"Rank\" text, primary key (\"Player_ID\"));",
    "output": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1"
  },
  {
    "instruction": "Which are the first and last names of the students taught by MARROTTE KIRK?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"MARROTTE\" AND T2.lastname = \"KIRK\""
  },
  {
    "instruction": "what is the area of all the states combined",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT SUM ( area ) FROM state;"
  },
  {
    "instruction": "what is the name of every pilot who is at least 25 years old?",
    "input": "create table `pilot` (`pilot_id` int(11) not null, `name` varchar(50) not null, `age` int(11) not null, primary key (`pilot_id`));",
    "output": "SELECT Name FROM pilot WHERE Age >= 25"
  },
  {
    "instruction": "List the addresses of all Walmart in \" Los Angeles \"",
    "input": "create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT full_address FROM business WHERE city = \"Los Angeles\" AND name = \"Walmart\";"
  },
  {
    "instruction": "give me a good restaurant on buchanan in san francisco for arabic food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "How many regions were affected by each storm?",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT T1.name, count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id"
  },
  {
    "instruction": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".",
    "input": "create table \"screen_mode\" (\"Graphics_mode\" real, \"Char_cells\" text, \"Pixels\" text, \"Hardware_colours\" real, \"used_kb\" real, \"map\" text, \"Type\" text, primary key (\"Graphics_mode\"));create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT T1.Char_cells, T1.Pixels, T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\";"
  },
  {
    "instruction": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.",
    "input": "create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));create table `organisation_types` (`organisation_type` varchar(10) primary key, `organisation_type_description` varchar(255) not null);",
    "output": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_type_description = 'Sponsor' ORDER BY organisation_details"
  },
  {
    "instruction": "List all characteristics of product named \"sesame\" with type code \"Grade\".",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\" AND t3.characteristic_type_code = \"Grade\""
  },
  {
    "instruction": "What are the names of documents that have both one of the three most common types and one of three most common structures?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "Return all the committees that have delegates from Democratic party.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\""
  },
  {
    "instruction": "Which address do not have any member with the black membership card?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Membership_card\" text, \"Age\" int, \"Time_of_purchase\" int, \"Level_of_membership\" int, \"Address\" text, primary key (\"Member_ID\"));create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Membership_card\" text, \"Age\" int, \"Time_of_purchase\" int, \"Level_of_membership\" int, \"Address\" text, primary key (\"Member_ID\"));",
    "output": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black'"
  },
  {
    "instruction": "What are the title, id, and description of the movie with the greatest number of actors?",
    "input": "create table film_actor (actor_id smallint unsigned not null, film_id smallint unsigned not null, last_update timestamp not null default current_timestamp, primary key (actor_id, film_id), foreign key (actor_id) references actor (actor_id), foreign key (film_id) references film (film_id));create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));",
    "output": "SELECT T2.title, T2.film_id, T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many movies did \" Shahab Hosseini \" act in",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Shahab Hosseini\";"
  },
  {
    "instruction": "When did the staff member with first name as Janessa and last name as Sawayn join the company?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
  },
  {
    "instruction": "What are the ages of all music artists?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));",
    "output": "SELECT Age FROM artist"
  },
  {
    "instruction": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall' ORDER BY T3.amenity_name"
  },
  {
    "instruction": "What is the name of the customer who has the most orders?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many eliminations did each team have?",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));",
    "output": "SELECT Team, COUNT(*) FROM elimination GROUP BY Team"
  },
  {
    "instruction": "what is the area of the state with the smallest population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT area FROM state WHERE density = ( SELECT MIN ( density ) FROM state );"
  },
  {
    "instruction": "How many entrepreneurs correspond to each investor?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Investor, COUNT(*) FROM entrepreneur GROUP BY Investor"
  },
  {
    "instruction": "Return the the names of the drama workshop groups that are located in Feliciaberg city.",
    "input": "create table addresses (address_id varchar(100) not null, line_1 varchar(255), line_2 varchar(255), city_town varchar(255), state_county varchar(255), other_details varchar(255), primary key (address_id), unique (address_id));create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = \"Feliciaberg\""
  },
  {
    "instruction": "What are the names of body builders in descending order of total scores?",
    "input": "create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC"
  },
  {
    "instruction": "Find the last names of the teachers that teach fifth grade.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 5"
  },
  {
    "instruction": "Show all the faculty ranks and the number of students advised by each rank.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T1.rank, count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank"
  },
  {
    "instruction": "What are the distinct names of nurses on call?",
    "input": "create table nurse (employeeid integer primary key not null, name varchar(30) not null, position varchar(30) not null, registered boolean not null, ssn integer not null);create table on_call (nurse integer not null, blockfloor integer not null, blockcode integer not null, oncallstart datetime not null, oncallend datetime not null, primary key(nurse, blockfloor, blockcode, oncallstart, oncallend), constraint fk_oncall_nurse_employeeid foreign key(nurse) references nurse(employeeid), constraint fk_oncall_block_floor foreign key(blockfloor, blockcode) references block(blockfloor, blockcode));",
    "output": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse"
  },
  {
    "instruction": "Count the number of storms in which at least 1 person died.",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT count(*) FROM storm WHERE Number_Deaths > 0"
  },
  {
    "instruction": "What papers does Richard Ladner have in chi ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Richard Ladner\" AND t4.venuename = \"chi\";"
  },
  {
    "instruction": "What are the different role codes for users, and how many users have each?",
    "input": "create table `users` (`user_id` integer primary key, `role_code` varchar(15) not null, `user_name` varchar(40), `user_login` varchar(40), `password` varchar(40), foreign key (`role_code`) references `roles`(`role_code`));",
    "output": "SELECT count(*), role_code FROM users GROUP BY role_code"
  },
  {
    "instruction": "Find the name of the department that has the fewest members.",
    "input": "create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);create table member_of (facid integer, dno integer, appt_type varchar(15), foreign key(facid) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "List all pilot names in ascending alphabetical order.",
    "input": "create table `pilot` (`pilot_id` int(11) not null, `name` varchar(50) not null, `age` int(11) not null, primary key (`pilot_id`));",
    "output": "SELECT Name FROM pilot ORDER BY Name ASC"
  },
  {
    "instruction": "Has Peter Mertens and Dina Barbian written a paper together ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "Which city does student Linda Smith live in?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
  },
  {
    "instruction": "return me the number of papers in \" University of Michigan \" in Databases area .",
    "input": "create table \"domain_author\" (\"aid\" int, \"did\" int, primary key (\"did\", \"aid\"), foreign key(\"aid\") references `author`(\"aid\"), foreign key(\"did\") references `domain`(\"did\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));create table \"domain_publication\" (\"did\" int, \"pid\" int, primary key (\"did\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"did\") references \"domain\"(\"did\"));create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t4.title ) FROM domain_author AS t6 JOIN author AS t1 ON t6.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t6.did JOIN domain_publication AS t2 ON t3.did = t2.did JOIN organization AS t5 ON t5.oid = t1.oid JOIN publication AS t4 ON t4.pid = t2.pid WHERE t3.name = \"Databases\" AND t5.name = \"University of Michigan\";"
  },
  {
    "instruction": "Find the claim that has the largest total settlement amount. Return the effective date of the claim.",
    "input": "create table claims (claim_id integer not null, fnol_id integer not null, effective_date date, primary key (claim_id), unique (claim_id), foreign key (fnol_id) references first_notification_of_loss (fnol_id));create table settlements (settlement_id integer not null, claim_id integer, effective_date date, settlement_amount real, primary key (settlement_id), unique (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1"
  },
  {
    "instruction": "List the company name and rank for all companies in the decreasing order of their sales.",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT company, rank FROM company ORDER BY Sales_billion DESC"
  },
  {
    "instruction": "What are the different grant amounts for documents sent before '1986-08-26 20:49:27' and after the grant ended on '1989-03-16 18:27:16'?",
    "input": "create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `documents` (`document_id` integer primary key, `document_type_code` varchar(10), `grant_id` integer not null, `sent_date` datetime not null, `response_received_date` datetime not null, `other_details` varchar(255) not null, foreign key (`document_type_code`) references `document_types`(`document_type_code`), foreign key (`grant_id`) references `grants`(`grant_id`));create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id WHERE T2.sent_date < '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date > '1989-03-16 18:27:16'"
  },
  {
    "instruction": "return me the papers on VLDB conference .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = \"VLDB\";"
  },
  {
    "instruction": "What are the names and scores of all wines?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Name, Score FROM WINE"
  },
  {
    "instruction": "What are the maximum, minimum, and average booked count for the products booked?",
    "input": "create table `products_booked` (`booking_id` integer not null, `product_id` integer not null, `returned_yn` varchar(1), `returned_late_yn` varchar(1), `booked_count` integer, `booked_amount` float null, primary key (`booking_id`, `product_id`) foreign key (`booking_id`) references `bookings`(`booking_id`), foreign key (`product_id`) references `products_for_hire`(`product_id`));",
    "output": "SELECT max(booked_count), min(booked_count), avg(booked_count) FROM products_booked"
  },
  {
    "instruction": "what state has the city with the largest population",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );"
  },
  {
    "instruction": "how many buttercup kitchen are there in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.name = \"buttercup kitchen\";"
  },
  {
    "instruction": "How many different card types are there?",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards"
  },
  {
    "instruction": "How many instructors teach a course in the Spring of 2010?",
    "input": "create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);",
    "output": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010"
  },
  {
    "instruction": "For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids.",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));",
    "output": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\""
  },
  {
    "instruction": "What is the average credit score for customers who have never taken a loan?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)"
  },
  {
    "instruction": "Show the company name with the number of gas station.",
    "input": "create table \"station_company\" (\"Station_ID\" int, \"Company_ID\" int, \"Rank_of_the_Year\" int, primary key (\"Station_ID\",\"Company_ID\"), foreign key (`station_id`) references `gas_station`(`station_id`), foreign key (`company_id`) references `company`(`company_id`));create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT T2.company, count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id"
  },
  {
    "instruction": "What are the customer phone numbers under the policy \"Life Insurance\"?",
    "input": "create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));",
    "output": "SELECT customer_phone FROM available_policies WHERE policy_type_code = \"Life Insurance\""
  },
  {
    "instruction": "return me the keywords in PVLDB .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid WHERE t3.name = \"PVLDB\";"
  },
  {
    "instruction": "What is the total budget amount for school \"Glenn\" in all years?",
    "input": "create table \"budget\" (\"School_id\" int, \"Year\" int, \"Budgeted\" int, \"total_budget_percent_budgeted\" real, \"Invested\" int, \"total_budget_percent_invested\" real, \"Budget_invested_percent\" text, primary key(\"School_id\",\"YEAR\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));",
    "output": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn'"
  },
  {
    "instruction": "Count the number of party events.",
    "input": "create table \"party_events\" (\"Event_ID\" int, \"Event_Name\" text, \"Party_ID\" int, \"Member_in_charge_ID\" int, primary key (\"Event_ID\"), foreign key (`party_id`) references `party`(`party_id`), foreign key (`member_in_charge_id`) references `member`(`member_id`));",
    "output": "SELECT count(*) FROM party_events"
  },
  {
    "instruction": "What are the schools that were either founded before 1850 or are public?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'"
  },
  {
    "instruction": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.",
    "input": "create table salary (year integer, team_id text, league_id text, player_id text, salary integer);create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);create table salary (year integer, team_id text, league_id text, player_id text, salary integer);create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'"
  },
  {
    "instruction": "Find the names of the clubs that have at least a member from the city with city code \"HOU\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"HOU\""
  },
  {
    "instruction": "What are the themes and locations of parties?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT Party_Theme, LOCATION FROM party"
  },
  {
    "instruction": "Count the number of distinct governors.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT count(DISTINCT Governor) FROM party"
  },
  {
    "instruction": "What is the id and name of the browser that is compatible with the most web accelerators?",
    "input": "create table \"browser\" (\"id\" int, \"name\" text, \"market_share\" real, primary key(\"id\"));create table \"accelerator_compatible_browser\" (\"accelerator_id\" int, \"browser_id\" int, \"compatible_since_year\" int, primary key(\"accelerator_id\", \"browser_id\"), foreign key (\"accelerator_id\") references `web_client_accelerator`(\"id\"), foreign key (\"browser_id\") references `browser`(\"id\"));",
    "output": "SELECT T1.id, T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show all company names with a movie directed in year 1999.",
    "input": "create table \"movie\" (\"movie_id\" int, \"Title\" text, \"Year\" int, \"Director\" text, \"Budget_million\" real, \"Gross_worldwide\" int, primary key(\"movie_id\"));create table \"culture_company\" (\"Company_name\" text, \"Type\" text, \"Incorporated_in\" text, \"Group_Equity_Shareholding\" real, \"book_club_id\" text, \"movie_id\" text, primary key(\"Company_name\"), foreign key (\"book_club_id\") references \"book_club\"(\"book_club_id\"), foreign key (\"movie_id\") references \"movie\"(\"movie_id\"));",
    "output": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.year = 1999"
  },
  {
    "instruction": "semantic parsing dataset",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid WHERE t4.keyphrasename = \"semantic parsing\";"
  },
  {
    "instruction": "Which parties have more than 20 hosts? Give me the host names for these parties.",
    "input": "create table \"party_host\" (\"Party_ID\" int, \"Host_ID\" int, \"Is_Main_in_Charge\" bool, primary key (\"Party_ID\",\"Host_ID\"), foreign key (\"Host_ID\") references `host`(\"Host_ID\"), foreign key (\"Party_ID\") references `party`(\"Party_ID\"));create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T3.Number_of_hosts > 20"
  },
  {
    "instruction": "What is the department name and corresponding building for the department with the greatest budget?",
    "input": "create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));",
    "output": "SELECT dept_name, building FROM department ORDER BY budget DESC LIMIT 1"
  },
  {
    "instruction": "What are the numbers of wines for different grapes?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT count(*), Grape FROM WINE GROUP BY Grape"
  },
  {
    "instruction": "Find the title of courses that have two prerequisites?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));",
    "output": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count(*) = 2"
  },
  {
    "instruction": "What are the names of products with price at most 200?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT name FROM products WHERE price <= 200"
  },
  {
    "instruction": "List the titles of books that are not published.",
    "input": "create table \"book\" (\"Book_ID\" int, \"Title\" text, \"Issues\" real, \"Writer\" text, primary key (\"Book_ID\"));create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));",
    "output": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)"
  },
  {
    "instruction": "Which papers have the substring \"Database\" in their titles? Show the titles of the papers.",
    "input": "create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
  },
  {
    "instruction": "Show ids for all students who have advisor 1121.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT StuID FROM Student WHERE Advisor = 1121"
  },
  {
    "instruction": "List email address and birthday of customer whose first name as Carole.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT email_address, date_of_birth FROM Customers WHERE first_name = \"Carole\""
  },
  {
    "instruction": "what is the largest state traversed by the rio grande river",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name = \"rio grande\" );"
  },
  {
    "instruction": "What is the description and code of the type of service that is performed the most often?",
    "input": "create table ref_service_types (service_type_code char(15) not null, parent_service_type_code char(15), service_type_description varchar(255), primary key (service_type_code), unique (service_type_code));create table services (service_id integer not null, service_type_code char(15), workshop_group_id integer not null, product_description varchar(255), product_name varchar(255), product_price decimal(20, 4), other_product_service_details varchar(255), primary key (service_id), unique (service_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id), foreign key (service_type_code) references ref_service_types (service_type_code));",
    "output": "SELECT T1.Service_Type_Description, T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many body builders are there?",
    "input": "create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));",
    "output": "SELECT count(*) FROM body_builder"
  },
  {
    "instruction": "What are the first name, last name and id of the player with the most all star game experiences? Also list the count.",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table all_star (player_id text, year integer, game_num integer, game_id text, team_id text, league_id text, gp numeric, starting_pos numeric, foreign key (player_id) references player(player_id));",
    "output": "SELECT T1.name_first, T1.name_last, T1.player_id, count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "instruction": "Show total points of all players.",
    "input": "create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT sum(Points) FROM player"
  },
  {
    "instruction": "where can we find a restaurant in alameda ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"alameda\";"
  },
  {
    "instruction": "how many italian restaurants are in the yolo county ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.county = \"yolo county\" AND t1.food_type = \"italian\";"
  },
  {
    "instruction": "How many students received a yes from tryouts?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT count(*) FROM tryout WHERE decision = 'yes'"
  },
  {
    "instruction": "what is the largest state that borders california",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" );"
  },
  {
    "instruction": "What are the ids of the faculty members who do not advise any student.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student"
  },
  {
    "instruction": "Find the file format that is used by the most files.",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);",
    "output": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1"
  },
  {
    "instruction": "Show all document type codes, document type names, document type descriptions.",
    "input": "create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));",
    "output": "SELECT document_type_code, document_type_name, document_type_description FROM Ref_document_types"
  },
  {
    "instruction": "Which document has the most draft copies? List its document id and number of draft copies.",
    "input": "create table draft_copies (document_id integer not null, draft_number integer not null, copy_number integer not null, primary key (document_id, draft_number, copy_number), foreign key (document_id, draft_number) references document_drafts (document_id, draft_number));",
    "output": "SELECT document_id, count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;"
  },
  {
    "instruction": "Count the number of different film ratings.",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));",
    "output": "SELECT count(DISTINCT rating) FROM film"
  },
  {
    "instruction": "what is the highest point of the state with the smallest population density",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state ) );"
  },
  {
    "instruction": "Order denominations in descending order of the count of schools with the denomination. Return each denomination with the count of schools.",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT Denomination, COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC"
  },
  {
    "instruction": "display the first and last name, department, city, and state province for each employee.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));create table `locations` (`location_id` decimal(4, 0) not null default '0', `street_address` varchar(40) default null, `postal_code` varchar(12) default null, `city` varchar(30) not null, `state_province` varchar(25) default null, `country_id` varchar(2) default null, primary key (`location_id`), foreign key (`country_id`) references countries(`country_id`));",
    "output": "SELECT T1.first_name, T1.last_name, T2.department_name, T3.city, T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id"
  },
  {
    "instruction": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
    "input": "create table \"airport\" (\"id\" int, \"City\" text, \"Country\" text, \"IATA\" text, \"ICAO\" text, \"name\" text, primary key(\"id\"));create table \"flight\" (\"id\" int, \"Vehicle_Flight_number\" text, \"Date\" text, \"Pilot\" text, \"Velocity\" real, \"Altitude\" real, \"airport_id\" int, \"company_id\" int, primary key (\"id\"), foreign key (\"airport_id\") references `airport`(\"id\"), foreign key (\"company_id\") references `operate_company`(\"id\"));",
    "output": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T1.country = 'United States' OR T1.name = 'Billund Airport'"
  },
  {
    "instruction": "How many tracks do we have?",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT count(*) FROM track"
  },
  {
    "instruction": "Find the first name, last name and id for the top three players won the most player awards.",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table player_award (player_id text, award_id text, year integer, league_id text, tie text, notes text, foreign key (player_id) references player(player_id));",
    "output": "SELECT T1.name_first, T1.name_last, T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;"
  },
  {
    "instruction": "What are the names for the 3 branches that have the most memberships?",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3"
  },
  {
    "instruction": "Which physicians are in charge of more than one patient? Give me their names.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));",
    "output": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count(*) > 1"
  },
  {
    "instruction": "Select the names of manufacturer whose products have an average price higher than or equal to $150.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT avg(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150"
  },
  {
    "instruction": "What are the names and damage in millions for storms, ordered by their max speeds descending?",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT name, damage_millions_USD FROM storm ORDER BY max_speed DESC"
  },
  {
    "instruction": "How many distinct artists have volumes?",
    "input": "create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT COUNT(DISTINCT Artist_ID) FROM volume"
  },
  {
    "instruction": "What is the name of the product with the color description 'yellow'?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description = 'yellow'"
  },
  {
    "instruction": "How many bookings do we have?",
    "input": "create table bookings (booking_id integer not null , customer_id integer not null, workshop_group_id varchar(100) not null, status_code char(15) not null, store_id integer not null, order_date datetime not null, planned_delivery_date datetime not null, actual_delivery_date datetime not null, other_order_details varchar(255), primary key (booking_id), unique (booking_id), foreign key (customer_id) references clients (client_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id));",
    "output": "SELECT count(*) FROM BOOKINGS"
  },
  {
    "instruction": "Find the number of scientists involved for the projects that require more than 300 hours.",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));",
    "output": "SELECT count(*), T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name"
  },
  {
    "instruction": "What is the name of the movie that has been reviewed the most?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the average age for each dorm and what are the names of each dorm?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT avg(T1.age), T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name"
  },
  {
    "instruction": "what is the longest river that flows through a state that borders tennessee",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name = \"tennessee\" );"
  },
  {
    "instruction": "How many students are there for each major?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT major, count(*) FROM Student GROUP BY major"
  },
  {
    "instruction": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
    "input": "create table \"Institution\" (\"Institution_id\" text, \"Institution\" text, \"Location\" text, \"Founded\" real, \"Type\" text, \"Enrollment\" int, \"Team\" text, \"Primary_Conference\" text, \"building_id\" text, primary key(\"Institution_id\"), foreign key (\"building_id\") references \"building\"(\"building_id\"));create table \"protein\" (\"common_name\" text, \"protein_name\" text, \"divergence_from_human_lineage\" real, \"accession_number\" text, \"sequence_length\" real, \"sequence_identity_to_human_protein\" text, \"Institution_id\" text, primary key(\"common_name\"), foreign key(\"Institution_id\") references \"Institution\"(\"Institution_id\"));",
    "output": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id WHERE T1.founded > 1880 OR T1.type = 'Private'"
  },
  {
    "instruction": "What is the starting year of the oldest technicians?",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1"
  },
  {
    "instruction": "What are the codes of card types that have 5 or more cards?",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*) >= 5"
  },
  {
    "instruction": "Find the names of all physicians and their primary affiliated departments' names.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table affiliated_with (physician integer not null, department integer not null, primaryaffiliation boolean not null, constraint fk_affiliated_with_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_affiliated_with_department_departmentid foreign key(department) references department(departmentid), primary key(physician, department));create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));",
    "output": "SELECT T1.name, T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1"
  },
  {
    "instruction": "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table reviewer(rid int primary key, name text);",
    "output": "SELECT T3.name, T2.title, T1.stars, T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID ORDER BY T3.name, T2.title, T1.stars"
  },
  {
    "instruction": "What are the names of all the scientists in alphabetical order?",
    "input": "create table scientists (ssn int, name char(30) not null, primary key (ssn));",
    "output": "SELECT name FROM scientists ORDER BY name"
  },
  {
    "instruction": "what state has the largest population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state );"
  },
  {
    "instruction": "what are the major cities in the largest state",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT city_name FROM city WHERE population > 150000 AND state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );"
  },
  {
    "instruction": "How many distinct types of accounts are there?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT count(DISTINCT acc_type) FROM customer"
  },
  {
    "instruction": "Show names of ships involved in a mission launched after 1928.",
    "input": "create table \"mission\" (\"Mission_ID\" int, \"Ship_ID\" int, \"Code\" text, \"Launched_Year\" int, \"Location\" text, \"Speed_knots\" int, \"Fate\" text, primary key (\"Mission_ID\"), foreign key (\"Ship_ID\") references `ship`(\"Ship_ID\"));create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928"
  },
  {
    "instruction": "How many papers does Christopher D. Manning have",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Christopher D. Manning\";"
  },
  {
    "instruction": "What are the names of customers with checking balances lower than the average checking balance?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT avg(balance) FROM checking)"
  },
  {
    "instruction": "Find the id of the item whose title is \"orange\".",
    "input": "create table `item` (`i_id` integer not null , `title` varchar(20) default null , primary key (`i_id`));",
    "output": "SELECT i_id FROM item WHERE title = \"orange\""
  },
  {
    "instruction": "Show all product names and the number of customers having an order on each product.",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));create table `products` (`product_id` integer primary key, `parent_product_id` integer, `production_type_code` varchar(15) not null, `unit_price` decimal(19, 4), `product_name` varchar(80), `product_color` varchar(20), `product_size` varchar(20), foreign key (`production_type_code`) references `product_categories`(`production_type_code`));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T2.product_name, count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name"
  },
  {
    "instruction": "Find all the cities that have 2 to 4 parks.",
    "input": "create table park (park_id text, park_name text, park_alias text, city text, state text, country text);",
    "output": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;"
  },
  {
    "instruction": "Find the saving balance of the account with the highest checking balance.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1"
  },
  {
    "instruction": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table affiliated_with (physician integer not null, department integer not null, primaryaffiliation boolean not null, constraint fk_affiliated_with_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_affiliated_with_department_departmentid foreign key(department) references department(departmentid), primary key(physician, department));create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));",
    "output": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'"
  },
  {
    "instruction": "What are the names of instructors who earn more than at least one instructor from the Biology department?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name FROM instructor WHERE salary > (SELECT min(salary) FROM instructor WHERE dept_name = 'Biology')"
  },
  {
    "instruction": "How many problems are there for product voluptatem?",
    "input": "create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\""
  },
  {
    "instruction": "What are the last names for all scholarship students?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y'"
  },
  {
    "instruction": "How many trips did not end in San Francisco?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != \"San Francisco\""
  },
  {
    "instruction": "What are the lot details of lots associated with transactions with share count smaller than 50?",
    "input": "create table `lots` (`lot_id` integer primary key, `investor_id` integer not null, `lot_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`));create table `transactions_lots` (`transaction_id` integer not null, `lot_id` integer not null, foreign key (`lot_id`) references `lots`(`lot_id`), foreign key (`transaction_id`) references `transactions`(`transaction_id`));create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count < 50"
  },
  {
    "instruction": "list papers that used Question Answering",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "What is the minimum, maximum, and average market value for every company?",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT min(market_value), max(market_value), avg(market_value) FROM company"
  },
  {
    "instruction": "What are the unique labels for the albums?",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);",
    "output": "SELECT count(DISTINCT label) FROM albums"
  },
  {
    "instruction": "Return the apartment number and the number of rooms for each apartment.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_number, room_count FROM Apartments"
  },
  {
    "instruction": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\".",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));create table \"match\" (\"Match_ID\" int, \"Date\" text, \"Venue\" text, \"Score\" text, \"Result\" text, \"Competition\" text, primary key (\"Match_ID\"));",
    "output": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\""
  },
  {
    "instruction": "What is all the information about the Marketing department?",
    "input": "create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));",
    "output": "SELECT * FROM departments WHERE department_name = 'Marketing'"
  },
  {
    "instruction": "Find the distinct unit prices for tracks.",
    "input": "create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT distinct(UnitPrice) FROM TRACK"
  },
  {
    "instruction": "What are the distinct address type codes for all customer addresses?",
    "input": "create table `customer_addresses` (`customer_id` integer not null, `premise_id` integer not null, `date_address_from` datetime not null, `address_type_code` varchar(15) not null, `date_address_to` datetime, foreign key (`premise_id`) references `premises`(`premise_id`) foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT address_type_code FROM customer_addresses"
  },
  {
    "instruction": "When did the first staff member start working?",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1"
  },
  {
    "instruction": "what rivers are there in illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = \"illinois\";"
  },
  {
    "instruction": "How many female students live in Smith Hall?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' AND T1.sex = 'F'"
  },
  {
    "instruction": "What is the average rating for each movie that has never been reviewed by Brittany Harris?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table reviewer(rid int primary key, name text);",
    "output": "SELECT mID, avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = \"Brittany Harris\") GROUP BY mID"
  },
  {
    "instruction": "Find the names of all races held in 2017.",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT name FROM races WHERE YEAR = 2017"
  },
  {
    "instruction": "What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT customer_status_code, cell_mobile_phone_number, email_address FROM Customers WHERE first_name = \"Marina\" OR last_name = \"Kohler\""
  },
  {
    "instruction": "Find the name of the person who has friends with age above 40 and under age 30?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)"
  },
  {
    "instruction": "How many papers used ImageNet dataset ?",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";"
  },
  {
    "instruction": "What are the names of actors, ordered alphabetically?",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));",
    "output": "SELECT Name FROM actor ORDER BY Name ASC"
  },
  {
    "instruction": "Show the average price range of hotels that have 5 star ratings and allow pets.",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code = \"5\" AND pets_allowed_yn = 1"
  },
  {
    "instruction": "Find the details of all the markets that are accessible by walk or bus.",
    "input": "create table street_markets (market_id integer not null, market_details varchar(255), primary key (market_id), foreign key (market_id) references tourist_attractions (tourist_attraction_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\" OR T2.How_to_Get_There = \"bus\""
  },
  {
    "instruction": "Who are the lieutenant governor and comptroller from the democratic party?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT Lieutenant_Governor, Comptroller FROM party WHERE Party = \"Democratic\""
  },
  {
    "instruction": "what is the largest state bordering california",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" );"
  },
  {
    "instruction": "Show all product names and the total quantity ordered for each product name.",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));create table `products` (`product_id` integer primary key, `parent_product_id` integer, `production_type_code` varchar(15) not null, `unit_price` decimal(19, 4), `product_name` varchar(80), `product_color` varchar(20), `product_size` varchar(20), foreign key (`production_type_code`) references `product_categories`(`production_type_code`));",
    "output": "SELECT T2.product_name, sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name"
  },
  {
    "instruction": "Find the highest rank of all reviews.",
    "input": "create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT min(rank) FROM review"
  },
  {
    "instruction": "what are the states",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state;"
  },
  {
    "instruction": "Return the characters for actors, ordered by age descending.",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));",
    "output": "SELECT Character FROM actor ORDER BY age DESC"
  },
  {
    "instruction": "What is the number of aircraft?",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));",
    "output": "SELECT count(*) FROM aircraft"
  },
  {
    "instruction": "What is the name of the customer who has the largest number of orders?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the countries that have never participated in any friendly-type competitions?",
    "input": "create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));",
    "output": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type = 'Friendly'"
  },
  {
    "instruction": "what are the genres of movies directed by \" Asghar Farhadi \"",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"classification\" (\"id\" int, \"msid\" int, \"gid\" int, primary key(\"id\"), foreign key(\"gid\") references `genre`(\"gid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"genre\" (\"gid\" int, \"genre\" text, primary key(\"gid\"));",
    "output": "SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN classification AS t1 ON t4.mid = t1.msid JOIN genre AS t3 ON t3.gid = t1.gid WHERE t5.name = \"Asghar Farhadi\";"
  },
  {
    "instruction": "List the customer event id and the corresponding move in date and property id.",
    "input": "create table customer_events (customer_event_id integer not null, customer_id integer, date_moved_in datetime, property_id integer, resident_id integer, thing_id integer not null, primary key (customer_event_id), foreign key (thing_id) references things (thing_id), foreign key (customer_id) references customers (customer_id), foreign key (resident_id, property_id, date_moved_in) references residents (resident_id, property_id, date_moved_in));",
    "output": "SELECT customer_event_id, date_moved_in, property_id FROM customer_events"
  },
  {
    "instruction": "What is the average age for each city and what are those cities?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(age), city_code FROM student GROUP BY city_code"
  },
  {
    "instruction": "Who published the most papers in 2007 at CVPR ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t2.paperid ), t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2007 AND t3.venuename = \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;"
  },
  {
    "instruction": "What is the most popular first name of the actors?",
    "input": "create table actor (actor_id smallint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, last_update timestamp not null default current_timestamp, primary key (actor_id));",
    "output": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the total number of counties.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT count(*) FROM county"
  },
  {
    "instruction": "Find the enrollment date for all the tests that have \"Pass\" result.",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));create table `student_tests_taken` (`registration_id` integer not null, `date_test_taken` datetime not null, `test_result` varchar(255), foreign key (`registration_id`) references `student_course_enrolment`(`registration_id`));",
    "output": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\""
  },
  {
    "instruction": "List the id of students who never attends courses?",
    "input": "create table students (student_id integer not null, student_details varchar(255), primary key (student_id), foreign key (student_id) references people (person_id));create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
  },
  {
    "instruction": "What are the major roles in the movie \" Daddy Long Legs \"",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t3.title = \"Daddy Long Legs\";"
  },
  {
    "instruction": "What are the low and high estimates of film markets?",
    "input": "create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));",
    "output": "SELECT Low_Estimate, High_Estimate FROM film_market_estimation"
  },
  {
    "instruction": "List all document ids and receipt dates of documents.",
    "input": "create table documents (document_id integer not null, document_status_code char(15) not null, document_type_code char(15) not null, shipping_agent_code char(15), receipt_date datetime, receipt_number varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (document_status_code) references ref_document_status (document_status_code), foreign key (shipping_agent_code) references ref_shipping_agents (shipping_agent_code));",
    "output": "SELECT document_id, receipt_date FROM Documents;"
  },
  {
    "instruction": "What is the first name and GPA of every student that has a GPA lower than average?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT stu_fname, stu_gpa FROM student WHERE stu_gpa < (SELECT avg(stu_gpa) FROM student)"
  },
  {
    "instruction": "Count the number of authors.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));",
    "output": "SELECT count(*) FROM authors"
  },
  {
    "instruction": "How many aircrafts are there?",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));",
    "output": "SELECT count(*) FROM aircraft"
  },
  {
    "instruction": "What are the names of people in ascending order of height?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Home Town\" text, primary key (\"People_ID\"));",
    "output": "SELECT Name FROM People ORDER BY Height ASC"
  },
  {
    "instruction": "What is the total amount of grant money given to each organization and what is its id?",
    "input": "create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT sum(grant_amount), organisation_id FROM Grants GROUP BY organisation_id"
  },
  {
    "instruction": "What are the census rankings of cities that do not have the status \"Village\"?",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT Census_Ranking FROM city WHERE Status != \"Village\""
  },
  {
    "instruction": "What are the names of all the stores in the largest district by population?",
    "input": "create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));create table \"store_district\" (\"Store_ID\" int, \"District_ID\" int, primary key (\"Store_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`district_id`) references `district`(`district_id`));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)"
  },
  {
    "instruction": "papers about character recognition from before 2010",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"character recognition\" AND t3.year < 2010;"
  },
  {
    "instruction": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
    "input": "create table documents (document_id integer not null, document_status_code char(15) not null, document_type_code char(15) not null, shipping_agent_code char(15), receipt_date datetime, receipt_number varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (document_status_code) references ref_document_status (document_status_code), foreign key (shipping_agent_code) references ref_shipping_agents (shipping_agent_code));create table documents (document_id integer not null, document_status_code char(15) not null, document_type_code char(15) not null, shipping_agent_code char(15), receipt_date datetime, receipt_number varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (document_status_code) references ref_document_status (document_status_code), foreign key (shipping_agent_code) references ref_shipping_agents (shipping_agent_code));create table ref_shipping_agents (shipping_agent_code char(15) not null, shipping_agent_name varchar(255) not null, shipping_agent_description varchar(255) not null, primary key (shipping_agent_code));",
    "output": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
  },
  {
    "instruction": "How many invoices do we have?",
    "input": "create table `invoices` (`invoice_number` integer primary key, `order_id` integer not null, `invoice_date` datetime, foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT count(*) FROM Invoices"
  },
  {
    "instruction": "What is the id and last name of the driver with the longest laptime?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"lapTimes\" (\"raceId\" integer, \"driverId\" integer, \"lap\" integer, \"position\" integer, \"time\" text, \"milliseconds\" integer, primary key(\"raceId\", \"driverId\", \"lap\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1"
  },
  {
    "instruction": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
    "input": "create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));",
    "output": "SELECT name FROM company WHERE Sales_in_Billion > 200 ORDER BY Sales_in_Billion, Profits_in_Billion DESC"
  },
  {
    "instruction": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?",
    "input": "create table \"Web_client_accelerator\" (\"id\" int, \"name\" text, \"Operating_system\" text, \"Client\" text, \"Connection\" text, primary key(\"id\"));create table \"accelerator_compatible_browser\" (\"accelerator_id\" int, \"browser_id\" int, \"compatible_since_year\" int, primary key(\"accelerator_id\", \"browser_id\"), foreign key (\"accelerator_id\") references `web_client_accelerator`(\"id\"), foreign key (\"browser_id\") references `browser`(\"id\"));create table \"browser\" (\"id\" int, \"name\" text, \"market_share\" real, primary key(\"id\"));",
    "output": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15;"
  },
  {
    "instruction": "What is the last name and office of the professor from the history department?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T1.emp_lname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'"
  },
  {
    "instruction": "Who are all the directors?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Rank_in_series\" int, \"Number_in_season\" int, \"Title\" text, \"Directed_by\" text, \"Original_air_date\" text, \"Production_code\" text, primary key (\"Film_ID\"));",
    "output": "SELECT DISTINCT directed_by FROM film"
  },
  {
    "instruction": "What is the type of the document named \"David CV\"?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_type_code FROM documents WHERE document_name = \"David CV\""
  },
  {
    "instruction": "Count the number of songs.",
    "input": "create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(*) FROM Songs"
  },
  {
    "instruction": "Find the name, age, and job title of persons who are friends with Alice for the longest years.",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T1.name, T1.age, T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice' AND T2.year = (SELECT max(YEAR) FROM PersonFriend WHERE friend = 'Alice')"
  },
  {
    "instruction": "Find the first names of all customers that live in Brazil and have an invoice.",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `invoice` (`invoiceid` integer not null , `customerid` integer not null , `invoicedate` datetime not null , `billingaddress` varchar(70) default null , `billingcity` varchar(40) default null , `billingstate` varchar(40) default null , `billingcountry` varchar(40) default null , `billingpostalcode` varchar(10) default null , `total` decimal(10, 2) not null , primary key (`invoiceid`) , constraint `fk_invoicecustomerid` foreign key (`customerid`) references `customer` (`customerid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Brazil\""
  },
  {
    "instruction": "Who writes a lot of papers in Machine Learning ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid WHERE t4.keyphrasename = \"Machine Learning\" GROUP BY t1.authorname ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;"
  },
  {
    "instruction": "List the ids, names and market shares of all browsers.",
    "input": "create table \"browser\" (\"id\" int, \"name\" text, \"market_share\" real, primary key(\"id\"));",
    "output": "SELECT id, name, market_share FROM browser"
  },
  {
    "instruction": "Show the name and description of the role played by the employee named Ebba.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));create table roles (role_code char(15) not null, role_name varchar(255), role_description varchar(255), primary key (role_code));",
    "output": "SELECT T2.role_name, T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T1.employee_name = \"Ebba\""
  },
  {
    "instruction": "List all the services in the alphabetical order.",
    "input": "create table services (service_id integer not null, service_name varchar(40), primary key (service_id));",
    "output": "SELECT service_name FROM services ORDER BY service_name"
  },
  {
    "instruction": "Report all majors that have less than 3 students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*) < 3"
  },
  {
    "instruction": "Show the name and population of the country that has the highest roller coaster.",
    "input": "create table \"country\" (\"Country_ID\" int, \"Name\" text, \"Population\" int, \"Area\" int, \"Languages\" text, primary key (\"Country_ID\"));create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT T1.Name, T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID ORDER BY T2.Height DESC LIMIT 1"
  },
  {
    "instruction": "return me the author who has the most number of papers containing keyword \" Relational Database \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t1.keyword = \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;"
  },
  {
    "instruction": "What is the total amount of grants given by each organisations? Also list the organisation id.",
    "input": "create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT sum(grant_amount), organisation_id FROM Grants GROUP BY organisation_id"
  },
  {
    "instruction": "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?",
    "input": "create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table scientists (ssn int, name char(30) not null, primary key (ssn));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table scientists (ssn int, name char(30) not null, primary key (ssn));",
    "output": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax'"
  },
  {
    "instruction": "Give me all the distinct location codes for documents.",
    "input": "create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT DISTINCT location_code FROM Document_locations"
  },
  {
    "instruction": "What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?",
    "input": "create table staff (staff_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, address_id smallint unsigned not null, picture blob default null, email varchar(50) default null, store_id tinyint unsigned not null, active boolean not null default true, username varchar(16) not null, password varchar(40) default null, last_update timestamp not null default current_timestamp, primary key (staff_id), --FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (address_id) REFERENCES address (address_id));create table rental (rental_id int not null, rental_date datetime not null, inventory_id mediumint unsigned not null, customer_id smallint unsigned not null, return_date datetime default null, staff_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (rental_id), foreign key (staff_id) references staff (staff_id), foreign key (inventory_id) references inventory (inventory_id), foreign key (customer_id) references customer (customer_id));create table customer (customer_id smallint unsigned not null, store_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, email varchar(50) default null, address_id smallint unsigned not null, active boolean not null default true, create_date datetime not null, last_update timestamp default current_timestamp, primary key (customer_id), foreign key (address_id) references address (address_id), foreign key (store_id) references store (store_id));",
    "output": "SELECT DISTINCT T1.first_name, T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id = T2.staff_id JOIN customer AS T3 ON T2.customer_id = T3.customer_id WHERE T3.first_name = 'APRIL' AND T3.last_name = 'BURNS'"
  },
  {
    "instruction": "Find the total number of king beds available.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT sum(beds) FROM Rooms WHERE bedtype = 'King';"
  },
  {
    "instruction": "What are the names of the different bank branches, and what are their total loan amounts?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT sum(amount), T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname"
  },
  {
    "instruction": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.",
    "input": "create table \"party_host\" (\"Party_ID\" int, \"Host_ID\" int, \"Is_Main_in_Charge\" bool, primary key (\"Party_ID\",\"Host_ID\"), foreign key (\"Host_ID\") references `host`(\"Host_ID\"), foreign key (\"Party_ID\") references `party`(\"Party_ID\"));create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT T3.Location, T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID ORDER BY T2.Age"
  },
  {
    "instruction": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));",
    "output": "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10"
  },
  {
    "instruction": "Find the maximum and minimum monthly rental for all student addresses.",
    "input": "create table `student_addresses` (`student_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `date_address_to` datetime, `monthly_rental` decimal(19, 4), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT max(monthly_rental), min(monthly_rental) FROM Student_Addresses"
  },
  {
    "instruction": "Find the names of customers who ordered both products Latte and Americano.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));create table `products` (`product_id` integer primary key, `product_details` varchar(255));create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));create table `products` (`product_id` integer primary key, `product_details` varchar(255));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Americano'"
  },
  {
    "instruction": "Count the total number of students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM student"
  },
  {
    "instruction": "Show all game names played by Linda Smith",
    "input": "create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = \"Smith\" AND T3.Fname = \"Linda\""
  },
  {
    "instruction": "What is the most recent paper of deep learning ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid, t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "List the names of pilots that do not have any record.",
    "input": "create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));create table \"pilot_record\" (\"Record_ID\" int, \"Pilot_ID\" int, \"Aircraft_ID\" int, \"Date\" text, primary key (\"Pilot_ID\", \"Aircraft_ID\", \"Date\"), foreign key (`pilot_id`) references `pilot`(`pilot_id`), foreign key (`aircraft_id`) references `aircraft`(`aircraft_id`));",
    "output": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)"
  },
  {
    "instruction": "return me the citations of \" Making database systems usable \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT citation_num FROM publication WHERE title = \"Making database systems usable\";"
  },
  {
    "instruction": "Find all the female actors from Austin",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT name FROM actor WHERE birth_city = \"Austin\" AND gender = \"female\";"
  },
  {
    "instruction": "What are the names of all the clubs ordered in descending alphabetical order?",
    "input": "create table \"club\" (\"Club_ID\" int, \"name\" text, \"Region\" text, \"Start_year\" text, primary key (\"Club_ID\"));",
    "output": "SELECT name FROM club ORDER BY name DESC"
  },
  {
    "instruction": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT classroom, grade FROM list"
  },
  {
    "instruction": "Show different locations and the number of performances at each location.",
    "input": "create table \"performance\" (\"Performance_ID\" real, \"Date\" text, \"Host\" text, \"Location\" text, \"Attendance\" int, primary key (\"Performance_ID\"));",
    "output": "SELECT LOCATION, COUNT(*) FROM performance GROUP BY LOCATION"
  },
  {
    "instruction": "return me the citations of each paper in the VLDB conference .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t2.citation_num FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = \"VLDB\";"
  },
  {
    "instruction": "Return the name of the organization which has the most contact individuals.",
    "input": "create table `organizations` (`organization_id` integer primary key, `date_formed` datetime, `organization_name` varchar(255), `uk_vat_number` varchar(20));create table `organization_contact_individuals` (`individual_id` integer not null, `organization_id` integer not null, `date_contact_from` datetime not null, `date_contact_to` datetime, primary key (`individual_id`,`organization_id`), foreign key (`organization_id`) references `organizations`(`organization_id`), foreign key (`individual_id`) references `individuals`(`individual_id`));",
    "output": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which channels are not owned by CCTV? Give me the channel names.",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));",
    "output": "SELECT name FROM channel WHERE OWNER != 'CCTV'"
  },
  {
    "instruction": "Show the order ids and the number of items in each order.",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT order_id, count(*) FROM Order_items GROUP BY order_id"
  },
  {
    "instruction": "List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents.",
    "input": "create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT T2.employee_name, T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;"
  },
  {
    "instruction": "What is the total count of enzymes?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT count(*) FROM enzyme"
  },
  {
    "instruction": "who are all the co-authors of Noah A Smith ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Noah A Smith\";"
  },
  {
    "instruction": "How many distinct courses are enrolled in by students?",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT count(course_id) FROM Student_Course_Enrolment"
  },
  {
    "instruction": "How many milliseconds long is Fast As a Shark?",
    "input": "create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";"
  },
  {
    "instruction": "What are the names of customers who do not have any policies?",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));",
    "output": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id"
  },
  {
    "instruction": "What papers were published during the conference pldi 2015 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "What is the maximum, minimum, and average amount of money outsanding for all customers?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT max(amount_outstanding), min(amount_outstanding), avg(amount_outstanding) FROM Customers;"
  },
  {
    "instruction": "Find the forename and surname of drivers whose nationality is German?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);",
    "output": "SELECT forename, surname FROM drivers WHERE nationality = \"German\""
  },
  {
    "instruction": "How many airlines does Russia has?",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);",
    "output": "SELECT count(*) FROM airlines WHERE country = 'Russia'"
  },
  {
    "instruction": "Return the id of the store with the most customers.",
    "input": "create table customer (customer_id smallint unsigned not null, store_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, email varchar(50) default null, address_id smallint unsigned not null, active boolean not null default true, create_date datetime not null, last_update timestamp default current_timestamp, primary key (customer_id), foreign key (address_id) references address (address_id), foreign key (store_id) references store (store_id));",
    "output": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the names of the buildings that have more than one company offices.",
    "input": "create table \"Office_locations\" (\"building_id\" int, \"company_id\" int, \"move_in_year\" int, primary key (\"building_id\", \"company_id\"), foreign key (\"building_id\") references \"buildings\"(\"id\"), foreign key (\"company_id\") references \"Companies\"(\"id\"));create table \"buildings\" (\"id\" int, \"name\" text, \"City\" text, \"Height\" int, \"Stories\" int, \"Status\" text, primary key(\"id\"));create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id HAVING COUNT(*) > 1"
  },
  {
    "instruction": "List the names of buildings that have no company office.",
    "input": "create table \"buildings\" (\"id\" int, \"name\" text, \"City\" text, \"Height\" int, \"Stories\" int, \"Status\" text, primary key(\"id\"));create table \"Office_locations\" (\"building_id\" int, \"company_id\" int, \"move_in_year\" int, primary key (\"building_id\", \"company_id\"), foreign key (\"building_id\") references \"buildings\"(\"id\"), foreign key (\"company_id\") references \"Companies\"(\"id\"));",
    "output": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)"
  },
  {
    "instruction": "List the physicians' employee ids together with their primary affiliation departments' ids.",
    "input": "create table affiliated_with (physician integer not null, department integer not null, primaryaffiliation boolean not null, constraint fk_affiliated_with_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_affiliated_with_department_departmentid foreign key(department) references department(departmentid), primary key(physician, department));",
    "output": "SELECT physician, department FROM affiliated_with WHERE primaryaffiliation = 1"
  },
  {
    "instruction": "How many tracks belong to rock genre?",
    "input": "create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\""
  },
  {
    "instruction": "Show all cities and corresponding number of students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT city_code, count(*) FROM Student GROUP BY city_code"
  },
  {
    "instruction": "return me the paper with more than 200 citations .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT title FROM publication WHERE citation_num > 200;"
  },
  {
    "instruction": "How many architects are female?",
    "input": "create table \"architect\" (\"id\" text, \"name\" text, \"nationality\" text, \"gender\" text, primary key(\"id\"));",
    "output": "SELECT count(*) FROM architect WHERE gender = 'female'"
  },
  {
    "instruction": "Count the number of appelations in Napa County.",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);",
    "output": "SELECT count(*) FROM APPELLATIONS WHERE County = \"Napa\""
  },
  {
    "instruction": "What are the last names of customers without invoice totals exceeding 20?",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `invoice` (`invoiceid` integer not null , `customerid` integer not null , `invoicedate` datetime not null , `billingaddress` varchar(70) default null , `billingcity` varchar(40) default null , `billingstate` varchar(40) default null , `billingcountry` varchar(40) default null , `billingpostalcode` varchar(10) default null , `total` decimal(10, 2) not null , primary key (`invoiceid`) , constraint `fk_invoicecustomerid` foreign key (`customerid`) references `customer` (`customerid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20"
  },
  {
    "instruction": "What are the state and country of all the cities that have post codes starting with 4.\\",
    "input": "create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT state_province_county, country FROM addresses WHERE zip_postcode LIKE \"4%\""
  },
  {
    "instruction": "Show order ids and the total quantity in each order.",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT order_id, sum(product_quantity) FROM Order_items GROUP BY order_id"
  },
  {
    "instruction": "What are the names of artist who have the letter 'a' in their names?",
    "input": "create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));",
    "output": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\""
  },
  {
    "instruction": "Which committees have delegates from the Democratic party?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\""
  },
  {
    "instruction": "Have Peter Mertens and Dina Barbian written a paper together ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "How many products have their color described as 'white' or have a characteristic with the name 'hot'?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"white\" OR t3.characteristic_name = \"hot\""
  },
  {
    "instruction": "Show the carriers of devices in stock at more than one shop.",
    "input": "create table \"stock\" (\"Shop_ID\" int, \"Device_ID\" int, \"Quantity\" int, primary key (\"Shop_ID\",\"Device_ID\"), foreign key (`shop_id`) references `shop`(`shop_id`), foreign key (`device_id`) references `device`(`device_id`));create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));",
    "output": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*) > 1"
  },
  {
    "instruction": "Does ali farhadi have a paper in eccv in 2016 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"ali farhadi\" AND t3.year = 2016 AND t4.venuename = \"eccv\";"
  },
  {
    "instruction": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT DISTINCT department_id FROM employees GROUP BY department_id, manager_id HAVING COUNT(employee_id) >= 4"
  },
  {
    "instruction": "What is the average, maximum, and minimum for the number of hours spent training?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT avg(HS), max(HS), min(HS) FROM Player"
  },
  {
    "instruction": "What are the names of all tryout participants who are from the largest college?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T1.cName = (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)"
  },
  {
    "instruction": "Return the name of the party with the most members.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the major that is studied by the largest number of students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which part fault requires the most number of skills to fix? List part id and name.",
    "input": "create table `parts` (`part_id` integer primary key, `part_name` varchar(255), `chargeable_yn` varchar(1), `chargeable_amount` varchar(20), `other_part_details` varchar(255));create table `part_faults` (`part_fault_id` integer primary key, `part_id` integer not null, `fault_short_name` varchar(20), `fault_description` varchar(255), `other_fault_details` varchar(255), foreign key (`part_id`) references `parts`(`part_id`));create table `skills_required_to_fix` (`part_fault_id` integer not null, `skill_id` integer not null, foreign key (`part_fault_id`) references `part_faults`(`part_fault_id`), foreign key (`skill_id`) references `skills`(`skill_id`));",
    "output": "SELECT T1.part_id, T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the names and descriptions of courses that belong to the subject named \"Computer Science\".",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `subjects` (`subject_id` integer primary key, `subject_name` varchar(120));",
    "output": "SELECT T1.course_name, T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = \"Computer Science\""
  },
  {
    "instruction": "What are all the distinct premise types?",
    "input": "create table `premises` (`premise_id` integer primary key, `premises_type` varchar(15) not null, `premise_details` varchar(255));",
    "output": "SELECT DISTINCT premises_type FROM premises"
  },
  {
    "instruction": "Show name and salary for all employees sorted by salary.",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT name, salary FROM Employee ORDER BY salary"
  },
  {
    "instruction": "How many events had participants whose details had the substring 'Dr.'",
    "input": "create table participants (participant_id integer not null, participant_type_code char(15) not null, participant_details varchar(255), primary key (participant_id));create table participants_in_events (event_id integer not null, participant_id integer not null, primary key (event_id, participant_id), foreign key (participant_id) references participants (participant_id), foreign key (event_id) references events (event_id));",
    "output": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'"
  },
  {
    "instruction": "How many medicines are offered by each trade name?",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));",
    "output": "SELECT trade_name, count(*) FROM medicine GROUP BY trade_name"
  },
  {
    "instruction": "What are the names of customers who have not taken a Mortage loan?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE T2.loan_type = 'Mortgages'"
  },
  {
    "instruction": "Find the average ram mib size of the chip models that are never used by any phone.",
    "input": "create table \"chip_model\" (\"Model_name\" text, \"Launch_year\" real, \"RAM_MiB\" real, \"ROM_MiB\" real, \"Slots\" text, \"WiFi\" text, \"Bluetooth\" text, primary key (\"Model_name\"));create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)"
  },
  {
    "instruction": "What is the list of program origins ordered alphabetically?",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));",
    "output": "SELECT origin FROM program ORDER BY origin"
  },
  {
    "instruction": "Show total hours per week and number of games played for student David Shieber.",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT sum(hoursperweek), sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = \"David\" AND T2.Lname = \"Shieber\""
  },
  {
    "instruction": "What are the departure and arrival dates of all flights from LA to Honolulu?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT departure_date, arrival_date FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\""
  },
  {
    "instruction": "What is the maximum length in meters for the bridges and what are the architects' names?",
    "input": "create table \"bridge\" (\"architect_id\" int, \"id\" int, \"name\" text, \"location\" text, \"length_meters\" real, \"length_feet\" real, primary key(\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));create table \"architect\" (\"id\" text, \"name\" text, \"nationality\" text, \"gender\" text, primary key(\"id\"));",
    "output": "SELECT max(T1.length_meters), T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id = T2.id"
  },
  {
    "instruction": "List the time of elimination of the wrestlers with largest days held.",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1"
  },
  {
    "instruction": "Find the start and end dates of detentions of teachers with last name \"Schultz\".",
    "input": "create table `detention` (`detention_id` integer primary key, `detention_type_code` varchar(10) not null, `teacher_id` integer, `datetime_detention_start` datetime, `datetime_detention_end` datetime, `detention_summary` varchar(255), `other_details` varchar(255), foreign key (`detention_type_code`) references `ref_detention_type`(`detention_type_code`), foreign key (`teacher_id`) references `teachers`(`teacher_id`));create table `teachers` (`teacher_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `gender` varchar(1), `cell_mobile_number` varchar(40), `email_address` varchar(40), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.datetime_detention_start, datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schultz\""
  },
  {
    "instruction": "papers with more than 10 citations",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid = t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid ) > 10;"
  },
  {
    "instruction": "Find the names of all the employees whose the role name is \"Editor\".",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));create table roles (role_code char(15) not null, role_name varchar(255), role_description varchar(255), primary key (role_code));",
    "output": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = \"Editor\""
  },
  {
    "instruction": "recent papers written by sanjeev arora",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphrasename, t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"sanjeev arora\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "how many ACL papers by author",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t2.paperid ), t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"ACL\" GROUP BY t1.authorid;"
  },
  {
    "instruction": "Give the full name and customer id of the customer with the fewest accounts.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "How many courses are offered by the Computer Info. Systems department?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = \"Computer Info. Systems\""
  },
  {
    "instruction": "What are the planned delivery date and actual delivery date for each booking?",
    "input": "create table bookings (booking_id integer not null , customer_id integer not null, workshop_group_id varchar(100) not null, status_code char(15) not null, store_id integer not null, order_date datetime not null, planned_delivery_date datetime not null, actual_delivery_date datetime not null, other_order_details varchar(255), primary key (booking_id), unique (booking_id), foreign key (customer_id) references clients (client_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id));",
    "output": "SELECT Planned_Delivery_Date, Actual_Delivery_Date FROM BOOKINGS"
  },
  {
    "instruction": "Return the title and inventory id of the film that is rented most often.",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));create table inventory (inventory_id mediumint unsigned not null, film_id smallint unsigned not null, store_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (inventory_id), foreign key (store_id) references store (store_id), foreign key (film_id) references film (film_id));create table rental (rental_id int not null, rental_date datetime not null, inventory_id mediumint unsigned not null, customer_id smallint unsigned not null, return_date datetime default null, staff_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (rental_id), foreign key (staff_id) references staff (staff_id), foreign key (inventory_id) references inventory (inventory_id), foreign key (customer_id) references customer (customer_id));",
    "output": "SELECT T1.title, T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List of authors acl 2016",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2016 AND t3.venuename = \"acl\";"
  },
  {
    "instruction": "How many movies did \" Quentin Tarantino \" direct before 2002 and after 2010 ?",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"made_by\" (\"id\" int, \"msid\" int, \"pid\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"pid\") references `producer`(\"pid\"));create table \"producer\" (\"pid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"pid\"));",
    "output": "SELECT COUNT ( DISTINCT t4.title ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN made_by AS t5 ON t4.mid = t5.msid JOIN producer AS t1 ON t1.pid = t5.pid WHERE t3.name = \"Quentin Tarantino\" AND t4.release_year < 2010 AND t4.release_year > 2002;"
  },
  {
    "instruction": "Find the names of all reviewers who have ratings with a NULL value for the date.",
    "input": "create table reviewer(rid int primary key, name text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE ratingDate = \"null\""
  },
  {
    "instruction": "datasets used by semantic parsing papers",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid WHERE t4.keyphrasename = \"semantic parsing\";"
  },
  {
    "instruction": "papers on Parsing appeared at acl in 2012",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"Parsing\" AND t3.year = 2012 AND t4.venuename = \"acl\";"
  },
  {
    "instruction": "What are the title and issues of the books?",
    "input": "create table \"book\" (\"Book_ID\" int, \"Title\" text, \"Issues\" real, \"Writer\" text, primary key (\"Book_ID\"));",
    "output": "SELECT Title, Issues FROM book"
  },
  {
    "instruction": "Give me the first name and last name for all the female members of the club \"Bootup Baltimore\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.sex = \"F\""
  },
  {
    "instruction": "How many employees have a first name of Ludie?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";"
  },
  {
    "instruction": "Find the titles of all the papers written by \"Jeremy Gibbons\"",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Jeremy\" AND t1.lname = \"Gibbons\""
  },
  {
    "instruction": "Return the highest acc percent across all basketball matches.",
    "input": "create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));",
    "output": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1"
  },
  {
    "instruction": "What are the titles of the books whose writer is not \"Elaine Lee\"?",
    "input": "create table \"book\" (\"Book_ID\" int, \"Title\" text, \"Issues\" real, \"Writer\" text, primary key (\"Book_ID\"));",
    "output": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\""
  },
  {
    "instruction": "Show the ids of the investors who have at least two transactions.",
    "input": "create table `investors` (`investor_id` integer primary key, `investor_details` varchar(255));create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have?",
    "input": "create table apartment_buildings (building_id integer not null, building_short_name char(15), building_full_name varchar(80), building_description varchar(255), building_address varchar(255), building_manager varchar(50), building_phone varchar(80), primary key (building_id), unique (building_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT T2.apt_type_code, T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\""
  },
  {
    "instruction": "How many authors published at sigcse in 2010 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t2.paperid ) FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2010 AND t3.venuename = \"sigcse\";"
  },
  {
    "instruction": "List all role codes, role names, and role descriptions.",
    "input": "create table roles (role_code char(15) not null, role_name varchar(255), role_description varchar(255), primary key (role_code));",
    "output": "SELECT role_code, role_name, role_description FROM ROLES"
  },
  {
    "instruction": "What is the id of the reviewer whose name includes the word \"Mike\"?",
    "input": "create table reviewer(rid int primary key, name text);",
    "output": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\""
  },
  {
    "instruction": "Please show the nominee who has been nominated the greatest number of times.",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find all types of store and number of them.",
    "input": "create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));",
    "output": "SELECT TYPE, count(*) FROM store GROUP BY TYPE"
  },
  {
    "instruction": "What is the total number of customers who use banks in New York City?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT sum(no_of_customers) FROM bank WHERE city = 'New York City'"
  },
  {
    "instruction": "springfield is in what state",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT T1.name, T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available) > 14 UNION SELECT name, id FROM station WHERE installation_date LIKE \"12/%\""
  },
  {
    "instruction": "What are the names of races held between 2009 and 2011?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011"
  },
  {
    "instruction": "how many schools exist in total?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT school_code) FROM department"
  },
  {
    "instruction": "What is the total number of people who has no friend living in the city of Austin.",
    "input": "create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city = 'Austin')"
  },
  {
    "instruction": "Count the number of documents with the type code BK that correspond to each product id.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT count(*), project_id FROM Documents WHERE document_type_code = \"BK\" GROUP BY project_id"
  },
  {
    "instruction": "What are the first and last names of all students who are not living in the city HKG and order the results by age?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT fname, lname FROM student WHERE city_code != 'HKG' ORDER BY age"
  },
  {
    "instruction": "Find the titles of all movies not reviewed by Chris Jackson.",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table reviewer(rid int primary key, name text);",
    "output": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'"
  },
  {
    "instruction": "How many students enrolled in class ACCT-211?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));",
    "output": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'"
  },
  {
    "instruction": "Who is the youngest male?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT name FROM Person WHERE gender = 'male' AND age = (SELECT min(age) FROM person WHERE gender = 'male' )"
  },
  {
    "instruction": "What is the first name and the last name of the customer who made the earliest rental?",
    "input": "create table customer (customer_id smallint unsigned not null, store_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, email varchar(50) default null, address_id smallint unsigned not null, active boolean not null default true, create_date datetime not null, last_update timestamp default current_timestamp, primary key (customer_id), foreign key (address_id) references address (address_id), foreign key (store_id) references store (store_id));create table rental (rental_id int not null, rental_date datetime not null, inventory_id mediumint unsigned not null, customer_id smallint unsigned not null, return_date datetime default null, staff_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (rental_id), foreign key (staff_id) references staff (staff_id), foreign key (inventory_id) references inventory (inventory_id), foreign key (customer_id) references customer (customer_id));",
    "output": "SELECT T1.first_name, T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1"
  },
  {
    "instruction": "What are the names of the clubs that have \"Davis Steven\" as a member?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Davis\" AND t3.lname = \"Steven\""
  },
  {
    "instruction": "Find all the distinct visit dates.",
    "input": "create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT DISTINCT Visit_Date FROM VISITS"
  },
  {
    "instruction": "What are the birth dates of employees living in Edmonton?",
    "input": "create table `employee` (`employeeid` integer not null , `lastname` varchar(20) not null , `firstname` varchar(20) not null , `title` varchar(30) default null , `reportsto` integer default null , `birthdate` datetime default null , `hiredate` datetime default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) default null , primary key (`employeeid`) , constraint `fk_employeereportsto` foreign key (`reportsto`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT BirthDate FROM EMPLOYEE WHERE City = \"Edmonton\""
  },
  {
    "instruction": "Which paper should I read about dependent types ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"dependent types\";"
  },
  {
    "instruction": "Show all church names that have hosted least two weddings.",
    "input": "create table \"church\" (\"Church_ID\" int, \"Name\" text, \"Organized_by\" text, \"Open_Date\" int, \"Continuation_of\" text, primary key (\"Church_ID\"));create table \"wedding\" (\"Church_ID\" int, \"Male_ID\" int, \"Female_ID\" int, \"Year\" int, primary key (\"Church_ID\",\"Male_ID\",\"Female_ID\"), foreign key (\"Church_ID\") references `church`(\"Church_ID\"), foreign key (\"Male_ID\") references `people`(\"People_ID\"), foreign key (\"Female_ID\") references `people`(\"People_ID\"));",
    "output": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id GROUP BY T1.church_id HAVING count(*) >= 2"
  },
  {
    "instruction": "What is all the job history info done by employees earning a salary greater than or equal to 12000?",
    "input": "create table `job_history` (`employee_id` decimal(6, 0) not null, `start_date` date not null, `end_date` date not null, `job_id` varchar(10) not null, `department_id` decimal(4, 0) default null, primary key (`employee_id`,`start_date`), foreign key (`employee_id`) references employees(`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM job_history AS T1 JOIN employees AS T2 ON T1.employee_id = T2.employee_id WHERE T2.salary >= 12000"
  },
  {
    "instruction": "What is the number of graduates in \"San Francisco State University\" in year 2004?",
    "input": "create table \"discipline_enrollments\" (\"Campus\" integer, \"Discipline\" integer, \"Year\" integer, \"Undergraduate\" integer, \"Graduate\" integer, primary key (campus, discipline), foreign key (campus) references campuses(id));create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Francisco State University\""
  },
  {
    "instruction": "who has papers at NIPS ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"NIPS\";"
  },
  {
    "instruction": "Return the countries of the mountains that have a height larger than 5000.",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT Country FROM mountain WHERE Height > 5000"
  },
  {
    "instruction": "What papers have been written by Peter Mertens and Dina Barbian ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "Which physicians are trained in procedures that are more expensive than 5000?",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table trained_in (physician integer not null, treatment integer not null, certificationdate datetime not null, certificationexpires datetime not null, constraint fk_trained_in_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_trained_in_procedures_code foreign key(treatment) references procedures(code), primary key(physician, treatment));create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000"
  },
  {
    "instruction": "What are the distinct types of the companies that have operated any flights with velocity less than 200?",
    "input": "create table \"operate_company\" (\"id\" int, \"name\" text, \"Type\" text, \"Principal_activities\" text, \"Incorporated_in\" text, \"Group_Equity_Shareholding\" real, primary key (\"id\"));create table \"flight\" (\"id\" int, \"Vehicle_Flight_number\" text, \"Date\" text, \"Pilot\" text, \"Velocity\" real, \"Altitude\" real, \"airport_id\" int, \"company_id\" int, primary key (\"id\"), foreign key (\"airport_id\") references `airport`(\"id\"), foreign key (\"company_id\") references `operate_company`(\"id\"));",
    "output": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T2.velocity < 200"
  },
  {
    "instruction": "What is the first name and last name of the student who have most number of sports?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T2.Fname, T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "When did the staff member named Janessa Sawayn join the company?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
  },
  {
    "instruction": "How many papers did michael i. jordan publish in 2016 ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"michael i. jordan\" AND t3.year = 2016;"
  },
  {
    "instruction": "What are the first names and support rep ids for employees serving 10 or more customers?",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `employee` (`employeeid` integer not null , `lastname` varchar(20) not null , `firstname` varchar(20) not null , `title` varchar(30) default null , `reportsto` integer default null , `birthdate` datetime default null , `hiredate` datetime default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) default null , primary key (`employeeid`) , constraint `fk_employeereportsto` foreign key (`reportsto`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.FirstName, T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) >= 10"
  },
  {
    "instruction": "How many documents are with document type code BK for each product id?",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT count(*), project_id FROM Documents WHERE document_type_code = \"BK\" GROUP BY project_id"
  },
  {
    "instruction": "What is the average number of bedrooms of all apartments?",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT avg(bedroom_count) FROM Apartments"
  },
  {
    "instruction": "What were the papers published at pldi 2015 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "Show all track names that have had no races.",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));",
    "output": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)"
  },
  {
    "instruction": "For each director, what is the title and score of their most poorly rated movie?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, T1.stars, T2.director, min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.director"
  },
  {
    "instruction": "What is the latitude, longitude, city of the station from which the shortest trip started?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT T1.lat, T1.long, T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1"
  },
  {
    "instruction": "Find the number of different departments in each school whose number of different departments is less than 5.",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT dept_name), school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name) < 5"
  },
  {
    "instruction": "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Matthias\" AND t1.lname = \"Blume\""
  },
  {
    "instruction": "How many institutions do not have an associated protein in our record?",
    "input": "create table \"Institution\" (\"Institution_id\" text, \"Institution\" text, \"Location\" text, \"Founded\" real, \"Type\" text, \"Enrollment\" int, \"Team\" text, \"Primary_Conference\" text, \"building_id\" text, primary key(\"Institution_id\"), foreign key (\"building_id\") references \"building\"(\"building_id\"));create table \"protein\" (\"common_name\" text, \"protein_name\" text, \"divergence_from_human_lineage\" real, \"accession_number\" text, \"sequence_length\" real, \"sequence_identity_to_human_protein\" text, \"Institution_id\" text, primary key(\"common_name\"), foreign key(\"Institution_id\") references \"Institution\"(\"Institution_id\"));",
    "output": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)"
  },
  {
    "instruction": "how many states are there in the usa",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT COUNT ( state_name ) FROM state;"
  },
  {
    "instruction": "What is the average salary for each job title?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `jobs` (`job_id` varchar(10) not null default '', `job_title` varchar(35) not null, `min_salary` decimal(6, 0) default null, `max_salary` decimal(6, 0) default null, primary key (`job_id`));",
    "output": "SELECT job_title, AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title"
  },
  {
    "instruction": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_contact_channels` (`customer_id` integer not null, `channel_code` varchar(15) not null, `active_from_date` datetime not null, `active_to_date` datetime, `contact_number` varchar(50) not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\""
  },
  {
    "instruction": "Return the average price for each product type.",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT product_type_code, avg(product_price) FROM products GROUP BY product_type_code"
  },
  {
    "instruction": "return me the number of keywords in Databases area .",
    "input": "create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));create table \"domain_keyword\" (\"did\" int, \"kid\" int, primary key (\"did\", \"kid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"), foreign key(\"did\") references \"domain\"(\"did\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.keyword ) FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did = t2.did JOIN keyword AS t1 ON t1.kid = t2.kid WHERE t3.name = \"Databases\";"
  },
  {
    "instruction": "Find the number of students in each major.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*), major FROM student GROUP BY major"
  },
  {
    "instruction": "return me the number of papers on PVLDB .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = \"PVLDB\";"
  },
  {
    "instruction": "What is the nationality of the actor \" Christoph Waltz \" ?",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT nationality FROM actor WHERE name = \"Christoph Waltz\";"
  },
  {
    "instruction": "What are names and savings balances of the three accounts with the highest savings balances?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name, T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T2.balance DESC LIMIT 3"
  },
  {
    "instruction": "Show the countries that have managers of age above 50 or below 46.",
    "input": "create table \"manager\" (\"Manager_ID\" int, \"Name\" text, \"Country\" text, \"Working_year_starts\" text, \"Age\" int, \"Level\" int, primary key (\"Manager_ID\"));",
    "output": "SELECT Country FROM manager WHERE Age > 50 OR Age < 46"
  },
  {
    "instruction": "What type of game is Call of Destiny?",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT gtype FROM Video_games WHERE gname = \"Call of Destiny\""
  },
  {
    "instruction": "what is the least populous state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE population = ( SELECT MIN ( population ) FROM state );"
  },
  {
    "instruction": "What are the descriptions of the service types with product price above 100?",
    "input": "create table ref_service_types (service_type_code char(15) not null, parent_service_type_code char(15), service_type_description varchar(255), primary key (service_type_code), unique (service_type_code));create table services (service_id integer not null, service_type_code char(15), workshop_group_id integer not null, product_description varchar(255), product_name varchar(255), product_price decimal(20, 4), other_product_service_details varchar(255), primary key (service_id), unique (service_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id), foreign key (service_type_code) references ref_service_types (service_type_code));",
    "output": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100"
  },
  {
    "instruction": "Find the name of the instructors who taught C Programming course before.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'"
  },
  {
    "instruction": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T1.Allergy, T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" ORDER BY T1.Allergy"
  },
  {
    "instruction": "What are the different types of forms?",
    "input": "create table `forms` (`form_id` integer primary key, `form_type_code` varchar(15) not null, `service_id` integer, `form_number` varchar(50), `form_name` varchar(80), `form_description` varchar(255), foreign key (`service_id`) references `services`(`service_id`));",
    "output": "SELECT DISTINCT form_type_code FROM forms"
  },
  {
    "instruction": "Find the faculty rank that has the least members.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "What are the details of all sales and purchases?",
    "input": "create table `sales` (`sales_transaction_id` integer primary key, `sales_details` varchar(255), foreign key (`sales_transaction_id`) references `transactions`(`transaction_id`));create table `purchases` (`purchase_transaction_id` integer not null, `purchase_details` varchar(255) not null, foreign key (`purchase_transaction_id`) references `transactions`(`transaction_id`));",
    "output": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases"
  },
  {
    "instruction": "Find the names of all reviewers who rated Gone with the Wind.",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table reviewer(rid int primary key, name text);",
    "output": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind'"
  },
  {
    "instruction": "What are the names and ids of products costing between 600 and 700?",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT product_name, product_id FROM products WHERE product_price BETWEEN 600 AND 700"
  },
  {
    "instruction": "Find the number of albums.",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*) FROM ALBUM"
  },
  {
    "instruction": "What is all the information on the airport with the largest number of international passengers?",
    "input": "create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1"
  },
  {
    "instruction": "Who acts as \" Alan Turing \" in the movie \" The Imitation Game \" ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t2.role = \"Alan Turing\" AND t3.title = \"The Imitation Game\";"
  },
  {
    "instruction": "Find the name of airports whose altitude is between -50 and 50.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50"
  },
  {
    "instruction": "what has Liwen Xiong done in the past year",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Liwen Xiong\" AND t3.year = 2015;"
  },
  {
    "instruction": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT document_type_code, document_name, document_description FROM Documents WHERE document_name = 'Noel CV' OR document_name = 'King Book'"
  },
  {
    "instruction": "How many parties are there?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT count(*) FROM party"
  },
  {
    "instruction": "return me the authors who have papers in the VLDB conference .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = \"VLDB\";"
  },
  {
    "instruction": "From the trip record, find the number of unique bikes.",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT count(DISTINCT bike_id) FROM trip"
  },
  {
    "instruction": "Return the order ids and details for orderes with two or more invoices.",
    "input": "create table `invoices` (`invoice_number` integer primary key, `order_id` integer not null, `invoice_date` datetime, foreign key (`order_id`) references `orders`(`order_id`));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T2.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count(*) > 2"
  },
  {
    "instruction": "What are the ids of the top three products that were purchased in the largest amount?",
    "input": "create table `product_suppliers` (`product_id` integer not null, `supplier_id` integer not null, `date_supplied_from` datetime not null, `date_supplied_to` datetime, `total_amount_purchased` varchar(80), `total_value_purchased` decimal(19, 4), primary key (`product_id`, `supplier_id`), foreign key (`supplier_id`) references `suppliers`(`supplier_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3"
  },
  {
    "instruction": "What is the number of movies directed by \" Woody Allen \" per year ?",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t3.title ), t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Woody Allen\" GROUP BY t3.release_year;"
  },
  {
    "instruction": "what are the rivers in the state of illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = \"illinois\";"
  },
  {
    "instruction": "Show the addresses and phones of all the buildings managed by \"Brenden\".",
    "input": "create table apartment_buildings (building_id integer not null, building_short_name char(15), building_full_name varchar(80), building_description varchar(255), building_address varchar(255), building_manager varchar(50), building_phone varchar(80), primary key (building_id), unique (building_id));",
    "output": "SELECT building_address, building_phone FROM Apartment_Buildings WHERE building_manager = \"Brenden\""
  },
  {
    "instruction": "Return the name of the marketing region the store Rob Dinning is located in.",
    "input": "create table marketing_regions (marketing_region_code char(15) not null, marketing_region_name varchar(255) not null, marketing_region_descriptrion varchar(255) not null, other_details varchar(255), primary key (marketing_region_code), unique (marketing_region_code));create table stores (store_id varchar(100) not null, address_id integer not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (store_id), unique (store_id), foreign key (address_id) references addresses (address_id), foreign key (marketing_region_code) references marketing_regions (marketing_region_code));",
    "output": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code WHERE T2.Store_Name = \"Rob Dinning\""
  },
  {
    "instruction": "Count the number of different teams involved in match season.",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT count(DISTINCT Team) FROM match_season"
  },
  {
    "instruction": "List the total points of gymnasts in descending order.",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC"
  },
  {
    "instruction": "Return the date of birth for all the guests with gender code \"Male\".",
    "input": "create table guests (guest_id integer not null , gender_code char(1), guest_first_name varchar(80), guest_last_name varchar(80), date_of_birth datetime, primary key (guest_id), unique (guest_id));",
    "output": "SELECT date_of_birth FROM Guests WHERE gender_code = \"Male\""
  },
  {
    "instruction": "papers where sharon goldwater is an author",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "What is the last name of the musician that have produced the most number of songs?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of institutions.",
    "input": "create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT count(*) FROM inst"
  },
  {
    "instruction": "What is the name and age of the pilot younger than 30 who has won the most number of times?",
    "input": "create table `pilot` (`pilot_id` int(11) not null, `name` varchar(50) not null, `age` int(11) not null, primary key (`pilot_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT t1.name, t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot WHERE t1.age < 30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the id of the problem log that is created most recently?",
    "input": "create table `problem_log` (`problem_log_id` integer primary key, `assigned_to_staff_id` integer not null, `problem_id` integer not null, `problem_category_code` varchar(20) not null, `problem_status_code` varchar(20) not null, `log_entry_date` datetime, `log_entry_description` varchar(255), `log_entry_fix` varchar(255), `other_log_details` varchar(255), foreign key (`problem_category_code`) references `problem_category_codes`(`problem_category_code`), foreign key (`assigned_to_staff_id`) references `staff`(`staff_id`), foreign key (`problem_id`) references `problems`(`problem_id`), foreign key (`problem_status_code`) references `problem_status_codes`(`problem_status_code`));",
    "output": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1"
  },
  {
    "instruction": "What is the zip code that has the lowest average mean sea level pressure?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1"
  },
  {
    "instruction": "what wyoming city has the largest population",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"wyoming\" ) AND state_name = \"wyoming\";"
  },
  {
    "instruction": "Find the name, class and rank of all captains.",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT name, CLASS, rank FROM captain"
  },
  {
    "instruction": "what is the population density of the smallest state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT density FROM state WHERE area = ( SELECT MIN ( area ) FROM state );"
  },
  {
    "instruction": "What is the id of the store that has the most items in inventory?",
    "input": "create table inventory (inventory_id mediumint unsigned not null, film_id smallint unsigned not null, store_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (inventory_id), foreign key (store_id) references store (store_id), foreign key (film_id) references film (film_id));",
    "output": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show all role codes with at least 3 employees.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*) >= 3"
  },
  {
    "instruction": "Find the marketing region description of China?",
    "input": "create table marketing_regions (marketing_region_code char(15) not null, marketing_region_name varchar(255) not null, marketing_region_descriptrion varchar(255) not null, other_details varchar(255), primary key (marketing_region_code), unique (marketing_region_code));",
    "output": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name = \"China\""
  },
  {
    "instruction": "Which last names are both used by customers and by staff?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff"
  },
  {
    "instruction": "Which teachers teach in classroom 109? Give me their last names.",
    "input": "create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT lastname FROM teachers WHERE classroom = 109"
  },
  {
    "instruction": "What is the response received date for the document described as Regular that was granted more than 100 dollars?",
    "input": "create table `documents` (`document_id` integer primary key, `document_type_code` varchar(10), `grant_id` integer not null, `sent_date` datetime not null, `response_received_date` datetime not null, `other_details` varchar(255) not null, foreign key (`document_type_code`) references `document_types`(`document_type_code`), foreign key (`grant_id`) references `grants`(`grant_id`));create table `document_types` (`document_type_code` varchar(10) primary key, `document_description` varchar(255) not null);create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id WHERE T2.document_description = 'Regular' OR T3.grant_amount > 100"
  },
  {
    "instruction": "What are the email addresses and date of births for all customers who have a first name of Carole?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT email_address, date_of_birth FROM Customers WHERE first_name = \"Carole\""
  },
  {
    "instruction": "What is the name of the claim processing stage that most of the claims are on?",
    "input": "create table claims_processing (claim_processing_id integer not null, claim_id integer not null, claim_outcome_code char(15) not null, claim_stage_id integer not null, staff_id integer, primary key (claim_processing_id), foreign key (claim_id) references claim_headers (claim_header_id), foreign key (staff_id) references staff (staff_id));create table claims_processing_stages (claim_stage_id integer not null, next_claim_stage_id integer, claim_status_name varchar(255) not null, claim_status_description varchar(255) not null, primary key (claim_stage_id));",
    "output": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.",
    "input": "create table payment (payment_id smallint unsigned not null, customer_id smallint unsigned not null, staff_id tinyint unsigned not null, rental_id int default null, amount decimal(5, 2) not null, payment_date datetime not null, last_update timestamp default current_timestamp, primary key (payment_id), foreign key (rental_id) references rental (rental_id), foreign key (customer_id) references customer (customer_id), foreign key (staff_id) references staff (staff_id));create table payment (payment_id smallint unsigned not null, customer_id smallint unsigned not null, staff_id tinyint unsigned not null, rental_id int default null, amount decimal(5, 2) not null, payment_date datetime not null, last_update timestamp default current_timestamp, primary key (payment_id), foreign key (rental_id) references rental (rental_id), foreign key (customer_id) references customer (customer_id), foreign key (staff_id) references staff (staff_id));create table staff (staff_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, address_id smallint unsigned not null, picture blob default null, email varchar(50) default null, store_id tinyint unsigned not null, active boolean not null default true, username varchar(16) not null, password varchar(40) default null, last_update timestamp not null default current_timestamp, primary key (staff_id), --FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (address_id) REFERENCES address (address_id));",
    "output": "SELECT payment_date FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa'"
  },
  {
    "instruction": "What are the claim dates and settlement dates of all the settlements?",
    "input": "create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT Date_Claim_Made, Date_Claim_Settled FROM Settlements"
  },
  {
    "instruction": "What are the ids and details of all statements?",
    "input": "create table statements (statement_id integer not null, statement_details varchar(255), primary key (statement_id), foreign key (statement_id) references documents (document_id));",
    "output": "SELECT STATEMENT_ID, statement_details FROM Statements"
  },
  {
    "instruction": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT job_id, hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'"
  },
  {
    "instruction": "Which customer's name contains \"Alex\"? Find the full name.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\""
  },
  {
    "instruction": "What are the names of all singers that are from the UK and released a song in English?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT artist_name FROM artist WHERE country = \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"english\""
  },
  {
    "instruction": "How many different position for players are listed?",
    "input": "create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT count(DISTINCT POSITION) FROM player"
  },
  {
    "instruction": "Find the average rating star for each movie that are not reviewed by Brittany Harris.",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table reviewer(rid int primary key, name text);",
    "output": "SELECT mID, avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = \"Brittany Harris\") GROUP BY mID"
  },
  {
    "instruction": "give me some restaurants good for arabic food on buchanan in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Which building does the instructor who teaches the most number of courses live in?",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "For each Orange county campus, report the number of degrees granted after 2000.",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT T1.campus, sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T1.county = \"Orange\" AND T2.year >= 2000 GROUP BY T1.campus"
  },
  {
    "instruction": "What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT sum(revenue) FROM manufacturers WHERE revenue > (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')"
  },
  {
    "instruction": "How many different players trained for more than 1000 hours?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT count(*) FROM Player WHERE HS > 1000"
  },
  {
    "instruction": "How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?",
    "input": "create table salary (year integer, team_id text, league_id text, player_id text, salary integer);create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);",
    "output": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;"
  },
  {
    "instruction": "How many elections are there?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Representative_ID\" int, \"Date\" text, \"Votes\" real, \"Vote_Percent\" real, \"Seats\" real, \"Place\" real, primary key (\"Election_ID\"), foreign key (\"Representative_ID\") references `representative`(\"Representative_ID\"));",
    "output": "SELECT count(*) FROM election"
  },
  {
    "instruction": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?",
    "input": "create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));",
    "output": "SELECT building, room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"
  },
  {
    "instruction": "What was the most popular position at tryouts?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "most cited papers for parsing",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "What is the reviewer id of Daniel Lewis?",
    "input": "create table reviewer(rid int primary key, name text);",
    "output": "SELECT rID FROM Reviewer WHERE name = \"Daniel Lewis\""
  },
  {
    "instruction": "Show all artist names and the year joined who are not from United States.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT name, year_join FROM artist WHERE country != 'United States'"
  },
  {
    "instruction": "Question Answering papers",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "what are some good places in the yosemite and mono lake area for french food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"yosemite and mono lake area\" AND t1.food_type = \"french\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Find the dates of the tests taken with result \"Pass\".",
    "input": "create table `student_tests_taken` (`registration_id` integer not null, `date_test_taken` datetime not null, `test_result` varchar(255), foreign key (`registration_id`) references `student_course_enrolment`(`registration_id`));",
    "output": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = \"Pass\""
  },
  {
    "instruction": "What is the average age for a male in each job?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT avg(age), job FROM Person WHERE gender = 'male' GROUP BY job"
  },
  {
    "instruction": "List the names of all music genres.",
    "input": "create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));",
    "output": "SELECT Name FROM GENRE"
  },
  {
    "instruction": "What are the carriers of devices whose software platforms are not \"Android\"?",
    "input": "create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));",
    "output": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'"
  },
  {
    "instruction": "Show all the distinct institution types.",
    "input": "create table \"Institution\" (\"Institution_id\" text, \"Institution\" text, \"Location\" text, \"Founded\" real, \"Type\" text, \"Enrollment\" int, \"Team\" text, \"Primary_Conference\" text, \"building_id\" text, primary key(\"Institution_id\"), foreign key (\"building_id\") references \"building\"(\"building_id\"));",
    "output": "SELECT DISTINCT TYPE FROM institution"
  },
  {
    "instruction": "how many chinese restaurants are there in the bay area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"chinese\";"
  },
  {
    "instruction": "List the name, location, mascot for all schools.",
    "input": "create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));",
    "output": "SELECT school_name, LOCATION, mascot FROM school"
  },
  {
    "instruction": "what is the lowest point in usa",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT lowest_point FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow );"
  },
  {
    "instruction": "How many businesses in \" San Diego \" has Christine reviewed in 2010 ?",
    "input": "create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.city = \"San Diego\" AND t2.year = 2010 AND t3.name = \"Christine\";"
  },
  {
    "instruction": "What are the names of the chairs of festivals, sorted in ascending order of the year held?",
    "input": "create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));",
    "output": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC"
  },
  {
    "instruction": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name, salary FROM instructor WHERE salary < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')"
  },
  {
    "instruction": "What is the largest payment amount?",
    "input": "create table payment (payment_id smallint unsigned not null, customer_id smallint unsigned not null, staff_id tinyint unsigned not null, rental_id int default null, amount decimal(5, 2) not null, payment_date datetime not null, last_update timestamp default current_timestamp, primary key (payment_id), foreign key (rental_id) references rental (rental_id), foreign key (customer_id) references customer (customer_id), foreign key (staff_id) references staff (staff_id));",
    "output": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1"
  },
  {
    "instruction": "display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id, first_name, last_name, salary FROM employees WHERE salary > ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')"
  },
  {
    "instruction": "Count the number of players who were born in USA and have bats information 'R'.",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);",
    "output": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats = 'R';"
  },
  {
    "instruction": "how many major cities are there in texas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( city_name ) FROM city WHERE population > 150000 AND state_name = \"texas\";"
  },
  {
    "instruction": "What are the different schools and their nicknames, ordered by their founding years?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT school, nickname FROM university ORDER BY founded"
  },
  {
    "instruction": "What are the wines that have prices higher than 50 and made of Red color grapes?",
    "input": "create table \"grapes\" (\"ID\" integer primary key, \"Grape\" text unique, \"Color\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"Red\" AND T2.price > 50"
  },
  {
    "instruction": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.city_code = \"NYC\" AND T2.Election_Cycle = \"Spring\""
  },
  {
    "instruction": "List the names of editors who are older than 25.",
    "input": "create table \"editor\" (\"Editor_ID\" int, \"Name\" text, \"Age\" real, primary key (\"Editor_ID\"));",
    "output": "SELECT Name FROM editor WHERE Age > 25"
  },
  {
    "instruction": "Count the number of total papers.",
    "input": "create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT count(*) FROM papers"
  },
  {
    "instruction": "Return the sum of all payment amounts.",
    "input": "create table payment (payment_id smallint unsigned not null, customer_id smallint unsigned not null, staff_id tinyint unsigned not null, rental_id int default null, amount decimal(5, 2) not null, payment_date datetime not null, last_update timestamp default current_timestamp, primary key (payment_id), foreign key (rental_id) references rental (rental_id), foreign key (customer_id) references customer (customer_id), foreign key (staff_id) references staff (staff_id));",
    "output": "SELECT sum(amount) FROM payment"
  },
  {
    "instruction": "What are the details of the project that is producing both patents and papers as outcomes?",
    "input": "create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));",
    "output": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Patent'"
  },
  {
    "instruction": "What are the names of the services that have never been used?",
    "input": "create table `services` (`service_id` integer primary key, `service_type_code` varchar(15) not null, `service_name` varchar(80), `service_descriptio` varchar(255));create table `services` (`service_id` integer primary key, `service_type_code` varchar(15) not null, `service_name` varchar(80), `service_descriptio` varchar(255));create table `party_services` (`booking_id` integer not null , `customer_id` integer not null, `service_id` integer not null, `service_datetime` datetime not null, `booking_made_date` datetime, foreign key (`service_id`) references `services`(`service_id`), foreign key (`customer_id`) references `parties`(`party_id`));",
    "output": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id"
  },
  {
    "instruction": "return me the number of papers in VLDB conference containing keyword \" Information Retrieval \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t4 ON t4.pid = t3.pid JOIN conference AS t2 ON t4.cid = t2.cid WHERE t2.name = \"VLDB\" AND t1.keyword = \"Information Retrieval\";"
  },
  {
    "instruction": "Whare the names, friends, and ages of all people who are older than the average age of a person?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT DISTINCT T2.name, T2.friend, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person)"
  },
  {
    "instruction": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
    "input": "create table \"weekly_weather\" (\"station_id\" int, \"day_of_week\" text, \"high_temperature\" int, \"low_temperature\" int, \"precipitation\" real, \"wind_speed_mph\" int, primary key (\"station_id\", \"day_of_week\"), foreign key (\"station_id\") references \"station\"(\"id\"));create table \"station\" (\"id\" int, \"network_name\" text, \"services\" text, \"local_authority\" text, primary key (\"id\"));",
    "output": "SELECT t2.id, t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING max(t1.precipitation) > 50"
  },
  {
    "instruction": "through which states does the longest river in texas run",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = \"texas\" );"
  },
  {
    "instruction": "What are the first and last name of all biology professors?",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);",
    "output": "SELECT T3.EMP_FNAME, T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE DEPT_NAME = \"Biology\""
  },
  {
    "instruction": "For each distinct product name, show its average product price.",
    "input": "create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT Product_Name, avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name"
  },
  {
    "instruction": "What are the title and director of the films without any schedule?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Rank_in_series\" int, \"Number_in_season\" int, \"Title\" text, \"Directed_by\" text, \"Original_air_date\" text, \"Production_code\" text, primary key (\"Film_ID\"));create table \"schedule\" (\"Cinema_ID\" int, \"Film_ID\" int, \"Date\" text, \"Show_times_per_day\" int, \"Price\" float, primary key (\"Cinema_ID\",\"Film_ID\"), foreign key (`film_id`) references `film`(`film_id`), foreign key (`cinema_id`) references `cinema`(`cinema_id`));",
    "output": "SELECT title, directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)"
  },
  {
    "instruction": "Find the email and phone number of the customers who have never filed a complaint before.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT email_address, phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)"
  },
  {
    "instruction": "How much is the track Fast As a Shark?",
    "input": "create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";"
  },
  {
    "instruction": "Find out 5 customers who most recently purchased something. List customers' first and last name.",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5;"
  },
  {
    "instruction": "what is the most populous state through which the mississippi runs",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );"
  },
  {
    "instruction": "Find the campus fee of \"San Jose State University\" in year 2000.",
    "input": "create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Jose State University\" AND t1.year = 2000"
  },
  {
    "instruction": "List all the directors of movies about nuclear weapons",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"tags\" (\"id\" int, \"msid\" int, \"kid\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"kid\") references `keyword`(\"kid\"));create table \"keyword\" (\"id\" int, \"keyword\" text, primary key(\"id\"));",
    "output": "SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN tags AS t5 ON t5.msid = t4.mid JOIN keyword AS t1 ON t5.kid = t1.id WHERE t1.keyword = \"nuclear weapons\";"
  },
  {
    "instruction": "Papers written by sharon goldwater",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "Find the order id and customer id associated with the oldest order.",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT order_id, customer_id FROM orders ORDER BY date_order_placed LIMIT 1"
  },
  {
    "instruction": "Find the names of all English songs.",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT song_name FROM song WHERE languages = \"english\""
  },
  {
    "instruction": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `airport_aircraft` (\"ID\" int, \"Airport_ID\" int, \"Aircraft_ID\" int, primary key (\"Airport_ID\",\"Aircraft_ID\"), foreign key (\"Airport_ID\") references `airport`(`airport_id`), foreign key (\"Aircraft_ID\") references `aircraft`(`aircraft_id`));create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T1.Aircraft = \"Robinson R-22\""
  },
  {
    "instruction": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT DISTINCT artist_name FROM artist WHERE country = \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7"
  },
  {
    "instruction": "How many routes go from the United States to Canada?",
    "input": "create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')"
  },
  {
    "instruction": "Show the names of cities in counties that have a crime rate less than 100.",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)"
  },
  {
    "instruction": "What is the country in which the customer Carole Bernhard lived?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\""
  },
  {
    "instruction": "What is the average age for all person?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT avg(age) FROM Person"
  },
  {
    "instruction": "How many students does LORIA ONDERSMA teaches?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"LORIA\" AND T2.lastname = \"ONDERSMA\""
  },
  {
    "instruction": "What is the address of employee Nancy Edwards?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
  },
  {
    "instruction": "How many customers are there?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT count(*) FROM customers"
  },
  {
    "instruction": "Give me the average prices of wines that are produced by appelations in Sonoma County.",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Sonoma\""
  },
  {
    "instruction": "what is the area of the states",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT area FROM state;"
  },
  {
    "instruction": "What are the first names of the people in alphabetical order?",
    "input": "create table people (person_id integer not null, first_name varchar(255), middle_name varchar(255), last_name varchar(255), cell_mobile_number varchar(40), email_address varchar(40), login_name varchar(40), password varchar(40), primary key (person_id));",
    "output": "SELECT first_name FROM people ORDER BY first_name"
  },
  {
    "instruction": "Return the name and country corresponding to the artist who has had the most exhibitions.",
    "input": "create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT T2.name, T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the distinct locations that has a cinema.",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT DISTINCT LOCATION FROM cinema"
  },
  {
    "instruction": "How many rooms have a king bed?",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT count(*) FROM Rooms WHERE bedType = \"King\";"
  },
  {
    "instruction": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT student_capacity, gender FROM dorm WHERE dorm_name LIKE '%Donor%'"
  },
  {
    "instruction": "Show the name and service for all trains in order by time.",
    "input": "create table \"train\" (\"Train_ID\" int, \"Name\" text, \"Time\" text, \"Service\" text, primary key (\"Train_ID\"));",
    "output": "SELECT name, service FROM train ORDER BY TIME"
  },
  {
    "instruction": "What are the full names of faculty members who are a part of department 520?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table member_of (facid integer, dno integer, appt_type varchar(15), foreign key(facid) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT T1.Fname, T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520"
  },
  {
    "instruction": "List the names and decor of rooms that have a king bed. Sort the list by their price.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName, decor FROM Rooms WHERE bedtype = 'King' ORDER BY basePrice;"
  },
  {
    "instruction": "Which states have more than 2 parks?",
    "input": "create table park (park_id text, park_name text, park_alias text, city text, state text, country text);",
    "output": "SELECT state FROM park GROUP BY state HAVING count(*) > 2;"
  },
  {
    "instruction": "what is the most populous city in wyoming",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"wyoming\" ) AND state_name = \"wyoming\";"
  },
  {
    "instruction": "What is the type of video game Call of Destiny.",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT gtype FROM Video_games WHERE gname = \"Call of Destiny\""
  },
  {
    "instruction": "What is the address of each course author or tutor?",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));",
    "output": "SELECT address_line_1 FROM Course_Authors_and_Tutors"
  },
  {
    "instruction": "which state borders kentucky",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "From which hometowns did both people older than 23 and younger than 20 come from?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20"
  },
  {
    "instruction": "What are the names of the ships  that are from either the US or the UK?",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT Name FROM ship WHERE Nationality = \"United States\" OR Nationality = \"United Kingdom\""
  },
  {
    "instruction": "Find the name of the swimmer who has the most records.",
    "input": "create table \"swimmer\" (\"ID\" int, \"name\" text, \"Nationality\" text, \"meter_100\" real, \"meter_200\" text, \"meter_300\" text, \"meter_400\" text, \"meter_500\" text, \"meter_600\" text, \"meter_700\" text, \"Time\" text, primary key (\"ID\"));create table \"record\" (\"ID\" int, \"Result\" text, \"Swimmer_ID\" int, \"Event_ID\" int, primary key (\"Swimmer_ID\",\"Event_ID\"), foreign key (`event_id`) references `event`(`id`), foreign key (`swimmer_id`) references `swimmer`(`id`));",
    "output": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the student ID and personal name of the student with at least two enrollments.",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT T1.student_id, T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "Show all the information about election.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT * FROM election"
  },
  {
    "instruction": "Find the country of the airlines whose name starts with 'Orbit'.",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);",
    "output": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'"
  },
  {
    "instruction": "For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT max(T2.fastestlapspeed), T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"
  },
  {
    "instruction": "Find the names of nurses who are nursing an undergoing treatment.",
    "input": "create table undergoes (patient integer not null, procedures integer not null, stay integer not null, dateundergoes datetime not null, physician integer not null, assistingnurse integer, primary key(patient, procedures, stay, dateundergoes), constraint fk_undergoes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_undergoes_procedures_code foreign key(procedures) references procedures(code), constraint fk_undergoes_stay_stayid foreign key(stay) references stay(stayid), constraint fk_undergoes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_undergoes_nurse_employeeid foreign key(assistingnurse) references nurse(employeeid));create table nurse (employeeid integer primary key not null, name varchar(30) not null, position varchar(30) not null, registered boolean not null, ssn integer not null);",
    "output": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID"
  },
  {
    "instruction": "recent papers by sanjeev arora",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphrasename, t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"sanjeev arora\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "Find the name of the campuses opened before 1800.",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE YEAR < 1800"
  },
  {
    "instruction": "who does Noah A Smith author with ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Noah A Smith\";"
  },
  {
    "instruction": "List each test result and its count in descending order of count.",
    "input": "create table `student_tests_taken` (`registration_id` integer not null, `date_test_taken` datetime not null, `test_result` varchar(255), foreign key (`registration_id`) references `student_course_enrolment`(`registration_id`));",
    "output": "SELECT test_result, COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC"
  },
  {
    "instruction": "return me the papers by \" H. V. Jagadish \" on VLDB conference after 2000 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\" AND t2.name = \"VLDB\" AND t4.year > 2000;"
  },
  {
    "instruction": "Show different types of ships and the average tonnage of ships of each type.",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT TYPE, avg(Tonnage) FROM ship GROUP BY TYPE"
  },
  {
    "instruction": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\""
  },
  {
    "instruction": "Find the average number of customers cross all banks.",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT avg(no_of_customers) FROM bank"
  },
  {
    "instruction": "Find the organisation type description of the organisation detailed as 'quo'.",
    "input": "create table `organisation_types` (`organisation_type` varchar(10) primary key, `organisation_type_description` varchar(255) not null);create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));",
    "output": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_details = 'quo'"
  },
  {
    "instruction": "What is the id of the candidate who most recently accessed the course?",
    "input": "create table candidate_assessments (candidate_id integer not null, qualification char(15) not null, assessment_date datetime not null, asessment_outcome_code char(15) not null, primary key (candidate_id, qualification), foreign key (candidate_id) references candidates (candidate_id));",
    "output": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1"
  },
  {
    "instruction": "return me all the papers, which contain the keyword \" Natural Language \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT t3.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid = t1.kid JOIN publication AS t3 ON t3.pid = t2.pid WHERE t1.keyword = \"Natural Language\";"
  },
  {
    "instruction": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
    "input": "create table \"screen_mode\" (\"Graphics_mode\" real, \"Char_cells\" text, \"Pixels\" text, \"Hardware_colours\" real, \"used_kb\" real, \"map\" text, \"Type\" text, primary key (\"Graphics_mode\"));create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\" OR t2.Company_name = \"Nokia Corporation\""
  },
  {
    "instruction": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"enrollments\" (\"Campus\" integer, \"Year\" integer, \"TotalEnrollment_AY\" integer, \"FTE_AY\" integer, primary key(campus, year), foreign key (campus) references campuses(id));",
    "output": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200"
  },
  {
    "instruction": "Show the different headquarters and number of companies at each headquarter.",
    "input": "create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));",
    "output": "SELECT Headquarters, COUNT(*) FROM company GROUP BY Headquarters"
  },
  {
    "instruction": "Give the ids of documents with expenses that have the budget code 'SF'.",
    "input": "create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code = 'SF'"
  },
  {
    "instruction": "how many states in the us does the shortest river run through",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH = ( SELECT MIN ( DISTINCT LENGTH ) FROM river );"
  },
  {
    "instruction": "How many products have a price higher than the average?",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(15), `product_name` varchar(80), `product_price` double null);create table `products` (`product_id` integer primary key, `product_type_code` varchar(15), `product_name` varchar(80), `product_price` double null);",
    "output": "SELECT count(*) FROM products WHERE product_price > (SELECT avg(product_price) FROM products)"
  },
  {
    "instruction": "where is a arabic restaurant on buchanan in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Find the number of tips written in each month",
    "input": "create table \"tip\" (\"tip_id\" int, \"business_id\" text, \"text\" text, \"user_id\" text, \"likes\" int, \"year\" int, \"month\" text, primary key(\"tip_id\") foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT COUNT ( DISTINCT text ), MONTH FROM tip GROUP BY MONTH;"
  },
  {
    "instruction": "what is the population of seattle washington",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = \"seattle\" AND state_name = \"washington\";"
  },
  {
    "instruction": "states bordering kentucky",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "Show publishers with a book published in 1989 and a book in 1990.",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT publisher FROM book_club WHERE YEAR = 1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR = 1990"
  },
  {
    "instruction": "What is the names of movies whose created year is after all movies directed by Steven Spielberg?",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT title FROM Movie WHERE YEAR > (SELECT max(YEAR) FROM Movie WHERE director = \"Steven Spielberg\")"
  },
  {
    "instruction": "Count the total number of clubs.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT count(*) FROM club"
  },
  {
    "instruction": "What are the names of all directors who have made one movie except for the director named NULL?",
    "input": "create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*) = 1"
  },
  {
    "instruction": "Find the names of customers who never ordered product Latte.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));create table `products` (`product_id` integer primary key, `product_details` varchar(255));",
    "output": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte'"
  },
  {
    "instruction": "List names for drivers from Hartford city and younger than 40.",
    "input": "create table \"driver\" (\"Driver_ID\" int, \"Name\" text, \"Party\" text, \"Home_city\" text, \"Age\" int, primary key (\"Driver_ID\"));",
    "output": "SELECT name FROM driver WHERE home_city = 'Hartford' AND age < 40"
  },
  {
    "instruction": "Find the average rating star for each movie that received at least 2 ratings.",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT mID, avg(stars) FROM Rating GROUP BY mID HAVING count(*) >= 2"
  },
  {
    "instruction": "Find the name of all customers.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT customer_name FROM customers"
  },
  {
    "instruction": "What is the denomination of the school the most players belong to?",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the average fee for a CSU campus in the year of 1996?",
    "input": "create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));",
    "output": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 1996"
  },
  {
    "instruction": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE '%ee%'"
  },
  {
    "instruction": "How many donors have endowment for school named \"Glenn\"?",
    "input": "create table \"endowment\" (\"endowment_id\" int, \"School_id\" int, \"donator_name\" text, \"amount\" real, primary key(\"endowment_id\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));",
    "output": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = \"Glenn\""
  },
  {
    "instruction": "Show the name of colleges that have at least two players in descending alphabetical order.",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2 ORDER BY College DESC"
  },
  {
    "instruction": "How many parks does Atlanta city have?",
    "input": "create table park (park_id text, park_name text, park_alias text, city text, state text, country text);",
    "output": "SELECT count(*) FROM park WHERE city = 'Atlanta';"
  },
  {
    "instruction": "Show the names of clubs that have players with position \"Right Wing\".",
    "input": "create table \"club\" (\"Club_ID\" int, \"name\" text, \"Region\" text, \"Start_year\" text, primary key (\"Club_ID\"));create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = \"Right Wing\""
  },
  {
    "instruction": "What year was \" Benedict Cumberbatch \" born ?",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT birth_year FROM actor WHERE name = \"Benedict Cumberbatch\";"
  },
  {
    "instruction": "where does Peter Mertens publish ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.journalid, t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Peter Mertens\";"
  },
  {
    "instruction": "chi",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"chi\";"
  },
  {
    "instruction": "What are the different names and credit scores of customers who have taken a loan?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT DISTINCT T1.cust_name, T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id"
  },
  {
    "instruction": "what are some good places for arabic on buchanan in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?",
    "input": "create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table trained_in (physician integer not null, treatment integer not null, certificationdate datetime not null, certificationexpires datetime not null, constraint fk_trained_in_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_trained_in_procedures_code foreign key(treatment) references procedures(code), primary key(physician, treatment));create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT name FROM procedures WHERE cost > 1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\""
  },
  {
    "instruction": "What are the average score and average staff number of all shops?",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Address\" text, \"Num_of_staff\" text, \"Score\" real, \"Open_Year\" text, primary key (\"Shop_ID\"));",
    "output": "SELECT avg(num_of_staff), avg(score) FROM shop"
  },
  {
    "instruction": "List all department names ordered by their starting date.",
    "input": "create table department(dname text, dnumber integer primary key, mgr_ssn integer, mgr_start_date text);",
    "output": "SELECT dname FROM department ORDER BY mgr_start_date"
  },
  {
    "instruction": "What are the different district names in order of descending city area?",
    "input": "create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC"
  },
  {
    "instruction": "List the names of players in ascending order of votes.",
    "input": "create table \"player\" (\"Player_ID\" int, \"Sponsor_name\" text, \"Player_name\" text, \"Gender\" text, \"Residence\" text, \"Occupation\" text, \"Votes\" int, \"Rank\" text, primary key (\"Player_ID\"));",
    "output": "SELECT Player_name FROM player ORDER BY Votes ASC"
  },
  {
    "instruction": "What are the id of students who registered course 301?",
    "input": "create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT student_id FROM student_course_attendance WHERE course_id = 301"
  },
  {
    "instruction": "Return complaint status codes have more than 3 corresponding complaints?",
    "input": "create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*) > 3"
  },
  {
    "instruction": "what are all the rivers in illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = \"illinois\";"
  },
  {
    "instruction": "What are the grapes and appelations of each wine?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Grape, Appelation FROM WINE"
  },
  {
    "instruction": "Which employees do not destroy any document? Find their employee ids.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"
  },
  {
    "instruction": "How many students are there?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT count(*) FROM list"
  },
  {
    "instruction": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?",
    "input": "create table \"repair_assignment\" (\"technician_id\" int, \"repair_ID\" int, \"Machine_ID\" int, primary key (\"technician_id\",\"repair_ID\",\"Machine_ID\"), foreign key (`technician_id`) references `technician`(`technician_id`), foreign key (`repair_id`) references `repair`(`repair_id`), foreign key (`machine_id`) references `machine`(`machine_id`));create table \"machine\" (\"Machine_ID\" int, \"Making_Year\" int, \"Class\" text, \"Team\" text, \"Machine_series\" text, \"value_points\" real, \"quality_rank\" int, primary key (\"Machine_ID\"));create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID ORDER BY T2.quality_rank"
  },
  {
    "instruction": "Which program was launched most recently? Return the program name.",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));",
    "output": "SELECT name FROM program ORDER BY launch DESC LIMIT 1"
  },
  {
    "instruction": "Which cities have served as host cities more than once? Return me their GDP and population.",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));",
    "output": "SELECT t1.gdp, t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY t2.Host_City HAVING count(*) > 1"
  },
  {
    "instruction": "What is the name of the stadium which held the most events?",
    "input": "create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));create table \"event\" (\"ID\" int, \"Name\" text, \"Stadium_ID\" int, \"Year\" text, primary key (\"ID\"), foreign key (`stadium_id`) references `stadium`(`id`));",
    "output": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of hosts who did not host any party in our record?",
    "input": "create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));create table \"party_host\" (\"Party_ID\" int, \"Host_ID\" int, \"Is_Main_in_Charge\" bool, primary key (\"Party_ID\",\"Host_ID\"), foreign key (\"Host_ID\") references `host`(\"Host_ID\"), foreign key (\"Party_ID\") references `party`(\"Party_ID\"));",
    "output": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)"
  },
  {
    "instruction": "What are the names of courses with 1 credit?",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT CName FROM COURSE WHERE Credits = 1"
  },
  {
    "instruction": "Find the country that the most papers are affiliated with.",
    "input": "create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the first name and age of every student who lives in a dorm with a TV Lounge?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T1.fname, T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')"
  },
  {
    "instruction": "Show the location name and code with the least documents.",
    "input": "create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));create table ref_locations (location_code char(15) not null, location_name varchar(255) not null, location_description varchar(255) not null, primary key (location_code));",
    "output": "SELECT T2.location_name, T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT name, trade_name FROM medicine EXCEPT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T3.product = 'Protoporphyrinogen IX'"
  },
  {
    "instruction": "How many products are there?",
    "input": "create table products (product_id integer not null, product_type_code char(15), product_name varchar(255), product_price decimal(20, 4), primary key (product_id), unique (product_id));",
    "output": "SELECT count(*) FROM Products"
  },
  {
    "instruction": "What are the prices of products that have never gotten a complaint?",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `product_category_code` varchar(20) not null, `date_product_first_available` datetime, `date_product_discontinued` datetime, `product_name` varchar(80), `product_description` varchar(255), `product_price` decimal(19, 4));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)"
  },
  {
    "instruction": "Give me the maximum low temperature and average precipitation at the Amersham station.",
    "input": "create table \"weekly_weather\" (\"station_id\" int, \"day_of_week\" text, \"high_temperature\" int, \"low_temperature\" int, \"precipitation\" real, \"wind_speed_mph\" int, primary key (\"station_id\", \"day_of_week\"), foreign key (\"station_id\") references \"station\"(\"id\"));create table \"station\" (\"id\" int, \"network_name\" text, \"services\" text, \"local_authority\" text, primary key (\"id\"));",
    "output": "SELECT max(t1.low_temperature), avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = \"Amersham\""
  },
  {
    "instruction": "What are the file sizes and formats for all songs with a resolution lower than 800?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT DISTINCT T1.file_size, T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 800"
  },
  {
    "instruction": "What is the email and phone number of Astrid Gruber the customer?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT email, phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";"
  },
  {
    "instruction": "What are the cities that have more than 2 airports sorted by number of airports?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT city FROM airports GROUP BY city HAVING count(*) > 2 ORDER BY count(*)"
  },
  {
    "instruction": "What are all the calendar dates and day Numbers?",
    "input": "create table ref_calendar (calendar_date datetime not null, day_number integer, primary key (calendar_date));",
    "output": "SELECT calendar_date, day_Number FROM Ref_calendar"
  },
  {
    "instruction": "What are the full names of students minoring in department 140?",
    "input": "create table minor_in (stuid integer, dno integer, foreign key(stuid) references student(stuid), foreign key(dno) references department(dno));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T2.Fname, T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140"
  },
  {
    "instruction": "Count the number of courses with more than 2 credits.",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT count(*) FROM COURSE WHERE Credits > 2"
  },
  {
    "instruction": "What are the names of products with 'white' as their color description?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"white\""
  },
  {
    "instruction": "where can i find a restaurant in the bay area ?",
    "input": "create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t2.house_number, t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = \"bay area\" );"
  },
  {
    "instruction": "Find the producers of all movies in which \" Kate Winslet \" is an actor",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"made_by\" (\"id\" int, \"msid\" int, \"pid\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"pid\") references `producer`(\"pid\"));create table \"producer\" (\"pid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"pid\"));",
    "output": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid = t2.aid JOIN movie AS t5 ON t5.mid = t3.msid JOIN made_by AS t4 ON t5.mid = t4.msid JOIN producer AS t1 ON t1.pid = t4.pid WHERE t2.name = \"Kate Winslet\";"
  },
  {
    "instruction": "Find the state which has the most number of customers.",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1"
  },
  {
    "instruction": "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, T1.stars, T2.director, max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director"
  },
  {
    "instruction": "what are some good places for arabic in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "What are the phones and emails of workshop groups in which services are performed?",
    "input": "create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));create table services (service_id integer not null, service_type_code char(15), workshop_group_id integer not null, product_description varchar(255), product_name varchar(255), product_price decimal(20, 4), other_product_service_details varchar(255), primary key (service_id), unique (service_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id), foreign key (service_type_code) references ref_service_types (service_type_code));",
    "output": "SELECT T1.Store_Phone, T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID"
  },
  {
    "instruction": "How many papers were at nature communications 2015 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"nature communications\";"
  },
  {
    "instruction": "What are the wines that have prices lower than 50 and have appelations in Monterey county?",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = \"Monterey\" AND T2.price < 50"
  },
  {
    "instruction": "Find the total account balance of each customer from Utah or Texas.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT sum(acc_bal) FROM customer WHERE state = 'Utah' OR state = 'Texas'"
  },
  {
    "instruction": "What cities do students live in?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT city_code FROM Student"
  },
  {
    "instruction": "What are the names of all friends who are from New York?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.city = 'new york city'"
  },
  {
    "instruction": "What is the name of the song that was released most recently?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT song_name, releasedate FROM song ORDER BY releasedate DESC LIMIT 1"
  },
  {
    "instruction": "Find the names of users who did not leave any review.",
    "input": "create table `useracct` (`u_id` integer not null , `name` varchar(128) default null , primary key (`u_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"
  },
  {
    "instruction": "Give the name of the highest paid instructor.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1"
  },
  {
    "instruction": "What are the distinct ages of students who have secretary votes in the fall election cycle?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE T2.Election_Cycle = \"Fall\""
  },
  {
    "instruction": "Find the number of employees whose title is IT Staff from each city?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*), city FROM employees WHERE title = 'IT Staff' GROUP BY city"
  },
  {
    "instruction": "Find the names and average salaries of all departments whose average salary is greater than 42000.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT dept_name, AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary) > 42000"
  },
  {
    "instruction": "List all channel names ordered by their rating in percent from big to small.",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));",
    "output": "SELECT name FROM channel ORDER BY rating_in_percent DESC"
  },
  {
    "instruction": "number of states bordering kentucky",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( border ) FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "Please show the most common occupation of players.",
    "input": "create table \"player\" (\"Player_ID\" int, \"Sponsor_name\" text, \"Player_name\" text, \"Gender\" text, \"Residence\" text, \"Occupation\" text, \"Votes\" int, \"Rank\" text, primary key (\"Player_ID\"));",
    "output": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names and distances for all airplanes?",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT name, distance FROM Aircraft"
  },
  {
    "instruction": "give me a restaurant on buchanan in san francisco that serves good arabic food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "return me the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t5.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t5 ON t5.pid = t3.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t2.name = \"H. V. Jagadish\" AND t1.keyword = \"User Study\";"
  },
  {
    "instruction": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
    "input": "create table `assets` (`asset_id` integer primary key, `maintenance_contract_id` integer not null, `supplier_company_id` integer not null, `asset_details` varchar(255), `asset_make` varchar(20), `asset_model` varchar(20), `asset_acquired_date` datetime, `asset_disposed_date` datetime, `other_asset_details` varchar(255), foreign key (`maintenance_contract_id`) references `maintenance_contracts`(`maintenance_contract_id`), foreign key (`supplier_company_id`) references `third_party_companies`(`company_id`));create table `asset_parts` (`asset_id` integer not null, `part_id` integer not null, foreign key (`part_id`) references `parts`(`part_id`), foreign key (`asset_id`) references `assets`(`asset_id`));create table `assets` (`asset_id` integer primary key, `maintenance_contract_id` integer not null, `supplier_company_id` integer not null, `asset_details` varchar(255), `asset_make` varchar(20), `asset_model` varchar(20), `asset_acquired_date` datetime, `asset_disposed_date` datetime, `other_asset_details` varchar(255), foreign key (`maintenance_contract_id`) references `maintenance_contracts`(`maintenance_contract_id`), foreign key (`supplier_company_id`) references `third_party_companies`(`company_id`));create table `fault_log` (`fault_log_entry_id` integer primary key, `asset_id` integer not null, `recorded_by_staff_id` integer not null, `fault_log_entry_datetime` datetime, `fault_description` varchar(255), `other_fault_details` varchar(255), foreign key (`asset_id`) references `assets`(`asset_id`), foreign key (`recorded_by_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.asset_id, T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count(*) = 2 INTERSECT SELECT T1.asset_id, T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING count(*) < 2"
  },
  {
    "instruction": "What is the name of department where has the largest number of professors with a Ph.D. degree?",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.dept_name, T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "display the job title of jobs which minimum salary is greater than 9000.",
    "input": "create table `jobs` (`job_id` varchar(10) not null default '', `job_title` varchar(35) not null, `min_salary` decimal(6, 0) default null, `max_salary` decimal(6, 0) default null, primary key (`job_id`));",
    "output": "SELECT job_title FROM jobs WHERE min_salary > 9000"
  },
  {
    "instruction": "could you tell me what is the highest point in the state of texas",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE state_name = \"texas\";"
  },
  {
    "instruction": "What are the customer ids for customers who do not have an account?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts"
  },
  {
    "instruction": "what is the address of history department?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT dept_address FROM department WHERE dept_name = 'History'"
  },
  {
    "instruction": "which countries have more than 2 airports?",
    "input": "create table \"airport\" (\"id\" int, \"City\" text, \"Country\" text, \"IATA\" text, \"ICAO\" text, \"name\" text, primary key(\"id\"));",
    "output": "SELECT country FROM airport GROUP BY country HAVING count(*) > 2"
  },
  {
    "instruction": "Find journals about Temporal Data .",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Temporal Data\" GROUP BY t3.journalid;"
  },
  {
    "instruction": "What are first and last names of players participating in all star game in 1998?",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table all_star (player_id text, year integer, game_num integer, game_id text, team_id text, league_id text, gp numeric, starting_pos numeric, foreign key (player_id) references player(player_id));",
    "output": "SELECT name_first, name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE YEAR = 1998"
  },
  {
    "instruction": "What are the category of music festivals with result \"Awarded\"?",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));",
    "output": "SELECT Category FROM music_festival WHERE RESULT = \"Awarded\""
  },
  {
    "instruction": "Show the country name and capital of all countries.",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));",
    "output": "SELECT Country_name, Capital FROM country"
  },
  {
    "instruction": "How many customers are there of each gender?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT gender, count(*) FROM Customers GROUP BY gender"
  },
  {
    "instruction": "How many different industries are the companies in?",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT count(DISTINCT Industry) FROM Companies"
  },
  {
    "instruction": "What are the first names of all students in course ACCT-211?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211'"
  },
  {
    "instruction": "How many submissions are there?",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT count(*) FROM submission"
  },
  {
    "instruction": "Find the phone number of performer \"Ashley\".",
    "input": "create table performers (performer_id integer not null, address_id integer not null, customer_name varchar(255), customer_phone varchar(255), customer_email_address varchar(255), other_details varchar(255), primary key (performer_id), unique (performer_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name = \"Ashley\""
  },
  {
    "instruction": "Show different nominees and the number of musicals they have been nominated.",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT Nominee, COUNT(*) FROM musical GROUP BY Nominee"
  },
  {
    "instruction": "What are the total amount and average amount paid in claim headers?",
    "input": "create table claim_headers (claim_header_id integer not null, claim_status_code char(15) not null, claim_type_code char(15) not null, policy_id integer not null, date_of_claim datetime, date_of_settlement datetime, amount_claimed decimal(20, 4), amount_piad decimal(20, 4), primary key (claim_header_id), foreign key (policy_id) references policies (policy_id));",
    "output": "SELECT sum(amount_piad), avg(amount_piad) FROM claim_headers"
  },
  {
    "instruction": "Find the name of the most popular party form.",
    "input": "create table `forms` (`form_id` integer primary key, `form_type_code` varchar(15) not null, `service_id` integer, `form_number` varchar(50), `form_name` varchar(80), `form_description` varchar(255), foreign key (`service_id`) references `services`(`service_id`));create table `party_forms` (`party_id` integer not null, `form_id` integer not null, `date_completion_started` datetime not null, `form_status_code` varchar(15) not null, `date_fully_completed` datetime, primary key (`party_id`, `form_id`), foreign key (`party_id`) references `parties`(`party_id`), foreign key (`form_id`) references `forms`(`form_id`));",
    "output": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List the description of the outcomes for all projects.",
    "input": "create table `research_outcomes` (`outcome_code` varchar(10) primary key, `outcome_description` varchar(255) not null);create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));",
    "output": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code"
  },
  {
    "instruction": "Find all actors born in \" Austin \" after 1980",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT name FROM actor WHERE birth_city = \"Austin\" AND birth_year > 1980;"
  },
  {
    "instruction": "What are the ids of all students who live in CHI?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT StuID FROM Student WHERE city_code = \"CHI\""
  },
  {
    "instruction": "Who is the founders of companies whose first letter is S?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'"
  },
  {
    "instruction": "Give the codes of document types that have more than 2 corresponding documents.",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*) > 2"
  },
  {
    "instruction": "Return the names of the gymnasts.",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID"
  },
  {
    "instruction": "What are the codes of all the courses that are located in room KLR209?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT class_code FROM CLASS WHERE class_room = 'KLR209'"
  },
  {
    "instruction": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
    "input": "create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\""
  },
  {
    "instruction": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < 2"
  },
  {
    "instruction": "Find the delegates who are from counties with population below 100000.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population < 100000"
  },
  {
    "instruction": "What are the memories and carriers of phones?",
    "input": "create table \"phone\" (\"Name\" text, \"Phone_ID\" int, \"Memory_in_G\" int, \"Carrier\" text, \"Price\" real, primary key (\"Phone_ID\"));",
    "output": "SELECT Memory_in_G, Carrier FROM phone"
  },
  {
    "instruction": "Find the average millisecond length of Latin and Pop tracks.",
    "input": "create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Latin\" OR T1.Name = \"Pop\""
  },
  {
    "instruction": "Which faculty members advise two ore more students? Give me their faculty ids.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID HAVING count(*) >= 2"
  },
  {
    "instruction": "Show different type codes of products and the number of products with each type code.",
    "input": "create table products (product_id integer not null, product_type_code char(15), product_name varchar(255), product_price decimal(20, 4), primary key (product_id), unique (product_id));",
    "output": "SELECT Product_Type_Code, COUNT(*) FROM Products GROUP BY Product_Type_Code"
  },
  {
    "instruction": "Which employees have the role with code \"HR\"? Find their names.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT employee_name FROM Employees WHERE role_code = \"HR\""
  },
  {
    "instruction": "what is the smallest state that the mississippi river runs through",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );"
  },
  {
    "instruction": "What is the average base price of rooms, for each bed type?",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT bedType, avg(basePrice) FROM Rooms GROUP BY bedType;"
  },
  {
    "instruction": "When are the birthdays of customer who are classified as 'Good Customer' status?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer'"
  },
  {
    "instruction": "what states have no bordering state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );"
  },
  {
    "instruction": "What are the names of documents that do not have any sections?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `document_sections` (`section_id` integer primary key, `document_code` varchar(15) not null, `section_sequence` integer, `section_code` varchar(20), `section_title` varchar(80), foreign key (`document_code`) references `documents`(`document_code`));",
    "output": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)"
  },
  {
    "instruction": "What are the names, classes, and dates for all races?",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));",
    "output": "SELECT name, CLASS, date FROM race"
  },
  {
    "instruction": "Find the number of distinct bed types available in this inn.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT count(DISTINCT bedType) FROM Rooms;"
  },
  {
    "instruction": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));",
    "output": "SELECT Amount_Settled, Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1"
  },
  {
    "instruction": "Find the description of the club \"Pen and Paper Gaming\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT clubdesc FROM club WHERE clubname = \"Pen and Paper Gaming\""
  },
  {
    "instruction": "Find all the songs that do not have a back vocal.",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"back\""
  },
  {
    "instruction": "Find Alice's friends of friends.",
    "input": "create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name WHERE T2.name = 'Alice' AND T4.name != 'Alice'"
  },
  {
    "instruction": "List the vehicle flight number, date and pilot of all the flights, ordered by altitude.",
    "input": "create table \"flight\" (\"id\" int, \"Vehicle_Flight_number\" text, \"Date\" text, \"Pilot\" text, \"Velocity\" real, \"Altitude\" real, \"airport_id\" int, \"company_id\" int, primary key (\"id\"), foreign key (\"airport_id\") references `airport`(\"id\"), foreign key (\"company_id\") references `operate_company`(\"id\"));",
    "output": "SELECT vehicle_flight_number, date, pilot FROM flight ORDER BY altitude ASC"
  },
  {
    "instruction": "A list of the top 10 countries by average invoice size. List country name and average invoice size.",
    "input": "create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT billing_country, AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;"
  },
  {
    "instruction": "return me all the organizations .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));",
    "output": "SELECT name FROM organization;"
  },
  {
    "instruction": "Find all Bars reviewed by Patrick with at least 3 stars",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.rating >= 3 AND t2.category_name = \"Bars\" AND t4.name = \"Patrick\";"
  },
  {
    "instruction": "Return all players sorted by college in ascending alphabetical order.",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT player FROM match_season ORDER BY College ASC"
  },
  {
    "instruction": "Parsing papers from acl 2012",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"Parsing\" AND t3.year = 2012 AND t4.venuename = \"acl\";"
  },
  {
    "instruction": "Show the names of people, and dates and venues of debates they are on the affirmative side.",
    "input": "create table \"debate_people\" (\"Debate_ID\" int, \"Affirmative\" int, \"Negative\" int, \"If_Affirmative_Win\" bool, primary key (\"Debate_ID\",\"Affirmative\",\"Negative\"), foreign key (\"Debate_ID\") references `debate`(\"Debate_ID\"), foreign key (\"Affirmative\") references `people`(\"People_ID\"), foreign key (\"Negative\") references `people`(\"People_ID\"));create table \"debate\" (\"Debate_ID\" int, \"Date\" text, \"Venue\" text, \"Num_of_Audience\" int, primary key (\"Debate_ID\"));create table \"people\" (\"People_ID\" int, \"District\" text, \"Name\" text, \"Party\" text, \"Age\" int, primary key (\"People_ID\"));",
    "output": "SELECT T3.Name, T2.Date, T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID"
  },
  {
    "instruction": "What is the customer id with most number of cards, and how many does he have?",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT customer_id, count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of actors ordered descending by the year in which their musical was awarded?",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC"
  },
  {
    "instruction": "top author in syntactic parsing",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "What is the sum of budgets of the Marketing and Finance departments?",
    "input": "create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));",
    "output": "SELECT sum(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'"
  },
  {
    "instruction": "What is the type and id of the organization that has the most research staff?",
    "input": "create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));create table `research_staff` (`staff_id` integer primary key, `employer_organisation_id` integer not null, `staff_details` varchar(255) not null, foreign key (`employer_organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT T1.organisation_type, T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_name, access_count FROM documents ORDER BY access_count DESC LIMIT 1"
  },
  {
    "instruction": "what did sharon goldwater write ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "What are the names of all races held between 2009 and 2011?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011"
  },
  {
    "instruction": "What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"pitStops\" (\"raceId\" integer, \"driverId\" integer, \"stop\" integer, \"lap\" integer, \"time\" text, \"duration\" text, \"milliseconds\" integer, primary key (\"raceId\", \"driverId\", \"stop\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) > 8 UNION SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) > 5"
  },
  {
    "instruction": "What are the first and last names of the 5 customers who purchased something most recently?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5;"
  },
  {
    "instruction": "What are the names of instructors who have taught C Programming courses?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'"
  },
  {
    "instruction": "how large is new mexico",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT area FROM state WHERE state_name = \"new mexico\";"
  },
  {
    "instruction": "Who were the governors of the parties associated with delegates from district 1?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1"
  },
  {
    "instruction": "What are the different stage positions for all musicians whose first name is \"Solveig\"?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE Firstname = \"Solveig\""
  },
  {
    "instruction": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T1.title, T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY T1.director, T1.title"
  },
  {
    "instruction": "What is the famous release date of the artist with the oldest age?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));",
    "output": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1"
  },
  {
    "instruction": "how many degrees were conferred between 1998 and 2002?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT T1.campus, sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year >= 1998 AND T2.year <= 2002 GROUP BY T1.campus"
  },
  {
    "instruction": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.",
    "input": "create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T1.balance + T2.balance"
  },
  {
    "instruction": "Find the maximum age of all the students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT max(Age) FROM STUDENT"
  },
  {
    "instruction": "What are the names of patients who are staying in room 111 and have an undergoing treatment?",
    "input": "create table undergoes (patient integer not null, procedures integer not null, stay integer not null, dateundergoes datetime not null, physician integer not null, assistingnurse integer, primary key(patient, procedures, stay, dateundergoes), constraint fk_undergoes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_undergoes_procedures_code foreign key(procedures) references procedures(code), constraint fk_undergoes_stay_stayid foreign key(stay) references stay(stayid), constraint fk_undergoes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_undergoes_nurse_employeeid foreign key(assistingnurse) references nurse(employeeid));create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));create table stay (stayid integer primary key not null, patient integer not null, room integer not null, staystart datetime not null, stayend datetime not null, constraint fk_stay_patient_ssn foreign key(patient) references patient(ssn), constraint fk_stay_room_number foreign key(room) references room(roomnumber));",
    "output": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID WHERE T3.room = 111"
  },
  {
    "instruction": "Count the products that have the color description \"white\" or have the characteristic name \"hot\".",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"white\" OR t3.characteristic_name = \"hot\""
  },
  {
    "instruction": "Find all the building full names containing the word \"court\".",
    "input": "create table apartment_buildings (building_id integer not null, building_short_name char(15), building_full_name varchar(80), building_description varchar(255), building_address varchar(255), building_manager varchar(50), building_phone varchar(80), primary key (building_id), unique (building_id));",
    "output": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\""
  },
  {
    "instruction": "Return the dates of ceremony and the results of all music festivals",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));",
    "output": "SELECT Date_of_ceremony, RESULT FROM music_festival"
  },
  {
    "instruction": "What is the average training hours of all players?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT avg(HS) FROM Player"
  },
  {
    "instruction": "Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems.",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));",
    "output": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported < ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )"
  },
  {
    "instruction": "Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.",
    "input": "create table customer (customer_id smallint unsigned not null, store_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, email varchar(50) default null, address_id smallint unsigned not null, active boolean not null default true, create_date datetime not null, last_update timestamp default current_timestamp, primary key (customer_id), foreign key (address_id) references address (address_id), foreign key (store_id) references store (store_id));create table rental (rental_id int not null, rental_date datetime not null, inventory_id mediumint unsigned not null, customer_id smallint unsigned not null, return_date datetime default null, staff_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (rental_id), foreign key (staff_id) references staff (staff_id), foreign key (inventory_id) references inventory (inventory_id), foreign key (customer_id) references customer (customer_id));",
    "output": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date > '2005-08-23 02:06:01' )"
  },
  {
    "instruction": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100"
  },
  {
    "instruction": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
    "input": "create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));",
    "output": "SELECT product FROM product WHERE max_page_size = \"A4\" AND pages_per_minute_color < 5"
  },
  {
    "instruction": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name FROM instructor WHERE name LIKE '%dar%'"
  },
  {
    "instruction": "Which customer status code has least number of customers?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;"
  },
  {
    "instruction": "What is each customer's move in date, and the corresponding customer id and details?",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255), primary key (customer_id));create table customer_events (customer_event_id integer not null, customer_id integer, date_moved_in datetime, property_id integer, resident_id integer, thing_id integer not null, primary key (customer_event_id), foreign key (thing_id) references things (thing_id), foreign key (customer_id) references customers (customer_id), foreign key (resident_id, property_id, date_moved_in) references residents (resident_id, property_id, date_moved_in));",
    "output": "SELECT T2.date_moved_in, T1.customer_id, T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id"
  },
  {
    "instruction": "What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT name, headquarter, revenue FROM manufacturers ORDER BY revenue DESC"
  },
  {
    "instruction": "Tell me the ages of the oldest and youngest students studying major 600.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT max(Age), min(Age) FROM STUDENT WHERE Major = 600"
  },
  {
    "instruction": "What is the booking status code of the apartment with apartment number \"Suite 634\"?",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = \"Suite 634\""
  },
  {
    "instruction": "What are the names of enzymes that include the string 'ALA'?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\""
  },
  {
    "instruction": "papers in semantic parsing for each year",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"semantic parsing\" GROUP BY t3.year ORDER BY t3.year DESC;"
  },
  {
    "instruction": "What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
  },
  {
    "instruction": "papers on Question Answering experiments",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "Show the crime rates of counties in ascending order of number of police officers.",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC"
  },
  {
    "instruction": "return me the number of papers by \" H. V. Jagadish \" on VLDB conference after 2000 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\" AND t2.name = \"VLDB\" AND t4.year > 2000;"
  },
  {
    "instruction": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT T2.firstname, T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom GROUP BY T2.firstname, T2.lastname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT cName FROM college WHERE enr > (SELECT max(enr) FROM college WHERE state = 'FL')"
  },
  {
    "instruction": "What are the names and headquarters of all manufacturers, ordered by revenue descending?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT name, headquarter FROM manufacturers ORDER BY revenue DESC"
  },
  {
    "instruction": "Find the ids of all distinct customers who made order after some orders that were Cancelled.",
    "input": "create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date > (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code = \"Cancelled\")"
  },
  {
    "instruction": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Starting_Year FROM technician WHERE Team = \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team = \"CWS\""
  },
  {
    "instruction": "What is the number of different class sections offered in the course ACCT-211?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211'"
  },
  {
    "instruction": "Find the numbers of different majors and cities.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(DISTINCT major), count(DISTINCT city_code) FROM student"
  },
  {
    "instruction": "Which 3 players won the most player awards? List their full name and id.",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table player_award (player_id text, award_id text, year integer, league_id text, tie text, notes text, foreign key (player_id) references player(player_id));",
    "output": "SELECT T1.name_first, T1.name_last, T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;"
  },
  {
    "instruction": "Give the color description that is least common across products.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "Show the dates, places, and names of events in descending order of the attendance.",
    "input": "create table \"event\" (\"Event_ID\" int, \"Date\" text, \"Venue\" text, \"Name\" text, \"Event_Attendance\" int, primary key (\"Event_ID\"));",
    "output": "SELECT Date, Name, venue FROM event ORDER BY Event_Attendance DESC"
  },
  {
    "instruction": "How many employees who are IT staff are from each city?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*), city FROM employees WHERE title = 'IT Staff' GROUP BY city"
  },
  {
    "instruction": "How many document types are there?",
    "input": "create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));",
    "output": "SELECT count(*) FROM Ref_document_types"
  },
  {
    "instruction": "What are the first names of the professors who do not play Canoeing or Kayaking as activities?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));create table activity (actid integer primary key, activity_name varchar(25));",
    "output": "SELECT lname FROM faculty WHERE rank = 'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'"
  },
  {
    "instruction": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"lapTimes\" (\"raceId\" integer, \"driverId\" integer, \"lap\" integer, \"position\" integer, \"time\" text, \"milliseconds\" integer, primary key(\"raceId\", \"driverId\", \"lap\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT DISTINCT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000"
  },
  {
    "instruction": "What is the nationality of the actress \" Christoph Waltz \" ?",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT nationality FROM actor WHERE name = \"Christoph Waltz\";"
  },
  {
    "instruction": "What are the names of projects that have not been assigned?",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));",
    "output": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)"
  },
  {
    "instruction": "What is the unit of measurement of product named \"cumin\"?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_product_categories` (`product_category_code` varchar(15) primary key, `product_category_description` varchar(80), `unit_of_measure` varchar(20));",
    "output": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"cumin\""
  },
  {
    "instruction": "papers by sharon goldwater ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "Show names of technicians in ascending order of quality rank of the machine they are assigned.",
    "input": "create table \"repair_assignment\" (\"technician_id\" int, \"repair_ID\" int, \"Machine_ID\" int, primary key (\"technician_id\",\"repair_ID\",\"Machine_ID\"), foreign key (`technician_id`) references `technician`(`technician_id`), foreign key (`repair_id`) references `repair`(`repair_id`), foreign key (`machine_id`) references `machine`(`machine_id`));create table \"machine\" (\"Machine_ID\" int, \"Making_Year\" int, \"Class\" text, \"Team\" text, \"Machine_series\" text, \"value_points\" real, \"quality_rank\" int, primary key (\"Machine_ID\"));create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID ORDER BY T2.quality_rank"
  },
  {
    "instruction": "where is a good french restaurant in the yosemite and mono lake area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"yosemite and mono lake area\" AND t1.food_type = \"french\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "What are the last names of individuals who have been contact individuals for an organization?",
    "input": "create table `individuals` (`individual_id` integer primary key, `individual_first_name` varchar(80), `individual_middle_name` varchar(80), `inidividual_phone` varchar(80), `individual_email` varchar(80), `individual_address` varchar(255), `individual_last_name` varchar(80));create table `organization_contact_individuals` (`individual_id` integer not null, `organization_id` integer not null, `date_contact_from` datetime not null, `date_contact_to` datetime, primary key (`individual_id`,`organization_id`), foreign key (`organization_id`) references `organizations`(`organization_id`), foreign key (`individual_id`) references `individuals`(`individual_id`));",
    "output": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id"
  },
  {
    "instruction": "Find the name of the department that offers the highest total credits?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1"
  },
  {
    "instruction": "where can i eat some good arabic food on buchanan in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "What is the id of the most recent order?",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1"
  },
  {
    "instruction": "Show ids for the faculty members who don't advise any student.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student"
  },
  {
    "instruction": "how many places for chinese are there in the bay area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"chinese\";"
  },
  {
    "instruction": "What papers has brian curless written about convolution ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"brian curless\" AND t5.keyphrasename = \"convolution\";"
  },
  {
    "instruction": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f) > 60"
  },
  {
    "instruction": "how many people stay in california",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM state WHERE state_name = \"california\";"
  },
  {
    "instruction": "ACL papers in 2016 with neural attention in the title",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.title LIKE \"neural attention\" AND t1.year = 2016 AND t2.venuename = \"ACL\";"
  },
  {
    "instruction": "List names of all pilot in descending order of age.",
    "input": "create table `pilot` (`pilot_id` int(11) not null, `name` varchar(50) not null, `age` int(11) not null, primary key (`pilot_id`));",
    "output": "SELECT Name FROM pilot ORDER BY Age DESC"
  },
  {
    "instruction": "How many lessons were in cancelled state?",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";"
  },
  {
    "instruction": "Find the male friend of Alice whose job is a doctor?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'male' AND T1.job = 'doctor'"
  },
  {
    "instruction": "Show the role description and the id of the project staff involved in most number of project outcomes?",
    "input": "create table `staff_roles` (`role_code` varchar(10) primary key, `role_description` varchar(255) not null);create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));",
    "output": "SELECT T1.role_description, T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show all main industry and total market value in each industry.",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT main_industry, sum(market_value) FROM company GROUP BY main_industry"
  },
  {
    "instruction": "Give me a list of all the last names of authors sorted in alphabetical order",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));",
    "output": "SELECT lname FROM authors ORDER BY lname"
  },
  {
    "instruction": "What are the latest papers by oren etzioni ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"oren etzioni\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "what is the number of different channel owners?",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));",
    "output": "SELECT count(DISTINCT OWNER) FROM channel"
  },
  {
    "instruction": "What are the actual delivery dates of orders with quantity 1?",
    "input": "create table customer_orders (order_id integer not null , customer_id integer not null, store_id integer not null, order_date datetime not null, planned_delivery_date datetime not null, actual_delivery_date datetime not null, other_order_details varchar(255), primary key (order_id), unique (order_id), foreign key (customer_id) references customers (customer_id), foreign key (store_id) references stores (store_id));create table order_items (order_item_id integer not null , order_id integer not null, product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), primary key (order_item_id), foreign key (order_id) references customer_orders (order_id), foreign key (product_id) references products (product_id));",
    "output": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1"
  },
  {
    "instruction": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `airport_aircraft` (\"ID\" int, \"Airport_ID\" int, \"Aircraft_ID\" int, primary key (\"Airport_ID\",\"Aircraft_ID\"), foreign key (\"Airport_ID\") references `airport`(`airport_id`), foreign key (\"Aircraft_ID\") references `aircraft`(`aircraft_id`));create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `airport_aircraft` (\"ID\" int, \"Airport_ID\" int, \"Aircraft_ID\" int, primary key (\"Airport_ID\",\"Aircraft_ID\"), foreign key (\"Airport_ID\") references `airport`(`airport_id`), foreign key (\"Aircraft_ID\") references `aircraft`(`aircraft_id`));create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = \"London Gatwick\""
  },
  {
    "instruction": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table accounts (custid bigint not null primary key, name varchar(64) not null);create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT avg(balance) FROM savings))"
  },
  {
    "instruction": "List the names of companies in descending order of market value.",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC"
  },
  {
    "instruction": "Return me the number of tips that are written by Michelle .",
    "input": "create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));create table \"tip\" (\"tip_id\" int, \"business_id\" text, \"text\" text, \"user_id\" text, \"likes\" int, \"year\" int, \"month\" text, primary key(\"tip_id\") foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t2.name = \"Michelle\";"
  },
  {
    "instruction": "What are the first names of all professors not teaching any classes?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num"
  },
  {
    "instruction": "For each account type, find the average account balance of customers with credit score lower than 50.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT avg(acc_bal), acc_type FROM customer WHERE credit_score < 50 GROUP BY acc_type"
  },
  {
    "instruction": "Find the name of the courses that do not have any prerequisite?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));",
    "output": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
  },
  {
    "instruction": "Find all users who have written tips for \" Barrio Cafe \" in 2015",
    "input": "create table \"tip\" (\"tip_id\" int, \"business_id\" text, \"text\" text, \"user_id\" text, \"likes\" int, \"year\" int, \"month\" text, primary key(\"tip_id\") foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.name = \"Barrio Cafe\" AND t2.year = 2015;"
  },
  {
    "instruction": "Show the description for role name \"Proof Reader\".",
    "input": "create table roles (role_code char(15) not null, role_name varchar(255), role_description varchar(255), primary key (role_code));",
    "output": "SELECT role_description FROM ROLES WHERE role_name = \"Proof Reader\""
  },
  {
    "instruction": "Show each author and the number of workshops they submitted to.",
    "input": "create table \"Acceptance\" (\"Submission_ID\" int, \"Workshop_ID\" int, \"Result\" text, primary key (\"Submission_ID\",\"Workshop_ID\"), foreign key (\"Submission_ID\") references `submission`(\"Submission_ID\"), foreign key (\"Workshop_ID\") references `workshop`(\"Workshop_ID\"));create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT T2.Author, COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author"
  },
  {
    "instruction": "Find the name of the room with the maximum occupancy.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;"
  },
  {
    "instruction": "Find the first names of the faculty members who participate in Canoeing and Kayaking.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));create table activity (actid integer primary key, activity_name varchar(25));create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));create table activity (actid integer primary key, activity_name varchar(25));",
    "output": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'"
  },
  {
    "instruction": "how many papers does Mirella Lapata cite",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t3 ON t2.paperid = t3.citingpaperid WHERE t1.authorname = \"Mirella Lapata\";"
  },
  {
    "instruction": "Find the dates of assessment notes for students with first name \"Fanny\".",
    "input": "create table `assessment_notes` (`notes_id` integer not null , `student_id` integer, `teacher_id` integer not null, `date_of_notes` datetime, `text_of_notes` varchar(255), `other_details` varchar(255), foreign key (`student_id`) references `students`(`student_id`), foreign key (`teacher_id`) references `teachers`(`teacher_id`));create table `students` (`student_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(40), `last_name` varchar(40), `cell_mobile_number` varchar(40), `email_address` varchar(40), `date_first_rental` datetime, `date_left_university` datetime, `other_student_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\""
  },
  {
    "instruction": "Find the number of distinct stages in claim processing.",
    "input": "create table claims_processing_stages (claim_stage_id integer not null, next_claim_stage_id integer, claim_status_name varchar(255) not null, claim_status_description varchar(255) not null, primary key (claim_stage_id));",
    "output": "SELECT count(*) FROM claims_processing_stages"
  },
  {
    "instruction": "List all product names in ascending order of price.",
    "input": "create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC"
  },
  {
    "instruction": "What is the average price of the products for each category?",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `product_category_code` varchar(20) not null, `date_product_first_available` datetime, `date_product_discontinued` datetime, `product_name` varchar(80), `product_description` varchar(255), `product_price` decimal(19, 4));",
    "output": "SELECT avg(product_price), product_category_code FROM products GROUP BY product_category_code"
  },
  {
    "instruction": "Find the name and active date of the customer that use email as the contact channel.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_contact_channels` (`customer_id` integer not null, `channel_code` varchar(15) not null, `active_from_date` datetime not null, `active_to_date` datetime, `contact_number` varchar(50) not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.customer_name, t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'"
  },
  {
    "instruction": "what is the highest point in the country",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "in what conferences does Daniella Coelho publish ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Daniella Coelho\";"
  },
  {
    "instruction": "return me the number of the keywords related to \" H. V. Jagadish \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t2.name = \"H. V. Jagadish\";"
  },
  {
    "instruction": "What are the names of all the subjects.",
    "input": "create table `subjects` (`subject_id` integer primary key, `subject_name` varchar(120));",
    "output": "SELECT subject_name FROM SUBJECTS"
  },
  {
    "instruction": "What are the names of wines produced before any wine from the Brander winery?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Name FROM WINE WHERE YEAR < (SELECT min(YEAR) FROM WINE WHERE Winery = \"Brander\")"
  },
  {
    "instruction": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
    "input": "create table `product_suppliers` (`product_id` integer not null, `supplier_id` integer not null, `date_supplied_from` datetime not null, `date_supplied_to` datetime, `total_amount_purchased` varchar(80), `total_value_purchased` decimal(19, 4), primary key (`product_id`, `supplier_id`), foreign key (`supplier_id`) references `suppliers`(`supplier_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased) > 50000 OR avg(total_amount_purchased) < 30000"
  },
  {
    "instruction": "How many distinct hometowns did these people have?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT count(DISTINCT Hometown) FROM people"
  },
  {
    "instruction": "What is the name of the highest rated wine?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Name FROM WINE ORDER BY Score LIMIT 1"
  },
  {
    "instruction": "Find the list of distinct ranks for faculty.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT DISTINCT rank FROM Faculty"
  },
  {
    "instruction": "What are the names of all stations with a latitude smaller than 37.5?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT name FROM station WHERE lat < 37.5"
  },
  {
    "instruction": "What is the date of birth of every customer whose status code is 'Good Customer'?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer'"
  },
  {
    "instruction": "Find the first and last name of students whose age is younger than the average age.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT fname, lname FROM student WHERE age < (SELECT avg(age) FROM student)"
  },
  {
    "instruction": "Which contact channel codes were used less than 5 times?",
    "input": "create table `customer_contact_channels` (`customer_id` integer not null, `channel_code` varchar(15) not null, `active_from_date` datetime not null, `active_to_date` datetime, `contact_number` varchar(50) not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id) < 5"
  },
  {
    "instruction": "return me the journal, which has the most number of papers containing keyword \" Relational Database \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid WHERE t1.keyword = \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;"
  },
  {
    "instruction": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.",
    "input": "create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table scientists (ssn int, name char(30) not null, primary key (ssn));",
    "output": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%'"
  },
  {
    "instruction": "What is the total number of people who have no friends living in Austin?",
    "input": "create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city = 'Austin')"
  },
  {
    "instruction": "Count the number of rooms in Lamberton with capacity lower than 50.",
    "input": "create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));",
    "output": "SELECT count(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50"
  },
  {
    "instruction": "what is the name of the state with the lowest point",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Show the name of employees with three lowest salaries.",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3"
  },
  {
    "instruction": "which state has the longest river",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );"
  },
  {
    "instruction": "What are the attribute data types with more than 3 attribute definitions?",
    "input": "create table `attribute_definitions` (`attribute_id` integer primary key, `attribute_name` varchar(30), `attribute_data_type` varchar(10));",
    "output": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3"
  },
  {
    "instruction": "where is a restaurant in mountain view that serves good arabic food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "How many tracks are in the AAC audio file media type?",
    "input": "create table `mediatype` (`mediatypeid` integer not null , `name` varchar(120) default null , primary key (`mediatypeid`));create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = \"AAC audio file\""
  },
  {
    "instruction": "What is the average speed of roller coasters?",
    "input": "create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT avg(Speed) FROM roller_coaster"
  },
  {
    "instruction": "What are the movies related to nuclear weapons",
    "input": "create table \"tags\" (\"id\" int, \"msid\" int, \"kid\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"kid\") references `keyword`(\"kid\"));create table \"keyword\" (\"id\" int, \"keyword\" text, primary key(\"id\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid WHERE t1.keyword = \"nuclear weapons\";"
  },
  {
    "instruction": "Count the number of customers that have an email containing \"gmail.com\".",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\""
  },
  {
    "instruction": "How many students are older than average for each gender?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*), sex FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY sex"
  },
  {
    "instruction": "For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT grade, count(DISTINCT classroom), count(*) FROM list GROUP BY grade"
  },
  {
    "instruction": "Find the names of the customers who have order status both \"On Road\" and \"Shipped\".",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""
  },
  {
    "instruction": "What is the name of the customer that has purchased the most items?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1"
  },
  {
    "instruction": "Give me the name of all the actors from Afghanistan",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT name FROM actor WHERE nationality = \"Afghanistan\";"
  },
  {
    "instruction": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?",
    "input": "create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT max(support_rate), min(consider_rate), min(oppose_rate) FROM candidate"
  },
  {
    "instruction": "Show the organizer and name for churches that opened between 1830 and 1840.",
    "input": "create table \"church\" (\"Church_ID\" int, \"Name\" text, \"Organized_by\" text, \"Open_Date\" int, \"Continuation_of\" text, primary key (\"Church_ID\"));",
    "output": "SELECT organized_by, name FROM church WHERE open_date BETWEEN 1830 AND 1840"
  },
  {
    "instruction": "List all employees in the circulation history of the document with id 1. List the employee's name.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));create table circulation_history (document_id integer not null, draft_number integer not null, copy_number integer not null, employee_id integer not null, primary key (document_id, draft_number, copy_number, employee_id), foreign key (document_id, draft_number, copy_number) references draft_copies (document_id, draft_number, copy_number), foreign key (employee_id) references employees (employee_id));",
    "output": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;"
  },
  {
    "instruction": "Which film has the most number of actors or actresses? List the film name, film id and description.",
    "input": "create table film_actor (actor_id smallint unsigned not null, film_id smallint unsigned not null, last_update timestamp not null default current_timestamp, primary key (actor_id, film_id), foreign key (actor_id) references actor (actor_id), foreign key (film_id) references film (film_id));create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));",
    "output": "SELECT T2.title, T2.film_id, T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which author has written the most papers? Find his or her last name.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.fname, t1.lname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the name and flag of ships that are not steered by any captain with Midshipman rank.",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT name, flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman')"
  },
  {
    "instruction": "what papers have fewer than 5 citations by ACL papers ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t2.venuename = \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid ) < 5;"
  },
  {
    "instruction": "Show storm name with at least two regions and 10 cities affected.",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected) >= 10"
  },
  {
    "instruction": "Give the phones for departments in room 268.",
    "input": "create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);",
    "output": "SELECT DPhone FROM DEPARTMENT WHERE Room = 268"
  },
  {
    "instruction": "What is all the product data, as well as  each product's manufacturer?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"
  },
  {
    "instruction": "Find the names of rooms that have been reserved for more than 60 times.",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING count(*) > 60"
  },
  {
    "instruction": "Show all distinct city where branches with at least 100 memberships are located.",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT DISTINCT city FROM branch WHERE membership_amount >= 100"
  },
  {
    "instruction": "What is the customer first, last name and id with least number of accounts.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "List the distinct region of clubs in ascending alphabetical order.",
    "input": "create table \"club\" (\"Club_ID\" int, \"name\" text, \"Region\" text, \"Start_year\" text, primary key (\"Club_ID\"));",
    "output": "SELECT DISTINCT Region FROM club ORDER BY Region ASC"
  },
  {
    "instruction": "How many students are enrolled in some classes that are taught by an accounting professor?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'"
  },
  {
    "instruction": "Return the maximum and minimum population among all counties.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT max(Population), min(Population) FROM county"
  },
  {
    "instruction": "What are the names of the students who took classes in 2009 or 2010?",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table takes (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), grade varchar(2), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references student (id)\n        ON delete cascade);",
    "output": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE YEAR = 2009 OR YEAR = 2010"
  },
  {
    "instruction": "Which physician was trained in the procedure that costs the most.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table trained_in (physician integer not null, treatment integer not null, certificationdate datetime not null, certificationexpires datetime not null, constraint fk_trained_in_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_trained_in_procedures_code foreign key(treatment) references procedures(code), primary key(physician, treatment));create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment ORDER BY T3.cost DESC LIMIT 1"
  },
  {
    "instruction": "Show all information about each body builder.",
    "input": "create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));",
    "output": "SELECT * FROM body_builder"
  },
  {
    "instruction": "Find the number of users in each role.",
    "input": "create table `users` (`user_id` integer primary key, `role_code` varchar(15) not null, `user_name` varchar(40), `user_login` varchar(40), `password` varchar(40), foreign key (`role_code`) references `roles`(`role_code`));",
    "output": "SELECT count(*), role_code FROM users GROUP BY role_code"
  },
  {
    "instruction": "what state borders kentucky",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "Find the number of students in one classroom.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT count(*), classroom FROM list GROUP BY classroom"
  },
  {
    "instruction": "Find number of products which Sony does not make.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony')"
  },
  {
    "instruction": "Find the name of the customer who made an order most recently.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.order_date DESC LIMIT 1"
  },
  {
    "instruction": "Report the name of all campuses in Los Angeles county.",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE county = \"Los Angeles\""
  },
  {
    "instruction": "For each reviewer id, what is the title and rating for the movie with the smallest rating?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, T1.rID, T1.stars, min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.rID"
  },
  {
    "instruction": "How many different advisors are listed?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(DISTINCT advisor) FROM Student"
  },
  {
    "instruction": "What are the names of the pilots in alphabetical order?",
    "input": "create table `pilot` (`pilot_id` int(11) not null, `name` varchar(50) not null, `age` int(11) not null, primary key (`pilot_id`));",
    "output": "SELECT Name FROM pilot ORDER BY Name ASC"
  },
  {
    "instruction": "Find the the name of the customers who have a loan with amount more than 3000.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000"
  },
  {
    "instruction": "Show names of technicians and the number of machines they are assigned to repair.",
    "input": "create table \"repair_assignment\" (\"technician_id\" int, \"repair_ID\" int, \"Machine_ID\" int, primary key (\"technician_id\",\"repair_ID\",\"Machine_ID\"), foreign key (`technician_id`) references `technician`(`technician_id`), foreign key (`repair_id`) references `repair`(`repair_id`), foreign key (`machine_id`) references `machine`(`machine_id`));create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT T2.Name, COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name"
  },
  {
    "instruction": "Which head's name has the substring 'Ha'? List the id and name.",
    "input": "create table \"head\" (\"head_ID\" int, \"name\" text, \"born_state\" text, \"age\" real, primary key (\"head_ID\"));",
    "output": "SELECT head_id, name FROM head WHERE name LIKE '%Ha%'"
  },
  {
    "instruction": "Find the name of medication used on the patient who stays in room 111?",
    "input": "create table stay (stayid integer primary key not null, patient integer not null, room integer not null, staystart datetime not null, stayend datetime not null, constraint fk_stay_patient_ssn foreign key(patient) references patient(ssn), constraint fk_stay_room_number foreign key(room) references room(roomnumber));create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));create table medication (code integer primary key not null, name varchar(30) not null, brand varchar(30) not null, description varchar(30) not null);",
    "output": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE room = 111"
  },
  {
    "instruction": "How many different bike ids are there?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT count(DISTINCT bike_id) FROM trip"
  },
  {
    "instruction": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.",
    "input": "create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));",
    "output": "SELECT name, LOCATION FROM station ORDER BY Annual_entry_exit, Annual_interchanges"
  },
  {
    "instruction": "How many distinct artists do the volumes associate to?",
    "input": "create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT COUNT(DISTINCT Artist_ID) FROM volume"
  },
  {
    "instruction": "Compute the average score of submissions.",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT avg(Scores) FROM submission"
  },
  {
    "instruction": "Show the average price of hotels for each star rating code.",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT star_rating_code, avg(price_range) FROM HOTELS GROUP BY star_rating_code"
  },
  {
    "instruction": "What are the different region names, ordered by labels?",
    "input": "create table \"region\" (\"Region_ID\" int, \"Region_name\" text, \"Date\" text, \"Label\" text, \"Format\" text, \"Catalogue\" text, primary key (\"Region_ID\"));",
    "output": "SELECT DISTINCT region_name FROM region ORDER BY Label"
  },
  {
    "instruction": "How many clubs have total medals less than 10?",
    "input": "create table \"club_rank\" (\"Rank\" real, \"Club_ID\" int, \"Gold\" real, \"Silver\" real, \"Bronze\" real, \"Total\" real, primary key (\"Rank\",\"Club_ID\") foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT count(*) FROM club_rank WHERE Total < 10"
  },
  {
    "instruction": "What is the role name and role description for employee called Ebba?",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));create table roles (role_code char(15) not null, role_name varchar(255), role_description varchar(255), primary key (role_code));",
    "output": "SELECT T2.role_name, T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T1.employee_name = \"Ebba\""
  },
  {
    "instruction": "How many customers use each payment method?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));",
    "output": "SELECT payment_method_code, count(*) FROM customers GROUP BY payment_method_code"
  },
  {
    "instruction": "Which allergy type has least number of allergies?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "List the nations that have more than two ships.",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*) > 2"
  },
  {
    "instruction": "Find the name and id of accounts whose checking balance is below the maximum checking balance.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.custid, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT max(balance) FROM checking)"
  },
  {
    "instruction": "Give the names of the courses with at least five enrollments.",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));create table enrolled_in (stuid integer, cid varchar(7), grade varchar(2), foreign key(stuid) references student(stuid), foreign key(cid) references course(cid), foreign key(grade) references gradeconversion(lettergrade));",
    "output": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT(*) >= 5"
  },
  {
    "instruction": "What amenities does Smith Hall have in alphabetical order?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall' ORDER BY T3.amenity_name"
  },
  {
    "instruction": "Give me the best restaurant in san francisco for french food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" );"
  },
  {
    "instruction": "In which city do the most employees live and how many of them live there?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.city, count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "instruction": "return me the paper in VLDB conference with the most citations .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;"
  },
  {
    "instruction": "Count the number of people of each sex who have a weight higher than 85.",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));",
    "output": "SELECT count(*), sex FROM people WHERE weight > 85 GROUP BY sex"
  },
  {
    "instruction": "what are the capital cities of the states which border texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border WHERE t1.state_name = \"texas\";"
  },
  {
    "instruction": "Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.",
    "input": "create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T1.theme, T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.ticket_price > (SELECT avg(ticket_price) FROM exhibition)"
  },
  {
    "instruction": "How many businesses are there in the \" Stone Meadows \" neighbourhood in Madison ?",
    "input": "create table \"neighbourhood\" (\"id\" int, \"business_id\" text, \"neighbourhood_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM neighbourhood AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Madison\" AND t2.neighbourhood_name = \"Stone Meadows\";"
  },
  {
    "instruction": "Find the total and average amount of settlements.",
    "input": "create table settlements (settlement_id integer not null, claim_id integer, effective_date date, settlement_amount real, primary key (settlement_id), unique (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT sum(settlement_amount), avg(settlement_amount) FROM settlements"
  },
  {
    "instruction": "For each location, how many gas stations are there in order?",
    "input": "create table \"gas_station\" (\"Station_ID\" int, \"Open_Year\" int, \"Location\" text, \"Manager_Name\" text, \"Vice_Manager_Name\" text, \"Representative_Name\" text, primary key (\"Station_ID\"));",
    "output": "SELECT LOCATION, count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)"
  },
  {
    "instruction": "What are the greatest and average capacity for rooms in each building?",
    "input": "create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));",
    "output": "SELECT max(capacity), avg(capacity), building FROM classroom GROUP BY building"
  },
  {
    "instruction": "What is the average price for flights from LA to Honolulu?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT avg(price) FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\""
  },
  {
    "instruction": "What is the last name of the staff member in charge of the complaint on the product with the lowest price?",
    "input": "create table `staff` (`staff_id` integer primary key, `gender` varchar(1), `first_name` varchar(80), `last_name` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `products` (`product_id` integer primary key, `parent_product_id` integer, `product_category_code` varchar(20) not null, `date_product_first_available` datetime, `date_product_discontinued` datetime, `product_name` varchar(80), `product_description` varchar(255), `product_price` decimal(19, 4));",
    "output": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id JOIN products AS t3 ON t2.product_id = t3.product_id ORDER BY t3.product_price LIMIT 1"
  },
  {
    "instruction": "Show all company names and headquarters in the descending order of market value.",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT company, headquarters FROM company ORDER BY market_value DESC"
  },
  {
    "instruction": "What are the names of manufacturers with revenue greater than the average of all revenues?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT name FROM manufacturers WHERE revenue > (SELECT avg(revenue) FROM manufacturers)"
  },
  {
    "instruction": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T2.maxOccupancy = T1.Adults + T1.Kids;"
  },
  {
    "instruction": "Show the names of customers who have both an order in completed status and an order in part status.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(15), `customer_number` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_date` datetime not null, `order_status_code` varchar(15), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(15), `customer_number` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_date` datetime not null, `order_status_code` varchar(15), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Part'"
  },
  {
    "instruction": "Find the title of course whose prerequisite is course Differential Geometry.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry')"
  },
  {
    "instruction": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
    "input": "create table \"game\" (\"stadium_id\" int, \"id\" int, \"Season\" int, \"Date\" text, \"Home_team\" text, \"Away_team\" text, \"Score\" text, \"Competition\" text, primary key (\"id\"), foreign key (\"stadium_id\") references `stadium`(\"id\"));create table \"injury_accident\" (\"game_id\" int, \"id\" int, \"Player\" text, \"Injury\" text, \"Number_of_matches\" text, \"Source\" text, primary key (\"id\"), foreign key (\"game_id\") references `game`(\"id\"));",
    "output": "SELECT T1.id, T1.score, T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING count(*) >= 2"
  },
  {
    "instruction": "What is the average rating stars and title for the oldest movie?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT avg(T1.stars), T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT min(YEAR) FROM Movie)"
  },
  {
    "instruction": "Find the number of activities Mark Giuliano is involved in.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));",
    "output": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID WHERE T1.fname = \"Mark\" AND T1.lname = \"Giuliano\""
  },
  {
    "instruction": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
    "input": "create table apartment_buildings (building_id integer not null, building_short_name char(15), building_full_name varchar(80), building_description varchar(255), building_address varchar(255), building_manager varchar(50), building_phone varchar(80), primary key (building_id), unique (building_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2"
  },
  {
    "instruction": "Find the last names of teachers who are not involved in any detention.",
    "input": "create table `teachers` (`teacher_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `gender` varchar(1), `cell_mobile_number` varchar(40), `email_address` varchar(40), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));create table `teachers` (`teacher_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `gender` varchar(1), `cell_mobile_number` varchar(40), `email_address` varchar(40), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));create table `detention` (`detention_id` integer primary key, `detention_type_code` varchar(10) not null, `teacher_id` integer, `datetime_detention_start` datetime, `datetime_detention_end` datetime, `detention_summary` varchar(255), `other_details` varchar(255), foreign key (`detention_type_code`) references `ref_detention_type`(`detention_type_code`), foreign key (`teacher_id`) references `teachers`(`teacher_id`));",
    "output": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id"
  },
  {
    "instruction": "What are the ids of the two department store chains with the largest number of department stores?",
    "input": "create table `department_stores` (`dept_store_id` integer primary key, `dept_store_chain_id` integer, `store_name` varchar(80), `store_address` varchar(255), `store_phone` varchar(80), `store_email` varchar(80), foreign key (`dept_store_chain_id`) references `department_store_chain`(`dept_store_chain_id`));",
    "output": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2"
  },
  {
    "instruction": "what is the state with the largest area",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "give me a restaurant in alameda ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"alameda\";"
  },
  {
    "instruction": "Return the names of people, ordered alphabetically.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT Name FROM People ORDER BY Name ASC"
  },
  {
    "instruction": "What document types have more than 2 corresponding documents?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*) > 2"
  },
  {
    "instruction": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT name FROM manufacturers WHERE revenue < (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')"
  },
  {
    "instruction": "How many papers are related to deep learning ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\";"
  },
  {
    "instruction": "who published the most papers in CVPR 2007",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t2.paperid ), t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2007 AND t3.venuename = \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;"
  },
  {
    "instruction": "Find all movies written by \" Matt Damon \"",
    "input": "create table \"written_by\" (\"id\" int, \"msid\" int, \"wid\" int, foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"wid\") references `writer`(\"wid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"writer\" (\"wid\" int, \"gender\" text, \"name\" int, \"nationality\" int, \"num_of_episodes\" int, \"birth_city\" text, \"birth_year\" int, primary key(\"wid\"));",
    "output": "SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid = t1.mid JOIN writer AS t2 ON t3.wid = t2.wid WHERE t2.name = \"Matt Damon\";"
  },
  {
    "instruction": "Show all the activity names and the number of faculty involved in each activity.",
    "input": "create table activity (actid integer primary key, activity_name varchar(25));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));",
    "output": "SELECT T1.activity_name, count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID"
  },
  {
    "instruction": "Return the issue dates of volumes that are by the artist named Gorgoroth.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = \"Gorgoroth\""
  },
  {
    "instruction": "Which tourist attractions does the visitor with detail 'Vincent' visit?",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));",
    "output": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = \"Vincent\""
  },
  {
    "instruction": "Show all party names and their region names.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));create table \"region\" (\"Region_ID\" int, \"Region_name\" text, \"Date\" text, \"Label\" text, \"Format\" text, \"Catalogue\" text, primary key (\"Region_ID\"));",
    "output": "SELECT T1.party_name, T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id"
  },
  {
    "instruction": "how many rivers run through idaho",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( river_name ) FROM river WHERE traverse = \"idaho\";"
  },
  {
    "instruction": "Find the name of customer who has the highest amount of loans.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1"
  },
  {
    "instruction": "citation count of zachary tatlock 's papers",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid, t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"zachary tatlock\";"
  },
  {
    "instruction": "What is the average number of international passengers for an airport?",
    "input": "create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT avg(International_Passengers) FROM airport"
  },
  {
    "instruction": "What are the login names and family names of course author and tutors?",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));",
    "output": "SELECT login_name, family_name FROM Course_Authors_and_Tutors"
  },
  {
    "instruction": "What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT name, price FROM products WHERE price >= 180 ORDER BY price DESC, name ASC"
  },
  {
    "instruction": "Show the delegate and committee information of elections.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT Delegate, Committee FROM election"
  },
  {
    "instruction": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, hire_date, salary, department_id FROM employees WHERE first_name NOT LIKE '%M%'"
  },
  {
    "instruction": "which state has the sparsest population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state );"
  },
  {
    "instruction": "Which artist has the most albums?",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));",
    "output": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "what is the combined area of all 50 states",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT SUM ( area ) FROM state;"
  },
  {
    "instruction": "For directors who had more than one movie, return the titles and produced years of all movies directed by them.",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T1.title, T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title"
  },
  {
    "instruction": "What are the last names of faculty who are part of the computer science department?",
    "input": "create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table member_of (facid integer, dno integer, appt_type varchar(15), foreign key(facid) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = \"Computer Science\""
  },
  {
    "instruction": "For each classroom with at least 2 classes, how many classes are offered?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT count(*), class_room FROM CLASS GROUP BY class_room HAVING count(*) >= 2"
  },
  {
    "instruction": "How many escape games exist in Madison",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Madison\" AND t2.category_name = \"escape games\";"
  },
  {
    "instruction": "List all vehicle id",
    "input": "create table `vehicles` (`vehicle_id` integer primary key, `vehicle_details` varchar(255));",
    "output": "SELECT vehicle_id FROM Vehicles;"
  },
  {
    "instruction": "Find the number of items that did not receive any review.",
    "input": "create table `item` (`i_id` integer not null , `title` varchar(20) default null , primary key (`i_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
  },
  {
    "instruction": "which city in wyoming has the largest population",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"wyoming\" ) AND state_name = \"wyoming\";"
  },
  {
    "instruction": "Which language does the film AIRPORT POLLOCK use? List the language name.",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));create table language (language_id tinyint unsigned not null, name char(20) not null, last_update timestamp not null default current_timestamp, primary key (language_id));",
    "output": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'AIRPORT POLLOCK'"
  },
  {
    "instruction": "Which poll resource provided the most number of candidate information?",
    "input": "create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the most common nationality of pilots.",
    "input": "create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));",
    "output": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the different billing countries for all invoices.",
    "input": "create table `invoice` (`invoiceid` integer not null , `customerid` integer not null , `invoicedate` datetime not null , `billingaddress` varchar(70) default null , `billingcity` varchar(40) default null , `billingstate` varchar(40) default null , `billingcountry` varchar(40) default null , `billingpostalcode` varchar(10) default null , `total` decimal(10, 2) not null , primary key (`invoiceid`) , constraint `fk_invoicecustomerid` foreign key (`customerid`) references `customer` (`customerid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT distinct(BillingCountry) FROM INVOICE"
  },
  {
    "instruction": "Find the names of all wines produced in 2008.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Name FROM WINE WHERE YEAR = \"2008\""
  },
  {
    "instruction": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
    "input": "create table \"Web_client_accelerator\" (\"id\" int, \"name\" text, \"Operating_system\" text, \"Client\" text, \"Connection\" text, primary key(\"id\"));create table \"accelerator_compatible_browser\" (\"accelerator_id\" int, \"browser_id\" int, \"compatible_since_year\" int, primary key(\"accelerator_id\", \"browser_id\"), foreign key (\"accelerator_id\") references `web_client_accelerator`(\"id\"), foreign key (\"browser_id\") references `browser`(\"id\"));",
    "output": "SELECT T1.id, T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count(*) >= 2"
  },
  {
    "instruction": "List the name of actors in ascending alphabetical order.",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));",
    "output": "SELECT Name FROM actor ORDER BY Name ASC"
  },
  {
    "instruction": "Which classroom has the most students?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the average and minimum price of the rooms in different decor.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT decor, avg(basePrice), min(basePrice) FROM Rooms GROUP BY decor;"
  },
  {
    "instruction": "Show the titles of books in descending order of publication price.",
    "input": "create table \"book\" (\"Book_ID\" int, \"Title\" text, \"Issues\" real, \"Writer\" text, primary key (\"Book_ID\"));create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));",
    "output": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC"
  },
  {
    "instruction": "How many tests have result \"Fail\"?",
    "input": "create table `student_tests_taken` (`registration_id` integer not null, `date_test_taken` datetime not null, `test_result` varchar(255), foreign key (`registration_id`) references `student_course_enrolment`(`registration_id`));",
    "output": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result = \"Fail\""
  },
  {
    "instruction": "What are the different product names, and what is the sum of quantity ordered for each product?",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));create table `products` (`product_id` integer primary key, `parent_product_id` integer, `production_type_code` varchar(15) not null, `unit_price` decimal(19, 4), `product_name` varchar(80), `product_color` varchar(20), `product_size` varchar(20), foreign key (`production_type_code`) references `product_categories`(`production_type_code`));",
    "output": "SELECT T2.product_name, sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name"
  },
  {
    "instruction": "Return the name and number of reservations made for each of the rooms.",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT T2.roomName, count(*), T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room"
  },
  {
    "instruction": "what are the populations of the major cities of wisconsin",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE population > 150000 AND state_name = \"wisconsin\";"
  },
  {
    "instruction": "Find the last name of the staff whose email address contains \"wrau\".",
    "input": "create table `staff` (`staff_id` integer primary key, `gender` varchar(1), `first_name` varchar(80), `last_name` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\""
  },
  {
    "instruction": "Count the number of students who have advisors.",
    "input": "create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);",
    "output": "SELECT count(DISTINCT s_id) FROM advisor"
  },
  {
    "instruction": "List the names of all distinct nurses ordered by alphabetical order?",
    "input": "create table nurse (employeeid integer primary key not null, name varchar(30) not null, position varchar(30) not null, registered boolean not null, ssn integer not null);",
    "output": "SELECT DISTINCT name FROM nurse ORDER BY name"
  },
  {
    "instruction": "What are the top three apartment types in terms of the average room count? Give me the",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3"
  },
  {
    "instruction": "what is the shortest river",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river );"
  },
  {
    "instruction": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT cName, enr FROM College WHERE enr > 10000 AND state = \"LA\""
  },
  {
    "instruction": "How many papers were written on convolutional neural networks in 2016 ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"convolutional neural networks\" AND t3.year = 2016;"
  },
  {
    "instruction": "Find the average unit price for a track.",
    "input": "create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT AVG(UnitPrice) FROM TRACK"
  },
  {
    "instruction": "how many states do not have rivers",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( DISTINCT state_name ) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );"
  },
  {
    "instruction": "Show all student IDs who have at least two allergies.",
    "input": "create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*) >= 2"
  },
  {
    "instruction": "what is the capital of the state with the highest point",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t2.highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Give me a list of all the channel names sorted by the channel rating in descending order.",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));",
    "output": "SELECT name FROM channel ORDER BY rating_in_percent DESC"
  },
  {
    "instruction": "Find the names of all distinct wines that have appellations in North Coast area.",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = \"North Coast\""
  },
  {
    "instruction": "Count the number of times the team \"Boston Red Stockings\" lost in 2009 postseason.",
    "input": "create table postseason (year integer, round text, team_id_winner text, league_id_winner text, team_id_loser text, league_id_loser text, wins integer, losses integer, ties integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2009;"
  },
  {
    "instruction": "For each payment method, how many payments were made?",
    "input": "create table `customer_payments` (`customer_id` integer not null, `datetime_payment` datetime not null, `payment_method_code` varchar(10) not null, `amount_payment` double null, primary key (`customer_id`,`datetime_payment`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT payment_method_code, count(*) FROM Customer_Payments GROUP BY payment_method_code;"
  },
  {
    "instruction": "Find the first name and age of the students who are playing both Football and Lacrosse.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT fname, age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName = \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName = \"Lacrosse\")"
  },
  {
    "instruction": "Show the names of companies in the banking or retailing industry?",
    "input": "create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));",
    "output": "SELECT Name FROM company WHERE Industry = \"Banking\" OR Industry = \"Retailing\""
  },
  {
    "instruction": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
    "input": "create table \"budget\" (\"School_id\" int, \"Year\" int, \"Budgeted\" int, \"total_budget_percent_budgeted\" real, \"Invested\" int, \"total_budget_percent_invested\" real, \"Budget_invested_percent\" text, primary key(\"School_id\",\"YEAR\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));",
    "output": "SELECT T2.school_name, T1.budgeted, T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.year >= 2002"
  },
  {
    "instruction": "What are the vocal types used in song \"Badlands\"?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Badlands\""
  },
  {
    "instruction": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.",
    "input": "create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT billing_country, SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;"
  },
  {
    "instruction": "How many papers are in deep learning ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\";"
  },
  {
    "instruction": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\""
  },
  {
    "instruction": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"lapTimes\" (\"raceId\" integer, \"driverId\" integer, \"lap\" integer, \"position\" integer, \"time\" text, \"milliseconds\" integer, primary key(\"raceId\", \"driverId\", \"lap\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT DISTINCT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000"
  },
  {
    "instruction": "Find the total amount of loans offered by each bank branch.",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT sum(amount), T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname"
  },
  {
    "instruction": "where are some good places for arabic on buchanan in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Report the first name and last name of all the students.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT firstname, lastname FROM list"
  },
  {
    "instruction": "What are the average height and weight across males (sex is M)?",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));",
    "output": "SELECT avg(height), avg(weight) FROM people WHERE sex = 'M'"
  },
  {
    "instruction": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));",
    "output": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\""
  },
  {
    "instruction": "Find the names of catalog entries with level number 8.",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));create table `catalog_contents_additional_attributes` (`catalog_entry_id` integer not null, `catalog_level_number` integer not null, `attribute_id` integer not null, `attribute_value` varchar(255) not null, foreign key (`catalog_entry_id`) references `catalog_contents`(`catalog_entry_id`), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\""
  },
  {
    "instruction": "What is the id of every employee who has at least a salary of  100000?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT eid FROM Employee WHERE salary > 100000"
  },
  {
    "instruction": "What are the names of students who took a course in the Fall of 2003?",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table takes (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), grade varchar(2), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references student (id)\n        ON delete cascade);",
    "output": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003)"
  },
  {
    "instruction": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".",
    "input": "create table `behavior_incident` (`incident_id` integer primary key, `incident_type_code` varchar(10) not null, `student_id` integer not null, `date_incident_start` datetime, `date_incident_end` datetime, `incident_summary` varchar(255), `recommendations` varchar(255), `other_details` varchar(255), foreign key (`incident_type_code`) references `ref_incident_type`(`incident_type_code`), foreign key (`student_id`) references `students`(`student_id`));create table `students` (`student_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(40), `last_name` varchar(40), `cell_mobile_number` varchar(40), `email_address` varchar(40), `date_first_rental` datetime, `date_left_university` datetime, `other_student_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.date_incident_start, date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.last_name = \"Fahey\""
  },
  {
    "instruction": "what are the biggest rivers in texas",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = \"texas\" ) AND traverse = \"texas\";"
  },
  {
    "instruction": "What is the name of the department with the student that has the lowest GPA?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY stu_gpa LIMIT 1"
  },
  {
    "instruction": "Find the county where produces the most number of wines with score higher than 90.",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what are the names of the channels that broadcast in both morning and night?",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));",
    "output": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Night'"
  },
  {
    "instruction": "What are the songs in volumes associated with the artist aged 32 or older?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age >= 32"
  },
  {
    "instruction": "Show the leader names and locations of colleges.",
    "input": "create table \"college\" (\"College_ID\" int, \"Name\" text, \"Leader_Name\" text, \"College_Location\" text, primary key (\"College_ID\"));",
    "output": "SELECT Leader_Name, College_Location FROM college"
  },
  {
    "instruction": "Return the phone numbers of employees with salaries between 8000 and 12000.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000"
  },
  {
    "instruction": "What is the total number of deaths and damage for all storms with a max speed greater than the average?",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT sum(number_deaths), sum(damage_millions_USD) FROM storm WHERE max_speed > (SELECT avg(max_speed) FROM storm)"
  },
  {
    "instruction": "what is the lowest point in the state of iowa",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT lowest_point FROM highlow WHERE state_name = \"iowa\";"
  },
  {
    "instruction": "Which papers were written by authors from the institution \"Google\"?",
    "input": "create table papers (paperid integer, title text, primary key (paperid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\""
  },
  {
    "instruction": "Find names of all students who took some course and the course description.",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T1.stu_fname, T1.stu_lname, T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code"
  },
  {
    "instruction": "how many cities named austin are there in the usa",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( city_name ) FROM city WHERE city_name = \"austin\";"
  },
  {
    "instruction": "Count the number of trips that did not end in San Francisco city.",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != \"San Francisco\""
  },
  {
    "instruction": "Find the first names of faculties of rank Professor in alphabetic order.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT Fname FROM FACULTY WHERE Rank = \"Professor\" ORDER BY Fname"
  },
  {
    "instruction": "What is the id of the account with the most transactions?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many students does each advisor have?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Advisor, count(*) FROM STUDENT GROUP BY Advisor"
  },
  {
    "instruction": "List the names of the schools without any endowment.",
    "input": "create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));create table \"endowment\" (\"endowment_id\" int, \"School_id\" int, \"donator_name\" text, \"amount\" real, primary key(\"endowment_id\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));",
    "output": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)"
  },
  {
    "instruction": "What is the number of flights?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT count(*) FROM Flight"
  },
  {
    "instruction": "Count the number of schools.",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT count(*) FROM school"
  },
  {
    "instruction": "Find the name of the airports located in Cuba or Argentina.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT name FROM airports WHERE country = 'Cuba' OR country = 'Argentina'"
  },
  {
    "instruction": "which states border the ohio river",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE river_name = \"ohio\";"
  },
  {
    "instruction": "What is the document type name and the document type description and creation date for all the documents?",
    "input": "create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT T1.document_type_name, T1.document_type_description, T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code"
  },
  {
    "instruction": "What is the average age of all gymnasts?",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID"
  },
  {
    "instruction": "List the name of the company that produced more than one phone model.",
    "input": "create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*) > 1;"
  },
  {
    "instruction": "what are some good restaurants in alameda ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"alameda\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "How many performances are there?",
    "input": "create table \"performance\" (\"Performance_ID\" real, \"Date\" text, \"Host\" text, \"Location\" text, \"Attendance\" int, primary key (\"Performance_ID\"));",
    "output": "SELECT count(*) FROM performance"
  },
  {
    "instruction": "List the duration, file size and format of songs whose genre is pop, ordered by title?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.duration, T1.file_size, T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is = \"pop\" ORDER BY T2.song_name"
  },
  {
    "instruction": "Show the minister who took office after 1961 or before 1959.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959"
  },
  {
    "instruction": "Who directed the movie \" James Bond \" ?",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.title = \"James Bond\";"
  },
  {
    "instruction": "What are the three colleges from which the most players are from?",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "give me some restaurants in alameda ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"alameda\";"
  },
  {
    "instruction": "give me a restaurant on bethel island rd in bethel island ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"bethel island\" AND t2.street_name = \"bethel island rd\";"
  },
  {
    "instruction": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));",
    "output": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported < ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )"
  },
  {
    "instruction": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
    "input": "create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT T2.employee_name, T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;"
  },
  {
    "instruction": "Find the team of each player and sort them in ascending alphabetical order.",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));",
    "output": "SELECT Team FROM player ORDER BY Team ASC"
  },
  {
    "instruction": "When did Linda Smith visit Subway?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table visits_restaurant (stuid integer, resid integer, time timestamp, spent float, foreign key(stuid) references student(stuid), foreign key(resid) references restaurant(resid));create table restaurant (resid integer primary key, resname varchar(100), address varchar(100), rating integer);",
    "output": "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";"
  },
  {
    "instruction": "What are the times used by climbers who climbed mountains in the country of Uganda?",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = \"Uganda\""
  },
  {
    "instruction": "What are the names of actors and the musicals that they are in?",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT T1.Name, T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID"
  },
  {
    "instruction": "What is the product ID of the most frequently ordered item on invoices?",
    "input": "create table invoices (invoice_id integer not null, order_id integer not null, payment_method_code char(15), product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), order_item_id integer not null, primary key (invoice_id), foreign key (order_id) references customer_orders (order_id), foreign key (order_id) references bookings (booking_id), foreign key (payment_method_code) references ref_payment_methods (payment_method_code));",
    "output": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the unique first names, last names, and phone numbers for all customers with any account.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT T1.customer_first_name, T1.customer_last_name, T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id"
  },
  {
    "instruction": "What is the rating of the restaurant Subway?",
    "input": "create table restaurant (resid integer primary key, resname varchar(100), address varchar(100), rating integer);",
    "output": "SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";"
  },
  {
    "instruction": "which states border the longest river in the usa",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );"
  },
  {
    "instruction": "What is the highest elevation of an airport in the country of Iceland?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT max(elevation) FROM airports WHERE country = 'Iceland'"
  },
  {
    "instruction": "Who is the director of the movie \" James Bond \" ?",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.title = \"James Bond\";"
  },
  {
    "instruction": "List all users who reviewed businesses that are restaurant in 2010 .",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = \"restaurant\" AND t3.year = 2010;"
  },
  {
    "instruction": "What are the names of customers using the most popular payment method?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT customer_name FROM customers WHERE payment_method = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "Show the station name with greatest number of trains.",
    "input": "create table \"train_station\" (\"Train_ID\" int, \"Station_ID\" int, primary key (\"Train_ID\",\"Station_ID\"), foreign key (\"Train_ID\") references \"train\"(\"Train_ID\"), foreign key (\"Station_ID\") references \"station\"(\"Station_ID\"));create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));",
    "output": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the position of players and the corresponding number of players.",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT POSITION, COUNT(*) FROM match_season GROUP BY POSITION"
  },
  {
    "instruction": "What is the average latitude and longitude in San Jose?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT avg(lat), avg(long) FROM station WHERE city = \"San Jose\""
  },
  {
    "instruction": "List the project details of the project both producing patent and paper as outcomes.",
    "input": "create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));",
    "output": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Patent'"
  },
  {
    "instruction": "Which institution has the most papers? Find the name of the institution.",
    "input": "create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names and locations of festivals?",
    "input": "create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));",
    "output": "SELECT Festival_Name, LOCATION FROM festival_detail"
  },
  {
    "instruction": "what states are next to the ohio",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE river_name = \"ohio\";"
  },
  {
    "instruction": "For which countries are there more than four distinct addresses listed?",
    "input": "create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT country FROM addresses GROUP BY country HAVING count(address_id) > 4"
  },
  {
    "instruction": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
    "input": "create table rent_arrears (council_tax_id integer not null, cmi_cross_ref_id integer not null, primary key (council_tax_id), foreign key (cmi_cross_ref_id) references cmi_cross_references (cmi_cross_ref_id));create table cmi_cross_references (cmi_cross_ref_id integer not null, master_customer_id integer not null, source_system_code char(15) not null, primary key (cmi_cross_ref_id), foreign key (master_customer_id) references customer_master_index (master_customer_id));create table customer_master_index (master_customer_id integer not null, cmi_details varchar(255), primary key (master_customer_id));",
    "output": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id = T2.master_customer_id WHERE T3.cmi_details != 'Schmidt, Kertzmann and Lubowitz'"
  },
  {
    "instruction": "Report the first name and last name of all the teachers.",
    "input": "create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT firstname, lastname FROM teachers"
  },
  {
    "instruction": "Show all origins and the number of flights from each origin.",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT origin, count(*) FROM Flight GROUP BY origin"
  },
  {
    "instruction": "return me the number of conferences which have papers by \" H. V. Jagadish \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\";"
  },
  {
    "instruction": "which papers used WebKB ?",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"WebKB\";"
  },
  {
    "instruction": "What are the names of all employees who have a salary higher than average?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT name FROM Employee WHERE salary > (SELECT avg(salary) FROM Employee)"
  },
  {
    "instruction": "What is the city with the most customers?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "instruction": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
    "input": "create table `invoices` (`invoice_number` integer primary key, `invoice_date` datetime, `invoice_details` varchar(255));",
    "output": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""
  },
  {
    "instruction": "display the average salary of employees for each department who gets a commission percentage.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT department_id, AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id"
  },
  {
    "instruction": "What is the name of the course that has the most student enrollment?",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "return me the author who has the most number of papers in the VLDB conference .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = \"VLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;"
  },
  {
    "instruction": "Show names of musicals and the number of actors who have appeared in the musicals.",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT T2.Name, COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID"
  },
  {
    "instruction": "For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there.",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT T1.Name, T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" OR T2.Tourist_Details = \"Vivian\""
  },
  {
    "instruction": "List all directors along with the number of films directed by each director.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Rank_in_series\" int, \"Number_in_season\" int, \"Title\" text, \"Directed_by\" text, \"Original_air_date\" text, \"Production_code\" text, primary key (\"Film_ID\"));",
    "output": "SELECT directed_by, count(*) FROM film GROUP BY directed_by"
  },
  {
    "instruction": "What are the names of the technicians aged either 36 or 37?",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37"
  },
  {
    "instruction": "where is a good place in mountain view for arabic food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Which vocal type has the band mate with last name \"Heilo\" played the most?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE lastname = \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Of complaints with the type code \"Product Failure\", how many had each different status code?",
    "input": "create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT complaint_status_code, count(*) FROM complaints WHERE complaint_type_code = \"Product Failure\" GROUP BY complaint_status_code"
  },
  {
    "instruction": "What are all role codes?",
    "input": "create table roles (role_code char(15) not null, role_description varchar(255), primary key (role_code));",
    "output": "SELECT role_code FROM ROLES;"
  },
  {
    "instruction": "Find the id of the customers who have order status both \"On Road\" and \"Shipped\".",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""
  },
  {
    "instruction": "What are the last names of students studying major 50?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT LName FROM STUDENT WHERE Major = 50"
  },
  {
    "instruction": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
    "input": "create table \"game\" (\"stadium_id\" int, \"id\" int, \"Season\" int, \"Date\" text, \"Home_team\" text, \"Away_team\" text, \"Score\" text, \"Competition\" text, primary key (\"id\"), foreign key (\"stadium_id\") references `stadium`(\"id\"));create table \"injury_accident\" (\"game_id\" int, \"id\" int, \"Player\" text, \"Injury\" text, \"Number_of_matches\" text, \"Source\" text, primary key (\"id\"), foreign key (\"game_id\") references `game`(\"id\"));",
    "output": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'"
  },
  {
    "instruction": "Find the list of cities that no customer is living in.",
    "input": "create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_addresses` (`customer_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `address_type` varchar(15) not null, `date_address_to` datetime, foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id)"
  },
  {
    "instruction": "what state has the highest population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MAX ( density ) FROM state );"
  },
  {
    "instruction": "What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?",
    "input": "create table `documents` (`document_id` integer primary key, `document_type_code` varchar(10), `grant_id` integer not null, `sent_date` datetime not null, `response_received_date` datetime not null, `other_details` varchar(255) not null, foreign key (`document_type_code`) references `document_types`(`document_type_code`), foreign key (`grant_id`) references `grants`(`grant_id`));create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));create table `organisation_types` (`organisation_type` varchar(10) primary key, `organisation_type_description` varchar(255) not null);",
    "output": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type WHERE T2.grant_amount > 5000 AND T4.organisation_type_description = 'Research'"
  },
  {
    "instruction": "papers by Richard Ladner published at chi",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Richard Ladner\" AND t4.venuename = \"chi\";"
  },
  {
    "instruction": "what is the population density of the state with the smallest area",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT density FROM state WHERE area = ( SELECT MIN ( area ) FROM state );"
  },
  {
    "instruction": "What are the name and level of catalog structure with level number between 5 and 10",
    "input": "create table `catalog_structure` (`catalog_level_number` integer primary key, `catalog_id` integer not null, `catalog_level_name` varchar(50), foreign key (`catalog_id`) references `catalogs`(`catalog_id`));",
    "output": "SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
  },
  {
    "instruction": "display job title and average salary of employees.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `jobs` (`job_id` varchar(10) not null default '', `job_title` varchar(35) not null, `min_salary` decimal(6, 0) default null, `max_salary` decimal(6, 0) default null, primary key (`job_id`));",
    "output": "SELECT job_title, AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title"
  },
  {
    "instruction": "What is the first name of the staff who did not give any lesson?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id"
  },
  {
    "instruction": "What is the incident type description for the incident type with code \"VIOLENCE\"?",
    "input": "create table `ref_incident_type` (`incident_type_code` varchar(10) primary key, `incident_type_description` varchar(80));",
    "output": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = \"VIOLENCE\""
  },
  {
    "instruction": "What is the id of the reviewer named Daniel Lewis?",
    "input": "create table reviewer(rid int primary key, name text);",
    "output": "SELECT rID FROM Reviewer WHERE name = \"Daniel Lewis\""
  },
  {
    "instruction": "What is the characteristic name used by most number of the products?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Who is the founder of Sony?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT founder FROM manufacturers WHERE name = 'Sony'"
  },
  {
    "instruction": "ACL papers with less than 5 citations",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t2.venuename = \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid ) < 5;"
  },
  {
    "instruction": "What is the average duration of songs that have mp3 format and resolution below 800?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = \"mp3\" AND T2.resolution < 800"
  },
  {
    "instruction": "Return the average and minimum age of captains in each class.",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT avg(age), min(age), CLASS FROM captain GROUP BY CLASS"
  },
  {
    "instruction": "Return the names of singers who are from UK and released an English song.",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT artist_name FROM artist WHERE country = \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"english\""
  },
  {
    "instruction": "What are the booking start and end dates of the apartments with more than 2 bedrooms?",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2"
  },
  {
    "instruction": "What are the names of the mills which are not located in 'Donceel'?",
    "input": "create table \"mill\" (\"architect_id\" int, \"id\" int, \"location\" text, \"name\" text, \"type\" text, \"built_year\" int, \"notes\" text, primary key (\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));",
    "output": "SELECT name FROM mill WHERE LOCATION != 'Donceel'"
  },
  {
    "instruction": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));create table circulation_history (document_id integer not null, draft_number integer not null, copy_number integer not null, employee_id integer not null, primary key (document_id, draft_number, copy_number, employee_id), foreign key (document_id, draft_number, copy_number) references draft_copies (document_id, draft_number, copy_number), foreign key (employee_id) references employees (employee_id));",
    "output": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id"
  },
  {
    "instruction": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));",
    "output": "SELECT city FROM city WHERE regional_population > 10000000 UNION SELECT city FROM city WHERE regional_population < 5000000"
  },
  {
    "instruction": "what is the highest point in states bordering colorado",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;"
  },
  {
    "instruction": "How many movies did \" Steven Spielberg \" direct ?",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t3.title ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Steven Spielberg\";"
  },
  {
    "instruction": "List the carriers of devices in ascending alphabetical order.",
    "input": "create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));",
    "output": "SELECT Carrier FROM device ORDER BY Carrier ASC"
  },
  {
    "instruction": "Return the number of companies created by Andy.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT count(*) FROM manufacturers WHERE founder = 'Andy'"
  },
  {
    "instruction": "What are the dates when customers with ids between 10 and 20 became customers?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20"
  },
  {
    "instruction": "What are the room name and base price of the room with the lowest base price?",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName, basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;"
  },
  {
    "instruction": "Find the first and last name of all the students of age 18 who have vice president votes.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT T1.Fname, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE WHERE T1.age = 18"
  },
  {
    "instruction": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.custid, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT max(balance) FROM checking)"
  },
  {
    "instruction": "How many male and female assistant professors do we have?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT sex, count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex"
  },
  {
    "instruction": "Find the names of users who do not have a first notification of loss record.",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table first_notification_of_loss (fnol_id integer not null, customer_id integer not null, policy_id integer not null, service_id integer not null, primary key (fnol_id), unique (fnol_id), foreign key (service_id) references services (service_id), foreign key (customer_id, policy_id) references customers_policies (customer_id, policy_id));",
    "output": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id"
  },
  {
    "instruction": "Current research on deep learning",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid, t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "List all the salary values players received in 2010 and 2001.",
    "input": "create table salary (year integer, team_id text, league_id text, player_id text, salary integer);create table salary (year integer, team_id text, league_id text, player_id text, salary integer);",
    "output": "SELECT salary FROM salary WHERE YEAR = 2010 UNION SELECT salary FROM salary WHERE YEAR = 2001"
  },
  {
    "instruction": "List papers that has a keyword Question Answering",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "which state has the highest point",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "which state has the largest density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MAX ( density ) FROM state );"
  },
  {
    "instruction": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `airport_aircraft` (\"ID\" int, \"Airport_ID\" int, \"Aircraft_ID\" int, primary key (\"Airport_ID\",\"Aircraft_ID\"), foreign key (\"Airport_ID\") references `airport`(`airport_id`), foreign key (\"Aircraft_ID\") references `aircraft`(`aircraft_id`));create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = \"London Gatwick\""
  },
  {
    "instruction": "Find the first names of the teachers that teach first grade.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 1"
  },
  {
    "instruction": "What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 1 EXCEPT SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"OTHA\" AND T2.lastname = \"MOYER\""
  },
  {
    "instruction": "NIPS authors",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"NIPS\";"
  },
  {
    "instruction": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8"
  },
  {
    "instruction": "What are the names of all Rock tracks that are stored on MPEG audio files?",
    "input": "create table genres (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);create table media_types (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";"
  },
  {
    "instruction": "Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names.",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table guests (guest_id integer not null , gender_code char(1), guest_first_name varchar(80), guest_last_name varchar(80), date_of_birth datetime, primary key (guest_id), unique (guest_id));",
    "output": "SELECT T2.guest_first_name, T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = \"Confirmed\""
  },
  {
    "instruction": "Count the total number of games the team Boston Red Stockings attended from 1990 to 2000.",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;"
  },
  {
    "instruction": "What are the names of parties with at least 2 events?",
    "input": "create table \"party_events\" (\"Event_ID\" int, \"Event_Name\" text, \"Party_ID\" int, \"Member_in_charge_ID\" int, primary key (\"Event_ID\"), foreign key (`party_id`) references `party`(`party_id`), foreign key (`member_in_charge_id`) references `member`(`member_id`));create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id HAVING count(*) >= 2"
  },
  {
    "instruction": "Show all destinations and the number of flights to each destination.",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT destination, count(*) FROM Flight GROUP BY destination"
  },
  {
    "instruction": "how many papers has Mirella Lapata cited ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t3 ON t2.paperid = t3.citingpaperid WHERE t1.authorname = \"Mirella Lapata\";"
  },
  {
    "instruction": "Give the city that the student whose family name is Kim lives in.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT city_code FROM Student WHERE LName = \"Kim\""
  },
  {
    "instruction": "List the writers of the books in ascending alphabetical order.",
    "input": "create table \"book\" (\"Book_ID\" int, \"Title\" text, \"Issues\" real, \"Writer\" text, primary key (\"Book_ID\"));",
    "output": "SELECT Writer FROM book ORDER BY Writer ASC"
  },
  {
    "instruction": "What is the name of the movie that is rated by most of times?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the average population of all counties.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT avg(Population) FROM county"
  },
  {
    "instruction": "What are the first names for all faculty professors, ordered by first name?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT Fname FROM FACULTY WHERE Rank = \"Professor\" ORDER BY Fname"
  },
  {
    "instruction": "Which paper's title contains the word \"Database\"?",
    "input": "create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
  },
  {
    "instruction": "what is the highest mountain in texas",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE state_name = \"texas\";"
  },
  {
    "instruction": "how many female dependents are there?",
    "input": "create table dependent(essn integer, dependent_name text, sex text, bdate text, relationship text, primary key(essn, dependent_name));",
    "output": "SELECT count(*) FROM dependent WHERE sex = 'F'"
  },
  {
    "instruction": "Give the class of races that is most common.",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));",
    "output": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the total amount of payment?",
    "input": "create table payments (payment_id integer not null, settlement_id integer not null, payment_method_code varchar(255), date_payment_made date, amount_payment integer, primary key (payment_id), foreign key (settlement_id) references settlements (settlement_id));",
    "output": "SELECT sum(Amount_Payment) FROM Payments"
  },
  {
    "instruction": "Return the low and high estimates for all film markets.",
    "input": "create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));",
    "output": "SELECT Low_Estimate, High_Estimate FROM film_market_estimation"
  },
  {
    "instruction": "List the main industry with highest total market value and its number of companies.",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT main_industry, count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1"
  },
  {
    "instruction": "What is the id of the project with least number of documents?",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "Show the description of transaction type with code \"PUR\".",
    "input": "create table `ref_transaction_types` (`transaction_type_code` varchar(10) primary key, `transaction_type_description` varchar(80) not null);",
    "output": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code = \"PUR\""
  },
  {
    "instruction": "Find the names of stadiums that some Australian swimmers have been to.",
    "input": "create table \"swimmer\" (\"ID\" int, \"name\" text, \"Nationality\" text, \"meter_100\" real, \"meter_200\" text, \"meter_300\" text, \"meter_400\" text, \"meter_500\" text, \"meter_600\" text, \"meter_700\" text, \"Time\" text, primary key (\"ID\"));create table \"record\" (\"ID\" int, \"Result\" text, \"Swimmer_ID\" int, \"Event_ID\" int, primary key (\"Swimmer_ID\",\"Event_ID\"), foreign key (`event_id`) references `event`(`id`), foreign key (`swimmer_id`) references `swimmer`(`id`));create table \"event\" (\"ID\" int, \"Name\" text, \"Stadium_ID\" int, \"Year\" text, primary key (\"ID\"), foreign key (`stadium_id`) references `stadium`(`id`));create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));",
    "output": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia'"
  },
  {
    "instruction": "Return the amount of the largest payment.",
    "input": "create table payment (payment_id smallint unsigned not null, customer_id smallint unsigned not null, staff_id tinyint unsigned not null, rental_id int default null, amount decimal(5, 2) not null, payment_date datetime not null, last_update timestamp default current_timestamp, primary key (payment_id), foreign key (rental_id) references rental (rental_id), foreign key (customer_id) references customer (customer_id), foreign key (staff_id) references staff (staff_id));",
    "output": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1"
  },
  {
    "instruction": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.sex = \"F\""
  },
  {
    "instruction": "How many advisors are there?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(DISTINCT advisor) FROM Student"
  },
  {
    "instruction": "What is the label that has the most albums?",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);",
    "output": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "return me the number of keywords .",
    "input": "create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));",
    "output": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;"
  },
  {
    "instruction": "Find the total revenue for each manufacturer.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT sum(revenue), name FROM manufacturers GROUP BY name"
  },
  {
    "instruction": "Show the people that have been governor the most times.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "List the all the assets make, model, details by the disposed date ascendingly.",
    "input": "create table `assets` (`asset_id` integer primary key, `maintenance_contract_id` integer not null, `supplier_company_id` integer not null, `asset_details` varchar(255), `asset_make` varchar(20), `asset_model` varchar(20), `asset_acquired_date` datetime, `asset_disposed_date` datetime, `other_asset_details` varchar(255), foreign key (`maintenance_contract_id`) references `maintenance_contracts`(`maintenance_contract_id`), foreign key (`supplier_company_id`) references `third_party_companies`(`company_id`));",
    "output": "SELECT asset_make, asset_model, asset_details FROM Assets ORDER BY asset_disposed_date ASC"
  },
  {
    "instruction": "return me the journal, which have the most number of papers by \" H. V. Jagadish \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;"
  },
  {
    "instruction": "list in alphabetic order all course names and their instructors' names in year 2008.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT T1.title, T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 ORDER BY T1.title"
  },
  {
    "instruction": "Show all director names who have a movie in the year 1999 or 2000.",
    "input": "create table \"movie\" (\"movie_id\" int, \"Title\" text, \"Year\" int, \"Director\" text, \"Budget_million\" real, \"Gross_worldwide\" int, primary key(\"movie_id\"));",
    "output": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000"
  },
  {
    "instruction": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));",
    "output": "SELECT Amount_Settled, Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1"
  },
  {
    "instruction": "Return the names of tracks that have no had any races.",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));",
    "output": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)"
  },
  {
    "instruction": "Find the first names of all instructors who have taught some course and the course code.",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);",
    "output": "SELECT T2.emp_fname, T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num"
  },
  {
    "instruction": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Grape, Winery, YEAR FROM WINE WHERE Price > 100 ORDER BY YEAR"
  },
  {
    "instruction": "What are the ids, date opened, name, and other details for all accounts?",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT account_id, date_account_opened, account_name, other_account_details FROM Accounts"
  },
  {
    "instruction": "What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?",
    "input": "create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `documents` (`document_id` integer primary key, `document_type_code` varchar(10), `grant_id` integer not null, `sent_date` datetime not null, `response_received_date` datetime not null, `other_details` varchar(255) not null, foreign key (`document_type_code`) references `document_types`(`document_type_code`), foreign key (`grant_id`) references `grants`(`grant_id`));create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id WHERE T2.sent_date < '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date > '1989-03-16 18:27:16'"
  },
  {
    "instruction": "In which year did the least people enter hall of fame?",
    "input": "create table hall_of_fame (player_id text, yearid integer, votedby text, ballots numeric, needed numeric, votes numeric, inducted text, category text, needed_note text, foreign key (player_id) references player(player_id));",
    "output": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;"
  },
  {
    "instruction": "How many cinema do we have?",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT count(*) FROM cinema"
  },
  {
    "instruction": "What are the first names and ids for customers who have two or more accounts?",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT T2.customer_first_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2"
  },
  {
    "instruction": "How many papers does David M. Blei have in AISTATS ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"David M. Blei\" AND t4.venuename = \"AISTATS\";"
  },
  {
    "instruction": "what is the name of the country that participated in the most tournament competitions?",
    "input": "create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));",
    "output": "SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"Japan\" AND t2.authorder = 1 AND t1.lname = \"Ohori\""
  },
  {
    "instruction": "What are all the different book publishers?",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT DISTINCT publisher FROM book_club"
  },
  {
    "instruction": "List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"neighbourhood\" (\"id\" int, \"business_id\" text, \"neighbourhood_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id = t2.business_id JOIN category AS t4 ON t4.business_id = t2.business_id JOIN neighbourhood AS t1 ON t1.business_id = t2.business_id WHERE t2.city = \"Madison\" AND t2.rating < 2.5 AND t3.category_name = \"Italian\" AND t4.category_name = \"restaurant\";"
  },
  {
    "instruction": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\""
  },
  {
    "instruction": "Show the names of phones and the districts of markets they are on.",
    "input": "create table \"phone_market\" (\"Market_ID\" int, \"Phone_ID\" text, \"Num_of_stock\" int, primary key (\"Market_ID\",\"Phone_ID\"), foreign key (\"Market_ID\") references `market`(\"Market_ID\"), foreign key (\"Phone_ID\") references `phone`(\"Phone_ID\"));create table \"market\" (\"Market_ID\" int, \"District\" text, \"Num_of_employees\" int, \"Num_of_shops\" real, \"Ranking\" int, primary key (\"Market_ID\"));create table \"phone\" (\"Name\" text, \"Phone_ID\" int, \"Memory_in_G\" int, \"Carrier\" text, \"Price\" real, primary key (\"Phone_ID\"));",
    "output": "SELECT T3.Name, T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID"
  },
  {
    "instruction": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.",
    "input": "create table royal_family (royal_family_id integer not null, royal_family_details varchar(255), primary key (royal_family_id), foreign key (royal_family_id) references tourist_attractions (tourist_attraction_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T1.Royal_Family_Details, T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID"
  },
  {
    "instruction": "Find the maximum and total number of followers of all users.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));",
    "output": "SELECT max(followers), sum(followers) FROM user_profiles"
  },
  {
    "instruction": "Find the total student enrollment for different affiliation type schools.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT sum(enrollment), affiliation FROM university GROUP BY affiliation"
  },
  {
    "instruction": "What are the maximum and minumum grade points?",
    "input": "create table gradeconversion (lettergrade varchar(2) primary key, gradepoint float);",
    "output": "SELECT max(gradepoint), min(gradepoint) FROM GRADECONVERSION"
  },
  {
    "instruction": "How many different users wrote some reviews?",
    "input": "create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT count(DISTINCT u_id) FROM review"
  },
  {
    "instruction": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.",
    "input": "create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.snatch > 140 OR T2.height > 200;"
  },
  {
    "instruction": "What are the three largest cities in terms of regional population?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));",
    "output": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3"
  },
  {
    "instruction": "the names of models that launched between 2002 and 2004.",
    "input": "create table \"chip_model\" (\"Model_name\" text, \"Launch_year\" real, \"RAM_MiB\" real, \"ROM_MiB\" real, \"Slots\" text, \"WiFi\" text, \"Bluetooth\" text, primary key (\"Model_name\"));",
    "output": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;"
  },
  {
    "instruction": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names.",
    "input": "create table \"member_attendance\" (\"Member_ID\" int, \"Performance_ID\" int, \"Num_of_Pieces\" int, primary key (\"Member_ID\",\"Performance_ID\"), foreign key (\"Member_ID\") references `member`(\"Member_ID\"), foreign key (\"Performance_ID\") references `performance`(\"Performance_ID\"));create table \"member\" (\"Member_ID\" text, \"Name\" text, \"Nationality\" text, \"Role\" text, primary key (\"Member_ID\"));create table \"performance\" (\"Performance_ID\" real, \"Date\" text, \"Host\" text, \"Location\" text, \"Attendance\" int, primary key (\"Performance_ID\"));",
    "output": "SELECT T2.Name, T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T2.Name ASC"
  },
  {
    "instruction": "What is the team name and acc regular season score of the school that was founded for the longest time?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));",
    "output": "SELECT t2.team_name, t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1"
  },
  {
    "instruction": "how many denny are there in the bay area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.name = \"denny\";"
  },
  {
    "instruction": "How many Patent outcomes are generated from all the projects?",
    "input": "create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));",
    "output": "SELECT count(*) FROM Project_outcomes WHERE outcome_code = 'Patent'"
  },
  {
    "instruction": "How many businesses has Michelle reviewed in 2010 ?",
    "input": "create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t2.year = 2010 AND t3.name = \"Michelle\";"
  },
  {
    "instruction": "what states does the ohio run through",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE river_name = \"ohio\";"
  },
  {
    "instruction": "how many users reviewed \" Sushi Too \" in Pittsburgh",
    "input": "create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.city = \"Pittsburgh\" AND t1.name = \"Sushi Too\";"
  },
  {
    "instruction": "2014 papers using ImageNet",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"ImageNet\" AND t3.year = 2014;"
  },
  {
    "instruction": "What are the names of the channels owned by CCTV or HBS?",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));",
    "output": "SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'"
  },
  {
    "instruction": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.",
    "input": "create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100"
  },
  {
    "instruction": "What are the names of all aircrafts that have won a match at least twice?",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "What is the average snatch score of body builders?",
    "input": "create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));",
    "output": "SELECT avg(Snatch) FROM body_builder"
  },
  {
    "instruction": "Find the name of rooms booked by some customers whose first name contains ROY.",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%'"
  },
  {
    "instruction": "Return the cell phone number and email address for all students.",
    "input": "create table `students` (`student_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(40), `last_name` varchar(40), `cell_mobile_number` varchar(40), `email_address` varchar(40), `date_first_rental` datetime, `date_left_university` datetime, `other_student_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT cell_mobile_number, email_address FROM STUDENTS"
  },
  {
    "instruction": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"pitStops\" (\"raceId\" integer, \"driverId\" integer, \"stop\" integer, \"lap\" integer, \"time\" text, \"duration\" text, \"milliseconds\" integer, primary key (\"raceId\", \"driverId\", \"stop\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) = 11 INTERSECT SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) > 5"
  },
  {
    "instruction": "What is the starting year for the oldest technician?",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1"
  },
  {
    "instruction": "Tell me the the claim date and settlement date for each settlement case.",
    "input": "create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT Date_Claim_Made, Date_Claim_Settled FROM Settlements"
  },
  {
    "instruction": "Show all advisors who have at least two students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*) >= 2"
  },
  {
    "instruction": "What are the codes and names for all regions, sorted by codes?",
    "input": "create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));",
    "output": "SELECT region_code, region_name FROM region ORDER BY region_code"
  },
  {
    "instruction": "What is the name of the manager with the most gas stations that opened after 2000?",
    "input": "create table \"gas_station\" (\"Station_ID\" int, \"Open_Year\" int, \"Location\" text, \"Manager_Name\" text, \"Vice_Manager_Name\" text, \"Representative_Name\" text, primary key (\"Station_ID\"));",
    "output": "SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the budget type code with most number of documents.",
    "input": "create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the code of the location with the largest number of documents.",
    "input": "create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What city is the headquarter of the store Blackville?",
    "input": "create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));create table \"store_district\" (\"Store_ID\" int, \"District_ID\" int, primary key (\"Store_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`district_id`) references `district`(`district_id`));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.store_name = \"Blackville\""
  },
  {
    "instruction": "How many aircrafts exist in the database?",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT count(*) FROM Aircraft"
  },
  {
    "instruction": "Find the names of stadiums whose capacity is smaller than the average capacity.",
    "input": "create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));",
    "output": "SELECT name FROM stadium WHERE capacity < (SELECT avg(capacity) FROM stadium)"
  },
  {
    "instruction": "Which job titles correspond to jobs with salaries over 9000?",
    "input": "create table `jobs` (`job_id` varchar(10) not null default '', `job_title` varchar(35) not null, `min_salary` decimal(6, 0) default null, `max_salary` decimal(6, 0) default null, primary key (`job_id`));",
    "output": "SELECT job_title FROM jobs WHERE min_salary > 9000"
  },
  {
    "instruction": "Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.",
    "input": "create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"
  },
  {
    "instruction": "List the names of all the distinct customers who bought a keyboard.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, foreign key (`order_id`) references `customer_orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = \"keyboard\""
  },
  {
    "instruction": "What are the themes of farm competitions sorted by year in ascending order?",
    "input": "create table \"farm_competition\" (\"Competition_ID\" int, \"Year\" int, \"Theme\" text, \"Host_city_ID\" int, \"Hosts\" text, primary key (\"Competition_ID\"), foreign key (`host_city_id`) references `city`(`city_id`));",
    "output": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC"
  },
  {
    "instruction": "Find the last name and hire date of the professor who is in office DRE 102.",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T1.emp_lname, T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'"
  },
  {
    "instruction": "How many papers published in nature communications in 2015 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"nature communications\";"
  },
  {
    "instruction": "who had papers at acl 2016 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2016 AND t3.venuename = \"acl\";"
  },
  {
    "instruction": "what is the population of the largest state that borders texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT population FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" );"
  },
  {
    "instruction": "What are the names of wrestlers who have never been eliminated?",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));",
    "output": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)"
  },
  {
    "instruction": "What are the email addresses of teachers whose address has zip code \"918\"?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1` varchar(120), `line_2` varchar(120), `line_3` varchar(120), `city` varchar(80), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));create table `teachers` (`teacher_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `gender` varchar(1), `cell_mobile_number` varchar(40), `email_address` varchar(40), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T1.zip_postcode = \"918\""
  },
  {
    "instruction": "Which clubs have one or more members whose advisor is \"1121\"?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.advisor = 1121"
  },
  {
    "instruction": "How many authors are there?",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));",
    "output": "SELECT count(*) FROM authors"
  },
  {
    "instruction": "Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\".",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Nameless, Painless\""
  },
  {
    "instruction": "What are the types of competition that have most 5 competitions for that type?",
    "input": "create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));",
    "output": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*) <= 5"
  },
  {
    "instruction": "What is the average amount of items ordered in each order?",
    "input": "create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT avg(order_quantity) FROM order_items"
  },
  {
    "instruction": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = \"2192\""
  },
  {
    "instruction": "Find the product category description of the product category with code \"Spices\".",
    "input": "create table `ref_product_categories` (`product_category_code` varchar(15) primary key, `product_category_description` varchar(80), `unit_of_measure` varchar(20));",
    "output": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code = \"Spices\""
  },
  {
    "instruction": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
    "input": "create table \"department\" (\"Department_ID\" int, \"Name\" text, \"Creation\" text, \"Ranking\" int, \"Budget_in_Billions\" real, \"Num_Employees\" real, primary key (\"Department_ID\"));create table \"management\" (\"department_ID\" int, \"head_ID\" int, \"temporary_acting\" text, primary key (\"Department_ID\",\"head_ID\"), foreign key (\"Department_ID\") references `department`(\"Department_ID\"), foreign key (\"head_ID\") references `head`(\"head_ID\"));create table \"head\" (\"head_ID\" int, \"name\" text, \"born_state\" text, \"age\" real, primary key (\"head_ID\"));",
    "output": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'"
  },
  {
    "instruction": "What are the numbers of constructors for different nationalities?",
    "input": "create table \"constructors\" (\"constructorId\" integer primary key, \"constructorRef\" text, \"name\" text, \"nationality\" text, \"url\" text);",
    "output": "SELECT count(*), nationality FROM constructors GROUP BY nationality"
  },
  {
    "instruction": "venue for Trophic Cascade",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Trophic Cascade\";"
  },
  {
    "instruction": "How many distinct companies are there?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT count(DISTINCT Company) FROM entrepreneur"
  },
  {
    "instruction": "What are the dates of publications in descending order of price?",
    "input": "create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));",
    "output": "SELECT Publication_Date FROM publication ORDER BY Price DESC"
  },
  {
    "instruction": "Which nurses are in charge of patients undergoing treatments?",
    "input": "create table undergoes (patient integer not null, procedures integer not null, stay integer not null, dateundergoes datetime not null, physician integer not null, assistingnurse integer, primary key(patient, procedures, stay, dateundergoes), constraint fk_undergoes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_undergoes_procedures_code foreign key(procedures) references procedures(code), constraint fk_undergoes_stay_stayid foreign key(stay) references stay(stayid), constraint fk_undergoes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_undergoes_nurse_employeeid foreign key(assistingnurse) references nurse(employeeid));create table nurse (employeeid integer primary key not null, name varchar(30) not null, position varchar(30) not null, registered boolean not null, ssn integer not null);",
    "output": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID"
  },
  {
    "instruction": "Show the movie titles and book titles for all companies in China.",
    "input": "create table \"movie\" (\"movie_id\" int, \"Title\" text, \"Year\" int, \"Director\" text, \"Budget_million\" real, \"Gross_worldwide\" int, primary key(\"movie_id\"));create table \"culture_company\" (\"Company_name\" text, \"Type\" text, \"Incorporated_in\" text, \"Group_Equity_Shareholding\" real, \"book_club_id\" text, \"movie_id\" text, primary key(\"Company_name\"), foreign key (\"book_club_id\") references \"book_club\"(\"book_club_id\"), foreign key (\"movie_id\") references \"movie\"(\"movie_id\"));create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT T1.title, T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id JOIN book_club AS T3 ON T3.book_club_id = T2.book_club_id WHERE T2.incorporated_in = 'China'"
  },
  {
    "instruction": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2"
  },
  {
    "instruction": "What degrees were conferred in San Francisco State University in the year 2001?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 2001"
  },
  {
    "instruction": "How many unique classes are offered?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT class_code) FROM CLASS"
  },
  {
    "instruction": "How many people in total can stay in the modern rooms of this inn?",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor = 'modern';"
  },
  {
    "instruction": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
    "input": "create table events (event_id integer not null, service_id integer not null, event_details varchar(255), primary key (event_id), foreign key (service_id) references services (service_id));create table participants_in_events (event_id integer not null, participant_id integer not null, primary key (event_id, participant_id), foreign key (participant_id) references participants (participant_id), foreign key (event_id) references events (event_id));create table participants (participant_id integer not null, participant_type_code char(15) not null, participant_details varchar(255), primary key (participant_id));",
    "output": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE Participant_Details = 'Kenyatta Kuhn'"
  },
  {
    "instruction": "What is the name and sex of the candidate with the highest support rate?",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT t1.name, t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of regions.",
    "input": "create table \"region\" (\"Region_ID\" int, \"Region_name\" text, \"Date\" text, \"Label\" text, \"Format\" text, \"Catalogue\" text, primary key (\"Region_ID\"));",
    "output": "SELECT count(*) FROM region"
  },
  {
    "instruction": "What is the employee id of the head whose department has the least number of employees?",
    "input": "create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));",
    "output": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"
  },
  {
    "instruction": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
    "input": "create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'"
  },
  {
    "instruction": "How many orders does Luca Mancini have in his invoices?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
  },
  {
    "instruction": "How many airports haven't the pilot 'Thompson' driven an aircraft?",
    "input": "create table \"airport\" (\"id\" int, \"City\" text, \"Country\" text, \"IATA\" text, \"ICAO\" text, \"name\" text, primary key(\"id\"));create table \"flight\" (\"id\" int, \"Vehicle_Flight_number\" text, \"Date\" text, \"Pilot\" text, \"Velocity\" real, \"Altitude\" real, \"airport_id\" int, \"company_id\" int, primary key (\"id\"), foreign key (\"airport_id\") references `airport`(\"id\"), foreign key (\"company_id\") references `operate_company`(\"id\"));",
    "output": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot = 'Thompson' );"
  },
  {
    "instruction": "What is the genre name of the film HUNGER ROOF?",
    "input": "create table category (category_id tinyint unsigned not null, name varchar(25) not null, last_update timestamp not null default current_timestamp, primary key (category_id));create table film_category (film_id smallint unsigned not null, category_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (film_id, category_id), foreign key (film_id) references film (film_id), foreign key (category_id) references category (category_id));create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));",
    "output": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'HUNGER ROOF'"
  },
  {
    "instruction": "What are the names of workshop groups in which services with product name \"film\" are performed?",
    "input": "create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));create table services (service_id integer not null, service_type_code char(15), workshop_group_id integer not null, product_description varchar(255), product_name varchar(255), product_price decimal(20, 4), other_product_service_details varchar(255), primary key (service_id), unique (service_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id), foreign key (service_type_code) references ref_service_types (service_type_code));",
    "output": "SELECT T1.Store_Phone, T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T2.Product_Name = \"film\""
  },
  {
    "instruction": "List the names of all distinct products in alphabetical order.",
    "input": "create table `products` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT DISTINCT product_name FROM products ORDER BY product_name"
  },
  {
    "instruction": "how many states have major rivers",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( traverse ) FROM river WHERE LENGTH > 750;"
  },
  {
    "instruction": "Which department offers the most credits all together?",
    "input": "create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1"
  },
  {
    "instruction": "What is the average age for all people in the table?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT avg(age) FROM Person"
  },
  {
    "instruction": "return me the keywords, which have been contained by more than 10 papers of \" H. V. Jagadish \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t2.name = \"H. V. Jagadish\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title ) > 10;"
  },
  {
    "instruction": "Find the names of the workshop groups where services with product name \"film\" are performed.",
    "input": "create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));create table services (service_id integer not null, service_type_code char(15), workshop_group_id integer not null, product_description varchar(255), product_name varchar(255), product_price decimal(20, 4), other_product_service_details varchar(255), primary key (service_id), unique (service_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id), foreign key (service_type_code) references ref_service_types (service_type_code));",
    "output": "SELECT T1.Store_Phone, T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T2.Product_Name = \"film\""
  },
  {
    "instruction": "What are the names of the activities Mark Giuliano is involved in",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));create table activity (actid integer primary key, activity_name varchar(25));",
    "output": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = \"Mark\" AND T1.lname = \"Giuliano\""
  },
  {
    "instruction": "Find all actors from Italy born after 1980",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT name FROM actor WHERE birth_year > 1980 AND nationality = \"Italy\";"
  },
  {
    "instruction": "How many players were in the team Boston Red Stockings in 2000?",
    "input": "create table salary (year integer, team_id text, league_id text, player_id text, salary integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2000"
  },
  {
    "instruction": "What is draft detail of the document with id 7?",
    "input": "create table document_drafts (document_id integer not null, draft_number integer not null, draft_details varchar(255), primary key (document_id, draft_number), foreign key (document_id) references documents (document_id));",
    "output": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;"
  },
  {
    "instruction": "Give the names and locations of all wrestlers.",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT Name, LOCATION FROM wrestler"
  },
  {
    "instruction": "What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.emp_fname, T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'"
  },
  {
    "instruction": "who does Noah A Smith work with ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Noah A Smith\";"
  },
  {
    "instruction": "What are the names of products whose availability equals to 1?",
    "input": "create table `view_product_availability` (`product_id` integer not null, `booking_id` integer not null, `status_date` datetime primary key, `available_yn` varchar(1), foreign key (`booking_id`) references `bookings`(`booking_id`), foreign key (`product_id`) references `products_for_hire`(`product_id`));create table `products_for_hire` (`product_id` integer primary key, `product_type_code` varchar(15) not null, `daily_hire_cost` decimal(19, 4), `product_name` varchar(80), `product_description` varchar(255));",
    "output": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.available_yn = 1"
  },
  {
    "instruction": "Show the name of storms which don't have affected region in record.",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)"
  },
  {
    "instruction": "What are all the the participant ids, type code and details?",
    "input": "create table participants (participant_id integer not null, participant_type_code char(15) not null, participant_details varchar(255), primary key (participant_id));",
    "output": "SELECT Participant_ID, Participant_Type_Code, Participant_Details FROM Participants"
  },
  {
    "instruction": "how many papers accepted in nature communications 2015",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"nature communications\";"
  },
  {
    "instruction": "Count the number of customers who do not have an account.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
  },
  {
    "instruction": "Which advisor has most number of students?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are all the labels?",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);",
    "output": "SELECT DISTINCT label FROM Albums"
  },
  {
    "instruction": "Find all the songs whose name contains the word \"the\".",
    "input": "create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT title FROM songs WHERE title LIKE '% the %'"
  },
  {
    "instruction": "which states have cities named springfield",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "What are the types and nationalities of every ship?",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT TYPE, Nationality FROM ship"
  },
  {
    "instruction": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
    "input": "create table \"Web_client_accelerator\" (\"id\" int, \"name\" text, \"Operating_system\" text, \"Client\" text, \"Connection\" text, primary key(\"id\"));create table \"accelerator_compatible_browser\" (\"accelerator_id\" int, \"browser_id\" int, \"compatible_since_year\" int, primary key(\"accelerator_id\", \"browser_id\"), foreign key (\"accelerator_id\") references `web_client_accelerator`(\"id\"), foreign key (\"browser_id\") references `browser`(\"id\"));create table \"browser\" (\"id\" int, \"name\" text, \"market_share\" real, primary key(\"id\"));create table \"Web_client_accelerator\" (\"id\" int, \"name\" text, \"Operating_system\" text, \"Client\" text, \"Connection\" text, primary key(\"id\"));create table \"accelerator_compatible_browser\" (\"accelerator_id\" int, \"browser_id\" int, \"compatible_since_year\" int, primary key(\"accelerator_id\", \"browser_id\"), foreign key (\"accelerator_id\") references `web_client_accelerator`(\"id\"), foreign key (\"browser_id\") references `browser`(\"id\"));create table \"browser\" (\"id\" int, \"name\" text, \"market_share\" real, primary key(\"id\"));",
    "output": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'"
  },
  {
    "instruction": "For each product, return its id and the number of times it was ordered.",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer primary key, `product_id` integer not null, `order_id` integer not null, `order_item_status` varchar(10) not null, `order_item_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));create table `products` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT count(*), T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id"
  },
  {
    "instruction": "Find the name of customers who did not pay with Cash.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'"
  },
  {
    "instruction": "what rivers flow through the largest state",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );"
  },
  {
    "instruction": "Return the issue dates of volumes by artists who are at most 23 years old?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 23"
  },
  {
    "instruction": "Find the states which do not have any employee in their record.",
    "input": "create table `addresses` (`address_id` integer primary key, `address_details` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));create table `employees` (`employee_id` integer primary key, `employee_address_id` integer not null, `employee_name` varchar(80), `employee_phone` varchar(80), foreign key (`employee_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)"
  },
  {
    "instruction": "When did Peter Mertens and Dina Barbian collaborate ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "What are the opening years in which at least two shops opened?",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*) >= 2"
  },
  {
    "instruction": "What are the distinct last names of the students who have president votes and have 8741 as the advisor?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = \"8741\""
  },
  {
    "instruction": "Show all investor details.",
    "input": "create table `investors` (`investor_id` integer primary key, `investor_details` varchar(255));",
    "output": "SELECT Investor_details FROM INVESTORS"
  },
  {
    "instruction": "How many distinct cities does the employees live in?",
    "input": "create table `employee` (`employeeid` integer not null , `lastname` varchar(20) not null , `firstname` varchar(20) not null , `title` varchar(30) default null , `reportsto` integer default null , `birthdate` datetime default null , `hiredate` datetime default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) default null , primary key (`employeeid`) , constraint `fk_employeereportsto` foreign key (`reportsto`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE"
  },
  {
    "instruction": "Which course is enrolled in by the most students? Give me the course name.",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the other account details for the account with the name 338?",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT other_account_details FROM Accounts WHERE account_name = \"338\""
  },
  {
    "instruction": "which is the lowest point of the states that the mississippi runs through",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;"
  },
  {
    "instruction": "Show the names of countries and the average speed of roller coasters from each country.",
    "input": "create table \"country\" (\"Country_ID\" int, \"Name\" text, \"Population\" int, \"Area\" int, \"Languages\" text, primary key (\"Country_ID\"));create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT T1.Name, avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name"
  },
  {
    "instruction": "What is the average rating of songs produced by female artists?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = \"Female\""
  },
  {
    "instruction": "Who has friends that are older than the average age? Print their friends and their ages as well",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT DISTINCT T2.name, T2.friend, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person)"
  },
  {
    "instruction": "Give the unit of measure for the product with the name 'cumin'.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_product_categories` (`product_category_code` varchar(15) primary key, `product_category_description` varchar(80), `unit_of_measure` varchar(20));",
    "output": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = \"cumin\""
  },
  {
    "instruction": "what is the shortest river in the usa",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river );"
  },
  {
    "instruction": "Find all movies in which \" Robin Wright \" appears",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Robin Wright\";"
  },
  {
    "instruction": "For each file format, return the number of artists who released songs in that format.",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);",
    "output": "SELECT count(*), formats FROM files GROUP BY formats"
  },
  {
    "instruction": "For each city, return the highest latitude among its stations.",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT city, max(lat) FROM station GROUP BY city"
  },
  {
    "instruction": "Return the first names of the 5 staff members who have handled the most complaints.",
    "input": "create table `staff` (`staff_id` integer primary key, `gender` varchar(1), `first_name` varchar(80), `last_name` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5"
  },
  {
    "instruction": "How much in total does customer with first name as Carole and last name as Bernhard paid?",
    "input": "create table `customer_payments` (`customer_id` integer not null, `datetime_payment` datetime not null, `payment_method_code` varchar(10) not null, `amount_payment` double null, primary key (`customer_id`,`datetime_payment`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\""
  },
  {
    "instruction": "Return the codes of the document types that do not have a total access count of over 10000.",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count) > 10000"
  },
  {
    "instruction": "show me a good arabic restaurant in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Count the number of different parties.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT count(DISTINCT party_name) FROM party"
  },
  {
    "instruction": "What is the name of organization that has the greatest number of contact individuals?",
    "input": "create table `organizations` (`organization_id` integer primary key, `date_formed` datetime, `organization_name` varchar(255), `uk_vat_number` varchar(20));create table `organization_contact_individuals` (`individual_id` integer not null, `organization_id` integer not null, `date_contact_from` datetime not null, `date_contact_to` datetime, primary key (`individual_id`,`organization_id`), foreign key (`organization_id`) references `organizations`(`organization_id`), foreign key (`individual_id`) references `individuals`(`individual_id`));",
    "output": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what is a good restaurant on bethel island rd in bethel island ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"bethel island\" AND t2.street_name = \"bethel island rd\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "What is the title, phone number and hire date for the employee named Nancy Edwards?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT title, phone, hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
  },
  {
    "instruction": "Where does the staff member with the first name Elsa live?",
    "input": "create table staff (staff_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, address_id smallint unsigned not null, picture blob default null, email varchar(50) default null, store_id tinyint unsigned not null, active boolean not null default true, username varchar(16) not null, password varchar(40) default null, last_update timestamp not null default current_timestamp, primary key (staff_id), --FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (address_id) REFERENCES address (address_id));create table address (address_id smallint unsigned not null, address varchar(50) not null, address2 varchar(50) default null, district varchar(20) not null, city_id smallint unsigned not null, postal_code varchar(10) default null, phone varchar(20) not null, last_update timestamp not null default current_timestamp, primary key (address_id), foreign key (city_id) references city (city_id));",
    "output": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Elsa'"
  },
  {
    "instruction": "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);",
    "output": "SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
  },
  {
    "instruction": "What are the document ids for the budget type code 'SF'?",
    "input": "create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code = 'SF'"
  },
  {
    "instruction": "Give the names of tracks that do not have a race in the class 'GT'.",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id WHERE T1.class = 'GT'"
  },
  {
    "instruction": "What are the venues of all the matches? Sort them in the descending order of match date.",
    "input": "create table \"match\" (\"Match_ID\" int, \"Date\" text, \"Venue\" text, \"Score\" text, \"Result\" text, \"Competition\" text, primary key (\"Match_ID\"));",
    "output": "SELECT venue FROM MATCH ORDER BY date DESC"
  },
  {
    "instruction": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?",
    "input": "create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);",
    "output": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010"
  },
  {
    "instruction": "What are ids of the faculty members who not only participate in an activity but also advise a student.",
    "input": "create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student"
  },
  {
    "instruction": "how many papers on convolutional neural networks have been published in the past year ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"convolutional neural networks\" AND t3.year = 2016;"
  },
  {
    "instruction": "Count the number of products in the category 'Seeds'.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT count(*) FROM products WHERE product_category_code = \"Seeds\""
  },
  {
    "instruction": "Show different parties of people along with the number of people in each party.",
    "input": "create table \"people\" (\"People_ID\" int, \"District\" text, \"Name\" text, \"Party\" text, \"Age\" int, primary key (\"People_ID\"));",
    "output": "SELECT Party, COUNT(*) FROM people GROUP BY Party"
  },
  {
    "instruction": "What are the distinct names of customers who have purchased a keyboard?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, foreign key (`order_id`) references `customer_orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = \"keyboard\""
  },
  {
    "instruction": "What are the titles and directors of the films were never presented in China?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));create table \"market\" (\"Market_ID\" int, \"Country\" text, \"Number_cities\" int, primary key (\"Market_ID\"));",
    "output": "SELECT title, director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id = T2.Market_ID WHERE country = 'China')"
  },
  {
    "instruction": "what states have a city named springfield",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "How many storms had death records?",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT count(*) FROM storm WHERE Number_Deaths > 0"
  },
  {
    "instruction": "What are the titles of all movies that James Cameron directed after 2000?",
    "input": "create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR > 2000"
  },
  {
    "instruction": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
    "input": "create table `part_faults` (`part_fault_id` integer primary key, `part_id` integer not null, `fault_short_name` varchar(20), `fault_description` varchar(255), `other_fault_details` varchar(255), foreign key (`part_id`) references `parts`(`part_id`));create table `skills_required_to_fix` (`part_fault_id` integer not null, `skill_id` integer not null, foreign key (`part_fault_id`) references `part_faults`(`part_fault_id`), foreign key (`skill_id`) references `skills`(`skill_id`));create table `skills` (`skill_id` integer primary key, `skill_code` varchar(20), `skill_description` varchar(255));",
    "output": "SELECT T1.fault_short_name, T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id"
  },
  {
    "instruction": "what is the biggest river in texas",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = \"texas\" ) AND traverse = \"texas\";"
  },
  {
    "instruction": "what is the capital of the state that borders the state that borders texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" ) );"
  },
  {
    "instruction": "Find the name and email of the user followed by the least number of people.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));",
    "output": "SELECT name, email FROM user_profiles ORDER BY followers LIMIT 1"
  },
  {
    "instruction": "Show ids of students who don't play video game.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games"
  },
  {
    "instruction": "Find the name and city of the airport which is the destination of the most number of routes.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT T1.name, T1.city, T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the code of the role that have the most employees.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the numbers of all flights that can cover a distance of more than 2000?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT flno FROM Flight WHERE distance > 2000"
  },
  {
    "instruction": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
  },
  {
    "instruction": "convolution by brian curless",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"brian curless\" AND t5.keyphrasename = \"convolution\";"
  },
  {
    "instruction": "Show all allergy type with number of students affected.",
    "input": "create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT T2.allergytype, count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype"
  },
  {
    "instruction": "What are the names and locations of tracks that have had exactly 1 race?",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT T2.name, T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING count(*) = 1"
  },
  {
    "instruction": "Give the ids and names of products with price lower than 600 or higher than 900.",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT product_id, product_name FROM products WHERE product_price < 600 OR product_price > 900"
  },
  {
    "instruction": "List all region names in alphabetical order.",
    "input": "create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));",
    "output": "SELECT region_name FROM region ORDER BY region_name"
  },
  {
    "instruction": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2"
  },
  {
    "instruction": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\""
  },
  {
    "instruction": "What is the full name and id of the customer who has the lowest total amount of payment?",
    "input": "create table customer (customer_id smallint unsigned not null, store_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, email varchar(50) default null, address_id smallint unsigned not null, active boolean not null default true, create_date datetime not null, last_update timestamp default current_timestamp, primary key (customer_id), foreign key (address_id) references address (address_id), foreign key (store_id) references store (store_id));create table payment (payment_id smallint unsigned not null, customer_id smallint unsigned not null, staff_id tinyint unsigned not null, rental_id int default null, amount decimal(5, 2) not null, payment_date datetime not null, last_update timestamp default current_timestamp, primary key (payment_id), foreign key (rental_id) references rental (rental_id), foreign key (customer_id) references customer (customer_id), foreign key (staff_id) references staff (staff_id));",
    "output": "SELECT T1.first_name, T1.last_name, T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
  },
  {
    "instruction": "What is the first and last name of all students who play Football or Lacrosse?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T2.lname, T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.SportName = \"Football\" OR T1.SportName = \"Lacrosse\""
  },
  {
    "instruction": "Find the top 3 wineries with the greatest number of wines made of white color grapes.",
    "input": "create table \"grapes\" (\"ID\" integer primary key, \"Grape\" text unique, \"Color\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE WHERE T1.Color = \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "Show names of shops and the carriers of devices they have in stock.",
    "input": "create table \"stock\" (\"Shop_ID\" int, \"Device_ID\" int, \"Quantity\" int, primary key (\"Shop_ID\",\"Device_ID\"), foreign key (`shop_id`) references `shop`(`shop_id`), foreign key (`device_id`) references `device`(`device_id`));create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT T3.Shop_Name, T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID"
  },
  {
    "instruction": "how many places for french food are there in palo alto ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"palo alto\" AND t1.food_type = \"french\";"
  },
  {
    "instruction": "Who are the advisors for students that live in a city with city code \"BAL\"?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Advisor FROM STUDENT WHERE city_code = \"BAL\""
  },
  {
    "instruction": "return me the paper after 2000 in VLDB conference with more than 200 citations .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = \"VLDB\" AND t2.citation_num > 200 AND t2.year > 2000;"
  },
  {
    "instruction": "List the name and country of origin for all singers who have produced songs with rating above 9.",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT DISTINCT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 9"
  },
  {
    "instruction": "What are the different police forces of counties that are not located in the East?",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\""
  },
  {
    "instruction": "Show the distinct director of films with market estimation in the year of 1995.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));",
    "output": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Year = 1995"
  },
  {
    "instruction": "Find all actors from Canada who acted in \" James Bond \" movies",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.nationality = \"Canada\" AND t3.title = \"James Bond\";"
  },
  {
    "instruction": "which EMNLP 2010 papers have the most citations ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.citedpaperid, COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2010 AND t2.venuename = \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;"
  },
  {
    "instruction": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table first_notification_of_loss (fnol_id integer not null, customer_id integer not null, policy_id integer not null, service_id integer not null, primary key (fnol_id), unique (fnol_id), foreign key (service_id) references services (service_id), foreign key (customer_id, policy_id) references customers_policies (customer_id, policy_id));create table services (service_id integer not null, service_name varchar(40), primary key (service_id));create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table first_notification_of_loss (fnol_id integer not null, customer_id integer not null, policy_id integer not null, service_id integer not null, primary key (fnol_id), unique (fnol_id), foreign key (service_id) references services (service_id), foreign key (customer_id, policy_id) references customers_policies (customer_id, policy_id));create table services (service_id integer not null, service_name varchar(40), primary key (service_id));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"New policy application\""
  },
  {
    "instruction": "How many students play sports?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT count(DISTINCT StuID) FROM Sportsinfo"
  },
  {
    "instruction": "Find the name of the most expensive hardware product.",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1"
  },
  {
    "instruction": "What are the phone numbers for each employee?",
    "input": "create table `employee` (`employeeid` integer not null , `lastname` varchar(20) not null , `firstname` varchar(20) not null , `title` varchar(30) default null , `reportsto` integer default null , `birthdate` datetime default null , `hiredate` datetime default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) default null , primary key (`employeeid`) , constraint `fk_employeereportsto` foreign key (`reportsto`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT Phone FROM EMPLOYEE"
  },
  {
    "instruction": "Find the number of rooms with a king bed.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT count(*) FROM Rooms WHERE bedType = \"King\";"
  },
  {
    "instruction": "Show the names of journalists and the number of events they reported.",
    "input": "create table \"news_report\" (\"journalist_ID\" int, \"Event_ID\" int, \"Work_Type\" text, primary key (\"journalist_ID\",\"Event_ID\"), foreign key (\"journalist_ID\") references `journalist`(\"journalist_ID\"), foreign key (\"Event_ID\") references `event`(\"Event_ID\"));create table \"event\" (\"Event_ID\" int, \"Date\" text, \"Venue\" text, \"Name\" text, \"Event_Attendance\" int, primary key (\"Event_ID\"));create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));",
    "output": "SELECT T3.Name, COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name"
  },
  {
    "instruction": "Show all publishers and the number of books for each publisher.",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT publisher, count(*) FROM book_club GROUP BY publisher"
  },
  {
    "instruction": "Show the transaction type and the number of transactions.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `previous_transaction_id` integer, `account_id` integer not null, `card_id` integer not null, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` double null, `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`card_id`) references `customers_cards`(`card_id`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT transaction_type, count(*) FROM Financial_transactions GROUP BY transaction_type"
  },
  {
    "instruction": "List \" James Bond \" directors",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.title = \"James Bond\";"
  },
  {
    "instruction": "Who is the advisor of student with ID 1004?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Advisor FROM Student WHERE StuID = 1004"
  },
  {
    "instruction": "What is the highest salary among each team? List the team name, id and maximum salary.",
    "input": "create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);create table salary (year integer, team_id text, league_id text, player_id text, salary integer);",
    "output": "SELECT T1.name, T1.team_id, max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id;"
  },
  {
    "instruction": "What are the names of customers who use payment method \"Cash\"?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT customer_name FROM customers WHERE payment_method = \"Cash\""
  },
  {
    "instruction": "Give the average number of cities within markets that had a low market estimation larger than 10000?",
    "input": "create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));create table \"market\" (\"Market_ID\" int, \"Country\" text, \"Number_cities\" int, primary key (\"Market_ID\"));",
    "output": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000"
  },
  {
    "instruction": "Which major has least number of students? List the major and the number of students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Major, count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;"
  },
  {
    "instruction": "Select the name and price of the cheapest product.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT name, price FROM Products ORDER BY price ASC LIMIT 1"
  },
  {
    "instruction": "List the first name middle name and last name of all staff.",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT first_name, middle_name, last_name FROM Staff;"
  },
  {
    "instruction": "Papers by sharon goldwater",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "Find the average age of members of the club \"Hopkins Student Enterprises\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\""
  },
  {
    "instruction": "Who is the writer of \" The Truman Show \"",
    "input": "create table \"written_by\" (\"id\" int, \"msid\" int, \"wid\" int, foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"wid\") references `writer`(\"wid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"writer\" (\"wid\" int, \"gender\" text, \"name\" int, \"nationality\" int, \"num_of_episodes\" int, \"birth_city\" text, \"birth_year\" int, primary key(\"wid\"));",
    "output": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid = t1.mid JOIN writer AS t2 ON t3.wid = t2.wid WHERE t1.title = \"The Truman Show\";"
  },
  {
    "instruction": "name the 50 capitals in the usa",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT DISTINCT capital FROM state;"
  },
  {
    "instruction": "What are characteristic names used at least twice across all products?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*) >= 2"
  },
  {
    "instruction": "Show first name, last name, age for all female students. Their sex is F.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'"
  },
  {
    "instruction": "What is the name of the customer with the worst credit score?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1"
  },
  {
    "instruction": "In what year was \" Benedict Cumberbatch \" born",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT birth_year FROM actor WHERE name = \"Benedict Cumberbatch\";"
  },
  {
    "instruction": "papers that use WebKB",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"WebKB\";"
  },
  {
    "instruction": "Most recent deep learning conference ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid, t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "What are the names of players who train between 500 and 1500 hours?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500"
  },
  {
    "instruction": "Find the name of dorms which have both TV Lounge and Study Room as amenities.",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'"
  },
  {
    "instruction": "Give me the payment Id, the date and the amount for all the payments processed with Visa.",
    "input": "create table payments (payment_id integer not null, settlement_id integer not null, payment_method_code varchar(255), date_payment_made date, amount_payment integer, primary key (payment_id), foreign key (settlement_id) references settlements (settlement_id));",
    "output": "SELECT Payment_ID, Date_Payment_Made, Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'"
  },
  {
    "instruction": "What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT DISTINCT T2.emp_fname, T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'"
  },
  {
    "instruction": "Find all users who reviewed restaurant \" Mesa Grill \"",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.name = \"Mesa Grill\" AND t2.category_name = \"restaurant\";"
  },
  {
    "instruction": "what states capital is salem",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE capital = \"salem\";"
  },
  {
    "instruction": "Show the average amount of transactions with type code \"SALE\".",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\""
  },
  {
    "instruction": "how tall is guadalupe peak",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_elevation FROM highlow WHERE highest_point = \"guadalupe peak\";"
  },
  {
    "instruction": "How many different instruments does the musician with the last name \"Heilo\" use?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = \"Heilo\""
  },
  {
    "instruction": "Find the starting date and ending data in location for the document named \"Robin CV\".",
    "input": "create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));create table all_documents (document_id integer not null, date_stored datetime, document_type_code char(15) not null, document_name char(255), document_description char(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (date_stored) references ref_calendar (calendar_date));",
    "output": "SELECT T1.date_in_location_from, T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Robin CV\""
  },
  {
    "instruction": "What are the phones of departments in Room 268?",
    "input": "create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);",
    "output": "SELECT DPhone FROM DEPARTMENT WHERE Room = 268"
  },
  {
    "instruction": "what is the length of the longest river that runs through texas",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT LENGTH FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = \"texas\" ) AND traverse = \"texas\";"
  },
  {
    "instruction": "How many invoices were billed from Chicago, IL?",
    "input": "create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT COUNT(*) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\";"
  },
  {
    "instruction": "Show the most common nationality for journalists.",
    "input": "create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));",
    "output": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the first and last names of the instructors who teach the top 3 number of courses?",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT T2.Fname, T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "How many heads of the departments are older than 56 ?",
    "input": "create table \"head\" (\"head_ID\" int, \"name\" text, \"born_state\" text, \"age\" real, primary key (\"head_ID\"));",
    "output": "SELECT count(*) FROM head WHERE age > 56"
  },
  {
    "instruction": "What is the title and id of the film that has the greatest number of copies in inventory?",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));create table inventory (inventory_id mediumint unsigned not null, film_id smallint unsigned not null, store_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (inventory_id), foreign key (store_id) references store (store_id), foreign key (film_id) references film (film_id));",
    "output": "SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many students are over 18 and do not have allergy to food type or animal type?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT count(*) FROM Student WHERE age > 18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" OR T2.allergytype = \"animal\")"
  },
  {
    "instruction": "Return the gender and name of artist who produced the song with the lowest resolution.",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.gender, T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.resolution LIMIT 1"
  },
  {
    "instruction": "What is the average price for products?",
    "input": "create table products (product_id integer not null, product_type_code char(15), product_name varchar(255), product_price decimal(20, 4), primary key (product_id), unique (product_id));",
    "output": "SELECT avg(Product_Price) FROM Products"
  },
  {
    "instruction": "what states have cities named springfield",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "Show theme and year for all exhibitions with ticket prices lower than 15.",
    "input": "create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT theme, YEAR FROM exhibition WHERE ticket_price < 15"
  },
  {
    "instruction": "For each policy type, return its type code and its count in the record.",
    "input": "create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));",
    "output": "SELECT policy_type_code, count(*) FROM policies GROUP BY policy_type_code"
  },
  {
    "instruction": "Which cities have lower temperature in March than in Dec and have never served as host cities?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"temperature\" (\"City_ID\" int, \"Jan\" real, \"Feb\" real, \"Mar\" real, \"Apr\" real, \"Jun\" real, \"Jul\" real, \"Aug\" real, \"Sep\" real, \"Oct\" real, \"Nov\" real, \"Dec\" real, primary key (\"City_ID\"), foreign key (`city_id`) references `city`(`city_id`));create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));",
    "output": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city"
  },
  {
    "instruction": "Find the name and city of the airport which is the source for the most number of flight routes.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT T1.name, T1.city, T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What instrument is used the most?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));",
    "output": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the nationality of the journalist with the largest number of years working?",
    "input": "create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));",
    "output": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1"
  },
  {
    "instruction": "Show the most frequently used carrier of the phones.",
    "input": "create table \"phone\" (\"Name\" text, \"Phone_ID\" int, \"Memory_in_G\" int, \"Carrier\" text, \"Price\" real, primary key (\"Phone_ID\"));",
    "output": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show names for all aircrafts with distances more than the average.",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT name FROM Aircraft WHERE distance > (SELECT avg(distance) FROM Aircraft)"
  },
  {
    "instruction": "What are the sale details and dates of transactions with amount smaller than 3000?",
    "input": "create table `sales` (`sales_transaction_id` integer primary key, `sales_details` varchar(255), foreign key (`sales_transaction_id`) references `transactions`(`transaction_id`));create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT T1.sales_details, T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000"
  },
  {
    "instruction": "How many professors do have a Ph.D. degree?",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT count(*) FROM professor WHERE prof_high_degree = 'Ph.D.'"
  },
  {
    "instruction": "What are the different types of transactions?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `previous_transaction_id` integer, `account_id` integer not null, `card_id` integer not null, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` double null, `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`card_id`) references `customers_cards`(`card_id`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT DISTINCT transaction_type FROM Financial_Transactions"
  },
  {
    "instruction": "How many songs have used the instrument \"drums\"?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));",
    "output": "SELECT count(*) FROM instruments WHERE instrument = \"drums\""
  },
  {
    "instruction": "give me the longest river that passes through the us",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );"
  },
  {
    "instruction": "how many states are in the united states",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT COUNT ( state_name ) FROM state;"
  },
  {
    "instruction": "What are the result description of the project whose detail is 'sint'?",
    "input": "create table `research_outcomes` (`outcome_code` varchar(10) primary key, `outcome_description` varchar(255) not null);create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint'"
  },
  {
    "instruction": "Find all the product whose name contains the word \"Scanner\".",
    "input": "create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));",
    "output": "SELECT product FROM product WHERE product LIKE \"%Scanner%\""
  },
  {
    "instruction": "What are the details of the shops that can be accessed by walk?",
    "input": "create table shops (shop_id integer not null, shop_details varchar(255), primary key (shop_id), foreign key (shop_id) references tourist_attractions (tourist_attraction_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\""
  },
  {
    "instruction": "Show names for artists without any exhibition.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)"
  },
  {
    "instruction": "How many instruments does the song \"Badlands\" use?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Badlands\""
  },
  {
    "instruction": "List the branch name and city without any registered members.",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));",
    "output": "SELECT name, city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)"
  },
  {
    "instruction": "What is the name, address, and number of students in the departments that have the 3 most students?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.dept_name, T2.dept_address, count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "How many rooms have not had any reservation yet?",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));",
    "output": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"
  },
  {
    "instruction": "List the names of counties that do not have any cities.",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));",
    "output": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)"
  },
  {
    "instruction": "Show details of all visitors.",
    "input": "create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));",
    "output": "SELECT Tourist_Details FROM VISITORS"
  },
  {
    "instruction": "What is the id of the patient who stayed in room 111 most recently?",
    "input": "create table stay (stayid integer primary key not null, patient integer not null, room integer not null, staystart datetime not null, stayend datetime not null, constraint fk_stay_patient_ssn foreign key(patient) references patient(ssn), constraint fk_stay_room_number foreign key(room) references room(roomnumber));",
    "output": "SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC LIMIT 1"
  },
  {
    "instruction": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));",
    "output": "SELECT t2.team_name, t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1"
  },
  {
    "instruction": "return me the number of papers written by \" H. V. Jagadish \" , \" Yunyao Li \" , and \" Cong Yu \" .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t7.title ) FROM writes AS t4 JOIN author AS t2 ON t4.aid = t2.aid JOIN publication AS t7 ON t4.pid = t7.pid JOIN writes AS t5 ON t5.pid = t7.pid JOIN writes AS t6 ON t6.pid = t7.pid JOIN author AS t1 ON t5.aid = t1.aid JOIN author AS t3 ON t6.aid = t3.aid WHERE t2.name = \"Cong Yu\" AND t1.name = \"H. V. Jagadish\" AND t3.name = \"Yunyao Li\";"
  },
  {
    "instruction": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
    "input": "create table cmi_cross_references (cmi_cross_ref_id integer not null, master_customer_id integer not null, source_system_code char(15) not null, primary key (cmi_cross_ref_id), foreign key (master_customer_id) references customer_master_index (master_customer_id));create table council_tax (council_tax_id integer not null, cmi_cross_ref_id integer not null, primary key (council_tax_id), foreign key (cmi_cross_ref_id) references cmi_cross_references (cmi_cross_ref_id));",
    "output": "SELECT T1.cmi_cross_ref_id, T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*) >= 1"
  },
  {
    "instruction": "List the nominees that have been nominated more than two musicals.",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2"
  },
  {
    "instruction": "Find the names of all the product characteristics.",
    "input": "create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS"
  },
  {
    "instruction": "Find the number of female students (with F sex) living in Smith Hall",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' AND T1.sex = 'F'"
  },
  {
    "instruction": "How many trains have 'Express' in their names?",
    "input": "create table \"train\" (\"id\" int, \"train_number\" int, \"name\" text, \"origin\" text, \"destination\" text, \"time\" text, \"interval\" text, primary key (\"id\"));",
    "output": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\""
  },
  {
    "instruction": "How many departments does the college has?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT dept_name) FROM department"
  },
  {
    "instruction": "what is the largest city in states that border california",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"california\" );"
  },
  {
    "instruction": "datasets mentioned at ACL",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t4.venuename = \"ACL\";"
  },
  {
    "instruction": "Return the names of all regions other than Denmark.",
    "input": "create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));",
    "output": "SELECT region_name FROM region WHERE region_name != 'Denmark'"
  },
  {
    "instruction": "What is the total number of all football games played by scholarship students?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname = \"Football\" AND onscholarship = 'Y'"
  },
  {
    "instruction": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
    "input": "create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));",
    "output": "SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35"
  },
  {
    "instruction": "Count the total number of available services.",
    "input": "create table services (service_id integer not null, service_name varchar(40), primary key (service_id));",
    "output": "SELECT count(*) FROM services"
  },
  {
    "instruction": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000"
  },
  {
    "instruction": "Show the document type code with fewer than 3 documents.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*) < 3"
  },
  {
    "instruction": "what is the highest elevation in delaware",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_elevation FROM highlow WHERE state_name = \"delaware\";"
  },
  {
    "instruction": "What is the type description of the organization whose detail is listed as 'quo'?",
    "input": "create table `organisation_types` (`organisation_type` varchar(10) primary key, `organisation_type_description` varchar(255) not null);create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));",
    "output": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_details = 'quo'"
  },
  {
    "instruction": "Show the name of ships whose nationality is either United States or United Kingdom.",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT Name FROM ship WHERE Nationality = \"United States\" OR Nationality = \"United Kingdom\""
  },
  {
    "instruction": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `customer_phone` varchar(80), `customer_email` varchar(80), `customer_address` varchar(255), `customer_login` varchar(80), `customer_password` varchar(10));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(15) not null, `shipping_method_code` varchar(15) not null, `order_placed_datetime` datetime not null, `order_delivered_datetime` datetime, `order_shipping_charges` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE shipping_method_code = 'FedEx' AND order_status_code = 'Paid'"
  },
  {
    "instruction": "What is the name of the country with the most number of home airlines?",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);",
    "output": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the dates and locations of performances?",
    "input": "create table \"performance\" (\"Performance_ID\" real, \"Date\" text, \"Host\" text, \"Location\" text, \"Attendance\" int, primary key (\"Performance_ID\"));",
    "output": "SELECT Date, LOCATION FROM performance"
  },
  {
    "instruction": "What are the names and budgets of departments with budgets greater than the average?",
    "input": "create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));",
    "output": "SELECT dept_name, budget FROM department WHERE budget > (SELECT avg(budget) FROM department)"
  },
  {
    "instruction": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"circuits\" (\"circuitId\" integer primary key, \"circuitRef\" text, \"name\" text, \"location\" text, \"country\" text, \"lat\" real, \"lng\" real, \"alt\" text, \"url\" text);",
    "output": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000"
  },
  {
    "instruction": "how many parsing papers appeared in the proceeeding of ACL 2014 ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"parsing\" AND t3.year = 2014 AND t4.venuename = \"ACL\";"
  },
  {
    "instruction": "Find the number of classes offered for all class rooms that held at least 2 classes.",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT count(*), class_room FROM CLASS GROUP BY class_room HAVING count(*) >= 2"
  },
  {
    "instruction": "What was the topic of best paper in 2012 EMNLP-CoNLL ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid ), t1.keyphraseid, t2.paperid FROM paper AS t2 JOIN cite AS t4 ON t2.paperid = t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid = t1.paperid JOIN venue AS t3 ON t3.venueid = t2.venueid WHERE t2.year = 2012 AND t3.venuename = \"EMNLP-CoNLL\" GROUP BY t2.paperid, t1.keyphraseid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;"
  },
  {
    "instruction": "Which institution does \"Katsuhiro Ueno\" belong to?",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Katsuhiro\" AND t1.lname = \"Ueno\""
  },
  {
    "instruction": "Give the distinct famous release dates for all artists.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));",
    "output": "SELECT distinct(Famous_Release_date) FROM artist"
  },
  {
    "instruction": "What are the first names of all the different drivers in alphabetical order?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);",
    "output": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC"
  },
  {
    "instruction": "Return the name of the wrestler who had the lowest number of days held.",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1"
  },
  {
    "instruction": "Count the number of films.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT count(*) FROM film"
  },
  {
    "instruction": "show the lowest low temperature and highest wind speed in miles per hour.",
    "input": "create table \"weekly_weather\" (\"station_id\" int, \"day_of_week\" text, \"high_temperature\" int, \"low_temperature\" int, \"precipitation\" real, \"wind_speed_mph\" int, primary key (\"station_id\", \"day_of_week\"), foreign key (\"station_id\") references \"station\"(\"id\"));",
    "output": "SELECT min(low_temperature), max(wind_speed_mph) FROM weekly_weather"
  },
  {
    "instruction": "Find the number of funiture types produced by each manufacturer as well as the company names.",
    "input": "create table \"manufacturer\" (\"Manufacturer_ID\" int, \"Open_Year\" real, \"Name\" text, \"Num_of_Factories\" int, \"Num_of_Shops\" int, primary key (\"Manufacturer_ID\"));create table \"furniture_manufacte\" (\"Manufacturer_ID\" int, \"Furniture_ID\" int, \"Price_in_Dollar\" real, primary key (\"Manufacturer_ID\",\"Furniture_ID\"), foreign key (\"Manufacturer_ID\") references `manufacturer`(\"Manufacturer_ID\"), foreign key (\"Furniture_ID\") references `furniture`(\"Furniture_ID\"));",
    "output": "SELECT count(*), t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id"
  },
  {
    "instruction": "Show all donor names.",
    "input": "create table \"endowment\" (\"endowment_id\" int, \"School_id\" int, \"donator_name\" text, \"amount\" real, primary key(\"endowment_id\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));",
    "output": "SELECT DISTINCT donator_name FROM endowment"
  },
  {
    "instruction": "Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers.",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\""
  },
  {
    "instruction": "Find the names of all person sorted in the descending order using age.",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT name FROM Person ORDER BY age DESC"
  },
  {
    "instruction": "What is the name of the district with the most residents?",
    "input": "create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1"
  },
  {
    "instruction": "Find the attribute data type for the attribute named \"Green\".",
    "input": "create table `attribute_definitions` (`attribute_id` integer primary key, `attribute_name` varchar(30), `attribute_data_type` varchar(10));",
    "output": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = \"Green\""
  },
  {
    "instruction": "who published at acl 2016 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2016 AND t3.venuename = \"acl\";"
  },
  {
    "instruction": "return me the organization \" H. V. Jagadish \" is in .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t2.name FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid WHERE t1.name = \"H. V. Jagadish\";"
  },
  {
    "instruction": "Show the average, minimum, and maximum age for different majors.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT major, avg(age), min(age), max(age) FROM Student GROUP BY major"
  },
  {
    "instruction": "Show all customer ids and the number of accounts for each customer.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT customer_id, count(*) FROM Accounts GROUP BY customer_id"
  },
  {
    "instruction": "Find the number of members of club \"Pen and Paper Gaming\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Pen and Paper Gaming\""
  },
  {
    "instruction": "For each origin, how many flights came from there?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT origin, count(*) FROM Flight GROUP BY origin"
  },
  {
    "instruction": "What is the average number of pages per minute color?",
    "input": "create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));",
    "output": "SELECT avg(pages_per_minute_color) FROM product"
  },
  {
    "instruction": "Where us the club named \"Tennis Club\" located?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT clublocation FROM club WHERE clubname = \"Tennis Club\""
  },
  {
    "instruction": "What are the 3 most common cloud covers in the zip code of 94107?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3"
  },
  {
    "instruction": "What is the average hours across all projects?",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT avg(hours) FROM projects"
  },
  {
    "instruction": "return me the authors who have papers in VLDB conference before 2002 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = \"VLDB\" AND t4.year < 2002;"
  },
  {
    "instruction": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
    "input": "create table \"train\" (\"id\" int, \"train_number\" int, \"name\" text, \"origin\" text, \"destination\" text, \"time\" text, \"interval\" text, primary key (\"id\"));",
    "output": "SELECT TIME, train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME"
  },
  {
    "instruction": "Show all account ids and account details.",
    "input": "create table accounts (account_id integer not null, statement_id integer not null, account_details varchar(255), primary key (account_id), foreign key (statement_id) references statements (statement_id));",
    "output": "SELECT account_id, account_details FROM Accounts"
  },
  {
    "instruction": "Show the top 3 most common colleges of players in match seasons.",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "What are the id of songs whose format is mp3.",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);",
    "output": "SELECT f_id FROM files WHERE formats = \"mp3\""
  },
  {
    "instruction": "Show the name of cities in the county that has the largest number of police officers.",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT name FROM city WHERE county_ID = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)"
  },
  {
    "instruction": "Find the name of the department which has the highest average salary of professors.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1"
  },
  {
    "instruction": "Show the different countries and the number of members from each.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Country\" text, \"College_ID\" int, primary key (\"Member_ID\"), foreign key (\"College_ID\") references `college`(\"College_ID\"));",
    "output": "SELECT Country, COUNT(*) FROM member GROUP BY Country"
  },
  {
    "instruction": "What are the locations that have gas stations owned by a company with a market value greater than 100?",
    "input": "create table \"station_company\" (\"Station_ID\" int, \"Company_ID\" int, \"Rank_of_the_Year\" int, primary key (\"Station_ID\",\"Company_ID\"), foreign key (`station_id`) references `gas_station`(`station_id`), foreign key (`company_id`) references `company`(`company_id`));create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));create table \"gas_station\" (\"Station_ID\" int, \"Open_Year\" int, \"Location\" text, \"Manager_Name\" text, \"Vice_Manager_Name\" text, \"Representative_Name\" text, primary key (\"Station_ID\"));",
    "output": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.market_value > 100"
  },
  {
    "instruction": "Show origin and destination for flights with price higher than 300.",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT origin, destination FROM Flight WHERE price > 300"
  },
  {
    "instruction": "List the dates of games by the home team name in descending order.",
    "input": "create table \"game\" (\"stadium_id\" int, \"id\" int, \"Season\" int, \"Date\" text, \"Home_team\" text, \"Away_team\" text, \"Score\" text, \"Competition\" text, primary key (\"id\"), foreign key (\"stadium_id\") references `stadium`(\"id\"));",
    "output": "SELECT Date FROM game ORDER BY home_team DESC"
  },
  {
    "instruction": "Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT DISTINCT cName FROM college WHERE enr > (SELECT min(enr) FROM college WHERE state = 'FL')"
  },
  {
    "instruction": "Who was the director of the movie Joy from 2015 ?",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.release_year = 2015 AND t3.title = \"Joy\";"
  },
  {
    "instruction": "Give me the number of faculty members who participate in an activity",
    "input": "create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));",
    "output": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in"
  },
  {
    "instruction": "return me the paper in Databases area with more than 200 citations .",
    "input": "create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));create table \"domain_publication\" (\"did\" int, \"pid\" int, primary key (\"did\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"did\") references \"domain\"(\"did\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did = t1.did JOIN publication AS t3 ON t3.pid = t1.pid WHERE t2.name = \"Databases\" AND t3.citation_num > 200;"
  },
  {
    "instruction": "What is the name of the school with smallest enrollment size per state?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT cName, state, min(enr) FROM college GROUP BY state"
  },
  {
    "instruction": "Show all storm names except for those with at least two affected regions.",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2"
  },
  {
    "instruction": "Find the number of matches in different competitions.",
    "input": "create table \"match\" (\"Match_ID\" int, \"Date\" text, \"Venue\" text, \"Score\" text, \"Result\" text, \"Competition\" text, primary key (\"Match_ID\"));",
    "output": "SELECT count(*), Competition FROM MATCH GROUP BY Competition"
  },
  {
    "instruction": "Count the number of products.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT count(*) FROM products"
  },
  {
    "instruction": "Which catalog content has the highest height? Give me the catalog entry name.",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"
  },
  {
    "instruction": "Please show the themes of competitions with host cities having populations larger than 1000.",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));create table \"farm_competition\" (\"Competition_ID\" int, \"Year\" int, \"Theme\" text, \"Host_city_ID\" int, \"Hosts\" text, primary key (\"Competition_ID\"), foreign key (`host_city_id`) references `city`(`city_id`));",
    "output": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000"
  },
  {
    "instruction": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "What are the song names for every song whose rating is less than the minimum rating for English songs?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT song_name FROM song WHERE rating < (SELECT min(rating) FROM song WHERE languages = 'english')"
  },
  {
    "instruction": "Count the number of tests with \"Fail\" result.",
    "input": "create table `student_tests_taken` (`registration_id` integer not null, `date_test_taken` datetime not null, `test_result` varchar(255), foreign key (`registration_id`) references `student_course_enrolment`(`registration_id`));",
    "output": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result = \"Fail\""
  },
  {
    "instruction": "Find the name and capacity of products with price greater than 700 (in USD).",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700"
  },
  {
    "instruction": "who wrote papers in 2015",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid = t2.paperid WHERE t2.year = 2015;"
  },
  {
    "instruction": "What are the codes and names of the cheapest products in each category?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT code, name, min(price) FROM products GROUP BY name"
  },
  {
    "instruction": "Show all distinct building descriptions.",
    "input": "create table apartment_buildings (building_id integer not null, building_short_name char(15), building_full_name varchar(80), building_description varchar(255), building_address varchar(255), building_manager varchar(50), building_phone varchar(80), primary key (building_id), unique (building_id));",
    "output": "SELECT DISTINCT building_description FROM Apartment_Buildings"
  },
  {
    "instruction": "Find the number of rooms with more than 50 capacity for each building.",
    "input": "create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));",
    "output": "SELECT count(*), building FROM classroom WHERE capacity > 50 GROUP BY building"
  },
  {
    "instruction": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));",
    "output": "SELECT T2.Name, T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*) >= 3 ORDER BY T2.Name"
  },
  {
    "instruction": "Show the names of editors and the theme of journals for which they serve on committees.",
    "input": "create table \"journal_committee\" (\"Editor_ID\" int, \"Journal_ID\" int, \"Work_Type\" text, primary key (\"Editor_ID\",\"Journal_ID\"), foreign key (\"Editor_ID\") references `editor`(\"Editor_ID\"), foreign key (\"Journal_ID\") references `journal`(\"Journal_ID\"));create table \"editor\" (\"Editor_ID\" int, \"Name\" text, \"Age\" real, primary key (\"Editor_ID\"));create table \"journal\" (\"Journal_ID\" int, \"Date\" text, \"Theme\" text, \"Sales\" int, primary key (\"Journal_ID\"));",
    "output": "SELECT T2.Name, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID"
  },
  {
    "instruction": "What are the names of all races held after 2000 in Spain?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"circuits\" (\"circuitId\" integer primary key, \"circuitRef\" text, \"name\" text, \"location\" text, \"country\" text, \"lat\" real, \"lng\" real, \"alt\" text, \"url\" text);",
    "output": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000"
  },
  {
    "instruction": "List all budget type codes and descriptions.",
    "input": "create table ref_budget_codes (budget_type_code char(15) not null, budget_type_description varchar(255) not null, primary key (budget_type_code));",
    "output": "SELECT budget_type_code, budget_type_description FROM Ref_budget_codes"
  },
  {
    "instruction": "List all tracks bought by customer Daan Peeters.",
    "input": "create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);create table invoice_lines (id integer primary key autoincrement, invoice_id integer not null, track_id integer not null, unit_price numeric(10, 2) not null, quantity integer not null, foreign key (invoice_id) references invoices (id)\n        ON delete no action\n        ON update no action, foreign key (track_id) references tracks (id)\n        ON delete no action\n        ON update no action);create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";"
  },
  {
    "instruction": "What are the names and seatings for all tracks opened after 2000, ordered by seating?",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT name, seating FROM track WHERE year_opened > 2000 ORDER BY seating"
  },
  {
    "instruction": "For each competition, count the number of matches.",
    "input": "create table \"match\" (\"Match_ID\" int, \"Date\" text, \"Venue\" text, \"Score\" text, \"Result\" text, \"Competition\" text, primary key (\"Match_ID\"));",
    "output": "SELECT count(*), Competition FROM MATCH GROUP BY Competition"
  },
  {
    "instruction": "Find the name and ID of the product whose total order quantity is the largest.",
    "input": "create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));create table `products` (`product_id` integer primary key, `product_details` varchar(255));",
    "output": "SELECT t2.product_details, t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1"
  },
  {
    "instruction": "Show the id and salary of Mark Young.",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT eid, salary FROM Employee WHERE name = 'Mark Young'"
  },
  {
    "instruction": "List the countries that have more than one mountain.",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1"
  },
  {
    "instruction": "How many classrooms are not in Lamberton?",
    "input": "create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));",
    "output": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'"
  },
  {
    "instruction": "How many parties do we have?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT count(DISTINCT party_name) FROM party"
  },
  {
    "instruction": "Count the number of different languages in these films.",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));",
    "output": "SELECT count(DISTINCT language_id) FROM film"
  },
  {
    "instruction": "What are the total order quantities of photo products?",
    "input": "create table order_items (order_item_id integer not null , order_id integer not null, product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), primary key (order_item_id), foreign key (order_id) references customer_orders (order_id), foreign key (product_id) references products (product_id));create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_Name = \"photo\""
  },
  {
    "instruction": "What are the details and id of the project with the most outcomes?",
    "input": "create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));",
    "output": "SELECT T1.project_details, T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "how many papers published in nature communications 2015 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"nature communications\";"
  },
  {
    "instruction": "Find distinct cities of address of students?",
    "input": "create table addresses (address_id integer not null, line_1 varchar(80), line_2 varchar(80), city varchar(50), zip_postcode char(20), state_province_county varchar(50), country varchar(50), primary key (address_id));create table people_addresses (person_address_id integer not null, person_id integer not null, address_id integer not null, date_from datetime, date_to datetime, primary key (person_address_id), foreign key (person_id) references people (person_id), foreign key (address_id) references addresses (address_id));create table students (student_id integer not null, student_details varchar(255), primary key (student_id), foreign key (student_id) references people (person_id));",
    "output": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
  },
  {
    "instruction": "Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\"?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t2.position = \"CTO\""
  },
  {
    "instruction": "In which year were most of ships built?",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));",
    "output": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the number of movies in which \" Shahab Hosseini \" acted ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Shahab Hosseini\";"
  },
  {
    "instruction": "What is the winery at which the wine with the highest score was made?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1"
  },
  {
    "instruction": "find the name of people whose height is lower than the average.",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));",
    "output": "SELECT name FROM people WHERE height < (SELECT avg(height) FROM people)"
  },
  {
    "instruction": "Return the device carriers that do not have Android as their software platform.",
    "input": "create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));",
    "output": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'"
  },
  {
    "instruction": "how many cities are there in the us",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( city_name ) FROM city;"
  },
  {
    "instruction": "How many video game types exist?",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT count(DISTINCT gtype) FROM Video_games"
  },
  {
    "instruction": "What is the name of the medication used for the patient staying in room 111?",
    "input": "create table stay (stayid integer primary key not null, patient integer not null, room integer not null, staystart datetime not null, stayend datetime not null, constraint fk_stay_patient_ssn foreign key(patient) references patient(ssn), constraint fk_stay_room_number foreign key(room) references room(roomnumber));create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));create table medication (code integer primary key not null, name varchar(30) not null, brand varchar(30) not null, description varchar(30) not null);",
    "output": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE room = 111"
  },
  {
    "instruction": "what state has the longest river",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT DISTINCT traverse FROM river WHERE LENGTH = ( SELECT MAX ( DISTINCT LENGTH ) FROM river );"
  },
  {
    "instruction": "Show the number of transactions for different investors.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT investor_id, COUNT(*) FROM TRANSACTIONS GROUP BY investor_id"
  },
  {
    "instruction": "Find the product names whose average product price is below 1000000.",
    "input": "create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price) < 1000000"
  },
  {
    "instruction": "what is the lowest point of the state with the largest area",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name = t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );"
  },
  {
    "instruction": "How many papers has Christopher D. Manning written ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Christopher D. Manning\";"
  },
  {
    "instruction": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT rank, company, market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion"
  },
  {
    "instruction": "What are the total number of students who are living in a male dorm?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.gender = 'M'"
  },
  {
    "instruction": "what is the lowest point of all states through which the mississippi river runs through",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;"
  },
  {
    "instruction": "What is average enrollment of colleges in the state FL?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT avg(enr) FROM College WHERE state = 'FL'"
  },
  {
    "instruction": "What is the average number of years spent working as a journalist?",
    "input": "create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));",
    "output": "SELECT avg(Years_working) FROM journalist"
  },
  {
    "instruction": "For each director, what are the titles and ratings for all the movies they reviewed?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, T1.stars, T2.director, max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director"
  },
  {
    "instruction": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));",
    "output": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'"
  },
  {
    "instruction": "From which hometowns did no gymnasts come from?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID"
  },
  {
    "instruction": "List all document type codes and document type names.",
    "input": "create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));",
    "output": "SELECT document_type_code, document_type_name FROM Ref_document_types"
  },
  {
    "instruction": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
    "input": "create table \"buildings\" (\"id\" int, \"name\" text, \"City\" text, \"Height\" int, \"Stories\" int, \"Status\" text, primary key(\"id\"));",
    "output": "SELECT name FROM buildings WHERE Status = \"on-hold\" ORDER BY Stories ASC"
  },
  {
    "instruction": "What is the type of the document whose description starts with the word 'Initial'?",
    "input": "create table `document_types` (`document_type_code` varchar(10) primary key, `document_description` varchar(255) not null);",
    "output": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'"
  },
  {
    "instruction": "How many distinct president votes are recorded?",
    "input": "create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD"
  },
  {
    "instruction": "How many games were played in city Atlanta in 2000?",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));create table park (park_id text, park_name text, park_alias text, city text, state text, country text);",
    "output": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 AND T2.city = 'Atlanta';"
  },
  {
    "instruction": "How many addresses are in the district of California?",
    "input": "create table address (address_id smallint unsigned not null, address varchar(50) not null, address2 varchar(50) default null, district varchar(20) not null, city_id smallint unsigned not null, postal_code varchar(10) default null, phone varchar(20) not null, last_update timestamp not null default current_timestamp, primary key (address_id), foreign key (city_id) references city (city_id));",
    "output": "SELECT count(*) FROM address WHERE district = 'California'"
  },
  {
    "instruction": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?",
    "input": "create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY count(*) >= 5"
  },
  {
    "instruction": "What is the average song duration for the songs that are in mp3 format and whose resolution below 800?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = \"mp3\" AND T2.resolution < 800"
  },
  {
    "instruction": "Which district has the largest population?",
    "input": "create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1"
  },
  {
    "instruction": "What is the total number of airlines?",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);",
    "output": "SELECT count(*) FROM airlines"
  },
  {
    "instruction": "How many citations does noah a smith has ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"noah a smith\";"
  },
  {
    "instruction": "Find the details of the shops that can be reached by walk.",
    "input": "create table shops (shop_id integer not null, shop_details varchar(255), primary key (shop_id), foreign key (shop_id) references tourist_attractions (tourist_attraction_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = \"walk\""
  },
  {
    "instruction": "Show the booking status code and the corresponding number of bookings.",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));",
    "output": "SELECT booking_status_code, COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code"
  },
  {
    "instruction": "Find the stories of the building with the largest height.",
    "input": "create table \"buildings\" (\"id\" int, \"name\" text, \"City\" text, \"Height\" int, \"Stories\" int, \"Status\" text, primary key(\"id\"));",
    "output": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1"
  },
  {
    "instruction": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT title, Studio FROM film WHERE Studio LIKE \"%Universal%\""
  },
  {
    "instruction": "What are the product ids and color descriptions for products with two or more characteristics?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT t1.product_id, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id HAVING count(*) >= 2"
  },
  {
    "instruction": "Show all main industry for all companies.",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT DISTINCT main_industry FROM company"
  },
  {
    "instruction": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
    "input": "create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));",
    "output": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC"
  },
  {
    "instruction": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));",
    "output": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = \"Vincent\""
  },
  {
    "instruction": "What is the name of the department with the most students minoring in it?",
    "input": "create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);create table minor_in (stuid integer, dno integer, foreign key(stuid) references student(stuid), foreign key(dno) references department(dno));",
    "output": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the name, location, and number of platforms for all stations.",
    "input": "create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));",
    "output": "SELECT name, LOCATION, number_of_platforms FROM station"
  },
  {
    "instruction": "What are the first names of all history professors who do not teach?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num"
  },
  {
    "instruction": "what river runs through illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = \"illinois\";"
  },
  {
    "instruction": "For each college, return the college name and the count of authors with submissions from that college.",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT College, COUNT(*) FROM submission GROUP BY College"
  },
  {
    "instruction": "which state has the most population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state );"
  },
  {
    "instruction": "Find the number of students in total.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM STUDENT"
  },
  {
    "instruction": "What are the distinct last names of the students who have president votes but do not have 2192 as the advisor?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = \"2192\""
  },
  {
    "instruction": "where can i eat french food in the bay area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"french\";"
  },
  {
    "instruction": "find the number of different programs that are broadcast during night time.",
    "input": "create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));",
    "output": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day = 'Night'"
  },
  {
    "instruction": "return me the keywords related to \" H. V. Jagadish \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t2.name = \"H. V. Jagadish\";"
  },
  {
    "instruction": "Find the names of schools that have some players in the mid position but not in the goalie position.",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie'"
  },
  {
    "instruction": "Find the origins from which more than 1 train starts.",
    "input": "create table \"train\" (\"id\" int, \"train_number\" int, \"name\" text, \"origin\" text, \"destination\" text, \"time\" text, \"interval\" text, primary key (\"id\"));",
    "output": "SELECT origin FROM train GROUP BY origin HAVING count(*) > 1"
  },
  {
    "instruction": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table first_notification_of_loss (fnol_id integer not null, customer_id integer not null, policy_id integer not null, service_id integer not null, primary key (fnol_id), unique (fnol_id), foreign key (service_id) references services (service_id), foreign key (customer_id, policy_id) references customers_policies (customer_id, policy_id));create table services (service_id integer not null, service_name varchar(40), primary key (service_id));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" OR t3.service_name = \"Upgrade a policy\""
  },
  {
    "instruction": "list all female (sex is F) candidate names in the alphabetical order.",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name"
  },
  {
    "instruction": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT T1.pName, T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'"
  },
  {
    "instruction": "What are the different software platforms for devices, and how many devices have each?",
    "input": "create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));",
    "output": "SELECT Software_Platform, COUNT(*) FROM device GROUP BY Software_Platform"
  },
  {
    "instruction": "What are the names of the storms that affected Denmark?",
    "input": "create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'"
  },
  {
    "instruction": "What are the names and types of the companies that have ever operated a flight?",
    "input": "create table \"operate_company\" (\"id\" int, \"name\" text, \"Type\" text, \"Principal_activities\" text, \"Incorporated_in\" text, \"Group_Equity_Shareholding\" real, primary key (\"id\"));create table \"flight\" (\"id\" int, \"Vehicle_Flight_number\" text, \"Date\" text, \"Pilot\" text, \"Velocity\" real, \"Altitude\" real, \"airport_id\" int, \"company_id\" int, primary key (\"id\"), foreign key (\"airport_id\") references `airport`(\"id\"), foreign key (\"company_id\") references `operate_company`(\"id\"));",
    "output": "SELECT T1.name, T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id"
  },
  {
    "instruction": "List prominent scholars in syntactic parsing ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "Which customer is associated with the latest policy?",
    "input": "create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));",
    "output": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.start_date = (SELECT max(start_date) FROM policies)"
  },
  {
    "instruction": "How many papers does David M. Blei have in AISTATS",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"David M. Blei\" AND t4.venuename = \"AISTATS\";"
  },
  {
    "instruction": "which state has the greatest population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state );"
  },
  {
    "instruction": "What are the name of pilots aged 25 or older?",
    "input": "create table `pilot` (`pilot_id` int(11) not null, `name` varchar(50) not null, `age` int(11) not null, primary key (`pilot_id`));",
    "output": "SELECT Name FROM pilot WHERE Age >= 25"
  },
  {
    "instruction": "How many book clubs are there?",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT count(*) FROM book_club"
  },
  {
    "instruction": "Retrieve the list of all cities.",
    "input": "create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT DISTINCT city FROM addresses"
  },
  {
    "instruction": "Show the number of cities in counties that have a population more than 20000.",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)"
  },
  {
    "instruction": "How many kinds of different ratings are listed?",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));",
    "output": "SELECT count(DISTINCT rating) FROM film"
  },
  {
    "instruction": "What are the names of ships that have more than one captain?",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING count(*) > 1"
  },
  {
    "instruction": "Show names of actors in descending order of the year their musical is awarded.",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC"
  },
  {
    "instruction": "What are the minimum and maximum vote percents of elections?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Representative_ID\" int, \"Date\" text, \"Votes\" real, \"Vote_Percent\" real, \"Seats\" real, \"Place\" real, primary key (\"Election_ID\"), foreign key (\"Representative_ID\") references `representative`(\"Representative_ID\"));",
    "output": "SELECT min(Vote_Percent), max(Vote_Percent) FROM election"
  },
  {
    "instruction": "what is the longest river that flows through texas",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = \"texas\" ) AND traverse = \"texas\";"
  },
  {
    "instruction": "What are the login names of the students with family name \"Ward\"?",
    "input": "create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT login_name FROM Students WHERE family_name = \"Ward\""
  },
  {
    "instruction": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));",
    "output": "SELECT Date_of_ceremony FROM music_festival WHERE Category = \"Best Song\" AND RESULT = \"Awarded\""
  },
  {
    "instruction": "where is a good place in the yosemite and mono lake area for french food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"yosemite and mono lake area\" AND t1.food_type = \"french\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Find the student ID and middle name for all the students with at most two enrollments.",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT T1.student_id, T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) <= 2"
  },
  {
    "instruction": "Which school has the fewest professors?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "What is Nancy Edwards's address?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
  },
  {
    "instruction": "Return the different nominees of musicals that have an award that is not the Tony Award.",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\""
  },
  {
    "instruction": "return me the authors who have the most number of papers in PVLDB .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = \"PVLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;"
  },
  {
    "instruction": "List the total scores of body builders in ascending order.",
    "input": "create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));",
    "output": "SELECT Total FROM body_builder ORDER BY Total ASC"
  },
  {
    "instruction": "Which journals did linda shapiro submit papers to ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `journal` (`journalid` integer not null , `journalname` varchar(100) default null , primary key (`journalid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid = t2.journalid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"linda shapiro\";"
  },
  {
    "instruction": "For each director who directed more than one movie, what are the titles and dates of release for all those movies?",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T1.title, T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title"
  },
  {
    "instruction": "How many stations are in Mountain View?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT COUNT(*) FROM station WHERE city = \"Mountain View\""
  },
  {
    "instruction": "Find the average number of followers for the users who had some tweets.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));create table `tweets` (`id` bigint(20) not null, `uid` int(11) not null, `text` char(140) not null, `createdate` datetime default current_timestamp, primary key (`id`), foreign key (`uid`) references `user_profiles`(`uid`));",
    "output": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)"
  },
  {
    "instruction": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));",
    "output": "SELECT name, followers FROM user_profiles ORDER BY followers DESC"
  },
  {
    "instruction": "Which role is most common for the staff?",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the name of scientists who are assigned to some project.",
    "input": "create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table scientists (ssn int, name char(30) not null, primary key (ssn));",
    "output": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist = T2.ssn"
  },
  {
    "instruction": "What are the names of Art instructors who have taught a course, and the corresponding course id?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);",
    "output": "SELECT name, course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name = 'Art'"
  },
  {
    "instruction": "How many faculty members do we have for each rank and gender?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT rank, sex, count(*) FROM Faculty GROUP BY rank, sex"
  },
  {
    "instruction": "return me the keyword, which have been contained by the most number of papers in VLDB conference .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid WHERE t2.name = \"VLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;"
  },
  {
    "instruction": "papers using WebKB",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"WebKB\";"
  },
  {
    "instruction": "what datasets are used in papers by jitendra malik",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"jitendra malik\";"
  },
  {
    "instruction": "return me all the researchers in \" University of Michigan \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid WHERE t2.name = \"University of Michigan\";"
  },
  {
    "instruction": "What is the last name of the youngest student?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT LName FROM Student WHERE age = (SELECT min(age) FROM Student)"
  },
  {
    "instruction": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\""
  },
  {
    "instruction": "List all businesses with rating 3.5",
    "input": "create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT name FROM business WHERE rating = 3.5;"
  },
  {
    "instruction": "what papers are published in pldi 2015",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "What is the name of Ranjit Jhala 's Liquid Haskell paper ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.title FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN writes AS t4 ON t4.paperid = t2.paperid JOIN paper AS t3 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname LIKE \"Ranjit Jhala\" AND t5.keyphrasename = \"Liquid Haskell\";"
  },
  {
    "instruction": "What is the average number of rooms of apartments with type code \"Studio\"?",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code = \"Studio\""
  },
  {
    "instruction": "When was the last time Mary Crainie published a paper ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT MAX ( t3.year ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Mary Crainie\";"
  },
  {
    "instruction": "What is the best place in san francisco for french food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" );"
  },
  {
    "instruction": "what are the major rivers in illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH > 750 AND traverse = \"illinois\";"
  },
  {
    "instruction": "Find the number of airports whose name contain the word 'International'.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT count(*) FROM airports WHERE name LIKE '%International%'"
  },
  {
    "instruction": "Which order's shipment tracking number is \"3452\"? Give me the id of the order.",
    "input": "create table `shipments` (`shipment_id` integer primary key, `order_id` integer not null, `invoice_number` integer not null, `shipment_tracking_number` varchar(80), `shipment_date` datetime, `other_shipment_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`invoice_number`) references `invoices`(`invoice_number`));",
    "output": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\""
  },
  {
    "instruction": "Find the first name of students in the descending order of age.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Fname FROM STUDENT ORDER BY Age DESC"
  },
  {
    "instruction": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011"
  },
  {
    "instruction": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?",
    "input": "create table candidates (candidate_id integer not null , candidate_details varchar(255), primary key (candidate_id), foreign key (candidate_id) references people (person_id));create table candidate_assessments (candidate_id integer not null, qualification char(15) not null, assessment_date datetime not null, asessment_outcome_code char(15) not null, primary key (candidate_id, qualification), foreign key (candidate_id) references candidates (candidate_id));create table people (person_id integer not null, first_name varchar(255), middle_name varchar(255), last_name varchar(255), cell_mobile_number varchar(40), email_address varchar(40), login_name varchar(40), password varchar(40), primary key (person_id));",
    "output": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
  },
  {
    "instruction": "What is the average distance and average price for flights from Los Angeles.",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT avg(distance), avg(price) FROM Flight WHERE origin = \"Los Angeles\""
  },
  {
    "instruction": "What are the countries of markets and their corresponding years of market estimation?",
    "input": "create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));create table \"market\" (\"Market_ID\" int, \"Country\" text, \"Number_cities\" int, primary key (\"Market_ID\"));",
    "output": "SELECT T2.Country, T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID"
  },
  {
    "instruction": "Show the detail of vehicle with id 1.",
    "input": "create table `vehicles` (`vehicle_id` integer primary key, `vehicle_details` varchar(255));",
    "output": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;"
  },
  {
    "instruction": "For each  airport name, how many routes start at that airport, ordered from most to least?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT count(*), T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC"
  },
  {
    "instruction": "What is the duration of the oldest actor?",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));",
    "output": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"
  },
  {
    "instruction": "Find the number of tweets in record.",
    "input": "create table `tweets` (`id` bigint(20) not null, `uid` int(11) not null, `text` char(140) not null, `createdate` datetime default current_timestamp, primary key (`id`), foreign key (`uid`) references `user_profiles`(`uid`));",
    "output": "SELECT count(*) FROM tweets"
  },
  {
    "instruction": "Find the department name of the instructor whose name contains 'Soisalon'.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'"
  },
  {
    "instruction": "pldi papers 2015",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "Who are the nominees who have been nominated more than two times?",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2"
  },
  {
    "instruction": "What is the location of the club named \"Tennis Club\"?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT clublocation FROM club WHERE clubname = \"Tennis Club\""
  },
  {
    "instruction": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"
  },
  {
    "instruction": "How many degrees were conferred at San Jose State University in 2000?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 2000"
  },
  {
    "instruction": "What are the full names and cities of employees who have the letter Z in their first names?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));create table `locations` (`location_id` decimal(4, 0) not null default '0', `street_address` varchar(40) default null, `postal_code` varchar(12) default null, `city` varchar(30) not null, `state_province` varchar(25) default null, `country_id` varchar(2) default null, primary key (`location_id`), foreign key (`country_id`) references countries(`country_id`));",
    "output": "SELECT T1.first_name, T1.last_name, T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T1.first_name LIKE '%z%'"
  },
  {
    "instruction": "What are the forename and surname of the driver who has the smallest laptime?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"lapTimes\" (\"raceId\" integer, \"driverId\" integer, \"lap\" integer, \"position\" integer, \"time\" text, \"milliseconds\" integer, primary key(\"raceId\", \"driverId\", \"lap\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1"
  },
  {
    "instruction": "What was oren etzioni 's latest paper ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"oren etzioni\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "List the id, genre and artist name of English songs ordered by rating.",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT f_id, genre_is, artist_name FROM song WHERE languages = \"english\" ORDER BY rating"
  },
  {
    "instruction": "What are the title and maximum price of each film?",
    "input": "create table \"schedule\" (\"Cinema_ID\" int, \"Film_ID\" int, \"Date\" text, \"Show_times_per_day\" int, \"Price\" float, primary key (\"Cinema_ID\",\"Film_ID\"), foreign key (`film_id`) references `film`(`film_id`), foreign key (`cinema_id`) references `cinema`(`cinema_id`));create table \"film\" (\"Film_ID\" int, \"Rank_in_series\" int, \"Number_in_season\" int, \"Title\" text, \"Directed_by\" text, \"Original_air_date\" text, \"Production_code\" text, primary key (\"Film_ID\"));",
    "output": "SELECT T2.title, max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id"
  },
  {
    "instruction": "Which customer had at least 2 policies but did not file any claims? List the customer details and id.",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table customer_policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date date, end_date date, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table customer_policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date date, end_date date, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));",
    "output": "SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2 EXCEPT SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3 ON T2.policy_id = T3.policy_id"
  },
  {
    "instruction": "Show the name of track with most number of races.",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "return me the number of papers on PVLDB after 2000 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = \"PVLDB\" AND t2.year > 2000;"
  },
  {
    "instruction": "What is the code of the category that the product with the name 'flax' belongs to?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT product_category_code FROM products WHERE product_name = \"flax\""
  },
  {
    "instruction": "What are the names and urls of images, sorted alphabetically?",
    "input": "create table `images` (`image_id` integer primary key, `image_alt_text` varchar(80), `image_name` varchar(40), `image_url` varchar(255));",
    "output": "SELECT image_name, image_url FROM images ORDER BY image_name"
  },
  {
    "instruction": "What is the storm name and max speed which affected the greatest number of regions?",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT T1.name, T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of all the dorms that don't have any amenities?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));",
    "output": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)"
  },
  {
    "instruction": "What are the descriptions for each color?",
    "input": "create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT color_description FROM ref_colors"
  },
  {
    "instruction": "How many appelations are in Napa Country?",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);",
    "output": "SELECT count(*) FROM APPELLATIONS WHERE County = \"Napa\""
  },
  {
    "instruction": "How many papers related to deep learning cited the dataset ImageNet ?",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paper AS t4 ON t4.paperid = t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid = t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid = t5.keyphraseid WHERE t2.datasetname = \"ImageNet\" AND t5.keyphrasename = \"deep learning\";"
  },
  {
    "instruction": "Show the names of the three most recent festivals.",
    "input": "create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));",
    "output": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3"
  },
  {
    "instruction": "Return the name and id of the furniture with the highest market rate.",
    "input": "create table \"furniture\" (\"Furniture_ID\" int, \"Name\" text, \"Num_of_Component\" int, \"Market_Rate\" real, primary key (\"Furniture_ID\"));",
    "output": "SELECT name, furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1"
  },
  {
    "instruction": "How many film are there?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT count(*) FROM film"
  },
  {
    "instruction": "What are the names of schools with the top 3 largest size?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3"
  },
  {
    "instruction": "how long is the rio grande river",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT LENGTH FROM river WHERE river_name = \"rio grande\";"
  },
  {
    "instruction": "display the department name, city, and state province for each department.",
    "input": "create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));create table `locations` (`location_id` decimal(4, 0) not null default '0', `street_address` varchar(40) default null, `postal_code` varchar(12) default null, `city` varchar(30) not null, `state_province` varchar(25) default null, `country_id` varchar(2) default null, primary key (`location_id`), foreign key (`country_id`) references countries(`country_id`));",
    "output": "SELECT T1.department_name, T2.city, T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id = T1.location_id"
  },
  {
    "instruction": "Show all calendar dates and day Numbers.",
    "input": "create table ref_calendar (calendar_date datetime not null, day_number integer, primary key (calendar_date));",
    "output": "SELECT calendar_date, day_Number FROM Ref_calendar"
  },
  {
    "instruction": "Find the states of the colleges that have students in the tryout who played in striker position.",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker'"
  },
  {
    "instruction": "what is the population of california",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM state WHERE state_name = \"california\";"
  },
  {
    "instruction": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.",
    "input": "create table scientists (ssn int, name char(30) not null, primary key (ssn));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT T1.Name, T3.Name, T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name, T1.Name"
  },
  {
    "instruction": "List all the dates of enrollment and completion of students.",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment"
  },
  {
    "instruction": "what is the longest river in the united states",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );"
  },
  {
    "instruction": "How many students are affected by each allergy type?",
    "input": "create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT T2.allergytype, count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype"
  },
  {
    "instruction": "What are the type and nationality of ships?",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT TYPE, Nationality FROM ship"
  },
  {
    "instruction": "Find the contact channel code that was used by the customer named \"Tillman Ernser\".",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_contact_channels` (`customer_id` integer not null, `channel_code` varchar(15) not null, `active_from_date` datetime not null, `active_to_date` datetime, `contact_number` varchar(50) not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\""
  },
  {
    "instruction": "which course has most number of registered students?",
    "input": "create table courses (course_id varchar(100) not null, course_name varchar(120), course_description varchar(255), other_details varchar(255), primary key (course_id));create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));",
    "output": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Question Answering research papers",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.",
    "input": "create table \"manufacturer\" (\"Manufacturer_ID\" int, \"Open_Year\" real, \"Name\" text, \"Num_of_Factories\" int, \"Num_of_Shops\" int, primary key (\"Manufacturer_ID\"));",
    "output": "SELECT name, open_year FROM manufacturer WHERE num_of_shops > 10 OR Num_of_Factories < 10"
  },
  {
    "instruction": "return me the number of papers in \" University of Michigan \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid WHERE t2.name = \"University of Michigan\";"
  },
  {
    "instruction": "What papers were published at CVPR '16 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.datasetname = \"RGB-D Object Dataset\" AND t3.title = \"Class consistent multi-modal fusion with binary features\" AND t3.year = 2016 AND t4.venuename = \"CVPR\";"
  },
  {
    "instruction": "Find the number of students taught by TARRING LEIA.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"TARRING\" AND T2.lastname = \"LEIA\""
  },
  {
    "instruction": "list all the names of programs, ordering by launch time.",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));",
    "output": "SELECT name FROM program ORDER BY launch"
  },
  {
    "instruction": "What are the names of actors who have been in the musical titled The Phantom of the Opera?",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = \"The Phantom of the Opera\""
  },
  {
    "instruction": "Find the number of rooms for each bed type.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT bedType, count(*) FROM Rooms GROUP BY bedType;"
  },
  {
    "instruction": "Which university is in Los Angeles county and opened after 1950?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950"
  },
  {
    "instruction": "What is the average and largest salary of all employees?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT avg(salary), max(salary) FROM Employee"
  },
  {
    "instruction": "Find the last names of students studying in room 111.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT lastname FROM list WHERE classroom = 111"
  },
  {
    "instruction": "Show minimum, maximum, and average market value for all companies.",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT min(market_value), max(market_value), avg(market_value) FROM company"
  },
  {
    "instruction": "What are the different membership levels?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));",
    "output": "SELECT count(DISTINCT LEVEL) FROM member"
  },
  {
    "instruction": "What are the names and ids of the different albums, and how many tracks are on each?",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.Title, T2.AlbumID, COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID"
  },
  {
    "instruction": "what is the highest point in texas",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE state_name = \"texas\";"
  },
  {
    "instruction": "Papers that use the WebKB dataset",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"WebKB\";"
  },
  {
    "instruction": "What are the names of all employees who have a certificate to fly Boeing 737-800?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\""
  },
  {
    "instruction": "List the names of roller coasters by ascending order of length.",
    "input": "create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC"
  },
  {
    "instruction": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance DESC"
  },
  {
    "instruction": "Find the number of distinct projects.",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT count(DISTINCT name) FROM projects"
  },
  {
    "instruction": "Count the number of different last names actors have.",
    "input": "create table actor (actor_id smallint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, last_update timestamp not null default current_timestamp, primary key (actor_id));",
    "output": "SELECT count(DISTINCT last_name) FROM actor"
  },
  {
    "instruction": "What is the age of the tallest person?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1"
  },
  {
    "instruction": "Find the types and details for all premises and order by the premise type.",
    "input": "create table `premises` (`premise_id` integer primary key, `premises_type` varchar(15) not null, `premise_details` varchar(255));",
    "output": "SELECT premises_type, premise_details FROM premises ORDER BY premises_type"
  },
  {
    "instruction": "Find the titles of albums that contain tracks of both the Reggae and Rock genres.",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));",
    "output": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'"
  },
  {
    "instruction": "Which authors have first name \"Amal\"? List their last names.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));",
    "output": "SELECT lname FROM authors WHERE fname = \"Amal\""
  },
  {
    "instruction": "what states border states that border states that border florida",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"florida\" ) );"
  },
  {
    "instruction": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.",
    "input": "create table \"member_attendance\" (\"Member_ID\" int, \"Performance_ID\" int, \"Num_of_Pieces\" int, primary key (\"Member_ID\",\"Performance_ID\"), foreign key (\"Member_ID\") references `member`(\"Member_ID\"), foreign key (\"Performance_ID\") references `performance`(\"Performance_ID\"));create table \"member\" (\"Member_ID\" text, \"Name\" text, \"Nationality\" text, \"Role\" text, primary key (\"Member_ID\"));create table \"performance\" (\"Performance_ID\" real, \"Date\" text, \"Host\" text, \"Location\" text, \"Attendance\" int, primary key (\"Performance_ID\"));",
    "output": "SELECT T2.Name, T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T3.Attendance DESC"
  },
  {
    "instruction": "Return the name and max speed of the storm that affected the most regions.",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT T1.name, T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table reviewer(rid int primary key, name text);",
    "output": "SELECT DISTINCT T3.name, T2.title, T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name"
  },
  {
    "instruction": "papers on Parsing appeared at acl last year",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"Parsing\" AND t3.year = 2012 AND t4.venuename = \"acl\";"
  },
  {
    "instruction": "List the names of perpetrators in descending order of the year.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Home Town\" text, primary key (\"People_ID\"));create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC"
  },
  {
    "instruction": "What are the names of the districts that have both mall and village store style shops?",
    "input": "create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));create table \"store_district\" (\"Store_ID\" int, \"District_ID\" int, primary key (\"Store_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`district_id`) references `district`(`district_id`));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));create table \"store_district\" (\"Store_ID\" int, \"District_ID\" int, primary key (\"Store_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`district_id`) references `district`(`district_id`));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = \"Village Store\""
  },
  {
    "instruction": "What is the genre of the movie \" Jurassic Park \" ?",
    "input": "create table \"genre\" (\"gid\" int, \"genre\" text, primary key(\"gid\"));create table \"classification\" (\"id\" int, \"msid\" int, \"gid\" int, primary key(\"id\"), foreign key(\"gid\") references `genre`(\"gid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid WHERE t3.title = \"Jurassic Park\";"
  },
  {
    "instruction": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".",
    "input": "create table \"player\" (\"Player_ID\" int, \"Sponsor_name\" text, \"Player_name\" text, \"Gender\" text, \"Residence\" text, \"Occupation\" text, \"Votes\" int, \"Rank\" text, primary key (\"Player_ID\"));create table \"player\" (\"Player_ID\" int, \"Sponsor_name\" text, \"Player_name\" text, \"Gender\" text, \"Residence\" text, \"Occupation\" text, \"Votes\" int, \"Rank\" text, primary key (\"Player_ID\"));",
    "output": "SELECT Residence FROM player WHERE gender = \"M\" INTERSECT SELECT Residence FROM player WHERE gender = \"F\""
  },
  {
    "instruction": "Who are the friends of Alice that are doctors?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'male' AND T1.job = 'doctor'"
  },
  {
    "instruction": "Find the names of the candidates whose support percentage is lower than their oppose rate.",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate"
  },
  {
    "instruction": "List names of all pilot aged 30 or younger in descending alphabetical order.",
    "input": "create table `pilot` (`pilot_id` int(11) not null, `name` varchar(50) not null, `age` int(11) not null, primary key (`pilot_id`));",
    "output": "SELECT Name FROM pilot WHERE Age <= 30 ORDER BY Name DESC"
  },
  {
    "instruction": "How many different items were reviewed by some users?",
    "input": "create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT count(DISTINCT i_id) FROM review"
  },
  {
    "instruction": "Show the names of counties that have at least two delegates.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "List all the distinct stations from which a trip of duration below 100 started.",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100"
  },
  {
    "instruction": "papers by Liwen Xiong in 2015",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Liwen Xiong\" AND t3.year = 2015;"
  },
  {
    "instruction": "Please show the different statuses of cities and the average population of cities with each status.",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT Status, avg(Population) FROM city GROUP BY Status"
  },
  {
    "instruction": "Find the name of students who have taken the prerequisite course of the course with title International Finance.",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table takes (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), grade varchar(2), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references student (id)\n        ON delete cascade);create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));",
    "output": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance')"
  },
  {
    "instruction": "List all club names in ascending order of start year.",
    "input": "create table \"club\" (\"Club_ID\" int, \"name\" text, \"Region\" text, \"Start_year\" text, primary key (\"Club_ID\"));",
    "output": "SELECT name FROM club ORDER BY Start_year ASC"
  },
  {
    "instruction": "What are the names of all the media types?",
    "input": "create table media_types (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT name FROM media_types;"
  },
  {
    "instruction": "Give the details of the project with the document name 'King Book'.",
    "input": "create table projects (project_id integer not null, project_details varchar(255), primary key (project_id));create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id WHERE T2.document_name = \"King Book\""
  },
  {
    "instruction": "How old is the youngest person for each job?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT min(age), job FROM Person GROUP BY job"
  },
  {
    "instruction": "what is the lowest point of the us",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT lowest_point FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Show the number of customers for each gender.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT gender, count(*) FROM Customers GROUP BY gender"
  },
  {
    "instruction": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT job_id, hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'"
  },
  {
    "instruction": "What are the names of all movies that were created after the most recent Steven Spielberg film?",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT title FROM Movie WHERE YEAR > (SELECT max(YEAR) FROM Movie WHERE director = \"Steven Spielberg\")"
  },
  {
    "instruction": "which of the states bordering oklahoma has the largest population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"oklahoma\" ) ORDER BY population DESC LIMIT 1;"
  },
  {
    "instruction": "Sort the names of products in ascending order of their price.",
    "input": "create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC"
  },
  {
    "instruction": "Find the city with post code 255.",
    "input": "create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT city FROM addresses WHERE zip_postcode = 255"
  },
  {
    "instruction": "which states does the ohio river run through",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE river_name = \"ohio\";"
  },
  {
    "instruction": "Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990.",
    "input": "create table salary (year integer, team_id text, league_id text, player_id text, salary integer);create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);",
    "output": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;"
  },
  {
    "instruction": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Stephanie\" AND t1.lname = \"Weirich\""
  },
  {
    "instruction": "Find the entry names of the catalog with the attribute that have the most entries.",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));create table `catalog_contents_additional_attributes` (`catalog_entry_id` integer not null, `catalog_level_number` integer not null, `attribute_id` integer not null, `attribute_value` varchar(255) not null, foreign key (`catalog_entry_id`) references `catalog_contents`(`catalog_entry_id`), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));create table `catalog_contents_additional_attributes` (`catalog_entry_id` integer not null, `catalog_level_number` integer not null, `attribute_id` integer not null, `attribute_value` varchar(255) not null, foreign key (`catalog_entry_id`) references `catalog_contents`(`catalog_entry_id`), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?",
    "input": "create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));",
    "output": "SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000"
  },
  {
    "instruction": "What are the order dates of orders with price higher than 1000?",
    "input": "create table customer_orders (order_id integer not null , customer_id integer not null, store_id integer not null, order_date datetime not null, planned_delivery_date datetime not null, actual_delivery_date datetime not null, other_order_details varchar(255), primary key (order_id), unique (order_id), foreign key (customer_id) references customers (customer_id), foreign key (store_id) references stores (store_id));create table order_items (order_item_id integer not null , order_id integer not null, product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), primary key (order_item_id), foreign key (order_id) references customer_orders (order_id), foreign key (product_id) references products (product_id));create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_price > 1000"
  },
  {
    "instruction": "What is the name, city, and country of the airport with the highest elevation?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT name, city, country FROM airports ORDER BY elevation DESC LIMIT 1"
  },
  {
    "instruction": "keyphrases used by Luke Zettlemoyer .",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Luke Zettlemoyer\";"
  },
  {
    "instruction": "What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T1.name, T1.age, T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice' AND T2.year = (SELECT max(YEAR) FROM PersonFriend WHERE friend = 'Alice')"
  },
  {
    "instruction": "what is the highest mountain in the us",
    "input": "create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT mountain_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain );"
  },
  {
    "instruction": "What buildings have faculty offices?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT DISTINCT building FROM Faculty"
  },
  {
    "instruction": "What are the names of all females who are friends with Zach?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Zach' AND T1.gender = 'female'"
  },
  {
    "instruction": "return me the number of papers written by \" H. V. Jagadish \" in each year .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t3.title ), t3.year FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t1.name = \"H. V. Jagadish\" GROUP BY t3.year;"
  },
  {
    "instruction": "How many courses does the student with id 171 actually attend?",
    "input": "create table courses (course_id varchar(100) not null, course_name varchar(120), course_description varchar(255), other_details varchar(255), primary key (course_id));create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171"
  },
  {
    "instruction": "What are the names of students who haven't taken any Biology courses?",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table takes (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), grade varchar(2), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references student (id)\n        ON delete cascade);create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology')"
  },
  {
    "instruction": "Show the names of authors from college \"Florida\" or \"Temple\"",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT Author FROM submission WHERE College = \"Florida\" OR College = \"Temple\""
  },
  {
    "instruction": "What are the product names with average product price smaller than 1000000?",
    "input": "create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price) < 1000000"
  },
  {
    "instruction": "What is the id and last name of the driver who participated in the most races after 2010?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "how many people reside in california",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM state WHERE state_name = \"california\";"
  },
  {
    "instruction": "List the names of gymnasts in ascending order by their heights.",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height ASC"
  },
  {
    "instruction": "What is the age of the doctor named Zach?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT age FROM Person WHERE job = 'doctor' AND name = 'Zach'"
  },
  {
    "instruction": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2"
  },
  {
    "instruction": "2014 papers",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT paperid FROM paper WHERE YEAR = 2014;"
  },
  {
    "instruction": "List the project details of the projects launched by the organisation",
    "input": "create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )"
  },
  {
    "instruction": "give me some restaurants good for french food in the yosemite and mono lake area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"yosemite and mono lake area\" AND t1.food_type = \"french\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "new deep learning papers",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid, t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "What are the different album labels listed?",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);",
    "output": "SELECT DISTINCT label FROM Albums"
  },
  {
    "instruction": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\""
  },
  {
    "instruction": "List the venues of debates in ascending order of the number of audience.",
    "input": "create table \"debate\" (\"Debate_ID\" int, \"Date\" text, \"Venue\" text, \"Num_of_Audience\" int, primary key (\"Debate_ID\"));",
    "output": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC"
  },
  {
    "instruction": "What college has a student who successfully made the team in the role of a goalie?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT cName FROM tryout WHERE decision = 'yes' AND pPos = 'goalie'"
  },
  {
    "instruction": "How many drivers did not participate in the races held in 2009?",
    "input": "create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )"
  },
  {
    "instruction": "keyphrases Christof Dallermassl used in papers written last year",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"Christof Dallermassl\" AND t3.year = 2000;"
  },
  {
    "instruction": "What are the ids of the students who registered course statistics by order of registration date?",
    "input": "create table courses (course_id varchar(100) not null, course_name varchar(120), course_description varchar(255), other_details varchar(255), primary key (course_id));create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));",
    "output": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
  },
  {
    "instruction": "What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\" AND t3.characteristic_type_code = \"Grade\""
  },
  {
    "instruction": "who published Parsing papers at acl 2012",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"Parsing\" AND t3.year = 2012 AND t4.venuename = \"acl\";"
  },
  {
    "instruction": "How many students live in each city?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT city_code, count(*) FROM Student GROUP BY city_code"
  },
  {
    "instruction": "What are the names of all the video games and their types in alphabetical order?",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT gname, gtype FROM Video_games ORDER BY gname"
  },
  {
    "instruction": "On what day was the order with invoice number 10 placed?",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `shipments` (`shipment_id` integer primary key, `order_id` integer not null, `invoice_number` integer not null, `shipment_tracking_number` varchar(80), `shipment_date` datetime, `other_shipment_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`invoice_number`) references `invoices`(`invoice_number`));",
    "output": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10"
  },
  {
    "instruction": "What are the themes and years for exhibitions, sorted by ticket price descending?",
    "input": "create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT theme, YEAR FROM exhibition ORDER BY ticket_price DESC"
  },
  {
    "instruction": "On average, how old are the members in the club \"Hopkins Student Enterprises\"?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\""
  },
  {
    "instruction": "what are the names of the major cities in kansas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population > 150000 AND state_name = \"kansas\";"
  },
  {
    "instruction": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?",
    "input": "create table locations (location_id integer not null, location_name varchar(255), address varchar(255), other_details varchar(255), primary key (location_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = \"660 Shea Crescent\" OR T2.How_to_Get_There = \"walk\""
  },
  {
    "instruction": "what states border states that border the state with the largest population",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border = t1.state_name WHERE t2.state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );"
  },
  {
    "instruction": "Find the movies with the highest average rating. Return the movie titles and average rating.",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1"
  },
  {
    "instruction": "Find the names of all patients who have an undergoing treatment and are staying in room 111.",
    "input": "create table undergoes (patient integer not null, procedures integer not null, stay integer not null, dateundergoes datetime not null, physician integer not null, assistingnurse integer, primary key(patient, procedures, stay, dateundergoes), constraint fk_undergoes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_undergoes_procedures_code foreign key(procedures) references procedures(code), constraint fk_undergoes_stay_stayid foreign key(stay) references stay(stayid), constraint fk_undergoes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_undergoes_nurse_employeeid foreign key(assistingnurse) references nurse(employeeid));create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));create table stay (stayid integer primary key not null, patient integer not null, room integer not null, staystart datetime not null, stayend datetime not null, constraint fk_stay_patient_ssn foreign key(patient) references patient(ssn), constraint fk_stay_room_number foreign key(room) references room(roomnumber));",
    "output": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID WHERE T3.room = 111"
  },
  {
    "instruction": "which state has the smallest average urban population",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city GROUP BY state_name ORDER BY AVG ( population ) LIMIT 1;"
  },
  {
    "instruction": "Find the names of all stores in Khanewal District.",
    "input": "create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));create table \"store_district\" (\"Store_ID\" int, \"District_ID\" int, primary key (\"Store_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`district_id`) references `district`(`district_id`));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = \"Khanewal District\""
  },
  {
    "instruction": "What are the advisors",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*) >= 2"
  },
  {
    "instruction": "How many parks are there in the state of NY?",
    "input": "create table park (park_id text, park_name text, park_alias text, city text, state text, country text);",
    "output": "SELECT count(*) FROM park WHERE state = 'NY';"
  },
  {
    "instruction": "How many albums are there?",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*) FROM ALBUM"
  },
  {
    "instruction": "How many counties are there in total?",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT count(*) FROM county"
  },
  {
    "instruction": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);",
    "output": "SELECT T2.Dname, T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = \"INTRODUCTION TO COMPUTER SCIENCE\""
  },
  {
    "instruction": "how many people are there whose weight is higher than 85 for each gender?",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));",
    "output": "SELECT count(*), sex FROM people WHERE weight > 85 GROUP BY sex"
  },
  {
    "instruction": "How many professors have a Ph.D. in each department?",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT count(*), dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code"
  },
  {
    "instruction": "Show all train names and times in stations in London in descending order by train time.",
    "input": "create table \"train_station\" (\"Train_ID\" int, \"Station_ID\" int, primary key (\"Train_ID\",\"Station_ID\"), foreign key (\"Train_ID\") references \"train\"(\"Train_ID\"), foreign key (\"Station_ID\") references \"station\"(\"Station_ID\"));create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));create table \"train\" (\"Train_ID\" int, \"Name\" text, \"Time\" text, \"Service\" text, primary key (\"Train_ID\"));",
    "output": "SELECT T3.name, T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T2.location = 'London' ORDER BY T3.time DESC"
  },
  {
    "instruction": "topics popular at NIPS 2015",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t3.year = 2015 AND t4.venuename = \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
  },
  {
    "instruction": "How many publications were added to the Cell journal this year ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `journal` (`journalid` integer not null , `journalname` varchar(100) default null , primary key (`journalid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid = t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid = t1.paperid WHERE t2.journalname = \"Cell\" AND t3.year = 2015;"
  },
  {
    "instruction": "Return the top 3 greatest support rates.",
    "input": "create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
  },
  {
    "instruction": "How many players born in USA are right-handed batters? That is, have the batter value 'R'.",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);",
    "output": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats = 'R';"
  },
  {
    "instruction": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?",
    "input": "create table \"station_company\" (\"Station_ID\" int, \"Company_ID\" int, \"Rank_of_the_Year\" int, primary key (\"Station_ID\",\"Company_ID\"), foreign key (`station_id`) references `gas_station`(`station_id`), foreign key (`company_id`) references `company`(`company_id`));create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));create table \"gas_station\" (\"Station_ID\" int, \"Open_Year\" int, \"Location\" text, \"Manager_Name\" text, \"Vice_Manager_Name\" text, \"Representative_Name\" text, primary key (\"Station_ID\"));",
    "output": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.company = 'ExxonMobil'"
  },
  {
    "instruction": "Which sport has most number of students on scholarship?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT sportname FROM Sportsinfo WHERE onscholarship = 'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the name and address of the department that has the highest number of students.",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.dept_name, T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "papers by brian curless about convolution",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"brian curless\" AND t5.keyphrasename = \"convolution\";"
  },
  {
    "instruction": "What is the type of vocals that the band member with the last name \"Heilo\" played the most?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE lastname = \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show distinct first and last names for all customers with an account.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id"
  },
  {
    "instruction": "List the distinct carriers of phones with memories bigger than 32.",
    "input": "create table \"phone\" (\"Name\" text, \"Phone_ID\" int, \"Memory_in_G\" int, \"Carrier\" text, \"Price\" real, primary key (\"Phone_ID\"));",
    "output": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G > 32"
  },
  {
    "instruction": "Return the total number of distinct customers.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT count(*) FROM customers"
  },
  {
    "instruction": "What are the names of all the stores located in Khanewal District?",
    "input": "create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));create table \"store_district\" (\"Store_ID\" int, \"District_ID\" int, primary key (\"Store_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`district_id`) references `district`(`district_id`));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = \"Khanewal District\""
  },
  {
    "instruction": "What is the name of the department with an instructure who has a name like 'Soisalon'?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'"
  },
  {
    "instruction": "How many video games have type Massively multiplayer online game?",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT count(*) FROM Video_games WHERE gtype = \"Massively multiplayer online game\""
  },
  {
    "instruction": "return me the papers by \" H. V. Jagadish \" on PVLDB .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\" AND t2.name = \"PVLDB\";"
  },
  {
    "instruction": "Show the maximum share count of transactions where the amount is smaller than 10000",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction < 10000"
  },
  {
    "instruction": "Latest paper by oren etzioni",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"oren etzioni\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
    "input": "create table timed_status_of_things (thing_id integer not null, date_and_date datetime not null, status_of_thing_code char(15) not null, primary key (thing_id, date_and_date, status_of_thing_code), foreign key (thing_id) references things (thing_id));create table things (thing_id integer not null, organization_id integer not null, type_of_thing_code char(15) not null, service_type_code char(10) not null, service_details varchar(255), primary key (thing_id), foreign key (organization_id) references organizations (organization_id));",
    "output": "SELECT DISTINCT T2.thing_id, T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21'"
  },
  {
    "instruction": "What are the start date and end date of each apartment booking?",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));",
    "output": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings"
  },
  {
    "instruction": "Find the average access count of documents with the least popular structure.",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "What are the store names of drama workshop groups?",
    "input": "create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT Store_Name FROM Drama_Workshop_Groups"
  },
  {
    "instruction": "Find the latest movie which \" Gabriele Ferzetti \" acted in",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t1.name = \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;"
  },
  {
    "instruction": "What are the name, id and the corresponding number of visits for each  tourist attraction?",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT T1.Name, T2.Tourist_Attraction_ID, COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID"
  },
  {
    "instruction": "Count the number of companies.",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT count(*) FROM Companies"
  },
  {
    "instruction": "List the distinct positions of pilots older than 30.",
    "input": "create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));",
    "output": "SELECT DISTINCT POSITION FROM pilot WHERE Age > 30"
  },
  {
    "instruction": "What is the name of the wrestler with the fewest days held?",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1"
  },
  {
    "instruction": "What is the number of departments in Division \"AS\"?",
    "input": "create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);",
    "output": "SELECT count(*) FROM DEPARTMENT WHERE Division = \"AS\""
  },
  {
    "instruction": "Find the market shares and names of furnitures which no any company is producing in our records.",
    "input": "create table \"furniture\" (\"Furniture_ID\" int, \"Name\" text, \"Num_of_Component\" int, \"Market_Rate\" real, primary key (\"Furniture_ID\"));create table \"furniture_manufacte\" (\"Manufacturer_ID\" int, \"Furniture_ID\" int, \"Price_in_Dollar\" real, primary key (\"Manufacturer_ID\",\"Furniture_ID\"), foreign key (\"Manufacturer_ID\") references `manufacturer`(\"Manufacturer_ID\"), foreign key (\"Furniture_ID\") references `furniture`(\"Furniture_ID\"));",
    "output": "SELECT Market_Rate, name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)"
  },
  {
    "instruction": "List the name of all tracks in the playlists of Movies.",
    "input": "create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);create table playlist_tracks (playlist_id integer not null, track_id integer not null, constraint pk_playlisttrack primary key (playlist_id, track_id), foreign key (playlist_id) references playlists (id)\n        ON delete no action\n        ON update no action, foreign key (track_id) references tracks (id)\n        ON delete no action\n        ON update no action);create table playlists (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";"
  },
  {
    "instruction": "Return the name and job title of the staff with the latest date assigned.",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_gender` varchar(1), `staff_name` varchar(80));create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.staff_name, T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1"
  },
  {
    "instruction": "What is the name of each course and the corresponding number of student enrollment?",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT T1.course_name, COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name"
  },
  {
    "instruction": "What are all of the products whose name includes the substring \"Scanner\"?",
    "input": "create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));",
    "output": "SELECT product FROM product WHERE product LIKE \"%Scanner%\""
  },
  {
    "instruction": "What are the maximum and minimum number of cities in all markets.",
    "input": "create table \"market\" (\"Market_ID\" int, \"Country\" text, \"Number_cities\" int, primary key (\"Market_ID\"));",
    "output": "SELECT max(Number_cities), min(Number_cities) FROM market"
  },
  {
    "instruction": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.",
    "input": "create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));",
    "output": "SELECT product FROM product WHERE max_page_size = \"A4\" OR pages_per_minute_color < 5"
  },
  {
    "instruction": "Find the name of the person who has friends with age above 40 but not under age 30?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)"
  },
  {
    "instruction": "What is the description for the results whose project detail is 'sint'?",
    "input": "create table `research_outcomes` (`outcome_code` varchar(10) primary key, `outcome_description` varchar(255) not null);create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint'"
  },
  {
    "instruction": "What is the number of branches that have more than the average number of memberships?",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT count(*) FROM branch WHERE membership_amount > (SELECT avg(membership_amount) FROM branch)"
  },
  {
    "instruction": "How many phones are there?",
    "input": "create table \"phone\" (\"Name\" text, \"Phone_ID\" int, \"Memory_in_G\" int, \"Carrier\" text, \"Price\" real, primary key (\"Phone_ID\"));",
    "output": "SELECT count(*) FROM phone"
  },
  {
    "instruction": "Find the distinct majors of students who have treasurer votes.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote"
  },
  {
    "instruction": "What is the first and last name of all employees who live in the city Damianfort?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T2.first_name, T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";"
  },
  {
    "instruction": "Please show different types of artworks with the corresponding number of artworks of each type.",
    "input": "create table artwork (\"Artwork_ID\" int, \"Type\" text, \"Name\" text, primary key (\"Artwork_ID\"));",
    "output": "SELECT TYPE, COUNT(*) FROM artwork GROUP BY TYPE"
  },
  {
    "instruction": "Papers from pldi 2015 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "What are the different ship flags, and how many ships have each?",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));",
    "output": "SELECT count(*), flag FROM ship GROUP BY flag"
  },
  {
    "instruction": "Find the type code of the most frequently used policy.",
    "input": "create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));",
    "output": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what keyphrases get most citations ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT COUNT ( t3.citingpaperid ), t1.keyphrasename FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN cite AS t3 ON t2.paperid = t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT ( t3.citingpaperid ) DESC;"
  },
  {
    "instruction": "who does oren etzioni cite",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"oren etzioni\";"
  },
  {
    "instruction": "Show the players from college UCLA.",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT Player FROM match_season WHERE College = \"UCLA\""
  },
  {
    "instruction": "Return the age of the person with the greatest height.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1"
  },
  {
    "instruction": "Show all member names and registered branch names sorted by register year.",
    "input": "create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));",
    "output": "SELECT T3.name, T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id ORDER BY T1.register_year"
  },
  {
    "instruction": "What is the unit of measuerment of the product category code \"Herbs\"?",
    "input": "create table `ref_product_categories` (`product_category_code` varchar(15) primary key, `product_category_description` varchar(80), `unit_of_measure` varchar(20));",
    "output": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code = \"Herbs\""
  },
  {
    "instruction": "what is the longest river in the smallest state in the usa",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );"
  },
  {
    "instruction": "Find the first names of the faculty members who are playing Canoeing or Kayaking.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));create table activity (actid integer primary key, activity_name varchar(25));",
    "output": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'"
  },
  {
    "instruction": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = \"The Phantom of the Opera\""
  },
  {
    "instruction": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f) > 60"
  },
  {
    "instruction": "What are the task details, task ids, and project ids for the progrects that are detailed as 'omnis' or have at least 3 outcomes?",
    "input": "create table `tasks` (`task_id` integer primary key, `project_id` integer not null, `task_details` varchar(255) not null, `eg agree objectives` varchar(1), foreign key (`project_id`) references `projects`(`project_id`));create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `tasks` (`task_id` integer primary key, `project_id` integer not null, `task_details` varchar(255) not null, `eg agree objectives` varchar(1), foreign key (`project_id`) references `projects`(`project_id`));create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));",
    "output": "SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis' UNION SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.project_id HAVING count(*) > 2"
  },
  {
    "instruction": "What is the name of the deparment with the highest enrollment?",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is minimum hours of the students playing in different position?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT min(T2.HS), T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY T1.pPos"
  },
  {
    "instruction": "How many distinct names are associated with all the photos?",
    "input": "create table photos (photo_id integer not null, tourist_attraction_id integer not null, name varchar(255), description varchar(255), filename varchar(255), other_details varchar(255), primary key (photo_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id));",
    "output": "SELECT count(DISTINCT Name) FROM PHOTOS"
  },
  {
    "instruction": "For each id of a driver who participated in at most 30 races, how many races did they participate in?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT T1.driverid, count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*) <= 30"
  },
  {
    "instruction": "Count the number of classrooms in Lamberton.",
    "input": "create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));",
    "output": "SELECT count(*) FROM classroom WHERE building = 'Lamberton'"
  },
  {
    "instruction": "What is the role code with the largest number of employees?",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "papers written by Peter Mertens and Dina Barbian",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "What are all the tv series created by \" Shonda Rhimes \" ?",
    "input": "create table \"producer\" (\"pid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"pid\"));create table \"made_by\" (\"id\" int, \"msid\" int, \"pid\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"pid\") references `producer`(\"pid\"));create table \"tv_series\" (\"sid\" int, \"title\" text, \"release_year\" int, \"num_of_seasons\" int, \"num_of_episodes\" int, \"title_aka\" text, \"budget\" text, primary key(\"sid\"));",
    "output": "SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid = t3.pid JOIN tv_series AS t2 ON t2.sid = t3.msid WHERE t1.name = \"Shonda Rhimes\";"
  },
  {
    "instruction": "List all schools and their nicknames in the order of founded year.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT school, nickname FROM university ORDER BY founded"
  },
  {
    "instruction": "What information do you have on colleges sorted by increasing enrollment numbers?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT * FROM College ORDER BY enr"
  },
  {
    "instruction": "find the number of players whose points are lower than 30 in each position.",
    "input": "create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT count(*), POSITION FROM player WHERE points < 30 GROUP BY POSITION"
  },
  {
    "instruction": "What conferences did li dong publish in in 2016 ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"li dong\" AND t3.year = 2016;"
  },
  {
    "instruction": "What is the description of the service type which offers both the photo product and the film product?",
    "input": "create table ref_service_types (service_type_code char(15) not null, parent_service_type_code char(15), service_type_description varchar(255), primary key (service_type_code), unique (service_type_code));create table services (service_id integer not null, service_type_code char(15), workshop_group_id integer not null, product_description varchar(255), product_name varchar(255), product_price decimal(20, 4), other_product_service_details varchar(255), primary key (service_id), unique (service_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id), foreign key (service_type_code) references ref_service_types (service_type_code));create table ref_service_types (service_type_code char(15) not null, parent_service_type_code char(15), service_type_description varchar(255), primary key (service_type_code), unique (service_type_code));create table services (service_id integer not null, service_type_code char(15), workshop_group_id integer not null, product_description varchar(255), product_name varchar(255), product_price decimal(20, 4), other_product_service_details varchar(255), primary key (service_id), unique (service_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id), foreign key (service_type_code) references ref_service_types (service_type_code));",
    "output": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'film'"
  },
  {
    "instruction": "What is the total student capacity of all dorms?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT sum(student_capacity) FROM dorm"
  },
  {
    "instruction": "return me all the papers in PVLDB after 2000 in \" University of Michigan \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN journal AS t3 ON t5.jid = t3.jid WHERE t3.name = \"PVLDB\" AND t2.name = \"University of Michigan\" AND t5.year > 2000;"
  },
  {
    "instruction": "Show the id, name of each festival and the number of artworks it has nominated.",
    "input": "create table nomination (\"Artwork_ID\" int, \"Festival_ID\" int, \"Result\" text, primary key (\"Artwork_ID\",\"Festival_ID\"), foreign key (\"Artwork_ID\") references `artwork`(\"Artwork_ID\"), foreign key (\"Festival_ID\") references `festival_detail`(\"Festival_ID\"));create table artwork (\"Artwork_ID\" int, \"Type\" text, \"Name\" text, primary key (\"Artwork_ID\"));create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));",
    "output": "SELECT T1.Festival_ID, T3.Festival_Name, COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID"
  },
  {
    "instruction": "Return the minimum, average and maximum distances traveled across all aircrafts.",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT min(distance), avg(distance), max(distance) FROM Aircraft"
  },
  {
    "instruction": "What are the 3 counties that have the smallest population? Give me the county names.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3"
  },
  {
    "instruction": "return me the number of papers on VLDB conference .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = \"VLDB\";"
  },
  {
    "instruction": "What are all the publication titles by Donald E Knuth ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Donald E Knuth\";"
  },
  {
    "instruction": "return me the number of authors who have cooperated with \" H. V. Jagadish \" .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.name ) FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\";"
  },
  {
    "instruction": "What are the names of the songs that have a lower rating than at least one blues song?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT song_name FROM song WHERE rating < (SELECT max(rating) FROM song WHERE genre_is = \"blues\")"
  },
  {
    "instruction": "Show all cities where students live.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT city_code FROM Student"
  },
  {
    "instruction": "return me the authors of \" Making database systems usable \" .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid WHERE t3.title = \"Making database systems usable\";"
  },
  {
    "instruction": "Liwen Xiong 's papers in 2015",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Liwen Xiong\" AND t3.year = 2015;"
  },
  {
    "instruction": "show all train numbers and names ordered by their time from early to late.",
    "input": "create table \"train\" (\"id\" int, \"train_number\" int, \"name\" text, \"origin\" text, \"destination\" text, \"time\" text, \"interval\" text, primary key (\"id\"));",
    "output": "SELECT train_number, name FROM train ORDER BY TIME"
  },
  {
    "instruction": "what states have rivers running through them",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river;"
  },
  {
    "instruction": "What is the number of routes that end at John F Kennedy International Airport?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.name = 'John F Kennedy International Airport'"
  },
  {
    "instruction": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008"
  },
  {
    "instruction": "give me the cities in texas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE state_name = \"texas\";"
  },
  {
    "instruction": "Show all date and share count of transactions.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT date_of_transaction, share_count FROM TRANSACTIONS"
  },
  {
    "instruction": "How many products were not included in any order?",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `production_type_code` varchar(15) not null, `unit_price` decimal(19, 4), `product_name` varchar(80), `product_color` varchar(20), `product_size` varchar(20), foreign key (`production_type_code`) references `product_categories`(`production_type_code`));create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
  },
  {
    "instruction": "What are the names of all players that got more than the average number of points?",
    "input": "create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT name FROM player WHERE points > (SELECT avg(points) FROM player)"
  },
  {
    "instruction": "what are the highest points of states surrounding mississippi",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"mississippi\" );"
  },
  {
    "instruction": "In 2010 what journal published an article about Trophic Cascade ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Trophic Cascade\" AND t3.year = 2010 GROUP BY t3.journalid;"
  },
  {
    "instruction": "what is the capital of the largest state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT capital FROM state WHERE area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "return me the number of authors who have papers in PVLDB .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = \"PVLDB\";"
  },
  {
    "instruction": "display the department id and the total salary for those departments which contains at least two employees.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT department_id, SUM(salary) FROM employees GROUP BY department_id HAVING count(*) >= 2"
  },
  {
    "instruction": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table guests (guest_id integer not null , gender_code char(1), guest_first_name varchar(80), guest_last_name varchar(80), date_of_birth datetime, primary key (guest_id), unique (guest_id));",
    "output": "SELECT T2.guest_first_name, T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = \"Confirmed\""
  },
  {
    "instruction": "For each constructor id, how many races are there?",
    "input": "create table \"constructorStandings\" (\"constructorStandingsId\" integer primary key, \"raceId\" integer, \"constructorId\" integer, \"points\" real, \"position\" integer, \"positionText\" text, \"wins\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"));",
    "output": "SELECT count(*), constructorid FROM constructorStandings GROUP BY constructorid"
  },
  {
    "instruction": "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
  },
  {
    "instruction": "What campuses are located in the county of Los Angeles?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE county = \"Los Angeles\""
  },
  {
    "instruction": "Show the number of locations.",
    "input": "create table ref_locations (location_code char(15) not null, location_name varchar(255) not null, location_description varchar(255) not null, primary key (location_code));",
    "output": "SELECT count(*) FROM Ref_locations"
  },
  {
    "instruction": "What is the average account balance of customers with credit score below 50 for the different account types?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT avg(acc_bal), acc_type FROM customer WHERE credit_score < 50 GROUP BY acc_type"
  },
  {
    "instruction": "What are the classes of races that have two or more corresponding races?",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));",
    "output": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*) >= 2"
  },
  {
    "instruction": "What are the titles of courses that are offered in more than one department?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT title FROM course GROUP BY title HAVING count(*) > 1"
  },
  {
    "instruction": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.",
    "input": "create table \"buildings\" (\"id\" int, \"name\" text, \"City\" text, \"Height\" int, \"Stories\" int, \"Status\" text, primary key(\"id\"));",
    "output": "SELECT name FROM buildings WHERE Status = \"on-hold\" ORDER BY Stories ASC"
  },
  {
    "instruction": "How many employees are living in Canada?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*) FROM employees WHERE country = \"Canada\";"
  },
  {
    "instruction": "return me all the organizations in \" North America \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));",
    "output": "SELECT name FROM organization WHERE continent = \"North America\";"
  },
  {
    "instruction": "return me the keyword, which have been contained by the most number of papers by \" H. V. Jagadish \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t2.name = \"H. V. Jagadish\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;"
  },
  {
    "instruction": "which rivers are in illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = \"illinois\";"
  },
  {
    "instruction": "List all headquarters and the number of companies in each headquarter.",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT headquarters, count(*) FROM company GROUP BY headquarters"
  },
  {
    "instruction": "Find the first name and office of history professor who did not get a Ph.D. degree.",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree != 'Ph.D.'"
  },
  {
    "instruction": "What are the id and address of the shops which have a happy hour in May?",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Address\" text, \"Num_of_staff\" text, \"Score\" real, \"Open_Year\" text, primary key (\"Shop_ID\"));create table \"happy_hour\" (\"HH_ID\" int, \"Shop_ID\" int, \"Month\" text, \"Num_of_shaff_in_charge\" int, primary key (\"HH_ID\",\"Shop_ID\",\"Month\"), foreign key (\"Shop_ID\") references `shop`(\"Shop_ID\"));",
    "output": "SELECT t1.address, t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'"
  },
  {
    "instruction": "Find the name and email of the users who have more than 1000 followers.",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));",
    "output": "SELECT name, email FROM user_profiles WHERE followers > 1000"
  },
  {
    "instruction": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer names.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\""
  },
  {
    "instruction": "What is the color description of the product with name \"catnip\"?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"catnip\""
  },
  {
    "instruction": "What is the description for the budget type with code ORG?",
    "input": "create table ref_budget_codes (budget_type_code char(15) not null, budget_type_description varchar(255) not null, primary key (budget_type_code));",
    "output": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code = \"ORG\""
  },
  {
    "instruction": "What are the names of the tracks that are Rock or Jazz songs?",
    "input": "create table genres (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\""
  },
  {
    "instruction": "where is the lowest point in the us",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT lowest_point FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Show different nationalities along with the number of hosts of each nationality.",
    "input": "create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));",
    "output": "SELECT Nationality, COUNT(*) FROM HOST GROUP BY Nationality"
  },
  {
    "instruction": "how many states does usa have",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT COUNT ( state_name ) FROM state;"
  },
  {
    "instruction": "List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.",
    "input": "create table \"chip_model\" (\"Model_name\" text, \"Launch_year\" real, \"RAM_MiB\" real, \"ROM_MiB\" real, \"Slots\" text, \"WiFi\" text, \"Bluetooth\" text, primary key (\"Model_name\"));create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));create table \"screen_mode\" (\"Graphics_mode\" real, \"Char_cells\" text, \"Pixels\" text, \"Hardware_colours\" real, \"used_kb\" real, \"map\" text, \"Type\" text, primary key (\"Graphics_mode\"));",
    "output": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB > 32;"
  },
  {
    "instruction": "What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT role_code FROM Project_Staff WHERE date_from > '2003-04-19 15:06:20' AND date_to < '2016-03-15 00:33:18'"
  },
  {
    "instruction": "How many courses that do not have prerequisite?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));",
    "output": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
  },
  {
    "instruction": "How many undergraduates are there at San Jose State",
    "input": "create table \"discipline_enrollments\" (\"Campus\" integer, \"Discipline\" integer, \"Year\" integer, \"Undergraduate\" integer, \"Graduate\" integer, primary key (campus, discipline), foreign key (campus) references campuses(id));create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Jose State University\""
  },
  {
    "instruction": "Show the ids of all the faculty members who participate in an activity and advise a student.",
    "input": "create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student"
  },
  {
    "instruction": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table affiliated_with (physician integer not null, department integer not null, primaryaffiliation boolean not null, constraint fk_affiliated_with_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_affiliated_with_department_departmentid foreign key(department) references department(departmentid), primary key(physician, department));create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));",
    "output": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'"
  },
  {
    "instruction": "Find the first names of all the teachers that teach in classroom 110.",
    "input": "create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT firstname FROM teachers WHERE classroom = 110"
  },
  {
    "instruction": "What campus has the most faculties in 2003?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));",
    "output": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1"
  },
  {
    "instruction": "Show the opening year in whcih at least two churches opened.",
    "input": "create table \"church\" (\"Church_ID\" int, \"Name\" text, \"Organized_by\" text, \"Open_Date\" int, \"Continuation_of\" text, primary key (\"Church_ID\"));",
    "output": "SELECT open_date FROM church GROUP BY open_date HAVING count(*) >= 2"
  },
  {
    "instruction": "What are the first and last names of the performer who was in the back stage position for the song \"Badlands\"?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Badlands\" AND T1.StagePosition = \"back\""
  },
  {
    "instruction": "What is the number of artists for each gender?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT count(*), gender FROM artist GROUP BY gender"
  },
  {
    "instruction": "What are the names of ships that were involved in a mission launched after 1928?",
    "input": "create table \"mission\" (\"Mission_ID\" int, \"Ship_ID\" int, \"Code\" text, \"Launched_Year\" int, \"Location\" text, \"Speed_knots\" int, \"Fate\" text, primary key (\"Mission_ID\"), foreign key (\"Ship_ID\") references `ship`(\"Ship_ID\"));create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928"
  },
  {
    "instruction": "Which headquarter locations are used by more than 2 companies?",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*) > 2"
  },
  {
    "instruction": "Return the ids of all products that were ordered more than three times or supplied more than 80000.",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, foreign key (`order_id`) references `customer_orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));create table `product_suppliers` (`product_id` integer not null, `supplier_id` integer not null, `date_supplied_from` datetime not null, `date_supplied_to` datetime, `total_amount_purchased` varchar(80), `total_value_purchased` decimal(19, 4), primary key (`product_id`, `supplier_id`), foreign key (`supplier_id`) references `suppliers`(`supplier_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*) > 3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased) > 80000"
  },
  {
    "instruction": "How many distinct teams are involved in match seasons?",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT count(DISTINCT Team) FROM match_season"
  },
  {
    "instruction": "What are the id of each employee and the number of document destroyed by that employee?",
    "input": "create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT Destroyed_by_Employee_ID, count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID"
  },
  {
    "instruction": "What are the maximum, minimum and average home games each stadium held?",
    "input": "create table \"stadium\" (\"id\" int, \"name\" text, \"Home_Games\" int, \"Average_Attendance\" real, \"Total_Attendance\" real, \"Capacity_Percentage\" real, primary key (\"id\"));",
    "output": "SELECT max(home_games), min(home_games), avg(home_games) FROM stadium"
  },
  {
    "instruction": "which state has the largest city",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );"
  },
  {
    "instruction": "What are the maximum and minimum number of silver medals for all the clubs?",
    "input": "create table \"club_rank\" (\"Rank\" real, \"Club_ID\" int, \"Gold\" real, \"Silver\" real, \"Bronze\" real, \"Total\" real, primary key (\"Rank\",\"Club_ID\") foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT max(Silver), min(Silver) FROM club_rank"
  },
  {
    "instruction": "Select the project names which are not assigned yet.",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));",
    "output": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)"
  },
  {
    "instruction": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.",
    "input": "create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT Company_name, count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;"
  },
  {
    "instruction": "Show member names without any registered branch.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));",
    "output": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)"
  },
  {
    "instruction": "how many states are next to major rivers",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH > 750;"
  },
  {
    "instruction": "Find the name of the user who gives the most reviews.",
    "input": "create table `useracct` (`u_id` integer not null , `name` varchar(128) default null , primary key (`u_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the largest major?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the average number of votes of representatives from party \"Republican\"?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Representative_ID\" int, \"Date\" text, \"Votes\" real, \"Vote_Percent\" real, \"Seats\" real, \"Place\" real, primary key (\"Election_ID\"), foreign key (\"Representative_ID\") references `representative`(\"Representative_ID\"));create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));",
    "output": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = \"Republican\""
  },
  {
    "instruction": "Who is the youngest employee in the company? List employee's first and last name.",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1;"
  },
  {
    "instruction": "show me papers by sharon goldwater .",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "Show the role code with the least employees.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "What is the last name of the musician that have produced the most songs?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many customers are there?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT sum(no_of_customers) FROM bank"
  },
  {
    "instruction": "What are the states with colleges that have enrollments less than the some other college?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT DISTINCT state FROM college WHERE enr < (SELECT max(enr) FROM college)"
  },
  {
    "instruction": "Which studios have never worked with the director Walter Hill?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director = \"Walter Hill\""
  },
  {
    "instruction": "Find the name of the customer who made the order of the largest amount of goods.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t3.order_quantity = ( SELECT max(order_quantity) FROM order_items)"
  },
  {
    "instruction": "What are the distinct president votes on 08/30/2015?",
    "input": "create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date = \"08/30/2015\""
  },
  {
    "instruction": "How many countries are there in total?",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));",
    "output": "SELECT count(*) FROM country"
  },
  {
    "instruction": "List the names of courses in alphabetical order?",
    "input": "create table courses (course_id varchar(100) not null, course_name varchar(120), course_description varchar(255), other_details varchar(255), primary key (course_id));",
    "output": "SELECT course_name FROM courses ORDER BY course_name"
  },
  {
    "instruction": "Return the account details with the greatest value, as well as those that include the character 5.",
    "input": "create table accounts (account_id integer not null, statement_id integer not null, account_details varchar(255), primary key (account_id), foreign key (statement_id) references statements (statement_id));create table accounts (account_id integer not null, statement_id integer not null, account_details varchar(255), primary key (account_id), foreign key (statement_id) references statements (statement_id));",
    "output": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\""
  },
  {
    "instruction": "Find the addresses and author IDs of the course authors that teach at least two courses.",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));",
    "output": "SELECT T1.address_line_1, T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count(*) >= 2"
  },
  {
    "instruction": "What is the average and maximum number of hours students who made the team practiced?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT avg(T1.HS), max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'"
  },
  {
    "instruction": "Please show the industries of companies in descending order of the number of companies.",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC"
  },
  {
    "instruction": "Find all Bars reviewed by Patrick",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = \"Bars\" AND t4.name = \"Patrick\";"
  },
  {
    "instruction": "What is the average and maximum damage in millions for storms that had a max speed over 1000?",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT avg(damage_millions_USD), max(damage_millions_USD) FROM storm WHERE max_speed > 1000"
  },
  {
    "instruction": "List the name of the school with the smallest enrollment.",
    "input": "create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));",
    "output": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1"
  },
  {
    "instruction": "What is the id of the order which has the most items?",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer primary key, `product_id` integer not null, `order_id` integer not null, `order_item_status` varchar(10) not null, `order_item_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the name and city of the airport from most of the routes start?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT T1.name, T1.city, T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many scientists are there?",
    "input": "create table scientists (ssn int, name char(30) not null, primary key (ssn));",
    "output": "SELECT count(*) FROM scientists"
  },
  {
    "instruction": "How many campuses exist are in the county of LA?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT count(*) FROM campuses WHERE county = \"Los Angeles\""
  },
  {
    "instruction": "What are the daily hire costs for the products with substring 'Book' in its name?",
    "input": "create table `products_for_hire` (`product_id` integer primary key, `product_type_code` varchar(15) not null, `daily_hire_cost` decimal(19, 4), `product_name` varchar(80), `product_description` varchar(255));",
    "output": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'"
  },
  {
    "instruction": "What is the total point count of the youngest gymnast?",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
  },
  {
    "instruction": "Which allergy is the most common?",
    "input": "create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));create table circulation_history (document_id integer not null, draft_number integer not null, copy_number integer not null, employee_id integer not null, primary key (document_id, draft_number, copy_number, employee_id), foreign key (document_id, draft_number, copy_number) references draft_copies (document_id, draft_number, copy_number), foreign key (employee_id) references employees (employee_id));",
    "output": "SELECT Employees.employee_name, count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id, Circulation_History.draft_number, Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "instruction": "List the papers that used WebKB dataset",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"WebKB\";"
  },
  {
    "instruction": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT fname, lname FROM student WHERE city_code != 'HKG' ORDER BY age"
  },
  {
    "instruction": "Find the total number of instructors who teach a course in the Spring 2010 semester.",
    "input": "create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);",
    "output": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010"
  },
  {
    "instruction": "Show the distinct position of players from college UCLA or Duke.",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT DISTINCT POSITION FROM match_season WHERE College = \"UCLA\" OR College = \"Duke\""
  },
  {
    "instruction": "find the full name of employees who report to Nancy Edwards?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";"
  },
  {
    "instruction": "Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT count(*), T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC"
  },
  {
    "instruction": "What is the maximum page size for everything that has more than 3 products listed?",
    "input": "create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));",
    "output": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*) > 3"
  },
  {
    "instruction": "what is the largest city in smallest state through which the mississippi runs",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) AND area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" ) ) ) ORDER BY population DESC LIMIT 1;"
  },
  {
    "instruction": "Who belong to the institution \"University of Oxford\"? Show the first names and last names.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT DISTINCT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Oxford\""
  },
  {
    "instruction": "List the research staff details, and order in ascending order.",
    "input": "create table `research_staff` (`staff_id` integer primary key, `employer_organisation_id` integer not null, `staff_details` varchar(255) not null, foreign key (`employer_organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC"
  },
  {
    "instruction": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT max(Sales_billion), min(Sales_billion) FROM Companies WHERE Industry != \"Banking\""
  },
  {
    "instruction": "How many drivers participated in the race Australian Grand Prix held in 2009?",
    "input": "create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009"
  },
  {
    "instruction": "Where did li dong publish in 2016 ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"li dong\" AND t3.year = 2016;"
  },
  {
    "instruction": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT Fname, Lname FROM FACULTY WHERE sex = \"M\" AND Building = \"NEB\""
  },
  {
    "instruction": "How many lessons have been cancelled?",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";"
  },
  {
    "instruction": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table reviewer(rid int primary key, name text);",
    "output": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Sarah Martinez'"
  },
  {
    "instruction": "What is the primary conference of the school that has the lowest acc percent score in the competition?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));",
    "output": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1"
  },
  {
    "instruction": "What is the name of the song that was released in the most recent year?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT song_name, releasedate FROM song ORDER BY releasedate DESC LIMIT 1"
  },
  {
    "instruction": "List the names of all the physicians who prescribe Thesisin as medication.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));create table medication (code integer primary key not null, name varchar(30) not null, brand varchar(30) not null, description varchar(30) not null);",
    "output": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name = \"Thesisin\""
  },
  {
    "instruction": "Find the total population of the top 3 districts with the largest area.",
    "input": "create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3"
  },
  {
    "instruction": "Show all game ids and the number of hours played.",
    "input": "create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));",
    "output": "SELECT gameid, sum(hours_played) FROM Plays_games GROUP BY gameid"
  },
  {
    "instruction": "what are the high points of states surrounding mississippi",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"mississippi\" );"
  },
  {
    "instruction": "What is the name and capacity of the dorm with the fewest amount of amenities?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T1.dorm_name, T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "What is the minimum, average, and maximum distance of all aircrafts.",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT min(distance), avg(distance), max(distance) FROM Aircraft"
  },
  {
    "instruction": "which state is the largest city in montana in",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"montana\" ) AND state_name = \"montana\";"
  },
  {
    "instruction": "which pilot is in charge of the most number of flights?",
    "input": "create table \"flight\" (\"id\" int, \"Vehicle_Flight_number\" text, \"Date\" text, \"Pilot\" text, \"Velocity\" real, \"Altitude\" real, \"airport_id\" int, \"company_id\" int, primary key (\"id\"), foreign key (\"airport_id\") references `airport`(\"id\"), foreign key (\"company_id\") references `operate_company`(\"id\"));",
    "output": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the average price and score of wines grouped by appelation?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT avg(Price), avg(Score), Appelation FROM WINE GROUP BY Appelation"
  },
  {
    "instruction": "List all customer status codes and the number of customers having each status code.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT customer_status_code, count(*) FROM Customers GROUP BY customer_status_code;"
  },
  {
    "instruction": "what are some good restaurants in mountain view for arabic food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "What is the customer id, first and last name with most number of accounts.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the salaries and manager ids for employees who have managers?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT salary, manager_id FROM employees WHERE manager_id != \"null\""
  },
  {
    "instruction": "When does Michael Stonebraker publish the first VLDB paper ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Michael Stonebraker\" AND t4.venuename = \"VLDB\" ORDER BY t3.year;"
  },
  {
    "instruction": "What are the names of all songs produced by the artist with the first name \"Marianne\"?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.firstname = \"Marianne\""
  },
  {
    "instruction": "Count the number of members in club \"Bootup Baltimore\" whose age is below 18.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.age < 18"
  },
  {
    "instruction": "Show the names of countries that have more than one roller coaster.",
    "input": "create table \"country\" (\"Country_ID\" int, \"Name\" text, \"Population\" int, \"Area\" int, \"Languages\" text, primary key (\"Country_ID\"));create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name HAVING COUNT(*) > 1"
  },
  {
    "instruction": "Find the name of the customer who made the most orders.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "papers about Parsing in acl 2012",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"Parsing\" AND t3.year = 2012 AND t4.venuename = \"acl\";"
  },
  {
    "instruction": "List the names of all scientists sorted in alphabetical order.",
    "input": "create table scientists (ssn int, name char(30) not null, primary key (ssn));",
    "output": "SELECT name FROM scientists ORDER BY name"
  },
  {
    "instruction": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?",
    "input": "create table electoral_register (electoral_register_id integer not null, cmi_cross_ref_id integer not null, primary key (electoral_register_id), foreign key (cmi_cross_ref_id) references cmi_cross_references (cmi_cross_ref_id));create table cmi_cross_references (cmi_cross_ref_id integer not null, master_customer_id integer not null, source_system_code char(15) not null, primary key (cmi_cross_ref_id), foreign key (master_customer_id) references customer_master_index (master_customer_id));",
    "output": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax'"
  },
  {
    "instruction": "display those employees who contain a letter z to their first name and also display their last name, city.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));create table `locations` (`location_id` decimal(4, 0) not null default '0', `street_address` varchar(40) default null, `postal_code` varchar(12) default null, `city` varchar(30) not null, `state_province` varchar(25) default null, `country_id` varchar(2) default null, primary key (`location_id`), foreign key (`country_id`) references countries(`country_id`));",
    "output": "SELECT T1.first_name, T1.last_name, T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T1.first_name LIKE '%z%'"
  },
  {
    "instruction": "Show all allergies with number of students affected.",
    "input": "create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT Allergy, count(*) FROM Has_allergy GROUP BY Allergy"
  },
  {
    "instruction": "Find the name of dorms that do not have any amenity",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));",
    "output": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)"
  },
  {
    "instruction": "Show different publishers together with the number of publications they have.",
    "input": "create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));",
    "output": "SELECT Publisher, COUNT(*) FROM publication GROUP BY Publisher"
  },
  {
    "instruction": "How many gold medals has the club with the most coaches won?",
    "input": "create table \"match_result\" (\"Rank\" int, \"Club_ID\" int, \"Gold\" int, \"Big_Silver\" int, \"Small_Silver\" int, \"Bronze\" int, \"Points\" int, primary key (\"Rank\",\"Club_ID\"), foreign key (`club_id`) references `club`(`club_id`));create table \"coach\" (\"Coach_ID\" int, \"Coach_name\" text, \"Gender\" text, \"Club_ID\" int, \"Rank\" int, primary key (\"Coach_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT T1.club_id, T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Authors of papers on sensor fusion",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";"
  },
  {
    "instruction": "What are the names of body builders?",
    "input": "create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID"
  },
  {
    "instruction": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.",
    "input": "create table \"movie\" (\"movie_id\" int, \"Title\" text, \"Year\" int, \"Director\" text, \"Budget_million\" real, \"Gross_worldwide\" int, primary key(\"movie_id\"));",
    "output": "SELECT avg(budget_million), max(budget_million), min(budget_million) FROM movie WHERE YEAR < 2000"
  },
  {
    "instruction": "What is the number of ships?",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT count(*) FROM ship"
  },
  {
    "instruction": "Find the first name of students living in city PHL whose age is between 20 and 25.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT fname FROM student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25"
  },
  {
    "instruction": "Find the total number of catalog contents.",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT count(*) FROM catalog_contents"
  },
  {
    "instruction": "What is the number of movies that \" Brad Pitt \" acts in per year ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ), t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Brad Pitt\" GROUP BY t2.release_year;"
  },
  {
    "instruction": "Which location names contain the word \"film\"?",
    "input": "create table locations (location_id integer not null, location_name varchar(255), address varchar(255), other_details varchar(255), primary key (location_id));",
    "output": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\""
  },
  {
    "instruction": "Show the account name, id and the number of transactions for each account.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T2.account_name, T1.account_id, count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id"
  },
  {
    "instruction": "Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));",
    "output": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\""
  },
  {
    "instruction": "What is the maximum and mininum number of transit passengers for all airports?",
    "input": "create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT max(Transit_Passengers), min(Transit_Passengers) FROM airport"
  },
  {
    "instruction": "Return the color code and description for the product with the name 'chervil'.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT t1.color_code, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"chervil\""
  },
  {
    "instruction": "Find the name and checking balance of the account with the lowest saving balance.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T2.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1"
  },
  {
    "instruction": "List total amount of  invoice from Chicago, IL.",
    "input": "create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT sum(total) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\";"
  },
  {
    "instruction": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3"
  },
  {
    "instruction": "How many wines are there for each grape?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT count(*), Grape FROM WINE GROUP BY Grape"
  },
  {
    "instruction": "How many distinct countries are the climbers from?",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));",
    "output": "SELECT COUNT(DISTINCT Country) FROM climber"
  },
  {
    "instruction": "What is the most cited paper at sigcomm ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.citedpaperid, COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t2.venuename = \"sigcomm\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;"
  },
  {
    "instruction": "List the names of climbers in descending order of points.",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));",
    "output": "SELECT Name FROM climber ORDER BY Points DESC"
  },
  {
    "instruction": "what is largest capital",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );"
  },
  {
    "instruction": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000"
  },
  {
    "instruction": "return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t2.name = \"H. V. Jagadish\" AND t1.name = \"Divesh Srivastava\";"
  },
  {
    "instruction": "For each phone, show its names and total number of stocks.",
    "input": "create table \"phone_market\" (\"Market_ID\" int, \"Phone_ID\" text, \"Num_of_stock\" int, primary key (\"Market_ID\",\"Phone_ID\"), foreign key (\"Market_ID\") references `market`(\"Market_ID\"), foreign key (\"Phone_ID\") references `phone`(\"Phone_ID\"));create table \"phone\" (\"Name\" text, \"Phone_ID\" int, \"Memory_in_G\" int, \"Carrier\" text, \"Price\" real, primary key (\"Phone_ID\"));",
    "output": "SELECT T2.Name, sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name"
  },
  {
    "instruction": "Find the number of students for the cities where have more than one student.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*), city_code FROM student GROUP BY city_code HAVING count(*) > 1"
  },
  {
    "instruction": "what rivers run through illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = \"illinois\";"
  },
  {
    "instruction": "List the name of technicians whose team is not \"NYY\".",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Name FROM technician WHERE Team != \"NYY\""
  },
  {
    "instruction": "For each team, how many technicians are there?",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Team, COUNT(*) FROM technician GROUP BY Team"
  },
  {
    "instruction": "What are the first and last names of the customers with the 10 cheapest invoices?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10;"
  },
  {
    "instruction": "list papers by subhasis chaudhuri",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"subhasis chaudhuri\";"
  },
  {
    "instruction": "Show budget type codes and the number of documents in each budget type.",
    "input": "create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT budget_type_code, count(*) FROM Documents_with_expenses GROUP BY budget_type_code"
  },
  {
    "instruction": "List the names and phone numbers of all the distinct suppliers who supply red jeans.",
    "input": "create table `suppliers` (`supplier_id` integer primary key, `supplier_name` varchar(80), `supplier_phone` varchar(80));create table `product_suppliers` (`product_id` integer not null, `supplier_id` integer not null, `date_supplied_from` datetime not null, `date_supplied_to` datetime, `total_amount_purchased` varchar(80), `total_value_purchased` decimal(19, 4), primary key (`product_id`, `supplier_id`), foreign key (`supplier_id`) references `suppliers`(`supplier_id`), foreign key (`product_id`) references `products`(`product_id`));create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT DISTINCT T1.supplier_name, T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = \"red jeans\""
  },
  {
    "instruction": "How much amount in total were claimed in the most recently created document?",
    "input": "create table claim_headers (claim_header_id integer not null, claim_status_code char(15) not null, claim_type_code char(15) not null, policy_id integer not null, date_of_claim datetime, date_of_settlement datetime, amount_claimed decimal(20, 4), amount_piad decimal(20, 4), primary key (claim_header_id), foreign key (policy_id) references policies (policy_id));create table claims_documents (claim_id integer not null, document_type_code char(15) not null, created_by_staff_id integer, created_date integer, primary key (claim_id, document_type_code), foreign key (claim_id) references claim_headers (claim_header_id), foreign key (created_by_staff_id) references staff (staff_id));create table claims_documents (claim_id integer not null, document_type_code char(15) not null, created_by_staff_id integer, created_date integer, primary key (claim_id, document_type_code), foreign key (claim_id) references claim_headers (claim_header_id), foreign key (created_by_staff_id) references staff (staff_id));",
    "output": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
  },
  {
    "instruction": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?",
    "input": "create table `jobs` (`job_id` varchar(10) not null default '', `job_title` varchar(35) not null, `min_salary` decimal(6, 0) default null, `max_salary` decimal(6, 0) default null, primary key (`job_id`));",
    "output": "SELECT job_title, max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000"
  },
  {
    "instruction": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.resolution > 900 GROUP BY T2.artist_name HAVING count(*) >= 1"
  },
  {
    "instruction": "What is the maximum level of managers in countries that are not \"Australia\"?",
    "input": "create table \"manager\" (\"Manager_ID\" int, \"Name\" text, \"Country\" text, \"Working_year_starts\" text, \"Age\" int, \"Level\" int, primary key (\"Manager_ID\"));",
    "output": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia \""
  },
  {
    "instruction": "What are the names of products with category \"Spices\"?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT product_name FROM products WHERE product_category_code = \"Spices\""
  },
  {
    "instruction": "Which city has the least number of customers whose type code is \"Good Credit Rating\"?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT town_city FROM customers WHERE customer_type_code = \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "Find the titles of items that received any rating below 5.",
    "input": "create table `item` (`i_id` integer not null , `title` varchar(20) default null , primary key (`i_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5"
  },
  {
    "instruction": "List the description, code and the number of services for each service type.",
    "input": "create table ref_service_types (service_type_code char(15) not null, parent_service_type_code char(15), service_type_description varchar(255), primary key (service_type_code), unique (service_type_code));create table services (service_id integer not null, service_type_code char(15), workshop_group_id integer not null, product_description varchar(255), product_name varchar(255), product_price decimal(20, 4), other_product_service_details varchar(255), primary key (service_id), unique (service_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id), foreign key (service_type_code) references ref_service_types (service_type_code));",
    "output": "SELECT T1.Service_Type_Description, T2.Service_Type_Code, COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code"
  },
  {
    "instruction": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));create table roles (role_code char(15) not null, role_name varchar(255), role_description varchar(255), primary key (role_code));",
    "output": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = \"Human Resource\" OR T2.role_name = \"Manager\""
  },
  {
    "instruction": "What is the description for the CIS-220 and how many credits does it have?",
    "input": "create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT crs_credit, crs_description FROM course WHERE crs_code = 'CIS-220'"
  },
  {
    "instruction": "List the names of people that have not been on the affirmative side of debates.",
    "input": "create table \"people\" (\"People_ID\" int, \"District\" text, \"Name\" text, \"Party\" text, \"Age\" int, primary key (\"People_ID\"));create table \"debate_people\" (\"Debate_ID\" int, \"Affirmative\" int, \"Negative\" int, \"If_Affirmative_Win\" bool, primary key (\"Debate_ID\",\"Affirmative\",\"Negative\"), foreign key (\"Debate_ID\") references `debate`(\"Debate_ID\"), foreign key (\"Affirmative\") references `people`(\"People_ID\"), foreign key (\"Negative\") references `people`(\"People_ID\"));",
    "output": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)"
  },
  {
    "instruction": "What are the different names and countries of origins for all artists whose song ratings are above 9?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT DISTINCT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 9"
  },
  {
    "instruction": "What are the names of representatives in descending order of votes?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Representative_ID\" int, \"Date\" text, \"Votes\" real, \"Vote_Percent\" real, \"Seats\" real, \"Place\" real, primary key (\"Election_ID\"), foreign key (\"Representative_ID\") references `representative`(\"Representative_ID\"));create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));",
    "output": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes DESC"
  },
  {
    "instruction": "Sort the company names in descending order of the company's market value.",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC"
  },
  {
    "instruction": "give me some good places for arabic on buchanan in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "For each headquarter, what are the headquarter and how many companies are centered there?",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT headquarters, count(*) FROM company GROUP BY headquarters"
  },
  {
    "instruction": "Return the weights of entrepreneurs, ordered descending by amount of money requested.",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC"
  },
  {
    "instruction": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000"
  },
  {
    "instruction": "Find the number of amenities for each of the dorms that can accommodate more than 100 students.",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));",
    "output": "SELECT count(*), T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid WHERE T1.student_capacity > 100 GROUP BY T1.dormid"
  },
  {
    "instruction": "Return the ids and details corresponding to projects for which there are more than two documents.",
    "input": "create table projects (project_id integer not null, project_details varchar(255), primary key (project_id));create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT T1.project_id, T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING count(*) > 2"
  },
  {
    "instruction": "Show the number of customers.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT count(*) FROM Customers"
  },
  {
    "instruction": "What are the names of all airports whose elevation is between -50 and 50?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50"
  },
  {
    "instruction": "popular topics at NIPS 2015",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t3.year = 2015 AND t4.venuename = \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
  },
  {
    "instruction": "What is the name of the customer who has made the largest amount of claim in a single claim?",
    "input": "create table claim_headers (claim_header_id integer not null, claim_status_code char(15) not null, claim_type_code char(15) not null, policy_id integer not null, date_of_claim datetime, date_of_settlement datetime, amount_claimed decimal(20, 4), amount_piad decimal(20, 4), primary key (claim_header_id), foreign key (policy_id) references policies (policy_id));create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table claim_headers (claim_header_id integer not null, claim_status_code char(15) not null, claim_type_code char(15) not null, policy_id integer not null, date_of_claim datetime, date_of_settlement datetime, amount_claimed decimal(20, 4), amount_piad decimal(20, 4), primary key (claim_header_id), foreign key (policy_id) references policies (policy_id));",
    "output": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_claimed = (SELECT max(amount_claimed) FROM claim_headers)"
  },
  {
    "instruction": "What is the campus fee in the year 2000 for San Jose State University?",
    "input": "create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Jose State University\" AND t1.year = 2000"
  },
  {
    "instruction": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));",
    "output": "SELECT T3.staff_first_name, T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name, T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\""
  },
  {
    "instruction": "Find the average age of the students who have allergies with food and animal types.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"animal\")"
  },
  {
    "instruction": "Which school has the smallest amount of professors?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "which states border no other states",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );"
  },
  {
    "instruction": "Which rank is the most common among captains?",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many different songs have shared vocals?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = \"shared\""
  },
  {
    "instruction": "How many students does one classroom have?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT count(*), classroom FROM list GROUP BY classroom"
  },
  {
    "instruction": "Find how many different affiliation types there are.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT count(DISTINCT affiliation) FROM university"
  },
  {
    "instruction": "What are the average, minimum, and max ages for each of the different majors?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT major, avg(age), min(age), max(age) FROM Student GROUP BY major"
  },
  {
    "instruction": "how many parsing papers were published at ACL 2014 ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"parsing\" AND t3.year = 2014 AND t4.venuename = \"ACL\";"
  },
  {
    "instruction": "what are the first name and last name of all candidates?",
    "input": "create table candidates (candidate_id integer not null , candidate_details varchar(255), primary key (candidate_id), foreign key (candidate_id) references people (person_id));create table people (person_id integer not null, first_name varchar(255), middle_name varchar(255), last_name varchar(255), cell_mobile_number varchar(40), email_address varchar(40), login_name varchar(40), password varchar(40), primary key (person_id));",
    "output": "SELECT T2.first_name, T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
  },
  {
    "instruction": "Which city does staff with first name as Janessa and last name as Sawayn live?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
  },
  {
    "instruction": "How many employees do we have?",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT count(*) FROM Employees"
  },
  {
    "instruction": "List all the login names and family names of course author and tutors.",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));",
    "output": "SELECT login_name, family_name FROM Course_Authors_and_Tutors"
  },
  {
    "instruction": "List the hosts of performances in ascending order of attendance.",
    "input": "create table \"performance\" (\"Performance_ID\" real, \"Date\" text, \"Host\" text, \"Location\" text, \"Attendance\" int, primary key (\"Performance_ID\"));",
    "output": "SELECT HOST FROM performance ORDER BY Attendance ASC"
  },
  {
    "instruction": "How many lessons did the customer Ryan Goodwin complete?",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";"
  },
  {
    "instruction": "How many users are there?",
    "input": "create table `useracct` (`u_id` integer not null , `name` varchar(128) default null , primary key (`u_id`));",
    "output": "SELECT count(*) FROM useracct"
  },
  {
    "instruction": "Find the name of account that has the lowest total checking and saving balance.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance LIMIT 1"
  },
  {
    "instruction": "What are the names of parties that have both delegates on \"Appropriations\" committee and",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Economic Matters\""
  },
  {
    "instruction": "papers cited by at least 5 papers",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid = t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid ) >= 5;"
  },
  {
    "instruction": "What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));",
    "output": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND faculty > (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = \"Orange\")"
  },
  {
    "instruction": "who authored papers at NIPS ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"NIPS\";"
  },
  {
    "instruction": "how many papers does David M. Blei have in AISTATS ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"David M. Blei\" AND t4.venuename = \"AISTATS\";"
  },
  {
    "instruction": "papers by authors Peter Mertens and Dina Barbian",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "List three countries which are the origins of the least players.",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);",
    "output": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;"
  },
  {
    "instruction": "Sort all the distinct product names in alphabetical order.",
    "input": "create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT DISTINCT product_name FROM product ORDER BY product_name"
  },
  {
    "instruction": "What is the year and semester with the most courses?",
    "input": "create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);",
    "output": "SELECT semester, YEAR FROM SECTION GROUP BY semester, YEAR ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the id, forename and number of races of all drivers who have at least participated in two races?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT T1.driverid, T1.forename, count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*) >= 2"
  },
  {
    "instruction": "What is the unit price of the tune \"Fast As a Shark\"?",
    "input": "create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";"
  },
  {
    "instruction": "How many courses have more than 2 credits?",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT count(*) FROM COURSE WHERE Credits > 2"
  },
  {
    "instruction": "Find the number of voting records in total.",
    "input": "create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT count(*) FROM VOTING_RECORD"
  },
  {
    "instruction": "return me the keywords of \" Making database systems usable \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT t1.keyword FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t2 ON t2.pid = t3.pid WHERE t2.title = \"Making database systems usable\";"
  },
  {
    "instruction": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\""
  },
  {
    "instruction": "What are the different product names for products that have the 'warm' characteristic:?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"warm\""
  },
  {
    "instruction": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000"
  },
  {
    "instruction": "How many songs have a lead vocal?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = \"lead\""
  },
  {
    "instruction": "Return the name of the heaviest entrepreneur.",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of all reviewers that have rated 3 or more movies?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table reviewer(rid int primary key, name text);",
    "output": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT(*) >= 3"
  },
  {
    "instruction": "List the themes of parties in ascending order of number of hosts.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC"
  },
  {
    "instruction": "In which conferences does Daniella Coelho typically publish ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Daniella Coelho\";"
  },
  {
    "instruction": "Which papers cite Daniel Jurafsky ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Daniel Jurafsky\";"
  },
  {
    "instruction": "Which apartment type code is the most common among apartments with more than one bathroom?",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Give me the name and description of the document type code RV.",
    "input": "create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));",
    "output": "SELECT document_type_name, document_type_description FROM Ref_document_types WHERE document_type_code = \"RV\""
  },
  {
    "instruction": "What are the names of the storms that affected both the regions of Afghanistan and Albania?",
    "input": "create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'"
  },
  {
    "instruction": "What are the names of the tourist attractions Vincent and Marcelle visit?",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Marcelle\""
  },
  {
    "instruction": "What are the best NLP conferences ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid ), t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"NLP\" GROUP BY t3.venueid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;"
  },
  {
    "instruction": "What are the department names and how many employees work in each of them?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));",
    "output": "SELECT department_name, COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name"
  },
  {
    "instruction": "Show the flight number of flights with three lowest distances.",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"
  },
  {
    "instruction": "how many rivers do not traverse the state with the capital albany",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital = \"albany\" );"
  },
  {
    "instruction": "Find the name of customer who has the lowest credit score.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1"
  },
  {
    "instruction": "For each manufacturer name, what are the names and prices of their most expensive product?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT T1.Name, max(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name"
  },
  {
    "instruction": "Find the name of physicians who are in charge of more than one patient.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));",
    "output": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count(*) > 1"
  },
  {
    "instruction": "What are the names and headquarters of all companies ordered by descending market value?",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT company, headquarters FROM company ORDER BY market_value DESC"
  },
  {
    "instruction": "How many members are not living in Hartford?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Membership_card\" text, \"Age\" int, \"Time_of_purchase\" int, \"Level_of_membership\" int, \"Address\" text, primary key (\"Member_ID\"));",
    "output": "SELECT count(*) FROM member WHERE address != 'Hartford'"
  },
  {
    "instruction": "Show names of parties that does not have any members.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));",
    "output": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)"
  },
  {
    "instruction": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.",
    "input": "create table \"swimmer\" (\"ID\" int, \"name\" text, \"Nationality\" text, \"meter_100\" real, \"meter_200\" text, \"meter_300\" text, \"meter_400\" text, \"meter_500\" text, \"meter_600\" text, \"meter_700\" text, \"Time\" text, primary key (\"ID\"));create table \"record\" (\"ID\" int, \"Result\" text, \"Swimmer_ID\" int, \"Event_ID\" int, primary key (\"Swimmer_ID\",\"Event_ID\"), foreign key (`event_id`) references `event`(`id`), foreign key (`swimmer_id`) references `swimmer`(`id`));",
    "output": "SELECT t1.name, t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY t2.swimmer_id HAVING count(*) > 1"
  },
  {
    "instruction": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
    "input": "create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT Status FROM roller_coaster WHERE LENGTH > 3300 OR Height > 100"
  },
  {
    "instruction": "How many companies are headquartered in the US?",
    "input": "create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));",
    "output": "SELECT count(*) FROM company WHERE Headquarters = 'USA'"
  },
  {
    "instruction": "What is the name of the airline with the most routes?",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the team of the player of the highest age.",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));",
    "output": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1"
  },
  {
    "instruction": "Who publishes in sensor fusion ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";"
  },
  {
    "instruction": "Find the first names of professors who are not playing Canoeing or Kayaking.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));create table activity (actid integer primary key, activity_name varchar(25));",
    "output": "SELECT lname FROM faculty WHERE rank = 'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'"
  },
  {
    "instruction": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Marcelle\""
  },
  {
    "instruction": "List the names of all distinct wines in alphabetical order.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT Name FROM WINE ORDER BY Name"
  },
  {
    "instruction": "What is the paper about convolution from brian curless ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"brian curless\" AND t5.keyphrasename = \"convolution\";"
  },
  {
    "instruction": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\""
  },
  {
    "instruction": "What is the number of distinct publication dates?",
    "input": "create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));",
    "output": "SELECT COUNT (DISTINCT Publication_Date) FROM publication"
  },
  {
    "instruction": "How many budget record has a budget amount smaller than the invested amount?",
    "input": "create table \"budget\" (\"School_id\" int, \"Year\" int, \"Budgeted\" int, \"total_budget_percent_budgeted\" real, \"Invested\" int, \"total_budget_percent_invested\" real, \"Budget_invested_percent\" text, primary key(\"School_id\",\"YEAR\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));",
    "output": "SELECT count(*) FROM budget WHERE budgeted < invested"
  },
  {
    "instruction": "Show the cinema name and location for cinemas with capacity above average.",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT name, LOCATION FROM cinema WHERE capacity > (SELECT avg(capacity) FROM cinema)"
  },
  {
    "instruction": "What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table reviewer(rid int primary key, name text);",
    "output": "SELECT T3.name, T2.title, T1.stars, T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID ORDER BY T3.name, T2.title, T1.stars"
  },
  {
    "instruction": "What papers has brian curless written on convolution ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"brian curless\" AND t5.keyphrasename = \"convolution\";"
  },
  {
    "instruction": "For each delegate, find the names of the party they are part of.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T1.Delegate, T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID"
  },
  {
    "instruction": "What are the names of representatives with more than 10000 votes in election?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Representative_ID\" int, \"Date\" text, \"Votes\" real, \"Vote_Percent\" real, \"Seats\" real, \"Place\" real, primary key (\"Election_ID\"), foreign key (\"Representative_ID\") references `representative`(\"Representative_ID\"));create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));",
    "output": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000"
  },
  {
    "instruction": "what are the major cities in the smallest state in the us",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT city_name FROM city WHERE population > 150000 AND state_name = ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );"
  },
  {
    "instruction": "What are the usernames and passwords of users that have the most common role?",
    "input": "create table `users` (`user_id` integer primary key, `role_code` varchar(15) not null, `user_name` varchar(40), `user_login` varchar(40), `password` varchar(40), foreign key (`role_code`) references `roles`(`role_code`));",
    "output": "SELECT user_name, password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the number of papers published by the institution \"University of Pennsylvania\".",
    "input": "create table papers (paperid integer, title text, primary key (paperid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Pennsylvania\""
  },
  {
    "instruction": "What are the names of all colleges with a larger enrollment than the largest college in Florida?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT cName FROM college WHERE enr > (SELECT max(enr) FROM college WHERE state = 'FL')"
  },
  {
    "instruction": "What is the first and last name of the employee who reports to Nancy Edwards?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";"
  },
  {
    "instruction": "What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.lastname = \"Heilo\" AND T2.title = \"Der Kapitan\""
  },
  {
    "instruction": "How many lesson does customer with first name Ray took?",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Ray\""
  },
  {
    "instruction": "Parsing papers using Jeopardy! Questions published at ACL 2014",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid = t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid = t3.paperid JOIN paper AS t2 ON t2.paperid = t3.paperid JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid = t1.keyphraseid WHERE t5.datasetname = \"Jeopardy! Questions\" AND t1.keyphrasename = \"Parsing\" AND t2.year = 2014 AND t6.venuename = \"ACL\";"
  },
  {
    "instruction": "How many different products correspond to each order id?",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT order_id, count(DISTINCT product_id) FROM Order_items GROUP BY order_id"
  },
  {
    "instruction": "Which vocal type has the band mate with first name \"Solveig\" played the most?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "which states have a major city named austin",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE city_name = \"austin\" AND population > 150000;"
  },
  {
    "instruction": "which states does the longest river cross",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );"
  },
  {
    "instruction": "how high is guadalupe peak",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_elevation FROM highlow WHERE highest_point = \"guadalupe peak\";"
  },
  {
    "instruction": "For the problem with id 10, return the ids and dates of its problem logs.",
    "input": "create table `problem_log` (`problem_log_id` integer primary key, `assigned_to_staff_id` integer not null, `problem_id` integer not null, `problem_category_code` varchar(20) not null, `problem_status_code` varchar(20) not null, `log_entry_date` datetime, `log_entry_description` varchar(255), `log_entry_fix` varchar(255), `other_log_details` varchar(255), foreign key (`problem_category_code`) references `problem_category_codes`(`problem_category_code`), foreign key (`assigned_to_staff_id`) references `staff`(`staff_id`), foreign key (`problem_id`) references `problems`(`problem_id`), foreign key (`problem_status_code`) references `problem_status_codes`(`problem_status_code`));",
    "output": "SELECT problem_log_id, log_entry_date FROM problem_log WHERE problem_id = 10"
  },
  {
    "instruction": "Find the names of all instructors in computer science department",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'"
  },
  {
    "instruction": "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);",
    "output": "SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
  },
  {
    "instruction": "List the age of all music artists.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));",
    "output": "SELECT Age FROM artist"
  },
  {
    "instruction": "how high is the highest point in the largest state",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name WHERE t1.area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
  },
  {
    "instruction": "Find each target user's name and average trust score.",
    "input": "create table `useracct` (`u_id` integer not null , `name` varchar(128) default null , primary key (`u_id`));create table \"trust\" (`source_u_id` integer not null, `target_u_id` integer not null, `trust` integer not null, foreign key (`source_u_id`) references `useracct`(`u_id`), foreign key (`target_u_id`) references `useracct`(`u_id`));",
    "output": "SELECT T1.name, avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id"
  },
  {
    "instruction": "what are the names and classes of the ships that do not have any captain yet?",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT name, CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)"
  },
  {
    "instruction": "For each country, what is the average elevation of that country's airports?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT avg(elevation), country FROM airports GROUP BY country"
  },
  {
    "instruction": "For each station, find its latitude and the minimum duration of trips that ended at the station.",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT T1.name, T1.lat, min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id"
  },
  {
    "instruction": "what is the tallest mountain in the united states",
    "input": "create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT mountain_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain );"
  },
  {
    "instruction": "What are the countries that have at least two perpetrators?",
    "input": "create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "what is the state with the largest population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MAX ( density ) FROM state );"
  },
  {
    "instruction": "What are the name of the players who received a card in descending order of the hours of training?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT pName FROM Player WHERE yCard = 'yes' ORDER BY HS DESC"
  },
  {
    "instruction": "which neighbourhood has the most number of businesses in Madison",
    "input": "create table \"neighbourhood\" (\"id\" int, \"business_id\" text, \"neighbourhood_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id = t2.business_id WHERE t2.city = \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;"
  },
  {
    "instruction": "Return the positions of players on the team Ryley Goldner.",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));create table `team` (`team_id` int, `name` text, primary key (`team_id`));",
    "output": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Ryley Goldner\""
  },
  {
    "instruction": "Show the transaction type descriptions and dates if the share count is smaller than 10.",
    "input": "create table `ref_transaction_types` (`transaction_type_code` varchar(10) primary key, `transaction_type_description` varchar(80) not null);create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT T1.transaction_type_description, T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code WHERE T2.share_count < 10"
  },
  {
    "instruction": "How many documents can one grant have at most? List the grant id and number.",
    "input": "create table `documents` (`document_id` integer primary key, `document_type_code` varchar(10), `grant_id` integer not null, `sent_date` datetime not null, `response_received_date` datetime not null, `other_details` varchar(255) not null, foreign key (`document_type_code`) references `document_types`(`document_type_code`), foreign key (`grant_id`) references `grants`(`grant_id`));",
    "output": "SELECT grant_id, count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "give me the best american restaurant in the bay area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" );"
  },
  {
    "instruction": "How many students play video games?",
    "input": "create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));",
    "output": "SELECT count(DISTINCT StuID) FROM Plays_games"
  },
  {
    "instruction": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
    "input": "create table `organizations` (`organization_id` integer primary key, `date_formed` datetime, `organization_name` varchar(255), `uk_vat_number` varchar(20));create table `organization_contact_individuals` (`individual_id` integer not null, `organization_id` integer not null, `date_contact_from` datetime not null, `date_contact_to` datetime, primary key (`individual_id`,`organization_id`), foreign key (`organization_id`) references `organizations`(`organization_id`), foreign key (`individual_id`) references `individuals`(`individual_id`));create table `individuals` (`individual_id` integer primary key, `individual_first_name` varchar(80), `individual_middle_name` varchar(80), `inidividual_phone` varchar(80), `individual_email` varchar(80), `individual_address` varchar(255), `individual_last_name` varchar(80));",
    "output": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1"
  },
  {
    "instruction": "What is the investor that has invested in the most number of entrepreneurs?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many rooms are located for each block code?",
    "input": "create table block (blockfloor integer not null, blockcode integer not null, primary key(blockfloor, blockcode));create table room (roomnumber integer primary key not null, roomtype varchar(30) not null, blockfloor integer not null, blockcode integer not null, unavailable boolean not null, constraint fk_room_block_pk foreign key(blockfloor, blockcode) references block(blockfloor, blockcode));",
    "output": "SELECT count(*), T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockcode"
  },
  {
    "instruction": "Find all the songs produced by artists with first name \"Marianne\".",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.firstname = \"Marianne\""
  },
  {
    "instruction": "What are the first and last names of all customers who lived in Lockmanfurt?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT T1.first_name, T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";"
  },
  {
    "instruction": "Show the guest first names, start dates, and end dates of all the apartment bookings.",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table guests (guest_id integer not null , gender_code char(1), guest_first_name varchar(80), guest_last_name varchar(80), date_of_birth datetime, primary key (guest_id), unique (guest_id));",
    "output": "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id"
  },
  {
    "instruction": "Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail.",
    "input": "create table `products` (`product_id` integer primary key, `product_details` varchar(255));",
    "output": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\""
  },
  {
    "instruction": "what city in the united states has the highest population density",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );"
  },
  {
    "instruction": "name the major lakes in michigan",
    "input": "create table `lake` (`lake_name` text , `area` double default null , `country_name` varchar(3) not null default '' , `state_name` text);",
    "output": "SELECT lake_name FROM lake WHERE area > 750 AND state_name = \"michigan\";"
  },
  {
    "instruction": "What are the first names of all the students aged above 22?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Fname FROM STUDENT WHERE Age > 22"
  },
  {
    "instruction": "How many employees do we have?",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT count(*) FROM Employees;"
  },
  {
    "instruction": "Show the players and the years played.",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Years_Played\" text, \"Total_WL\" text, \"Singles_WL\" text, \"Doubles_WL\" text, \"Team\" int, primary key (\"Player_ID\"), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT Player, Years_Played FROM player"
  },
  {
    "instruction": "which capitals are in the states that border texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border WHERE t1.state_name = \"texas\";"
  },
  {
    "instruction": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_name, access_count FROM documents ORDER BY document_name"
  },
  {
    "instruction": "How old are the students with allergies to food and animal types on average?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"animal\")"
  },
  {
    "instruction": "which state has the lowest elevation",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Show the id of each employee and the number of document destruction authorised by that employee.",
    "input": "create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT Destruction_Authorised_by_Employee_ID, count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID"
  },
  {
    "instruction": "List the names of studios that have at least two films.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "Find the person who has exactly one friend.",
    "input": "create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*) = 1"
  },
  {
    "instruction": "How many products have prices of at least 180?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT count(*) FROM products WHERE price >= 180"
  },
  {
    "instruction": "what conferences are related to Trophic Cascade",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Trophic Cascade\";"
  },
  {
    "instruction": "List name and damage for all storms in a descending order of max speed.",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT name, damage_millions_USD FROM storm ORDER BY max_speed DESC"
  },
  {
    "instruction": "What campuses opened before 1800?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE YEAR < 1800"
  },
  {
    "instruction": "Show all cities along with the number of drama workshop groups in each city.",
    "input": "create table addresses (address_id varchar(100) not null, line_1 varchar(255), line_2 varchar(255), city_town varchar(255), state_county varchar(255), other_details varchar(255), primary key (address_id), unique (address_id));create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT T1.City_Town, count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town"
  },
  {
    "instruction": "Liwen Xiong 's papers in 2015 ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Liwen Xiong\" AND t3.year = 2015;"
  },
  {
    "instruction": "A list of the top 5 countries by number of invoices. List country name and number of invoices.",
    "input": "create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT billing_country, COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;"
  },
  {
    "instruction": "What is the organisation type and id of the organisation which has the most number of research staff?",
    "input": "create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));create table `research_staff` (`staff_id` integer primary key, `employer_organisation_id` integer not null, `staff_details` varchar(255) not null, foreign key (`employer_organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT T1.organisation_type, T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what are the event details of the services that have the type code 'Marriage'?",
    "input": "create table events (event_id integer not null, service_id integer not null, event_details varchar(255), primary key (event_id), foreign key (service_id) references services (service_id));create table services (service_id integer not null, service_type_code char(15) not null, primary key (service_id));",
    "output": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Marriage'"
  },
  {
    "instruction": "what are the population of california",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM state WHERE state_name = \"california\";"
  },
  {
    "instruction": "Find the name of the teacher who teaches the largest number of students.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT T2.firstname, T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom GROUP BY T2.firstname, T2.lastname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the the customer details and id for the customers who had more than one policy.",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table customer_policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date date, end_date date, primary key (policy_id), foreign key (customer_id) references customers (customer_id));",
    "output": "SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING count(*) > 1"
  },
  {
    "instruction": "What is the minimum snatch score?",
    "input": "create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));",
    "output": "SELECT min(snatch) FROM body_builder"
  },
  {
    "instruction": "How many students got accepted after the tryout?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT count(*) FROM tryout WHERE decision = 'yes'"
  },
  {
    "instruction": "Find papers whose second author has last name \"Turon\" and is affiliated with an institution in the country \"USA\".",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"USA\" AND t2.authorder = 2 AND t1.lname = \"Turon\""
  },
  {
    "instruction": "Show the number of trains",
    "input": "create table \"train\" (\"Train_ID\" int, \"Name\" text, \"Time\" text, \"Service\" text, primary key (\"Train_ID\"));",
    "output": "SELECT count(*) FROM train"
  },
  {
    "instruction": "How many people reviewed restaurant \" Vintner Grill \" in 2010 ?",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.name = \"Vintner Grill\" AND t2.category_name = \"category_category_name0\" AND t3.year = 2010;"
  },
  {
    "instruction": "Show all dates of transactions whose type code is \"SALE\".",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\""
  },
  {
    "instruction": "Please show the songs that have result \"nominated\" at music festivals.",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T1.Result = \"Nominated\""
  },
  {
    "instruction": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\""
  },
  {
    "instruction": "What is the average and maximum number of total passengers for train stations in London or Glasgow?",
    "input": "create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));",
    "output": "SELECT avg(total_passengers), max(total_passengers) FROM station WHERE LOCATION = 'London' OR LOCATION = 'Glasgow'"
  },
  {
    "instruction": "how many jamerican cuisine are there in santa cruz county ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.county = \"santa cruz county\" AND t1.name = \"jamerican cuisine\";"
  },
  {
    "instruction": "hot topics at NIPS 2015",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t3.year = 2015 AND t4.venuename = \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
  },
  {
    "instruction": "What kind of decor has the least number of reservations?",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;"
  },
  {
    "instruction": "Find the last names of teachers teaching in classroom 109.",
    "input": "create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT lastname FROM teachers WHERE classroom = 109"
  },
  {
    "instruction": "What is the name of the youngest male?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT name FROM Person WHERE gender = 'male' AND age = (SELECT min(age) FROM person WHERE gender = 'male' )"
  },
  {
    "instruction": "How many students have a food allergy?",
    "input": "create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = \"food\""
  },
  {
    "instruction": "tell me what cities are in texas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE state_name = \"texas\";"
  },
  {
    "instruction": "Keyphrases used by Christof Dallermassl in 2000",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"Christof Dallermassl\" AND t3.year = 2000;"
  },
  {
    "instruction": "List the names of all songs that have 4 minute duration or are in English.",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages = \"english\""
  },
  {
    "instruction": "Show each student's first name and last name.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT firstname, lastname FROM list"
  },
  {
    "instruction": "Show the apartment numbers, start dates, and end dates of all the apartment bookings.",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT T2.apt_number, T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id"
  },
  {
    "instruction": "How many employees live in Georgia?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";"
  },
  {
    "instruction": "What are the last names of students in room 111?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT lastname FROM list WHERE classroom = 111"
  },
  {
    "instruction": "What is the owner of the channel that has the highest rating ratio?",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));",
    "output": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1"
  },
  {
    "instruction": "how many states have a higher point than the highest point of the state with the largest capital city in the us",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( state_name ) FROM highlow WHERE highest_elevation > ( SELECT highest_elevation FROM highlow WHERE state_name = ( SELECT state_name FROM state WHERE capital = ( SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city ) ) ) );"
  },
  {
    "instruction": "who has written the most syntactic parsing papers ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "what are the last names of the teachers who teach grade 5?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 5"
  },
  {
    "instruction": "In which year were most departments established?",
    "input": "create table \"department\" (\"Department_ID\" int, \"Name\" text, \"Creation\" text, \"Ranking\" int, \"Budget_in_Billions\" real, \"Num_Employees\" real, primary key (\"Department_ID\"));",
    "output": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the number of movies featuring \" Shahab Hosseini \" ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Shahab Hosseini\";"
  },
  {
    "instruction": "How many people reviewed the restaurant \" Texas de Brazil \" in Dallas Texas ?",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.city = \"Dallas\" AND t1.name = \"Texas de Brazil\" AND t1.state = \"Texas\" AND t2.category_name = \"restaurant\";"
  },
  {
    "instruction": "What is the most common hometown of gymnasts?",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?",
    "input": "create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT order_id, customer_id FROM customer_orders WHERE order_status_code = \"Cancelled\" ORDER BY order_date"
  },
  {
    "instruction": "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";"
  },
  {
    "instruction": "how many rivers are called colorado",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( river_name ) FROM river WHERE river_name = \"colorado\";"
  },
  {
    "instruction": "How many regions do we have?",
    "input": "create table \"region\" (\"Region_ID\" int, \"Region_name\" text, \"Date\" text, \"Label\" text, \"Format\" text, \"Catalogue\" text, primary key (\"Region_ID\"));",
    "output": "SELECT count(*) FROM region"
  },
  {
    "instruction": "What is the payment method code and party phone of the party with the email 'enrico09@example.com'?",
    "input": "create table `parties` (`party_id` integer primary key, `payment_method_code` varchar(15) not null, `party_phone` varchar(80), `party_email` varchar(80));",
    "output": "SELECT payment_method_code, party_phone FROM parties WHERE party_email = \"enrico09@example.com\""
  },
  {
    "instruction": "What are the ages of all of Zach's friends who are in the longest relationship?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Zach' AND T2.year = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')"
  },
  {
    "instruction": "Show the game name that has most number of hours played.",
    "input": "create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1"
  },
  {
    "instruction": "Which district has the least area?",
    "input": "create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1"
  },
  {
    "instruction": "What are the ids and names of the medicine that can interact with two or more enzymes?",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));",
    "output": "SELECT T1.id, T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count(*) >= 2"
  },
  {
    "instruction": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%'"
  },
  {
    "instruction": "Who is the nominee who has been nominated for the most musicals?",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "List all 5 star Italian restaurant",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.rating = 5 AND t2.category_name = \"Italian\" AND t3.category_name = \"restaurant\";"
  },
  {
    "instruction": "what is the name of the instructor who is in Statistics department and earns the lowest salary?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1"
  },
  {
    "instruction": "How many clubs are located at \"HHH\"?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT count(*) FROM club WHERE clublocation = \"HHH\""
  },
  {
    "instruction": "Tell me the name of the most pricy product.",
    "input": "create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of all video games that are collectible cards?",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT gname FROM Video_games WHERE gtype = \"Collectible card game\""
  },
  {
    "instruction": "what are the populations of the states through which the mississippi river run",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );"
  },
  {
    "instruction": "Which orders have shipment after 2000-01-01? Give me the order ids.",
    "input": "create table `shipments` (`shipment_id` integer primary key, `order_id` integer not null, `invoice_number` integer not null, `shipment_tracking_number` varchar(80), `shipment_date` datetime, `other_shipment_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`invoice_number`) references `invoices`(`invoice_number`));",
    "output": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\""
  },
  {
    "instruction": "Show the names of artworks in ascending order of the year they are nominated in.",
    "input": "create table nomination (\"Artwork_ID\" int, \"Festival_ID\" int, \"Result\" text, primary key (\"Artwork_ID\",\"Festival_ID\"), foreign key (\"Artwork_ID\") references `artwork`(\"Artwork_ID\"), foreign key (\"Festival_ID\") references `festival_detail`(\"Festival_ID\"));create table artwork (\"Artwork_ID\" int, \"Type\" text, \"Name\" text, primary key (\"Artwork_ID\"));create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));",
    "output": "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID ORDER BY T3.Year"
  },
  {
    "instruction": "What are the names of all movies directed by Steven Spielberg?",
    "input": "create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
  },
  {
    "instruction": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "return me all the keywords in Databases area .",
    "input": "create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));create table \"domain_keyword\" (\"did\" int, \"kid\" int, primary key (\"did\", \"kid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"), foreign key(\"did\") references \"domain\"(\"did\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));",
    "output": "SELECT t1.keyword FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did = t2.did JOIN keyword AS t1 ON t1.kid = t2.kid WHERE t3.name = \"Databases\";"
  },
  {
    "instruction": "how long is rio grande",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT LENGTH FROM river WHERE river_name = \"rio grande\";"
  },
  {
    "instruction": "What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?",
    "input": "create table salary (year integer, team_id text, league_id text, player_id text, salary integer);create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);create table salary (year integer, team_id text, league_id text, player_id text, salary integer);create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'"
  },
  {
    "instruction": "What are the names of the songs whose rating is below the rating of all songs in English?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT song_name FROM song WHERE rating < (SELECT min(rating) FROM song WHERE languages = 'english')"
  },
  {
    "instruction": "Find the states where have some college students in tryout.",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName"
  },
  {
    "instruction": "how many states border at least one other state",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( DISTINCT state_name ) FROM border_info;"
  },
  {
    "instruction": "List all the movies directed by \" Asghar Farhadi \" in which \" Taraneh Alidoosti \" played",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));",
    "output": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN directed_by AS t2 ON t4.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t1.name = \"Taraneh Alidoosti\" AND t3.name = \"Asghar Farhadi\";"
  },
  {
    "instruction": "character recognition papers before 2010",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"character recognition\" AND t3.year < 2010;"
  },
  {
    "instruction": "how many papers about deep learning ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\";"
  },
  {
    "instruction": "What are the names of all people who are friends with Alice for the shortest amount of time?",
    "input": "create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT name FROM PersonFriend WHERE friend = 'Alice' AND YEAR = (SELECT min(YEAR) FROM PersonFriend WHERE friend = 'Alice')"
  },
  {
    "instruction": "Which department has the most professors with a Ph.D.?",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.dept_name, T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the names of pilots from team \"Bradley\" or \"Fordham\".",
    "input": "create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));",
    "output": "SELECT Pilot_name FROM pilot WHERE Team = \"Bradley\" OR Team = \"Fordham\""
  },
  {
    "instruction": "Count the number of games taken place in park \"Columbia Park\" in 1907.",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));create table park (park_id text, park_name text, park_alias text, city text, state text, country text);",
    "output": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';"
  },
  {
    "instruction": "Count the number of rooms that are not in the Lamberton building.",
    "input": "create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));",
    "output": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'"
  },
  {
    "instruction": "List the all the distinct names of the products with the characteristic name 'warm'.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"warm\""
  },
  {
    "instruction": "Show the draft pick numbers and draft classes of players whose positions are defenders.",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE POSITION = \"Defender\""
  },
  {
    "instruction": "What is the total share (in percent) of all the channels owned by CCTV?",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));",
    "output": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER = 'CCTV'"
  },
  {
    "instruction": "What is the id and name of the enzyme that can interact with the most medicines as an activator?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));",
    "output": "SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Return the total points of the gymnast with the lowest age.",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
  },
  {
    "instruction": "What are the first names of all students who got a grade C in a class?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));",
    "output": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C'"
  },
  {
    "instruction": "how many states does the missouri river flow through",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( traverse ) FROM river WHERE river_name = \"missouri\";"
  },
  {
    "instruction": "Find the average number of customers in all banks of Utah state.",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT avg(no_of_customers) FROM bank WHERE state = 'Utah'"
  },
  {
    "instruction": "What is the average rating star for each reviewer?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table reviewer(rid int primary key, name text);",
    "output": "SELECT T2.name, avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name"
  },
  {
    "instruction": "Find all the female actors born in \" New York City \" after 1980",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT name FROM actor WHERE birth_city = \"New York City\" AND birth_year > 1980 AND gender = \"female\";"
  },
  {
    "instruction": "What is the average number of hosts for parties?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT avg(Number_of_hosts) FROM party"
  },
  {
    "instruction": "For each denomination, return the denomination and the count of schools with that denomination.",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT Denomination, COUNT(*) FROM school GROUP BY Denomination"
  },
  {
    "instruction": "How many distinct complaint type codes are there in the database?",
    "input": "create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(DISTINCT complaint_type_code) FROM complaints"
  },
  {
    "instruction": "What are the ids of the candidates that have an outcome code of Pass?",
    "input": "create table candidate_assessments (candidate_id integer not null, qualification char(15) not null, assessment_date datetime not null, asessment_outcome_code char(15) not null, primary key (candidate_id, qualification), foreign key (candidate_id) references candidates (candidate_id));",
    "output": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\""
  },
  {
    "instruction": "What is the number of actors in the movie \" Saving Private Ryan \" ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t3.title = \"Saving Private Ryan\";"
  },
  {
    "instruction": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT city FROM branch WHERE open_year = 2001 AND membership_amount > 100"
  },
  {
    "instruction": "What papers cite Daniel Jurafsky ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Daniel Jurafsky\";"
  },
  {
    "instruction": "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, foreign key (`order_id`) references `customer_orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));create table `product_suppliers` (`product_id` integer not null, `supplier_id` integer not null, `date_supplied_from` datetime not null, `date_supplied_to` datetime, `total_amount_purchased` varchar(80), `total_value_purchased` decimal(19, 4), primary key (`product_id`, `supplier_id`), foreign key (`supplier_id`) references `suppliers`(`supplier_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*) > 3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased) > 80000"
  },
  {
    "instruction": "What are the names of scientists who are assigned to any project?",
    "input": "create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table scientists (ssn int, name char(30) not null, primary key (ssn));",
    "output": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist = T2.ssn"
  },
  {
    "instruction": "Which delegates are from counties with population smaller than 100000?",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population < 100000"
  },
  {
    "instruction": "What are the birth places that are shared by at least two people?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));",
    "output": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "How many states have smaller colleges than average?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT count(DISTINCT state) FROM college WHERE enr < (SELECT avg(enr) FROM college)"
  },
  {
    "instruction": "who published papers in CVPR 2007",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t2.paperid ), t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2007 AND t3.venuename = \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;"
  },
  {
    "instruction": "what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT lname, sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = \"Works of Widenius\")"
  },
  {
    "instruction": "Find the description of the most popular role among the users that have logged in.",
    "input": "create table `roles` (`role_code` varchar(15) primary key, `role_description` varchar(80));create table `users` (`user_id` integer primary key, `role_code` varchar(15) not null, `user_name` varchar(40), `user_login` varchar(40), `password` varchar(40), foreign key (`role_code`) references `roles`(`role_code`));",
    "output": "SELECT role_description FROM ROLES WHERE role_code = (SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "Find the first name of students who are living in the dorm that has most number of amenities.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "What are the categories of music festivals for which there have been more than 1 music festival?",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));",
    "output": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*) > 1"
  },
  {
    "instruction": "What is the shop name corresponding to the shop that opened in the most recent year?",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1"
  },
  {
    "instruction": "Which players are from Indonesia?",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = \"Indonesia\""
  },
  {
    "instruction": "How many distinct allergies are there?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT count(DISTINCT allergytype) FROM Allergy_type"
  },
  {
    "instruction": "What are the ids and details for each project?",
    "input": "create table projects (project_id integer not null, project_details varchar(255), primary key (project_id));",
    "output": "SELECT project_id, project_details FROM Projects"
  },
  {
    "instruction": "return me the paper with the most citations .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT title FROM publication ORDER BY citation_num DESC LIMIT 1;"
  },
  {
    "instruction": "What are the names, dates active, and number of deaths for storms that had 1 or more death?",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT name, dates_active, number_deaths FROM storm WHERE number_deaths >= 1"
  },
  {
    "instruction": "What is the name of member in charge of greatest number of events?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));create table \"party_events\" (\"Event_ID\" int, \"Event_Name\" text, \"Party_ID\" int, \"Member_in_charge_ID\" int, primary key (\"Event_ID\"), foreign key (`party_id`) references `party`(`party_id`), foreign key (`member_in_charge_id`) references `member`(`member_id`));",
    "output": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of statements.",
    "input": "create table statements (statement_id integer not null, statement_details varchar(255), primary key (statement_id), foreign key (statement_id) references documents (document_id));",
    "output": "SELECT count(*) FROM Statements"
  },
  {
    "instruction": "What is the number of invoices and total money billed in them from CA?",
    "input": "create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT billing_state, COUNT(*), SUM(total) FROM invoices WHERE billing_state = \"CA\";"
  },
  {
    "instruction": "How many classes are held in each department?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT count(*), dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code"
  },
  {
    "instruction": "Show the hometowns shared by people older than 23 and younger than 20.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20"
  },
  {
    "instruction": "Papers about chi",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"chi\";"
  },
  {
    "instruction": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.",
    "input": "create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math' ORDER BY T3.tot_cred"
  },
  {
    "instruction": "What are the full names of faculties with sex M and who live in building NEB?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT Fname, Lname FROM FACULTY WHERE sex = \"M\" AND Building = \"NEB\""
  },
  {
    "instruction": "What is the average and minimum age of all artists from United States.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT avg(age), min(age) FROM artist WHERE country = 'United States'"
  },
  {
    "instruction": "Show the team that have at least two technicians.",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "What is the latest movie by \" Jim Jarmusch \"",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;"
  },
  {
    "instruction": "parsing top papers",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT artist_name FROM song WHERE resolution > 500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List the clubs having \"Davis Steven\" as a member.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Davis\" AND t3.lname = \"Steven\""
  },
  {
    "instruction": "where can i eat some good french food in the yosemite and mono lake area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"yosemite and mono lake area\" AND t1.food_type = \"french\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Find the dates on which more than one revisions were made.",
    "input": "create table `catalogs` (`catalog_id` integer primary key, `catalog_name` varchar(50), `catalog_publisher` varchar(80), `date_of_publication` datetime, `date_of_latest_revision` datetime);",
    "output": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*) > 1"
  },
  {
    "instruction": "List the subject ID, name of subject and the number of courses available for each subject in ascending order of the course counts.",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `subjects` (`subject_id` integer primary key, `subject_name` varchar(120));",
    "output": "SELECT T1.subject_id, T2.subject_name, COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC"
  },
  {
    "instruction": "Whah are the name of each industry and the number of companies in that industry?",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT Industry, COUNT(*) FROM Companies GROUP BY Industry"
  },
  {
    "instruction": "Show last names for all student who are on scholarship.",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y'"
  },
  {
    "instruction": "How many stadiums does each country have?",
    "input": "create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));",
    "output": "SELECT country, count(*) FROM stadium GROUP BY country"
  },
  {
    "instruction": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.resolution > 900 GROUP BY T2.artist_name HAVING count(*) >= 1"
  },
  {
    "instruction": "Find the names of departments that are either in division AS or in division EN and in Building NEB.",
    "input": "create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);",
    "output": "SELECT DName FROM DEPARTMENT WHERE Division = \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division = \"EN\" AND Building = \"NEB\""
  },
  {
    "instruction": "What are the titles of all the albums?",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT title FROM albums;"
  },
  {
    "instruction": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT Studio FROM film WHERE Director = \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director = \"Walter Hill\""
  },
  {
    "instruction": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));create table `locations` (`location_id` decimal(4, 0) not null default '0', `street_address` varchar(40) default null, `postal_code` varchar(12) default null, `city` varchar(30) not null, `state_province` varchar(25) default null, `country_id` varchar(2) default null, primary key (`location_id`), foreign key (`country_id`) references countries(`country_id`));create table `countries` (`country_id` varchar(2) not null, `country_name` varchar(40) default null, `region_id` decimal(10, 0) default null, primary key (`country_id`), foreign key (`region_id`) references regions (`region_id`));",
    "output": "SELECT T1.first_name, T1.last_name, T1.employee_id, T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id"
  },
  {
    "instruction": "What is the sum of total pounds of purchase in year 2018 for all branches in London?",
    "input": "create table \"purchase\" (\"Member_ID\" int, \"Branch_ID\" text, \"Year\" text, \"Total_pounds\" real, primary key (\"Member_ID\",\"Branch_ID\",\"Year\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T2.city = 'London' AND T1.year = 2018"
  },
  {
    "instruction": "List the names of aircrafts and that won matches at least twice.",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"driverStandings\" (\"driverStandingsId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"points\" real, \"position\" integer, \"positionText\" text, \"wins\" integer, foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20"
  },
  {
    "instruction": "How many different departments are there?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT dept_name) FROM department"
  },
  {
    "instruction": "How many different genders are there in the dorms?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT count(DISTINCT gender) FROM dorm"
  },
  {
    "instruction": "give me a good place in the yosemite and mono lake area for french food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"yosemite and mono lake area\" AND t1.food_type = \"french\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "List the studios which average gross is above 4500000.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar) >= 4500000"
  },
  {
    "instruction": "What is the name, city, and country of the airport with the lowest altitude?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT name, city, country FROM airports ORDER BY elevation LIMIT 1"
  },
  {
    "instruction": "What are the different cities listed?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT DISTINCT headquarter FROM manufacturers"
  },
  {
    "instruction": "Which papers are about about Question Answering ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "What is the first names of the professors from the history department who do not teach a class.",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num"
  },
  {
    "instruction": "What are the customer name and date of the orders whose status is \"Delivered\".",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.customer_name, t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\""
  },
  {
    "instruction": "What are the names of tracks that contain the the word you in them?",
    "input": "create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'"
  },
  {
    "instruction": "Find the name of tracks which are in Movies playlist but not in music playlist.",
    "input": "create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);create table playlist_tracks (playlist_id integer not null, track_id integer not null, constraint pk_playlisttrack primary key (playlist_id, track_id), foreign key (playlist_id) references playlists (id)\n        ON delete no action\n        ON update no action, foreign key (track_id) references tracks (id)\n        ON delete no action\n        ON update no action);create table playlists (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);create table playlist_tracks (playlist_id integer not null, track_id integer not null, constraint pk_playlisttrack primary key (playlist_id, track_id), foreign key (playlist_id) references playlists (id)\n        ON delete no action\n        ON update no action, foreign key (track_id) references tracks (id)\n        ON delete no action\n        ON update no action);create table playlists (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'"
  },
  {
    "instruction": "What is the name of the department htat has no students minoring in it?",
    "input": "create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);create table minor_in (stuid integer, dno integer, foreign key(stuid) references student(stuid), foreign key(dno) references department(dno));",
    "output": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO"
  },
  {
    "instruction": "give me a good arabic on buchanan in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "What are the first and last names of all the female students who have president votes?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT T1.Fname, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE WHERE T1.sex = \"F\""
  },
  {
    "instruction": "How many reviews does \" Acacia Cafe \" have ?",
    "input": "create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT review_count FROM business WHERE name = \"Acacia Cafe\";"
  },
  {
    "instruction": "datasets used for semantic parsing",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid WHERE t4.keyphrasename = \"semantic parsing\";"
  },
  {
    "instruction": "What are the official native languages that contain the string \"English\".",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));",
    "output": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""
  },
  {
    "instruction": "where are some restaurants good for arabic food on buchanan in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Which Payments were processed with Visa? List the payment Id, the date and the amount.",
    "input": "create table payments (payment_id integer not null, settlement_id integer not null, payment_method_code varchar(255), date_payment_made date, amount_payment integer, primary key (payment_id), foreign key (settlement_id) references settlements (settlement_id));",
    "output": "SELECT Payment_ID, Date_Payment_Made, Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'"
  },
  {
    "instruction": "Which classrooms are used by grade 4?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT classroom FROM list WHERE grade = 4"
  },
  {
    "instruction": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' AND T2.pPos = 'striker'"
  },
  {
    "instruction": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
    "input": "create table customer (customer_id smallint unsigned not null, store_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, email varchar(50) default null, address_id smallint unsigned not null, active boolean not null default true, create_date datetime not null, last_update timestamp default current_timestamp, primary key (customer_id), foreign key (address_id) references address (address_id), foreign key (store_id) references store (store_id));create table payment (payment_id smallint unsigned not null, customer_id smallint unsigned not null, staff_id tinyint unsigned not null, rental_id int default null, amount decimal(5, 2) not null, payment_date datetime not null, last_update timestamp default current_timestamp, primary key (payment_id), foreign key (rental_id) references rental (rental_id), foreign key (customer_id) references customer (customer_id), foreign key (staff_id) references staff (staff_id));",
    "output": "SELECT T1.first_name, T1.last_name, T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
  },
  {
    "instruction": "what is the salary and name of the employee who has the most number of aircraft certificates?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT T1.name, T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the transaction type code that occurs the fewest times.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1"
  },
  {
    "instruction": "What is the total number of gas stations that opened between 2000 and 2005?",
    "input": "create table \"gas_station\" (\"Station_ID\" int, \"Open_Year\" int, \"Location\" text, \"Manager_Name\" text, \"Vice_Manager_Name\" text, \"Representative_Name\" text, primary key (\"Station_ID\"));",
    "output": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005"
  },
  {
    "instruction": "find the total checkins in Italian Delis in each state on Sunday",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"checkin\" (\"cid\" int, \"business_id\" text, \"count\" int, \"day\" text, primary key(\"cid\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT t1.state, SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t2.category_name = \"Italian\" AND t3.category_name = \"Delis\" AND t4.day = \"Sunday\" GROUP BY t1.state;"
  },
  {
    "instruction": "What are the distinct payment method codes in all the invoices?",
    "input": "create table invoices (invoice_id integer not null, order_id integer not null, payment_method_code char(15), product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), order_item_id integer not null, primary key (invoice_id), foreign key (order_id) references customer_orders (order_id), foreign key (order_id) references bookings (booking_id), foreign key (payment_method_code) references ref_payment_methods (payment_method_code));",
    "output": "SELECT DISTINCT payment_method_code FROM INVOICES"
  },
  {
    "instruction": "For each product type, return the maximum and minimum price.",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT product_type_code, max(product_price), min(product_price) FROM products GROUP BY product_type_code"
  },
  {
    "instruction": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));",
    "output": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available) < 7"
  },
  {
    "instruction": "What is the name of the staff that is in charge of the attraction named \"US museum\"?",
    "input": "create table staff (staff_id integer not null, tourist_attraction_id integer not null, name varchar(40), other_details varchar(255), primary key (staff_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"US museum\""
  },
  {
    "instruction": "how many programs are there?",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));",
    "output": "SELECT count(*) FROM program"
  },
  {
    "instruction": "What are the headquarters without companies that are in the banking industry?",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking'"
  },
  {
    "instruction": "What are the names and dates of races, and the names of the tracks where they are held?",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT T1.name, T1.date, T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id"
  },
  {
    "instruction": "What is the school color of the school with the largest enrollment?",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1"
  },
  {
    "instruction": "return me the number of keywords in PVLDB .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid WHERE t3.name = \"PVLDB\";"
  },
  {
    "instruction": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.",
    "input": "create table \"building\" (\"building_id\" text, \"Name\" text, \"Street_address\" text, \"Years_as_tallest\" text, \"Height_feet\" int, \"Floors\" int, primary key(\"building_id\"));",
    "output": "SELECT name, street_address, floors FROM building ORDER BY floors"
  },
  {
    "instruction": "return me the author in the \" University of Michigan \" whose papers have more than 5000 total citations .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid WHERE t2.name = \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num ) > 5000;"
  },
  {
    "instruction": "How many students are affected by cat allergies?",
    "input": "create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT count(*) FROM Has_allergy WHERE Allergy = \"Cat\""
  },
  {
    "instruction": "What are the maximum and minimum product prices for each product type?",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT product_type_code, max(product_price), min(product_price) FROM products GROUP BY product_type_code"
  },
  {
    "instruction": "Find the number of routes whose destination airports are in Canada.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE country = 'Canada'"
  },
  {
    "instruction": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000"
  },
  {
    "instruction": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT cName, enr FROM College WHERE enr > 10000 AND state = \"LA\""
  },
  {
    "instruction": "papers on TAIL NIPS",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"TAIL\" AND t4.venuename = \"NIPS\";"
  },
  {
    "instruction": "What is the gender of the teacher with last name \"Medhurst\"?",
    "input": "create table `teachers` (`teacher_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `gender` varchar(1), `cell_mobile_number` varchar(40), `email_address` varchar(40), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT gender FROM TEACHERS WHERE last_name = \"Medhurst\""
  },
  {
    "instruction": "What are the names of all campuses located at Chico?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE LOCATION = \"Chico\""
  },
  {
    "instruction": "How many students have each different allergy?",
    "input": "create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT Allergy, count(*) FROM Has_allergy GROUP BY Allergy"
  },
  {
    "instruction": "What is the id of the candidate whose email is stanley.monahan@example.org?",
    "input": "create table people (person_id integer not null, first_name varchar(255), middle_name varchar(255), last_name varchar(255), cell_mobile_number varchar(40), email_address varchar(40), login_name varchar(40), password varchar(40), primary key (person_id));create table candidates (candidate_id integer not null , candidate_details varchar(255), primary key (candidate_id), foreign key (candidate_id) references people (person_id));",
    "output": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""
  },
  {
    "instruction": "What is the average time span of contact channels in the database?",
    "input": "create table `customer_contact_channels` (`customer_id` integer not null, `channel_code` varchar(15) not null, `active_from_date` datetime not null, `active_to_date` datetime, `contact_number` varchar(50) not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels"
  },
  {
    "instruction": "Give the building that the instructor who teaches the greatest number of courses lives in.",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List phone number and email address of customer with more than 2000 outstanding balance.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT phone_number, email_address FROM Customers WHERE amount_outstanding > 2000;"
  },
  {
    "instruction": "Find the classroom that the most students use.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the document type name of the document named \"How to read a book\".",
    "input": "create table all_documents (document_id integer not null, date_stored datetime, document_type_code char(15) not null, document_name char(255), document_description char(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (date_stored) references ref_calendar (calendar_date));create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));",
    "output": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T1.document_name = \"How to read a book\""
  },
  {
    "instruction": "which year had the most NIPS papers ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ), t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;"
  },
  {
    "instruction": "What are all the different start station names for a trip that lasted less than 100?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100"
  },
  {
    "instruction": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
    "input": "create table \"phone\" (\"Name\" text, \"Phone_ID\" int, \"Memory_in_G\" int, \"Carrier\" text, \"Price\" real, primary key (\"Phone_ID\"));create table \"phone\" (\"Name\" text, \"Phone_ID\" int, \"Memory_in_G\" int, \"Carrier\" text, \"Price\" real, primary key (\"Phone_ID\"));",
    "output": "SELECT Carrier FROM phone WHERE Memory_in_G < 32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G > 64"
  },
  {
    "instruction": "What is maximum, minimum and average amount of outstanding of customer?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT max(amount_outstanding), min(amount_outstanding), avg(amount_outstanding) FROM Customers;"
  },
  {
    "instruction": "Find the number of checking accounts for each account name.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT count(*), T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid GROUP BY T1.name"
  },
  {
    "instruction": "When do all the researcher role staff start to work, and when do they stop working?",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT date_from, date_to FROM Project_Staff WHERE role_code = 'researcher'"
  },
  {
    "instruction": "How many different instructors have taught some course?",
    "input": "create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);",
    "output": "SELECT COUNT (DISTINCT id) FROM teaches"
  },
  {
    "instruction": "what is the smallest city in the largest state",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );"
  },
  {
    "instruction": "What are the companies and main industries of all companies that are not headquartered in the United States?",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT company, main_industry FROM company WHERE headquarters != 'USA'"
  },
  {
    "instruction": "Count the number of male students who had class senator votes in the fall election cycle.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.Sex = \"M\" AND T2.Election_Cycle = \"Fall\""
  },
  {
    "instruction": "in which state is springfield",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "what are the details of the cmi masters that have the cross reference code 'Tax'?",
    "input": "create table customer_master_index (master_customer_id integer not null, cmi_details varchar(255), primary key (master_customer_id));create table cmi_cross_references (cmi_cross_ref_id integer not null, master_customer_id integer not null, source_system_code char(15) not null, primary key (cmi_cross_ref_id), foreign key (master_customer_id) references customer_master_index (master_customer_id));",
    "output": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax'"
  },
  {
    "instruction": "what paper did Peter Mertens and Dina Barbian write together ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT name, price FROM products WHERE price >= 180 ORDER BY price DESC, name ASC"
  },
  {
    "instruction": "what is the population density of wyoming",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT density FROM state WHERE state_name = \"wyoming\";"
  },
  {
    "instruction": "Please show the most common publication date.",
    "input": "create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));",
    "output": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show project ids and the number of documents in each project.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT project_id, count(*) FROM Documents GROUP BY project_id"
  },
  {
    "instruction": "Does Richard Ladner publish in chi ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Richard Ladner\" AND t4.venuename = \"chi\";"
  },
  {
    "instruction": "What is the first name of the students who are in age 20 to 25 and living in PHL city?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT fname FROM student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25"
  },
  {
    "instruction": "Who are the prominent researchers in Neutralizing Antibody in 2012 ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"Neutralizing Antibody\" AND t4.year = 2012 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "What are the names of the clubs that have players in the position of \"Right Wing\"?",
    "input": "create table \"club\" (\"Club_ID\" int, \"name\" text, \"Region\" text, \"Start_year\" text, primary key (\"Club_ID\"));create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = \"Right Wing\""
  },
  {
    "instruction": "What is the name and address of the department with the most students?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.dept_name, T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List the names of editors that are not on any journal committee.",
    "input": "create table \"editor\" (\"Editor_ID\" int, \"Name\" text, \"Age\" real, primary key (\"Editor_ID\"));create table \"journal_committee\" (\"Editor_ID\" int, \"Journal_ID\" int, \"Work_Type\" text, primary key (\"Editor_ID\",\"Journal_ID\"), foreign key (\"Editor_ID\") references `editor`(\"Editor_ID\"), foreign key (\"Journal_ID\") references `journal`(\"Journal_ID\"));",
    "output": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)"
  },
  {
    "instruction": "Which customer made the most orders? Find the customer name.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which students have professors as their advisors? Find their student ids.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.rank = \"Professor\""
  },
  {
    "instruction": "What are the first names and last names of all the guests?",
    "input": "create table guests (guest_id integer not null , gender_code char(1), guest_first_name varchar(80), guest_last_name varchar(80), date_of_birth datetime, primary key (guest_id), unique (guest_id));",
    "output": "SELECT guest_first_name, guest_last_name FROM Guests"
  },
  {
    "instruction": "What are the code and description of the most frequent behavior incident type?",
    "input": "create table `behavior_incident` (`incident_id` integer primary key, `incident_type_code` varchar(10) not null, `student_id` integer not null, `date_incident_start` datetime, `date_incident_end` datetime, `incident_summary` varchar(255), `recommendations` varchar(255), `other_details` varchar(255), foreign key (`incident_type_code`) references `ref_incident_type`(`incident_type_code`), foreign key (`student_id`) references `students`(`student_id`));create table `ref_incident_type` (`incident_type_code` varchar(10) primary key, `incident_type_description` varchar(80));",
    "output": "SELECT T1.incident_type_code, T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.",
    "input": "create table participates_in (stuid integer, actid integer, foreign key(stuid) references student(stuid), foreign key(actid) references activity(actid));create table activity (actid integer primary key, activity_name varchar(25));create table participates_in (stuid integer, actid integer, foreign key(stuid) references student(stuid), foreign key(actid) references activity(actid));create table activity (actid integer primary key, activity_name varchar(25));",
    "output": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Kayaking'"
  },
  {
    "instruction": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT name, headquarter, revenue FROM manufacturers ORDER BY revenue DESC"
  },
  {
    "instruction": "When was benjamin mako hill 's first paper written ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;"
  },
  {
    "instruction": "Which papers have the substring \"ML\" in their titles? Return the titles of the papers.",
    "input": "create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT title FROM papers WHERE title LIKE \"%ML%\""
  },
  {
    "instruction": "What is the list of school locations sorted in descending order of school foundation year?",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT LOCATION FROM school ORDER BY Founded DESC"
  },
  {
    "instruction": "What are the names of the courses taught by the tutor whose personal name is \"Julio\"?",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));",
    "output": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.personal_name = \"Julio\""
  },
  {
    "instruction": "What are the names and countries of members?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Country\" text, \"College_ID\" int, primary key (\"Member_ID\"), foreign key (\"College_ID\") references `college`(\"College_ID\"));",
    "output": "SELECT Name, Country FROM member"
  },
  {
    "instruction": "What is the first and last name of the students who are not in the largest major?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT fname, lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "For each user, return the name and the average rating of reviews given by them.",
    "input": "create table `useracct` (`u_id` integer not null , `name` varchar(128) default null , primary key (`u_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT T1.name, avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id"
  },
  {
    "instruction": "List the names of members who did not participate in any round.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Country\" text, \"College_ID\" int, primary key (\"Member_ID\"), foreign key (\"College_ID\") references `college`(\"College_ID\"));create table \"round\" (\"Round_ID\" int, \"Member_ID\" int, \"Decoration_Theme\" text, \"Rank_in_Round\" int, primary key (\"Member_ID\",\"Round_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"));",
    "output": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)"
  },
  {
    "instruction": "Show me chi papers .",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"chi\";"
  },
  {
    "instruction": "Find the total number of students living in the male dorm (with gender M).",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.gender = 'M'"
  },
  {
    "instruction": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
    "input": "create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names and ages of editors?",
    "input": "create table \"editor\" (\"Editor_ID\" int, \"Name\" text, \"Age\" real, primary key (\"Editor_ID\"));",
    "output": "SELECT Name, Age FROM editor"
  },
  {
    "instruction": "What are the characters and duration of actors?",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));",
    "output": "SELECT Character, Duration FROM actor"
  },
  {
    "instruction": "What is the total number of postseason games that team Boston Red Stockings participated in?",
    "input": "create table postseason (year integer, round text, team_id_winner text, league_id_winner text, team_id_loser text, league_id_loser text, wins integer, losses integer, ties integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);create table postseason (year integer, round text, team_id_winner text, league_id_winner text, team_id_loser text, league_id_loser text, wins integer, losses integer, ties integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' );"
  },
  {
    "instruction": "What are the phone numbers of all customers and all staff members?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));create table `staff` (`staff_id` integer primary key, `gender` varchar(1), `first_name` varchar(80), `last_name` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff"
  },
  {
    "instruction": "Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average.",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT sum(number_deaths), sum(damage_millions_USD) FROM storm WHERE max_speed > (SELECT avg(max_speed) FROM storm)"
  },
  {
    "instruction": "which is the longest river in usa",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );"
  },
  {
    "instruction": "papers published in the area of Question Answering",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "Return the completion date for all the tests that have \"Fail\" result.",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));create table `student_tests_taken` (`registration_id` integer not null, `date_test_taken` datetime not null, `test_result` varchar(255), foreign key (`registration_id`) references `student_course_enrolment`(`registration_id`));",
    "output": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\""
  },
  {
    "instruction": "How many accounts are there in total?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);",
    "output": "SELECT count(*) FROM accounts"
  },
  {
    "instruction": "Find the names of all directors whose movies are rated by Sarah Martinez.",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table reviewer(rid int primary key, name text);",
    "output": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Sarah Martinez'"
  },
  {
    "instruction": "What are the case burdens of counties, ordered descending by population?",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC"
  },
  {
    "instruction": "How many classes exist for each school?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(*), T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code"
  },
  {
    "instruction": "In which year are there festivals both inside the 'United States' and outside the 'United States'?",
    "input": "create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));",
    "output": "SELECT YEAR FROM festival_detail WHERE LOCATION = 'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'"
  },
  {
    "instruction": "what are the populations of states through which the mississippi runs",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );"
  },
  {
    "instruction": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_contact_channels` (`customer_id` integer not null, `channel_code` varchar(15) not null, `active_from_date` datetime not null, `active_to_date` datetime, `contact_number` varchar(50) not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\""
  },
  {
    "instruction": "what is the capital of the state with the largest population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT DISTINCT capital FROM state WHERE density = ( SELECT MAX ( density ) FROM state );"
  },
  {
    "instruction": "What are the name and code of the location with the smallest number of documents?",
    "input": "create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));create table ref_locations (location_code char(15) not null, location_name varchar(255) not null, location_description varchar(255) not null, primary key (location_code));",
    "output": "SELECT T2.location_name, T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "Return the average, maximum, and total revenues across all manufacturers.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT avg(revenue), max(revenue), sum(revenue) FROM manufacturers"
  },
  {
    "instruction": "What are the songs in volumes with more than 1 week on top?",
    "input": "create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT Song FROM volume WHERE Weeks_on_Top > 1"
  },
  {
    "instruction": "Find the name and salary of instructors who are advisors of the students from the Math department.",
    "input": "create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'"
  },
  {
    "instruction": "Show me all the restaurants.",
    "input": "create table restaurant (resid integer primary key, resname varchar(100), address varchar(100), rating integer);",
    "output": "SELECT ResName FROM Restaurant;"
  },
  {
    "instruction": "what state has the city springfield",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "How many tasks does each project have? List the task count and the project detail.",
    "input": "create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `tasks` (`task_id` integer primary key, `project_id` integer not null, `task_details` varchar(255) not null, `eg agree objectives` varchar(1), foreign key (`project_id`) references `projects`(`project_id`));",
    "output": "SELECT count(*), T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id"
  },
  {
    "instruction": "in what journals does linda shapiro publish ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `journal` (`journalid` integer not null , `journalname` varchar(100) default null , primary key (`journalid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid = t2.journalid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"linda shapiro\";"
  },
  {
    "instruction": "Show the first name and last name for all the instructors.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT fname, lname FROM Faculty WHERE Rank = \"Instructor\""
  },
  {
    "instruction": "Which department has the largest number of employees?",
    "input": "create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));",
    "output": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;"
  },
  {
    "instruction": "Show the names of journalists that have reported more than one event.",
    "input": "create table \"news_report\" (\"journalist_ID\" int, \"Event_ID\" int, \"Work_Type\" text, primary key (\"journalist_ID\",\"Event_ID\"), foreign key (\"journalist_ID\") references `journalist`(\"journalist_ID\"), foreign key (\"Event_ID\") references `event`(\"Event_ID\"));create table \"event\" (\"Event_ID\" int, \"Date\" text, \"Venue\" text, \"Name\" text, \"Event_Attendance\" int, primary key (\"Event_ID\"));create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));",
    "output": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*) > 1"
  },
  {
    "instruction": "What is the document type description for document type named Film?",
    "input": "create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));",
    "output": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name = \"Film\""
  },
  {
    "instruction": "How many friends does Dan have?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Dan'"
  },
  {
    "instruction": "Return the name of the document that has the most sections.",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `document_sections` (`section_id` integer primary key, `document_code` varchar(15) not null, `section_sequence` integer, `section_code` varchar(20), `section_title` varchar(80), foreign key (`document_code`) references `documents`(`document_code`));",
    "output": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the first name and department name of all employees?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));",
    "output": "SELECT T1.first_name, T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id"
  },
  {
    "instruction": "What are the types of vocals used in the song \"Le Pop\"?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\""
  },
  {
    "instruction": "What are the different card type codes?",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT DISTINCT card_type_code FROM Customers_Cards"
  },
  {
    "instruction": "how many citations does noah a smith have ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"noah a smith\";"
  },
  {
    "instruction": "What are the distinct classes that races can have?",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));",
    "output": "SELECT DISTINCT CLASS FROM race"
  },
  {
    "instruction": "Count the number of captains that have each rank.",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT count(*), rank FROM captain GROUP BY rank"
  },
  {
    "instruction": "What are the full names, departments, cities, and state provinces for each employee?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));create table `locations` (`location_id` decimal(4, 0) not null default '0', `street_address` varchar(40) default null, `postal_code` varchar(12) default null, `city` varchar(30) not null, `state_province` varchar(25) default null, `country_id` varchar(2) default null, primary key (`location_id`), foreign key (`country_id`) references countries(`country_id`));",
    "output": "SELECT T1.first_name, T1.last_name, T2.department_name, T3.city, T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id"
  },
  {
    "instruction": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT How_to_Get_There, COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There"
  },
  {
    "instruction": "What are the ids and names of all start stations that were the beginning of at least 200 trips?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200"
  },
  {
    "instruction": "What is all the information about the basketball match?",
    "input": "create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));",
    "output": "SELECT * FROM basketball_match"
  },
  {
    "instruction": "List the name of the aircraft that has been named winning aircraft the most number of times.",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the school name and type for schools without a school bus.",
    "input": "create table \"school\" (\"School_ID\" int, \"Grade\" text, \"School\" text, \"Location\" text, \"Type\" text, primary key (\"School_ID\"));create table \"school_bus\" (\"School_ID\" int, \"Driver_ID\" int, \"Years_Working\" int, \"If_full_time\" bool, primary key (\"School_ID\",\"Driver_ID\"), foreign key (\"School_ID\") references `school`(\"School_ID\"), foreign key (\"Driver_ID\") references `driver`(\"Driver_ID\"));",
    "output": "SELECT school, TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)"
  },
  {
    "instruction": "What are the names of storms that did not affect two or more regions?",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2"
  },
  {
    "instruction": "Where is the best restaurant in san francisco for french food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" );"
  },
  {
    "instruction": "Find the first name and major of the students who are not allegry to soy.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT fname, major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Soy\")"
  },
  {
    "instruction": "How many invoices were billed from each state?",
    "input": "create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state;"
  },
  {
    "instruction": "What are the names and salaries of instructors who advises students in the History department?",
    "input": "create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'History'"
  },
  {
    "instruction": "List the names, color descriptions and product descriptions of products with category \"Herbs\".",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT T1.product_name, T2.color_description, T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code WHERE product_category_code = \"Herbs\""
  },
  {
    "instruction": "What are the total points for all gymnasts, ordered by total points descending?",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC"
  },
  {
    "instruction": "which is the shortest river",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river );"
  },
  {
    "instruction": "How many restaurant is the Sandwich type restaurant?",
    "input": "create table restaurant (resid integer primary key, resname varchar(100), address varchar(100), rating integer);create table type_of_restaurant (resid integer, restypeid integer, foreign key(resid) references restaurant(resid), foreign key(restypeid) references restaurant_type(restypeid));create table restaurant_type (restypeid integer primary key, restypename varchar(40), restypedescription varchar(100));",
    "output": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID = Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'"
  },
  {
    "instruction": "Show the names of all the activities Mark Giuliano participates in.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));create table activity (actid integer primary key, activity_name varchar(25));",
    "output": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = \"Mark\" AND T1.lname = \"Giuliano\""
  },
  {
    "instruction": "How many citations does noah a smith have ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"noah a smith\";"
  },
  {
    "instruction": "Return the average enrollment of universities founded before 1850.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT avg(enrollment) FROM university WHERE founded < 1850"
  },
  {
    "instruction": "What are the different names for each station that has ever had 7 bikes available?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));",
    "output": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7"
  },
  {
    "instruction": "What is the name of Eric C. Kerrigan 's Liquid Automatica paper ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t2.title FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid = t3.keyphraseid JOIN writes AS t4 ON t4.paperid = t5.paperid JOIN paper AS t2 ON t4.paperid = t2.paperid JOIN author AS t1 ON t4.authorid = t1.authorid JOIN venue AS t6 ON t6.venueid = t2.venueid WHERE t1.authorname LIKE \"Eric C. Kerrigan\" AND t3.keyphrasename = \"Liquid\" AND t6.venuename = \"Automatica\";"
  },
  {
    "instruction": "Give the full name and phone of the customer who has the account name 162.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"162\""
  },
  {
    "instruction": "Count the number of documents with expenses.",
    "input": "create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT count(*) FROM Documents_with_expenses"
  },
  {
    "instruction": "population of boulder",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = \"boulder\";"
  },
  {
    "instruction": "How many students are in each department?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT count(*), dept_code FROM student GROUP BY dept_code"
  },
  {
    "instruction": "Who is the writer of the movie \" The Truman Show \"",
    "input": "create table \"written_by\" (\"id\" int, \"msid\" int, \"wid\" int, foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"wid\") references `writer`(\"wid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"writer\" (\"wid\" int, \"gender\" text, \"name\" int, \"nationality\" int, \"num_of_episodes\" int, \"birth_city\" text, \"birth_year\" int, primary key(\"wid\"));",
    "output": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid = t1.mid JOIN writer AS t2 ON t3.wid = t2.wid WHERE t1.title = \"The Truman Show\";"
  },
  {
    "instruction": "What are the phone numbers of customers using the policy with the code \"Life Insurance\"?",
    "input": "create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));",
    "output": "SELECT customer_phone FROM available_policies WHERE policy_type_code = \"Life Insurance\""
  },
  {
    "instruction": "How many days had both mean humidity above 50 and mean visibility above 8?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8"
  },
  {
    "instruction": "What are the start date and end date of the apartment bookings made by female guests (gender code \"Female\")?",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table guests (guest_id integer not null , gender_code char(1), guest_first_name varchar(80), guest_last_name varchar(80), date_of_birth datetime, primary key (guest_id), unique (guest_id));",
    "output": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\""
  },
  {
    "instruction": "Return the average gross sales in dollars across all films.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT avg(Gross_in_dollar) FROM film"
  },
  {
    "instruction": "How many credit cards does customer Blanche Huels have?",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Blanche\" AND T2.customer_last_name = \"Huels\" AND T1.card_type_code = \"Credit\""
  },
  {
    "instruction": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.",
    "input": "create table \"exhibition_record\" (\"Exhibition_ID\" int, \"Date\" text, \"Attendance\" int, primary key (\"Exhibition_ID\",\"Date\"), foreign key (`exhibition_id`) references `exhibition`(`exhibition_id`));create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10"
  },
  {
    "instruction": "return me the number of researchers in \" University of Michigan \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid WHERE t2.name = \"University of Michigan\";"
  },
  {
    "instruction": "what is the population of the capital of the largest state",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );"
  },
  {
    "instruction": "Find the names of all the catalog entries.",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT distinct(catalog_entry_name) FROM catalog_contents"
  },
  {
    "instruction": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
    "input": "create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT order_id, customer_id FROM customer_orders WHERE order_status_code = \"Cancelled\" ORDER BY order_date"
  },
  {
    "instruction": "What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT count(DISTINCT state) FROM college WHERE enr < (SELECT avg(enr) FROM college)"
  },
  {
    "instruction": "What are the details of the car with id 1?",
    "input": "create table `vehicles` (`vehicle_id` integer primary key, `vehicle_details` varchar(255));",
    "output": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;"
  },
  {
    "instruction": "Show first name and last name for all the students advised by Michael Goodrich.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T2.fname, T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.fname = \"Michael\" AND T1.lname = \"Goodrich\""
  },
  {
    "instruction": "What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?",
    "input": "create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT date_of_latest_logon FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\""
  },
  {
    "instruction": "What are the names for tracks without a race in class 'GT'.",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id WHERE T1.class = 'GT'"
  },
  {
    "instruction": "what are the cities in states through which the mississippi runs",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );"
  },
  {
    "instruction": "Show names for all employees with salary more than the average.",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT name FROM Employee WHERE salary > (SELECT avg(salary) FROM Employee)"
  },
  {
    "instruction": "Show the location name for document \"Robin CV\".",
    "input": "create table all_documents (document_id integer not null, date_stored datetime, document_type_code char(15) not null, document_name char(255), document_description char(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (date_stored) references ref_calendar (calendar_date));create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));create table ref_locations (location_code char(15) not null, location_name varchar(255) not null, location_description varchar(255) not null, primary key (location_code));",
    "output": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = \"Robin CV\""
  },
  {
    "instruction": "What are the ids of all students who are not video game players?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games"
  },
  {
    "instruction": "List all the model names sorted by their launch year.",
    "input": "create table \"chip_model\" (\"Model_name\" text, \"Launch_year\" real, \"RAM_MiB\" real, \"ROM_MiB\" real, \"Slots\" text, \"WiFi\" text, \"Bluetooth\" text, primary key (\"Model_name\"));",
    "output": "SELECT model_name FROM chip_model ORDER BY launch_year"
  },
  {
    "instruction": "return me the journal that has the most number of papers containing keyword \" Relational Database \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid WHERE t1.keyword = \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;"
  },
  {
    "instruction": "Find the entry name of the catalog with the highest price (in USD).",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
  },
  {
    "instruction": "What neighbourhood is restaurant \" Flat Top Grill \" in ?",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"neighbourhood\" (\"id\" int, \"business_id\" text, \"neighbourhood_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id = t2.business_id JOIN neighbourhood AS t1 ON t1.business_id = t2.business_id WHERE t2.name = \"Flat Top Grill\" AND t3.category_name = \"category_category_name0\";"
  },
  {
    "instruction": "What are the id and name of the stations that have ever had more than 12 bikes available?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));",
    "output": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12"
  },
  {
    "instruction": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));",
    "output": "SELECT DISTINCT T1.name, T1.location, T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'"
  },
  {
    "instruction": "Return all the distinct secretary votes made in the fall election cycle.",
    "input": "create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE = \"Fall\""
  },
  {
    "instruction": "Find the names of all reviewers who have contributed three or more ratings.",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table reviewer(rid int primary key, name text);",
    "output": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT(*) >= 3"
  },
  {
    "instruction": "How many papers are published by the institution \"Tokohu University\"?",
    "input": "create table papers (paperid integer, title text, primary key (paperid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Tokohu University\""
  },
  {
    "instruction": "How many teachers does the student named MADLOCK RAY have?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"MADLOCK\" AND T1.lastname = \"RAY\""
  },
  {
    "instruction": "What are the statement id and statement detail for the statement that has the most corresponding accounts?",
    "input": "create table accounts (account_id integer not null, statement_id integer not null, account_details varchar(255), primary key (account_id), foreign key (statement_id) references statements (statement_id));create table statements (statement_id integer not null, statement_details varchar(255), primary key (statement_id), foreign key (statement_id) references documents (document_id));",
    "output": "SELECT T1.statement_id, T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT investor_id, COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\" GROUP BY investor_id"
  },
  {
    "instruction": "Find distinct cities of addresses of people?",
    "input": "create table addresses (address_id integer not null, line_1 varchar(80), line_2 varchar(80), city varchar(50), zip_postcode char(20), state_province_county varchar(50), country varchar(50), primary key (address_id));create table people_addresses (person_address_id integer not null, person_id integer not null, address_id integer not null, date_from datetime, date_to datetime, primary key (person_address_id), foreign key (person_id) references people (person_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id"
  },
  {
    "instruction": "How many sports do we have?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT count(DISTINCT sportname) FROM Sportsinfo"
  },
  {
    "instruction": "For each party, return the name of the party and the number of delegates from that party.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT T2.Party, COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party"
  },
  {
    "instruction": "how many states does kentucky border",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( border ) FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "List all the username and passwords of users with the most popular role.",
    "input": "create table `users` (`user_id` integer primary key, `role_code` varchar(15) not null, `user_name` varchar(40), `user_login` varchar(40), `password` varchar(40), foreign key (`role_code`) references `roles`(`role_code`));",
    "output": "SELECT user_name, password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?",
    "input": "create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);",
    "output": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010"
  },
  {
    "instruction": "What is the name of every city that has at least 15 stations and how many stations does it have?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15"
  },
  {
    "instruction": "What is the name of the entrepreneur with the greatest weight?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
  },
  {
    "instruction": "Show the builder of railways associated with the trains named \"Andaman Exp\".",
    "input": "create table \"railway\" (\"Railway_ID\" int, \"Railway\" text, \"Builder\" text, \"Built\" text, \"Wheels\" text, \"Location\" text, \"ObjectNumber\" text, primary key (\"Railway_ID\"));create table \"train\" (\"Train_ID\" int, \"Train_Num\" text, \"Name\" text, \"\nFROM\" text, \"Arrival\" text, \"Railway_ID\" int, primary key (\"Train_ID\"), foreign key (\"Railway_ID\") references `railway`(\"Railway_ID\"));",
    "output": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Name = \"Andaman Exp\""
  },
  {
    "instruction": "What is the name and description for document type code RV?",
    "input": "create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));",
    "output": "SELECT document_type_name, document_type_description FROM Ref_document_types WHERE document_type_code = \"RV\""
  },
  {
    "instruction": "For each state, find the total account balance of customers whose credit score is above 100.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT sum(acc_bal), state FROM customer WHERE credit_score > 100 GROUP BY state"
  },
  {
    "instruction": "Show the name, location, open year for all tracks with a seating higher than the average.",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT name, LOCATION, year_opened FROM track WHERE seating > (SELECT avg(seating) FROM track)"
  },
  {
    "instruction": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT date, max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1"
  },
  {
    "instruction": "How many apartment bookings are there in total?",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));",
    "output": "SELECT count(*) FROM Apartment_Bookings"
  },
  {
    "instruction": "How many customers did not have any event?",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255), primary key (customer_id));create table customer_events (customer_event_id integer not null, customer_id integer, date_moved_in datetime, property_id integer, resident_id integer, thing_id integer not null, primary key (customer_event_id), foreign key (thing_id) references things (thing_id), foreign key (customer_id) references customers (customer_id), foreign key (resident_id, property_id, date_moved_in) references residents (resident_id, property_id, date_moved_in));",
    "output": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )"
  },
  {
    "instruction": "Sort the information about course authors and tutors in alphabetical order of the personal name.",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));",
    "output": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name"
  },
  {
    "instruction": "Return the average number of weeks on top for volumes by artists that are at most 25 years old.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 25"
  },
  {
    "instruction": "Which patients made more than one appointment? Tell me the name and phone number of these patients.",
    "input": "create table appointment (appointmentid integer primary key not null, patient integer not null, prepnurse integer, physician integer not null, start datetime not null, end datetime not null, examinationroom text not null, constraint fk_appointment_patient_ssn foreign key(patient) references patient(ssn), constraint fk_appointment_nurse_employeeid foreign key(prepnurse) references nurse(employeeid), constraint fk_appointment_physician_employeeid foreign key(physician) references physician(employeeid));create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));",
    "output": "SELECT name, phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count(*) > 1"
  },
  {
    "instruction": "return me the authors who have papers in VLDB conference before 2002 after 1995 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = \"VLDB\" AND t4.year < 2002 AND t4.year > 1995;"
  },
  {
    "instruction": "What are the different ids and names of the stations that have had more than 12 bikes available?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));",
    "output": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12"
  },
  {
    "instruction": "Sort the names of all counties in descending alphabetical order.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT County_name FROM county ORDER BY County_name DESC"
  },
  {
    "instruction": "Show the church names for the weddings of all people older than 30.",
    "input": "create table \"wedding\" (\"Church_ID\" int, \"Male_ID\" int, \"Female_ID\" int, \"Year\" int, primary key (\"Church_ID\",\"Male_ID\",\"Female_ID\"), foreign key (\"Church_ID\") references `church`(\"Church_ID\"), foreign key (\"Male_ID\") references `people`(\"People_ID\"), foreign key (\"Female_ID\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Country\" text, \"Is_Male\" text, \"Age\" int, primary key (\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Country\" text, \"Is_Male\" text, \"Age\" int, primary key (\"People_ID\"));create table \"church\" (\"Church_ID\" int, \"Name\" text, \"Organized_by\" text, \"Open_Date\" int, \"Continuation_of\" text, primary key (\"Church_ID\"));",
    "output": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id JOIN church AS T4 ON T4.church_id = T1.church_id WHERE T2.age > 30 OR T3.age > 30"
  },
  {
    "instruction": "What are the names of all male British artists?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT artist_name FROM artist WHERE country = \"UK\" AND gender = \"Male\""
  },
  {
    "instruction": "Find the name of department that offers the class whose description has the word \"Statistics\".",
    "input": "create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'"
  },
  {
    "instruction": "Find all the customer information in state NY.",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT * FROM CUSTOMER WHERE State = \"NY\""
  },
  {
    "instruction": "What are dates of birth of all the guests whose gender is \"Male\"?",
    "input": "create table guests (guest_id integer not null , gender_code char(1), guest_first_name varchar(80), guest_last_name varchar(80), date_of_birth datetime, primary key (guest_id), unique (guest_id));",
    "output": "SELECT date_of_birth FROM Guests WHERE gender_code = \"Male\""
  },
  {
    "instruction": "What are the total number of students enrolled in ACCT-211?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));",
    "output": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'"
  },
  {
    "instruction": "who is the most cited author at CVPR ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid ), t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid JOIN cite AS t4 ON t1.paperid = t4.citedpaperid WHERE t3.venuename = \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;"
  },
  {
    "instruction": "first deep learning paper",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;"
  },
  {
    "instruction": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Blanche\" AND T2.customer_last_name = \"Huels\" AND T1.card_type_code = \"Credit\""
  },
  {
    "instruction": "Fetch me some papers on Question Answering",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "Which city has the highest temperature in February?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"temperature\" (\"City_ID\" int, \"Jan\" real, \"Feb\" real, \"Mar\" real, \"Apr\" real, \"Jun\" real, \"Jul\" real, \"Aug\" real, \"Sep\" real, \"Oct\" real, \"Nov\" real, \"Dec\" real, primary key (\"City_ID\"), foreign key (`city_id`) references `city`(`city_id`));",
    "output": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id ORDER BY T2.Feb DESC LIMIT 1"
  },
  {
    "instruction": "What is the total horses record for each farm, sorted ascending?",
    "input": "create table \"farm\" (\"Farm_ID\" int, \"Year\" int, \"Total_Horses\" real, \"Working_Horses\" real, \"Total_Cattle\" real, \"Oxen\" real, \"Bulls\" real, \"Cows\" real, \"Pigs\" real, \"Sheep_and_Goats\" real, primary key (\"Farm_ID\"));",
    "output": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC"
  },
  {
    "instruction": "What is the minimum and maximum number of bathrooms of all the apartments?",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT min(bathroom_count), max(bathroom_count) FROM Apartments"
  },
  {
    "instruction": "Which cities have regional population above 8000000 or below 5000000?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));",
    "output": "SELECT city FROM city WHERE regional_population > 10000000 UNION SELECT city FROM city WHERE regional_population < 5000000"
  },
  {
    "instruction": "Show the police force shared by counties with location on the east and west.",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT Police_force FROM county_public_safety WHERE LOCATION = \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION = \"West\""
  },
  {
    "instruction": "Show the names of all the clients with no booking.",
    "input": "create table clients (client_id integer not null, address_id integer not null, customer_email_address varchar(255), customer_name varchar(255), customer_phone varchar(255), other_details varchar(255), primary key (client_id), unique (client_id), foreign key (address_id) references addresses (address_id));create table bookings (booking_id integer not null , customer_id integer not null, workshop_group_id varchar(100) not null, status_code char(15) not null, store_id integer not null, order_date datetime not null, planned_delivery_date datetime not null, actual_delivery_date datetime not null, other_order_details varchar(255), primary key (booking_id), unique (booking_id), foreign key (customer_id) references clients (client_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id));create table clients (client_id integer not null, address_id integer not null, customer_email_address varchar(255), customer_name varchar(255), customer_phone varchar(255), other_details varchar(255), primary key (client_id), unique (client_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID"
  },
  {
    "instruction": "What are the names of artists who are Male and are from UK?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT artist_name FROM artist WHERE country = \"UK\" AND gender = \"Male\""
  },
  {
    "instruction": "What is the joined year of the pilot of the highest rank?",
    "input": "create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));",
    "output": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1"
  },
  {
    "instruction": "display those employees who joined after 7th September, 1987.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM employees WHERE hire_date > '1987-09-07'"
  },
  {
    "instruction": "Show all distinct positions of matches.",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT DISTINCT POSITION FROM match_season"
  },
  {
    "instruction": "What is the type of vocables that appears most frequently?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));",
    "output": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the order id and order details for the order more than two invoices.",
    "input": "create table `invoices` (`invoice_number` integer primary key, `order_id` integer not null, `invoice_date` datetime, foreign key (`order_id`) references `orders`(`order_id`));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T2.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count(*) > 2"
  },
  {
    "instruction": "Find the student ID and login name of the student with the most course enrollments",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT T1.student_id, T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "what is the shortest river in texas",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river WHERE traverse = \"texas\" ) AND traverse = \"texas\";"
  },
  {
    "instruction": "list the name, job title of all people ordered by their names.",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT name, job FROM Person ORDER BY name"
  },
  {
    "instruction": "List the major of each male student.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Major FROM STUDENT WHERE Sex = \"M\""
  },
  {
    "instruction": "Find the name of the activity that has the largest number of student participants.",
    "input": "create table activity (actid integer primary key, activity_name varchar(25));create table participates_in (stuid integer, actid integer, foreign key(stuid) references student(stuid), foreign key(actid) references activity(actid));",
    "output": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the full names of faculties who are members of department with department number 520.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table member_of (facid integer, dno integer, appt_type varchar(15), foreign key(facid) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT T1.Fname, T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520"
  },
  {
    "instruction": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.",
    "input": "create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table trained_in (physician integer not null, treatment integer not null, certificationdate datetime not null, certificationexpires datetime not null, constraint fk_trained_in_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_trained_in_procedures_code foreign key(treatment) references procedures(code), primary key(physician, treatment));create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT name FROM procedures WHERE cost < 5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\""
  },
  {
    "instruction": "what is the combined population of all 50 states",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT SUM ( population ) FROM state;"
  },
  {
    "instruction": "What is the least popular kind of decor?",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;"
  },
  {
    "instruction": "Which reign is the most common among wrestlers?",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the years, titles, and publishers for all books, ordered by year descending?",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT YEAR, book_title, publisher FROM book_club ORDER BY YEAR DESC"
  },
  {
    "instruction": "Find the name and budget of the latest movie by \" Quentin Tarantino \"",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t3.budget, t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1;"
  },
  {
    "instruction": "What is the average rating of reviews written in year 2014 ?",
    "input": "create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT AVG ( rating ) FROM review WHERE YEAR = 2014;"
  },
  {
    "instruction": "What are the different allergy types?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT DISTINCT allergytype FROM Allergy_type"
  },
  {
    "instruction": "what is the lowest point in iowa in meters",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT lowest_point FROM highlow WHERE state_name = \"iowa\";"
  },
  {
    "instruction": "What is the minimum, mean, and maximum age across all students?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT min(age), avg(age), max(age) FROM Student"
  },
  {
    "instruction": "Find the first names of students who took exactly one class.",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));",
    "output": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T2.stu_num HAVING count(*) = 1"
  },
  {
    "instruction": "What are the names of all playlists that have more than 100 tracks?",
    "input": "create table playlist_tracks (playlist_id integer not null, track_id integer not null, constraint pk_playlisttrack primary key (playlist_id, track_id), foreign key (playlist_id) references playlists (id)\n        ON delete no action\n        ON update no action, foreign key (track_id) references tracks (id)\n        ON delete no action\n        ON update no action);create table playlists (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id) > 100;"
  },
  {
    "instruction": "return me the number of the keywords of \" Making database systems usable \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t2 ON t2.pid = t3.pid WHERE t2.title = \"Making database systems usable\";"
  },
  {
    "instruction": "Find the names of districts where have both city mall and village store type stores.",
    "input": "create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));create table \"store_district\" (\"Store_ID\" int, \"District_ID\" int, primary key (\"Store_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`district_id`) references `district`(`district_id`));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));create table \"store_district\" (\"Store_ID\" int, \"District_ID\" int, primary key (\"Store_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`district_id`) references `district`(`district_id`));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = \"Village Store\""
  },
  {
    "instruction": "Show the id, name of each editor and the number of journal committees they are on.",
    "input": "create table \"editor\" (\"Editor_ID\" int, \"Name\" text, \"Age\" real, primary key (\"Editor_ID\"));create table \"journal_committee\" (\"Editor_ID\" int, \"Journal_ID\" int, \"Work_Type\" text, primary key (\"Editor_ID\",\"Journal_ID\"), foreign key (\"Editor_ID\") references `editor`(\"Editor_ID\"), foreign key (\"Journal_ID\") references `journal`(\"Journal_ID\"));",
    "output": "SELECT T1.editor_id, T1.Name, COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id"
  },
  {
    "instruction": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT min(T1.duration), min(T2.rating), T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is"
  },
  {
    "instruction": "Count the number of films whose title contains the word 'Dummy'.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Rank_in_series\" int, \"Number_in_season\" int, \"Title\" text, \"Directed_by\" text, \"Original_air_date\" text, \"Production_code\" text, primary key (\"Film_ID\"));",
    "output": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\""
  },
  {
    "instruction": "Find the names of all the tracks that contain the word \"you\".",
    "input": "create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'"
  },
  {
    "instruction": "Display all the information about the department Marketing.",
    "input": "create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));",
    "output": "SELECT * FROM departments WHERE department_name = 'Marketing'"
  },
  {
    "instruction": "Find the name of the train whose route runs through greatest number of stations.",
    "input": "create table \"train\" (\"id\" int, \"train_number\" int, \"name\" text, \"origin\" text, \"destination\" text, \"time\" text, \"interval\" text, primary key (\"id\"));create table \"route\" (\"train_id\" int, \"station_id\" int, primary key (\"train_id\", \"station_id\"), foreign key (\"train_id\") references `train`(\"id\"), foreign key (\"station_id\") references `station`(\"id\"));",
    "output": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many king beds are there?",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT sum(beds) FROM Rooms WHERE bedtype = 'King';"
  },
  {
    "instruction": "Find the names of schools that have more than one donator with donation amount above 8.5.",
    "input": "create table \"endowment\" (\"endowment_id\" int, \"School_id\" int, \"donator_name\" text, \"amount\" real, primary key(\"endowment_id\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));",
    "output": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.amount > 8.5 GROUP BY T1.school_id HAVING count(*) > 1"
  },
  {
    "instruction": "What is the average fee for a CSU campus in the year of 2005?",
    "input": "create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));",
    "output": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 2005"
  },
  {
    "instruction": "Find the top 3 products which have the largest number of problems?",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "For each project id, how many staff does it have? List them in increasing order.",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT T1.project_id, count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC"
  },
  {
    "instruction": "What type has the most games?",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "display the employee id and salary of all employees who report to Payam (first name).",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id, salary FROM employees WHERE manager_id = (SELECT employee_id FROM employees WHERE first_name = 'Payam' )"
  },
  {
    "instruction": "What are the times of elimination for wrestlers with over 50 days held?",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held > 50"
  },
  {
    "instruction": "what author is most cited ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t1.authorname, COUNT ( t3.citingpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t3 ON t2.paperid = t3.citedpaperid GROUP BY t1.authorname ORDER BY COUNT ( t3.citingpaperid ) DESC;"
  },
  {
    "instruction": "How many lessons taught by staff whose first name has letter 'a' in it?",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\""
  },
  {
    "instruction": "What is the minimum, maximum, and average seating for all tracks.",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT min(seating), max(seating), avg(seating) FROM track"
  },
  {
    "instruction": "what river flows through illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = \"illinois\";"
  },
  {
    "instruction": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.",
    "input": "create table \"camera_lens\" (\"id\" int, \"brand\" text, \"name\" text, \"focal_length_mm\" real, \"max_aperture\" real, primary key(\"id\"));create table \"photos\" (\"id\" int, \"camera_lens_id\" int, \"mountain_id\" int, \"color\" text, \"name\" text, primary key(\"id\"), foreign key(\"camera_lens_id\") references `camera_lens`(\"id\"), foreign key(\"mountain_id\") references `mountain`(\"id\"));",
    "output": "SELECT T1.name, count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id = T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)"
  },
  {
    "instruction": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT DISTINCT artist_name FROM artist WHERE country = \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7"
  },
  {
    "instruction": "what states does the ohio river go through",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE river_name = \"ohio\";"
  },
  {
    "instruction": "Which location has the most corresponding counties?",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which cities have 2 to 4 parks?",
    "input": "create table park (park_id text, park_name text, park_alias text, city text, state text, country text);",
    "output": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;"
  },
  {
    "instruction": "Find the names of the chip models that are not used by any phone with full accreditation type.",
    "input": "create table \"chip_model\" (\"Model_name\" text, \"Launch_year\" real, \"RAM_MiB\" real, \"ROM_MiB\" real, \"Slots\" text, \"WiFi\" text, \"Bluetooth\" text, primary key (\"Model_name\"));create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type = 'Full'"
  },
  {
    "instruction": "Find the name of amenity that is most common in all dorms.",
    "input": "create table dorm_amenity (amenid integer, amenity_name varchar(25));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));",
    "output": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid = T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of musicals with nominee \"Bob Fosse\"?",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\""
  },
  {
    "instruction": "What are the distinct Famous release dates?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));",
    "output": "SELECT distinct(Famous_Release_date) FROM artist"
  },
  {
    "instruction": "Show card number, name, and hometown for all members in a descending order of level.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));",
    "output": "SELECT card_number, name, hometown FROM member ORDER BY LEVEL DESC"
  },
  {
    "instruction": "What is the name of the student who has the highest total credits in the History department.",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1"
  },
  {
    "instruction": "Where does Peter Mertens publish ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.journalid, t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Peter Mertens\";"
  },
  {
    "instruction": "Which channels broadcast both in the morning and at night? Give me the channel names.",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));",
    "output": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Night'"
  },
  {
    "instruction": "large-scale datasets used in semantic parsing",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid WHERE t4.keyphrasename = \"semantic parsing\";"
  },
  {
    "instruction": "Show codes and fates of missions, and names of ships involved.",
    "input": "create table \"mission\" (\"Mission_ID\" int, \"Ship_ID\" int, \"Code\" text, \"Launched_Year\" int, \"Location\" text, \"Speed_knots\" int, \"Fate\" text, primary key (\"Mission_ID\"), foreign key (\"Ship_ID\") references `ship`(\"Ship_ID\"));create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT T1.Code, T1.Fate, T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID"
  },
  {
    "instruction": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_product_categories` (`product_category_code` varchar(15) primary key, `product_category_description` varchar(80), `unit_of_measure` varchar(20));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code WHERE t3.color_description = \"white\" AND t2.unit_of_measure != \"Handful\""
  },
  {
    "instruction": "What is the location and name of the winning aircraft?",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT T2.Location, T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft"
  },
  {
    "instruction": "What has Richard Ladner published at chi ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Richard Ladner\" AND t4.venuename = \"chi\";"
  },
  {
    "instruction": "What are the first and last names of all students who are living in a dorm with a TV Lounge?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T1.fname, T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')"
  },
  {
    "instruction": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.",
    "input": "create table \"furniture\" (\"Furniture_ID\" int, \"Name\" text, \"Num_of_Component\" int, \"Market_Rate\" real, primary key (\"Furniture_ID\"));create table \"furniture_manufacte\" (\"Manufacturer_ID\" int, \"Furniture_ID\" int, \"Price_in_Dollar\" real, primary key (\"Manufacturer_ID\",\"Furniture_ID\"), foreign key (\"Manufacturer_ID\") references `manufacturer`(\"Manufacturer_ID\"), foreign key (\"Furniture_ID\") references `furniture`(\"Furniture_ID\"));create table \"manufacturer\" (\"Manufacturer_ID\" int, \"Open_Year\" real, \"Name\" text, \"Num_of_Factories\" int, \"Num_of_Shops\" int, primary key (\"Manufacturer_ID\"));create table \"furniture\" (\"Furniture_ID\" int, \"Name\" text, \"Num_of_Component\" int, \"Market_Rate\" real, primary key (\"Furniture_ID\"));create table \"furniture_manufacte\" (\"Manufacturer_ID\" int, \"Furniture_ID\" int, \"Price_in_Dollar\" real, primary key (\"Manufacturer_ID\",\"Furniture_ID\"), foreign key (\"Manufacturer_ID\") references `manufacturer`(\"Manufacturer_ID\"), foreign key (\"Furniture_ID\") references `furniture`(\"Furniture_ID\"));create table \"manufacturer\" (\"Manufacturer_ID\" int, \"Open_Year\" real, \"Name\" text, \"Num_of_Factories\" int, \"Num_of_Shops\" int, primary key (\"Manufacturer_ID\"));",
    "output": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component < 6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component > 10"
  },
  {
    "instruction": "Count how many appointments have been made in total.",
    "input": "create table appointment (appointmentid integer primary key not null, patient integer not null, prepnurse integer, physician integer not null, start datetime not null, end datetime not null, examinationroom text not null, constraint fk_appointment_patient_ssn foreign key(patient) references patient(ssn), constraint fk_appointment_nurse_employeeid foreign key(prepnurse) references nurse(employeeid), constraint fk_appointment_physician_employeeid foreign key(physician) references physician(employeeid));",
    "output": "SELECT count(*) FROM appointment"
  },
  {
    "instruction": "What are the full names and ages for all female students whose sex is F?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'"
  },
  {
    "instruction": "What are the name, latitude, and city of the station with the lowest latitude?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT name, lat, city FROM station ORDER BY lat LIMIT 1"
  },
  {
    "instruction": "Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2"
  },
  {
    "instruction": "Give me the the customer details and id for the customers who had two or more policies but did not file any claims.",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table customer_policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date date, end_date date, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table customer_policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date date, end_date date, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));",
    "output": "SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2 EXCEPT SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3 ON T2.policy_id = T3.policy_id"
  },
  {
    "instruction": "What are the first names of all students taking accoutning and Computer Information Systems classes?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Computer Info. Systems'"
  },
  {
    "instruction": "Find the famous titles of artists that do not have any volume.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)"
  },
  {
    "instruction": "How many games are played for all students?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT sum(gamesplayed) FROM Sportsinfo"
  },
  {
    "instruction": "What are the average rating and resolution of songs that are in Bangla?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT avg(rating), avg(resolution) FROM song WHERE languages = \"bangla\""
  },
  {
    "instruction": "what are some syntactic parsing papers that chris dyer did not write ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorname, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename = \"syntactic parsing\";"
  },
  {
    "instruction": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Starting_Year FROM technician WHERE Team = \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team = \"CWS\""
  },
  {
    "instruction": "Who has written the most papers at chi ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ), t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;"
  },
  {
    "instruction": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT stu_fname, stu_lname, stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1"
  },
  {
    "instruction": "return me the paper after 2000 in Databases area with more than 200 citations .",
    "input": "create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));create table \"domain_publication\" (\"did\" int, \"pid\" int, primary key (\"did\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"did\") references \"domain\"(\"did\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did = t1.did JOIN publication AS t3 ON t3.pid = t1.pid WHERE t2.name = \"Databases\" AND t3.citation_num > 200 AND t3.year > 2000;"
  },
  {
    "instruction": "Which catalog content has the smallest capacity? Return the catalog entry name.",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1"
  },
  {
    "instruction": "Return the apartment number with the largest number of bedrooms.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1"
  },
  {
    "instruction": "What are the address and phone number of the buildings managed by \"Brenden\"?",
    "input": "create table apartment_buildings (building_id integer not null, building_short_name char(15), building_full_name varchar(80), building_description varchar(255), building_address varchar(255), building_manager varchar(50), building_phone varchar(80), primary key (building_id), unique (building_id));",
    "output": "SELECT building_address, building_phone FROM Apartment_Buildings WHERE building_manager = \"Brenden\""
  },
  {
    "instruction": "Find the average and maximum rating of all reviews.",
    "input": "create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT avg(rating), max(rating) FROM review"
  },
  {
    "instruction": "What is the name of the tourist attraction that is associated with the photo \"game1\"?",
    "input": "create table photos (photo_id integer not null, tourist_attraction_id integer not null, name varchar(255), description varchar(255), filename varchar(255), other_details varchar(255), primary key (photo_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = \"game1\""
  },
  {
    "instruction": "Show the rank, first name, and last name for all the faculty.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT rank, Fname, Lname FROM Faculty"
  },
  {
    "instruction": "List the name and residence for players whose occupation is not \"Researcher\".",
    "input": "create table \"player\" (\"Player_ID\" int, \"Sponsor_name\" text, \"Player_name\" text, \"Gender\" text, \"Residence\" text, \"Occupation\" text, \"Votes\" int, \"Rank\" text, primary key (\"Player_ID\"));",
    "output": "SELECT Player_name, residence FROM player WHERE Occupation != \"Researcher\""
  },
  {
    "instruction": "what are the populations of the states through which the mississippi runs",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );"
  },
  {
    "instruction": "what are some good restaurants in the bay area ?",
    "input": "create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t2.house_number, t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = \"region0\" ) AND t1.rating > 2.5;"
  },
  {
    "instruction": "What are the different cities that have more than 100 memberships?",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT DISTINCT city FROM branch WHERE membership_amount >= 100"
  },
  {
    "instruction": "what is the most populated state bordering oklahoma",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"oklahoma\" ) ORDER BY population DESC LIMIT 1;"
  },
  {
    "instruction": "data sets for semantic parsing",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid WHERE t4.keyphrasename = \"semantic parsing\";"
  },
  {
    "instruction": "What are the names and location of the shops in ascending alphabetical order of name.",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT Shop_Name, LOCATION FROM shop ORDER BY Shop_Name ASC"
  },
  {
    "instruction": "Show the delegate from district 1 in election.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT Delegate FROM election WHERE District = 1"
  },
  {
    "instruction": "List the name of physicians who took some appointment.",
    "input": "create table appointment (appointmentid integer primary key not null, patient integer not null, prepnurse integer, physician integer not null, start datetime not null, end datetime not null, examinationroom text not null, constraint fk_appointment_patient_ssn foreign key(patient) references patient(ssn), constraint fk_appointment_nurse_employeeid foreign key(prepnurse) references nurse(employeeid), constraint fk_appointment_physician_employeeid foreign key(physician) references physician(employeeid));create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));",
    "output": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID"
  },
  {
    "instruction": "Count the number of customer cards of the type Debit.",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT count(*) FROM Customers_cards WHERE card_type_code = \"Debit\""
  },
  {
    "instruction": "Find the average age and number of male students (with sex M) from each city.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*), avg(age), city_code FROM student WHERE sex = 'M' GROUP BY city_code"
  },
  {
    "instruction": "Find the number of students that have at least one grade \"B\".",
    "input": "create table enrolled_in (stuid integer, cid varchar(7), grade varchar(2), foreign key(stuid) references student(stuid), foreign key(cid) references course(cid), foreign key(grade) references gradeconversion(lettergrade));",
    "output": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade = \"B\""
  },
  {
    "instruction": "What TAIL paper published in NIPS ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"TAIL\" AND t4.venuename = \"NIPS\";"
  },
  {
    "instruction": "List all countries of markets in descending order of number of cities.",
    "input": "create table \"market\" (\"Market_ID\" int, \"Country\" text, \"Number_cities\" int, primary key (\"Market_ID\"));",
    "output": "SELECT Country FROM market ORDER BY Number_cities DESC"
  },
  {
    "instruction": "What are the names of the members that have never registered at any branch?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));",
    "output": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)"
  },
  {
    "instruction": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;"
  },
  {
    "instruction": "What are the unique types of player positions in the tryout?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT count(DISTINCT pPos) FROM tryout"
  },
  {
    "instruction": "What are the ids and names of the companies that operated more than one flight?",
    "input": "create table \"operate_company\" (\"id\" int, \"name\" text, \"Type\" text, \"Principal_activities\" text, \"Incorporated_in\" text, \"Group_Equity_Shareholding\" real, primary key (\"id\"));create table \"flight\" (\"id\" int, \"Vehicle_Flight_number\" text, \"Date\" text, \"Pilot\" text, \"Velocity\" real, \"Altitude\" real, \"airport_id\" int, \"company_id\" int, primary key (\"id\"), foreign key (\"airport_id\") references `airport`(\"id\"), foreign key (\"company_id\") references `operate_company`(\"id\"));",
    "output": "SELECT T1.id, T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY T1.id HAVING count(*) > 1"
  },
  {
    "instruction": "What is the race class with most number of races.",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));",
    "output": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "how tall is the highest point in delaware",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_elevation FROM highlow WHERE state_name = \"delaware\";"
  },
  {
    "instruction": "What are the names and locations of all enzymes listed?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT name, LOCATION FROM enzyme"
  },
  {
    "instruction": "What are the distinct names of the products that cost more than the average?",
    "input": "create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price > (SELECT avg(Product_Price) FROM PRODUCTS)"
  },
  {
    "instruction": "how many papers does Christopher D. Manning have ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Christopher D. Manning\";"
  },
  {
    "instruction": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"MARROTTE\" AND T2.lastname = \"KIRK\""
  },
  {
    "instruction": "Display the first name and department name for each employee.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));",
    "output": "SELECT T1.first_name, T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id"
  },
  {
    "instruction": "What is the name of all tracks in the album named Balls to the Wall?",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";"
  },
  {
    "instruction": "Return the name and gender of the staff who was assigned in 2016.",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_gender` varchar(1), `staff_name` varchar(80));create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\""
  },
  {
    "instruction": "How many different software platforms are there for devices?",
    "input": "create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));",
    "output": "SELECT count(DISTINCT Software_Platform) FROM device"
  },
  {
    "instruction": "find all cities which has a \" Taj Mahal \" restaurant",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Taj Mahal\" AND t2.category_name = \"restaurant\";"
  },
  {
    "instruction": "Show the most common college of authors of submissions.",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many professors who has a either Ph.D. or MA degree?",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'"
  },
  {
    "instruction": "For each classroom, show the classroom number and count the number of distinct grades that use the room.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT classroom, count(DISTINCT grade) FROM list GROUP BY classroom"
  },
  {
    "instruction": "What are the names and years of the movies that has the top 3 highest rating star?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY T1.stars DESC LIMIT 3"
  },
  {
    "instruction": "Find the name of the airport in the city of Goroka.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT name FROM airports WHERE city = 'Goroka'"
  },
  {
    "instruction": "Who are the ministers who took office after 1961 or before 1959?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959"
  },
  {
    "instruction": "Datasets with semantic parsing information",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid WHERE t4.keyphrasename = \"semantic parsing\";"
  },
  {
    "instruction": "Which film has the most copies in the inventory? List both title and id.",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));create table inventory (inventory_id mediumint unsigned not null, film_id smallint unsigned not null, store_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (inventory_id), foreign key (store_id) references store (store_id), foreign key (film_id) references film (film_id));",
    "output": "SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List the document ids for any documents with the status code done and the type code paper.",
    "input": "create table documents (document_id integer not null, document_status_code char(15) not null, document_type_code char(15) not null, shipping_agent_code char(15), receipt_date datetime, receipt_number varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (document_status_code) references ref_document_status (document_status_code), foreign key (shipping_agent_code) references ref_shipping_agents (shipping_agent_code));",
    "output": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";"
  },
  {
    "instruction": "List all the customers in increasing order of IDs.",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));",
    "output": "SELECT customer_id, customer_name FROM customers ORDER BY customer_id ASC"
  },
  {
    "instruction": "Find the number of accounts with a savings balance that is higher than the average savings balance.",
    "input": "create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT count(*) FROM savings WHERE balance > (SELECT avg(balance) FROM savings)"
  },
  {
    "instruction": "Find how many school locations have the word 'NY'.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
  },
  {
    "instruction": "Find the rank of the faculty that the fewest faculties belong to.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "What are the names and locations of all tracks?",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT name, LOCATION FROM track"
  },
  {
    "instruction": "Which campus was opened between 1935 and 1939?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939"
  },
  {
    "instruction": "What are the course names, ordered by credits?",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT CName FROM COURSE ORDER BY Credits"
  },
  {
    "instruction": "which states have a river",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river;"
  },
  {
    "instruction": "Which projects have no outcome? List the project details.",
    "input": "create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));",
    "output": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )"
  },
  {
    "instruction": "What is the id of the department with the least number of staff?",
    "input": "create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.Sex = \"F\" AND T2.Election_Cycle = \"Spring\""
  },
  {
    "instruction": "What is the name and job title of the staff who was assigned the latest?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_gender` varchar(1), `staff_name` varchar(80));create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.staff_name, T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1"
  },
  {
    "instruction": "How many captains are in each rank?",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT count(*), rank FROM captain GROUP BY rank"
  },
  {
    "instruction": "Show different carriers of phones together with the number of phones with each carrier.",
    "input": "create table \"phone\" (\"Name\" text, \"Phone_ID\" int, \"Memory_in_G\" int, \"Carrier\" text, \"Price\" real, primary key (\"Phone_ID\"));",
    "output": "SELECT Carrier, COUNT(*) FROM phone GROUP BY Carrier"
  },
  {
    "instruction": "what is the height of mount mckinley",
    "input": "create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT mountain_altitude FROM mountain WHERE mountain_name = \"mckinley\";"
  },
  {
    "instruction": "What are the name, origin and owner of each program?",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));",
    "output": "SELECT name, origin, OWNER FROM program"
  },
  {
    "instruction": "What is the description of document status code 'working'?",
    "input": "create table ref_document_status (document_status_code char(15) not null, document_status_description varchar(255) not null, primary key (document_status_code));",
    "output": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";"
  },
  {
    "instruction": "How many students does KAWA GORDON teaches?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"KAWA\" AND T2.lastname = \"GORDON\""
  },
  {
    "instruction": "Find the title of the course that is offered by more than one department.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT title FROM course GROUP BY title HAVING count(*) > 1"
  },
  {
    "instruction": "What instrument did the musician with last name \"Heilo\" use in the song \"Le Pop\"?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));",
    "output": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = \"Heilo\" AND T3.title = \"Le Pop\""
  },
  {
    "instruction": "How many trips started from Mountain View city and ended at Palo Alto city?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = \"Mountain View\" AND T3.city = \"Palo Alto\""
  },
  {
    "instruction": "Find the code of city where most of students are living in.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "which papers in acl 2012 had Parsing in them ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"Parsing\" AND t3.year = 2012 AND t4.venuename = \"acl\";"
  },
  {
    "instruction": "What is the number of cities in the United States with more than 3 airports?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING count(*) > 3"
  },
  {
    "instruction": "What is the most cited paper of ohad shamir ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "Who acted \" Alan Turing \" in the movie \" The Imitation Game \" ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t2.role = \"Alan Turing\" AND t3.title = \"The Imitation Game\";"
  },
  {
    "instruction": "What are the names of people in ascending order of weight?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT Name FROM People ORDER BY Weight ASC"
  },
  {
    "instruction": "give me the lakes in california",
    "input": "create table `lake` (`lake_name` text , `area` double default null , `country_name` varchar(3) not null default '' , `state_name` text);",
    "output": "SELECT lake_name FROM lake WHERE state_name = \"california\";"
  },
  {
    "instruction": "What is the id and name of the employee with the highest salary?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT eid, name FROM Employee ORDER BY salary DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of candidates.",
    "input": "create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT count(*) FROM candidate"
  },
  {
    "instruction": "Give the color description for the product 'catnip'.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"catnip\""
  },
  {
    "instruction": "Find the dates of orders which belong to the customer named \"Jeramie\".",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\""
  },
  {
    "instruction": "What are the series featuring \" Scott Foley \" ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"tv_series\" (\"sid\" int, \"title\" text, \"release_year\" int, \"num_of_seasons\" int, \"num_of_episodes\" int, \"title_aka\" text, \"budget\" text, primary key(\"sid\"));",
    "output": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN tv_series AS t2 ON t2.sid = t3.msid WHERE t1.name = \"Scott Foley\";"
  },
  {
    "instruction": "List in alphabetic order the names of all distinct instructors.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT DISTINCT name FROM instructor ORDER BY name"
  },
  {
    "instruction": "List the types of competition and the number of competitions of each type.",
    "input": "create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));",
    "output": "SELECT Competition_type, COUNT(*) FROM competition GROUP BY Competition_type"
  },
  {
    "instruction": "return me the references of \" Making database systems usable \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT reference_num FROM publication WHERE title = \"Making database systems usable\";"
  },
  {
    "instruction": "What are the first name, last name, and phone number of all the female faculty members?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT Fname, Lname, phone FROM Faculty WHERE Sex = 'F'"
  },
  {
    "instruction": "When did the first payment happen?",
    "input": "create table payment (payment_id smallint unsigned not null, customer_id smallint unsigned not null, staff_id tinyint unsigned not null, rental_id int default null, amount decimal(5, 2) not null, payment_date datetime not null, last_update timestamp default current_timestamp, primary key (payment_id), foreign key (rental_id) references rental (rental_id), foreign key (customer_id) references customer (customer_id), foreign key (staff_id) references staff (staff_id));",
    "output": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1"
  },
  {
    "instruction": "How many institutions are there?",
    "input": "create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT count(*) FROM inst"
  },
  {
    "instruction": "For each customer status code, how many customers are classified that way?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT customer_status_code, count(*) FROM Customers GROUP BY customer_status_code;"
  },
  {
    "instruction": "How many editors are there?",
    "input": "create table \"editor\" (\"Editor_ID\" int, \"Name\" text, \"Age\" real, primary key (\"Editor_ID\"));",
    "output": "SELECT count(*) FROM editor"
  },
  {
    "instruction": "Give me the title and highest price for each film.",
    "input": "create table \"schedule\" (\"Cinema_ID\" int, \"Film_ID\" int, \"Date\" text, \"Show_times_per_day\" int, \"Price\" float, primary key (\"Cinema_ID\",\"Film_ID\"), foreign key (`film_id`) references `film`(`film_id`), foreign key (`cinema_id`) references `cinema`(`cinema_id`));create table \"film\" (\"Film_ID\" int, \"Rank_in_series\" int, \"Number_in_season\" int, \"Title\" text, \"Directed_by\" text, \"Original_air_date\" text, \"Production_code\" text, primary key (\"Film_ID\"));",
    "output": "SELECT T2.title, max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id"
  },
  {
    "instruction": "What are the distinct unit prices of all tracks?",
    "input": "create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT distinct(UnitPrice) FROM TRACK"
  },
  {
    "instruction": "What is the total and maximum duration of trips with bike id 636?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT sum(duration), max(duration) FROM trip WHERE bike_id = 636"
  },
  {
    "instruction": "Show all movie titles, years, and directors, ordered by budget.",
    "input": "create table \"movie\" (\"movie_id\" int, \"Title\" text, \"Year\" int, \"Director\" text, \"Budget_million\" real, \"Gross_worldwide\" int, primary key(\"movie_id\"));",
    "output": "SELECT title, YEAR, director FROM movie ORDER BY budget_million"
  },
  {
    "instruction": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\""
  },
  {
    "instruction": "How many different roles are there in the club \"Bootup Baltimore\"?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));",
    "output": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = \"Bootup Baltimore\""
  },
  {
    "instruction": "What is the average ticket sales gross in dollars of films?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT avg(Gross_in_dollar) FROM film"
  },
  {
    "instruction": "What are the names of all students who tried out in alphabetical order?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID ORDER BY T1.pName"
  },
  {
    "instruction": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
    "input": "create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT address_content FROM addresses WHERE city = \"East Julianaside\" AND state_province_county = \"Texas\" UNION SELECT address_content FROM addresses WHERE city = \"Gleasonmouth\" AND state_province_county = \"Arizona\""
  },
  {
    "instruction": "Who served as an advisor for students who have treasurer votes in the spring election cycle?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote WHERE T2.Election_Cycle = \"Spring\""
  },
  {
    "instruction": "How many type of jobs do they have?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT count(DISTINCT job) FROM Person"
  },
  {
    "instruction": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
    "input": "create table \"game\" (\"stadium_id\" int, \"id\" int, \"Season\" int, \"Date\" text, \"Home_team\" text, \"Away_team\" text, \"Score\" text, \"Competition\" text, primary key (\"id\"), foreign key (\"stadium_id\") references `stadium`(\"id\"));create table \"injury_accident\" (\"game_id\" int, \"id\" int, \"Player\" text, \"Injury\" text, \"Number_of_matches\" text, \"Source\" text, primary key (\"id\"), foreign key (\"game_id\") references `game`(\"id\"));",
    "output": "SELECT T1.date, T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.season DESC"
  },
  {
    "instruction": "Show all locations and the number of gas stations in each location ordered by the count.",
    "input": "create table \"gas_station\" (\"Station_ID\" int, \"Open_Year\" int, \"Location\" text, \"Manager_Name\" text, \"Vice_Manager_Name\" text, \"Representative_Name\" text, primary key (\"Station_ID\"));",
    "output": "SELECT LOCATION, count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)"
  },
  {
    "instruction": "display the department name and number of employees in each of the department.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));",
    "output": "SELECT T2.department_name, COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name"
  },
  {
    "instruction": "Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT Industry FROM Companies WHERE Headquarters = \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters = \"China\""
  },
  {
    "instruction": "What is the campus fee for San Jose State University in 1996?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));",
    "output": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND T2.year = 1996"
  },
  {
    "instruction": "Which catalog publisher has published the most catalogs?",
    "input": "create table `catalogs` (`catalog_id` integer primary key, `catalog_name` varchar(50), `catalog_publisher` varchar(80), `date_of_publication` datetime, `date_of_latest_revision` datetime);",
    "output": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the max and min grade point for all letter grade.",
    "input": "create table gradeconversion (lettergrade varchar(2) primary key, gradepoint float);",
    "output": "SELECT max(gradepoint), min(gradepoint) FROM GRADECONVERSION"
  },
  {
    "instruction": "List all tips for \" Cafe Zinho \" in Pennsylvania in 2010 .",
    "input": "create table \"tip\" (\"tip_id\" int, \"business_id\" text, \"text\" text, \"user_id\" text, \"likes\" int, \"year\" int, \"month\" text, primary key(\"tip_id\") foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Cafe Zinho\" AND t1.state = \"Pennsylvania\" AND t2.year = 2010;"
  },
  {
    "instruction": "What are the course codes for every class that the student with the last name Smithson took?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'"
  },
  {
    "instruction": "What is the name of the media type that is least common across all tracks?",
    "input": "create table `mediatype` (`mediatypeid` integer not null , `name` varchar(120) default null , primary key (`mediatypeid`));create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1"
  },
  {
    "instruction": "syntactic parsing papers not written by chris dyer",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorname, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename = \"syntactic parsing\";"
  },
  {
    "instruction": "Show all sport name and the number of students.",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT sportname, count(*) FROM Sportsinfo GROUP BY sportname"
  },
  {
    "instruction": "find the name of all departments that do actually have one or more employees assigned to them.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));",
    "output": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id"
  },
  {
    "instruction": "papers about Parsing that used Jeopardy! Questions and were published at ACL 2014",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid = t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid = t3.paperid JOIN paper AS t2 ON t2.paperid = t3.paperid JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid = t1.keyphraseid WHERE t5.datasetname = \"Jeopardy! Questions\" AND t1.keyphrasename = \"Parsing\" AND t2.year = 2014 AND t6.venuename = \"ACL\";"
  },
  {
    "instruction": "Find all users who have written tips about businesses in Dallas",
    "input": "create table \"tip\" (\"tip_id\" int, \"business_id\" text, \"text\" text, \"user_id\" text, \"likes\" int, \"year\" int, \"month\" text, primary key(\"tip_id\") foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.city = \"Dallas\";"
  },
  {
    "instruction": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT max(T2.resolution), min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE \"3:%\""
  },
  {
    "instruction": "How many different status codes of things are there?",
    "input": "create table timed_status_of_things (thing_id integer not null, date_and_date datetime not null, status_of_thing_code char(15) not null, primary key (thing_id, date_and_date, status_of_thing_code), foreign key (thing_id) references things (thing_id));",
    "output": "SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things"
  },
  {
    "instruction": "return me the authors who have cooperated with \" H. V. Jagadish \" after 2000 .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\" AND t5.year > 2000;"
  },
  {
    "instruction": "List the name, origin and owner of each program.",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));",
    "output": "SELECT name, origin, OWNER FROM program"
  },
  {
    "instruction": "Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT DISTINCT T2.emp_fname, T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'"
  },
  {
    "instruction": "Count the number of artists.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT count(*) FROM artist"
  },
  {
    "instruction": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.",
    "input": "create table \"exhibition_record\" (\"Exhibition_ID\" int, \"Date\" text, \"Attendance\" int, primary key (\"Exhibition_ID\",\"Date\"), foreign key (`exhibition_id`) references `exhibition`(`exhibition_id`));create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));create table \"exhibition_record\" (\"Exhibition_ID\" int, \"Date\" text, \"Attendance\" int, primary key (\"Exhibition_ID\",\"Date\"), foreign key (`exhibition_id`) references `exhibition`(`exhibition_id`));create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500"
  },
  {
    "instruction": "What are the allergies and their types?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT allergy, allergytype FROM Allergy_type"
  },
  {
    "instruction": "What is the zip code of the hosue of the employee named Janessa Sawayn?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
  },
  {
    "instruction": "What are the codes corresponding to document types for which there are less than 3 documents?",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*) < 3"
  },
  {
    "instruction": "What are the names of all instructors with names that include \"dar\"?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name FROM instructor WHERE name LIKE '%dar%'"
  },
  {
    "instruction": "Find the code of the document type \"Paper\".",
    "input": "create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));",
    "output": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name = \"Paper\""
  },
  {
    "instruction": "where can we find some restaurants in the bay area ?",
    "input": "create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t2.house_number, t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = \"bay area\" );"
  },
  {
    "instruction": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT flno, origin, destination FROM Flight ORDER BY origin"
  },
  {
    "instruction": "List all open years when at least two shops are opened.",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*) >= 2"
  },
  {
    "instruction": "Which order deals with the most items? Return the order id.",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer primary key, `product_id` integer not null, `order_id` integer not null, `order_item_status` varchar(10) not null, `order_item_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show all the distinct president votes made on 08/30/2015.",
    "input": "create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date = \"08/30/2015\""
  },
  {
    "instruction": "What are the names and prices of all products in the store?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT name, price FROM products"
  },
  {
    "instruction": "Find the oldest log id and its corresponding problem id.",
    "input": "create table `problem_log` (`problem_log_id` integer primary key, `assigned_to_staff_id` integer not null, `problem_id` integer not null, `problem_category_code` varchar(20) not null, `problem_status_code` varchar(20) not null, `log_entry_date` datetime, `log_entry_description` varchar(255), `log_entry_fix` varchar(255), `other_log_details` varchar(255), foreign key (`problem_category_code`) references `problem_category_codes`(`problem_category_code`), foreign key (`assigned_to_staff_id`) references `staff`(`staff_id`), foreign key (`problem_id`) references `problems`(`problem_id`), foreign key (`problem_status_code`) references `problem_status_codes`(`problem_status_code`));",
    "output": "SELECT problem_log_id, problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1"
  },
  {
    "instruction": "How many students are taught by teacher TARRING LEIA?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"TARRING\" AND T2.lastname = \"LEIA\""
  },
  {
    "instruction": "What are the names of everybody sorted by age in descending order?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT name FROM Person ORDER BY age DESC"
  },
  {
    "instruction": "Show the station name and number of trains in each station.",
    "input": "create table \"train_station\" (\"Train_ID\" int, \"Station_ID\" int, primary key (\"Train_ID\",\"Station_ID\"), foreign key (\"Train_ID\") references \"train\"(\"Train_ID\"), foreign key (\"Station_ID\") references \"station\"(\"Station_ID\"));create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));",
    "output": "SELECT T2.name, count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id"
  },
  {
    "instruction": "What are the last names of the author of the paper titled \"Binders Unbound\"?",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Binders Unbound\""
  },
  {
    "instruction": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT title, Studio FROM film WHERE Studio LIKE \"%Universal%\""
  },
  {
    "instruction": "What is the name of the nurse has the most appointments?",
    "input": "create table nurse (employeeid integer primary key not null, name varchar(30) not null, position varchar(30) not null, registered boolean not null, ssn integer not null);create table appointment (appointmentid integer primary key not null, patient integer not null, prepnurse integer, physician integer not null, start datetime not null, end datetime not null, examinationroom text not null, constraint fk_appointment_patient_ssn foreign key(patient) references patient(ssn), constraint fk_appointment_nurse_employeeid foreign key(prepnurse) references nurse(employeeid), constraint fk_appointment_physician_employeeid foreign key(physician) references physician(employeeid));",
    "output": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "In which distinct years was the governor \"Eliot Spitzer\"?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT DISTINCT YEAR FROM party WHERE Governor = \"Eliot Spitzer\""
  },
  {
    "instruction": "How old is each gender, on average?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT avg(age), gender FROM Person GROUP BY gender"
  },
  {
    "instruction": "What are the albums produced in year 2010?",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);",
    "output": "SELECT * FROM Albums WHERE YEAR = 2010"
  },
  {
    "instruction": "How many classes are professor whose last name is Graztevski has?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'"
  },
  {
    "instruction": "What are the different classes of races, and how many races correspond to each?",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));",
    "output": "SELECT CLASS, count(*) FROM race GROUP BY CLASS"
  },
  {
    "instruction": "What are the states of the colleges where students who tried out for the striker position attend?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker'"
  },
  {
    "instruction": "Please show each industry and the corresponding number of companies in that industry.",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT Industry, COUNT(*) FROM Companies GROUP BY Industry"
  },
  {
    "instruction": "Return the type code of the document named \"David CV\".",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_type_code FROM documents WHERE document_name = \"David CV\""
  },
  {
    "instruction": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.",
    "input": "create table apartment_buildings (building_id integer not null, building_short_name char(15), building_full_name varchar(80), building_description varchar(255), building_address varchar(255), building_manager varchar(50), building_phone varchar(80), primary key (building_id), unique (building_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2"
  },
  {
    "instruction": "top authors working on ImageNet ?",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t4 ON t4.paperid = t2.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t1.datasetname = \"ImageNet\" GROUP BY t3.paperid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "Show all different home cities.",
    "input": "create table \"driver\" (\"Driver_ID\" int, \"Name\" text, \"Party\" text, \"Home_city\" text, \"Age\" int, primary key (\"Driver_ID\"));",
    "output": "SELECT DISTINCT home_city FROM driver"
  },
  {
    "instruction": "What is the average quantity of stocks?",
    "input": "create table \"stock\" (\"Shop_ID\" int, \"Device_ID\" int, \"Quantity\" int, primary key (\"Shop_ID\",\"Device_ID\"), foreign key (`shop_id`) references `shop`(`shop_id`), foreign key (`device_id`) references `device`(`device_id`));",
    "output": "SELECT avg(Quantity) FROM stock"
  },
  {
    "instruction": "Find courses that ran in Fall 2009 but not in Spring 2010.",
    "input": "create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);",
    "output": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010"
  },
  {
    "instruction": "What is the description of the product category with the code 'Spices'?",
    "input": "create table `ref_product_categories` (`product_category_code` varchar(15) primary key, `product_category_description` varchar(80), `unit_of_measure` varchar(20));",
    "output": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code = \"Spices\""
  },
  {
    "instruction": "Find the name and gender of the candidate who got the highest support rate.",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT t1.name, t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of courses without prerequisites?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));",
    "output": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
  },
  {
    "instruction": "Return the types of film market estimations in 1995.",
    "input": "create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));",
    "output": "SELECT TYPE FROM film_market_estimation WHERE YEAR = 1995"
  },
  {
    "instruction": "List from which date and to which date these staff work: project staff of the project which hires the most staffs",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT date_from, date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from, date_to FROM Project_Staff WHERE role_code = 'leader'"
  },
  {
    "instruction": "what are the major cities in the usa",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population > 150000;"
  },
  {
    "instruction": "List the service id and details for the events.",
    "input": "create table events (event_id integer not null, service_id integer not null, event_details varchar(255), primary key (event_id), foreign key (service_id) references services (service_id));",
    "output": "SELECT service_id, event_details FROM EVENTS"
  },
  {
    "instruction": "Which patient is undergoing the most recent treatment?",
    "input": "create table undergoes (patient integer not null, procedures integer not null, stay integer not null, dateundergoes datetime not null, physician integer not null, assistingnurse integer, primary key(patient, procedures, stay, dateundergoes), constraint fk_undergoes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_undergoes_procedures_code foreign key(procedures) references procedures(code), constraint fk_undergoes_stay_stayid foreign key(stay) references stay(stayid), constraint fk_undergoes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_undergoes_nurse_employeeid foreign key(assistingnurse) references nurse(employeeid));",
    "output": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1"
  },
  {
    "instruction": "Which courses are taught on days MTW?",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT CName FROM COURSE WHERE Days = \"MTW\""
  },
  {
    "instruction": "Find the names of all artists that have \"a\" in their names.",
    "input": "create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));",
    "output": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\""
  },
  {
    "instruction": "Show the invoice number and the number of transactions for each invoice.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT invoice_number, count(*) FROM Financial_transactions GROUP BY invoice_number"
  },
  {
    "instruction": "What are the main indstries and total market value for each industry?",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT main_industry, sum(market_value) FROM company GROUP BY main_industry"
  },
  {
    "instruction": "How many persons are not body builders?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));",
    "output": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)"
  },
  {
    "instruction": "What is the id of the candidate with the lowest oppose rate?",
    "input": "create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1"
  },
  {
    "instruction": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
    "input": "create table \"Player_Attributes\" (`id`\tinteger primary key autoincrement, `player_fifa_api_id`\tinteger, `player_api_id`\tinteger, `date`\ttext, `overall_rating`\tinteger, `potential`\tinteger, `preferred_foot`\ttext, `attacking_work_rate`\ttext, `defensive_work_rate`\ttext, `crossing`\tinteger, `finishing`\tinteger, `heading_accuracy`\tinteger, `short_passing`\tinteger, `volleys`\tinteger, `dribbling`\tinteger, `curve`\tinteger, `free_kick_accuracy`\tinteger, `long_passing`\tinteger, `ball_control`\tinteger, `acceleration`\tinteger, `sprint_speed`\tinteger, `agility`\tinteger, `reactions`\tinteger, `balance`\tinteger, `shot_power`\tinteger, `jumping`\tinteger, `stamina`\tinteger, `strength`\tinteger, `long_shots`\tinteger, `aggression`\tinteger, `interceptions`\tinteger, `positioning`\tinteger, `vision`\tinteger, `penalties`\tinteger, `marking`\tinteger, `standing_tackle`\tinteger, `sliding_tackle`\tinteger, `gk_diving`\tinteger, `gk_handling`\tinteger, `gk_kicking`\tinteger, `gk_positioning`\tinteger, `gk_reflexes`\tinteger, foreign key(`player_fifa_api_id`) references `player`(`player_fifa_api_id`), foreign key(`player_api_id`) references `player`(`player_api_id`));",
    "output": "SELECT preferred_foot, count(*) FROM Player_Attributes WHERE overall_rating > 80 GROUP BY preferred_foot"
  },
  {
    "instruction": "where can i eat french food in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"french\";"
  },
  {
    "instruction": "Show all statement id and the number of accounts for each statement.",
    "input": "create table accounts (account_id integer not null, statement_id integer not null, account_details varchar(255), primary key (account_id), foreign key (statement_id) references statements (statement_id));",
    "output": "SELECT STATEMENT_ID, count(*) FROM Accounts GROUP BY STATEMENT_ID"
  },
  {
    "instruction": "Find the name of the students who have more than one advisor?",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);",
    "output": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING count(*) > 1"
  },
  {
    "instruction": "Count the number of different software platforms.",
    "input": "create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));",
    "output": "SELECT count(DISTINCT Software_Platform) FROM device"
  },
  {
    "instruction": "how many citizens in california",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM state WHERE state_name = \"california\";"
  },
  {
    "instruction": "return me the homepage of \" University of Michigan \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));",
    "output": "SELECT homepage FROM organization WHERE name = \"University of Michigan\";"
  },
  {
    "instruction": "What are the distinct registration dates and the election cycles?",
    "input": "create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT Registration_Date, Election_Cycle FROM VOTING_RECORD"
  },
  {
    "instruction": "Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\".",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT DISTINCT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Oxford\""
  },
  {
    "instruction": "When did Luke S Zettlemoyer publish ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Luke S Zettlemoyer\" ORDER BY t3.year;"
  },
  {
    "instruction": "What are the distinct publishers of publications with price higher than 5000000?",
    "input": "create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));",
    "output": "SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000"
  },
  {
    "instruction": "What are the names of the technicians  and how many machines are they assigned to repair?",
    "input": "create table \"repair_assignment\" (\"technician_id\" int, \"repair_ID\" int, \"Machine_ID\" int, primary key (\"technician_id\",\"repair_ID\",\"Machine_ID\"), foreign key (`technician_id`) references `technician`(`technician_id`), foreign key (`repair_id`) references `repair`(`repair_id`), foreign key (`machine_id`) references `machine`(`machine_id`));create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT T2.Name, COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name"
  },
  {
    "instruction": "What are the countries of mountains with height bigger than 5000?",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT Country FROM mountain WHERE Height > 5000"
  },
  {
    "instruction": "List of papers by subhasis chaudhuri",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"subhasis chaudhuri\";"
  },
  {
    "instruction": "List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.",
    "input": "create table \"screen_mode\" (\"Graphics_mode\" real, \"Char_cells\" text, \"Pixels\" text, \"Hardware_colours\" real, \"used_kb\" real, \"map\" text, \"Type\" text, primary key (\"Graphics_mode\"));create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT DISTINCT T2.Hardware_Model_name, T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;"
  },
  {
    "instruction": "Show the location code, the starting date and ending data in that location for all the documents.",
    "input": "create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT location_code, date_in_location_from, date_in_locaton_to FROM Document_locations"
  },
  {
    "instruction": "List the id, color scheme, and name for all the photos.",
    "input": "create table \"photos\" (\"id\" int, \"camera_lens_id\" int, \"mountain_id\" int, \"color\" text, \"name\" text, primary key(\"id\"), foreign key(\"camera_lens_id\") references `camera_lens`(\"id\"), foreign key(\"mountain_id\") references `mountain`(\"id\"));",
    "output": "SELECT id, color, name FROM photos"
  },
  {
    "instruction": "Find the personal name, family name, and author ID of the course author that teaches the most courses.",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));",
    "output": "SELECT T1.personal_name, T1.family_name, T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of characteristics.",
    "input": "create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT count(*) FROM CHARACTERISTICS"
  },
  {
    "instruction": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
    "input": "create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));",
    "output": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC"
  },
  {
    "instruction": "Find the name and category of the most expensive product.",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `product_category_code` varchar(20) not null, `date_product_first_available` datetime, `date_product_discontinued` datetime, `product_name` varchar(80), `product_description` varchar(255), `product_price` decimal(19, 4));",
    "output": "SELECT product_name, product_category_code FROM products ORDER BY product_price DESC LIMIT 1"
  },
  {
    "instruction": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
    "input": "create table \"Web_client_accelerator\" (\"id\" int, \"name\" text, \"Operating_system\" text, \"Client\" text, \"Connection\" text, primary key(\"id\"));",
    "output": "SELECT name, operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
  },
  {
    "instruction": "What are the id of all the files in mp3 format?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);",
    "output": "SELECT f_id FROM files WHERE formats = \"mp3\""
  },
  {
    "instruction": "What are the names and year of construction for the mills of 'Grondzeiler' type?",
    "input": "create table \"mill\" (\"architect_id\" int, \"id\" int, \"location\" text, \"name\" text, \"type\" text, \"built_year\" int, \"notes\" text, primary key (\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));",
    "output": "SELECT name, built_year FROM mill WHERE TYPE = 'Grondzeiler'"
  },
  {
    "instruction": "give me a good arabic restaurant in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "where is the best restaurant in bay area for american food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"american\" );"
  },
  {
    "instruction": "What is the average and oldest age for each gender of student?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(age), max(age), sex FROM student GROUP BY sex"
  },
  {
    "instruction": "How many faculty members participate in an activity?",
    "input": "create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));",
    "output": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in"
  },
  {
    "instruction": "Which counties have two or more delegates? Give me the county names.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
    "input": "create table \"budget\" (\"School_id\" int, \"Year\" int, \"Budgeted\" int, \"total_budget_percent_budgeted\" real, \"Invested\" int, \"total_budget_percent_invested\" real, \"Budget_invested_percent\" text, primary key(\"School_id\",\"YEAR\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));create table \"endowment\" (\"endowment_id\" int, \"School_id\" int, \"donator_name\" text, \"amount\" real, primary key(\"endowment_id\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));",
    "output": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN endowment AS T3 ON T2.school_id = T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted) > 100 OR sum(T3.amount) > 10"
  },
  {
    "instruction": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
    "input": "create table `fault_log` (`fault_log_entry_id` integer primary key, `asset_id` integer not null, `recorded_by_staff_id` integer not null, `fault_log_entry_datetime` datetime, `fault_description` varchar(255), `other_fault_details` varchar(255), foreign key (`asset_id`) references `assets`(`asset_id`), foreign key (`recorded_by_staff_id`) references `staff`(`staff_id`));create table `fault_log_parts` (`fault_log_entry_id` integer not null, `part_fault_id` integer not null, `fault_status` varchar(10) not null, foreign key (`part_fault_id`) references `part_faults`(`part_fault_id`), foreign key (`fault_log_entry_id`) references `fault_log`(`fault_log_entry_id`));",
    "output": "SELECT T1.fault_description, T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id"
  },
  {
    "instruction": "Find all the instruments ever used by the musician with last name \"Heilo\"?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = \"Heilo\""
  },
  {
    "instruction": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = \"Mountain View\" AND T3.city = \"Palo Alto\""
  },
  {
    "instruction": "How many wines are produced at Robert Biale winery?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT count(*) FROM WINE WHERE Winery = \"Robert Biale\""
  },
  {
    "instruction": "Find the number of rooms with price higher than 120 for different decor.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT decor, count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor;"
  },
  {
    "instruction": "Show all distinct location names.",
    "input": "create table locations (location_id integer not null, location_name varchar(255), address varchar(255), other_details varchar(255), primary key (location_id));",
    "output": "SELECT DISTINCT Location_Name FROM LOCATIONS"
  },
  {
    "instruction": "Find all the zip codes in which the max dew point have never reached 70.",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70"
  },
  {
    "instruction": "List the first name and last name of customers have the amount of outstanding between 1000 and 3000.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT first_name, last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;"
  },
  {
    "instruction": "What are the names of instructors who advise more than one student?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);",
    "output": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING count(*) > 1"
  },
  {
    "instruction": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"driverStandings\" (\"driverStandingsId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"points\" real, \"position\" integer, \"positionText\" text, \"wins\" integer, foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20"
  },
  {
    "instruction": "in what venues does Peter Mertens publish ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.journalid, t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Peter Mertens\";"
  },
  {
    "instruction": "What is the names of the physicians who prescribe medication Thesisin?",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));create table medication (code integer primary key not null, name varchar(30) not null, brand varchar(30) not null, description varchar(30) not null);",
    "output": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name = \"Thesisin\""
  },
  {
    "instruction": "What are the different ranges of the 3 mountains with the highest prominence?",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3"
  },
  {
    "instruction": "How many films are there in each category? List the genre name, genre id and the count.",
    "input": "create table film_category (film_id smallint unsigned not null, category_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (film_id, category_id), foreign key (film_id) references film (film_id), foreign key (category_id) references category (category_id));create table category (category_id tinyint unsigned not null, name varchar(25) not null, last_update timestamp not null default current_timestamp, primary key (category_id));",
    "output": "SELECT T2.name, T1.category_id, count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id"
  },
  {
    "instruction": "How many locations are listed in the database?",
    "input": "create table ref_locations (location_code char(15) not null, location_name varchar(255) not null, location_description varchar(255) not null, primary key (location_code));",
    "output": "SELECT count(*) FROM Ref_locations"
  },
  {
    "instruction": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1` varchar(120), `line_2` varchar(120), `line_3` varchar(120), `city` varchar(80), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));create table `teachers` (`teacher_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `gender` varchar(1), `cell_mobile_number` varchar(40), `email_address` varchar(40), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = \"Lyla\""
  },
  {
    "instruction": "What are the emails of employees with null commission, salary between 7000 and 12000, and who work in department 50?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT email FROM employees WHERE commission_pct = \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50"
  },
  {
    "instruction": "Find the name of customers who have both saving and checking account types.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT cust_name FROM customer WHERE acc_type = 'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type = 'checking'"
  },
  {
    "instruction": "Find all information of all the products with a price between $60 and $120.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT * FROM products WHERE price BETWEEN 60 AND 120"
  },
  {
    "instruction": "How many employees are there all together?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);",
    "output": "SELECT count(*) FROM employee"
  },
  {
    "instruction": "What campuses are in Los Angeles county?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE county = \"Los Angeles\""
  },
  {
    "instruction": "Which movie had the character \" Daffy Duck \"",
    "input": "create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));",
    "output": "SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid = t2.msid WHERE t2.role = \"Daffy Duck\";"
  },
  {
    "instruction": "What are the players who played for Columbus Crew, and how many years did each play for?",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Years_Played\" text, \"Total_WL\" text, \"Singles_WL\" text, \"Doubles_WL\" text, \"Team\" int, primary key (\"Player_ID\"), foreign key (`team`) references `team`(`team_id`));create table `team` (`team_id` int, `name` text, primary key (`team_id`));",
    "output": "SELECT T1.Player, T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\""
  },
  {
    "instruction": "Show the details and star ratings of the 3 least expensive hotels.",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT other_hotel_details, star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3"
  },
  {
    "instruction": "What is the shipping agent code of shipping agent UPS?",
    "input": "create table ref_shipping_agents (shipping_agent_code char(15) not null, shipping_agent_name varchar(255) not null, shipping_agent_description varchar(255) not null, primary key (shipping_agent_code));",
    "output": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";"
  },
  {
    "instruction": "What is the name of the course with the most registered students?",
    "input": "create table courses (course_id varchar(100) not null, course_name varchar(120), course_description varchar(255), other_details varchar(255), primary key (course_id));create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));",
    "output": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Compute the total order quantities of the product \"photo\".",
    "input": "create table order_items (order_item_id integer not null , order_id integer not null, product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), primary key (order_item_id), foreign key (order_id) references customer_orders (order_id), foreign key (product_id) references products (product_id));create table products (product_id varchar(100) not null, product_name varchar(255), product_price decimal(20, 4), product_description varchar(255), other_product_service_details varchar(255), primary key (product_id), unique (product_id));",
    "output": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_Name = \"photo\""
  },
  {
    "instruction": "Who has written a paper that has the word \"Functional\" in its title? Return the first names of the authors.",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE \"%Functional%\""
  },
  {
    "instruction": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));",
    "output": "SELECT Date_of_ceremony FROM music_festival WHERE Category = \"Best Song\" AND RESULT = \"Awarded\""
  },
  {
    "instruction": "Find the average and maximum hours for the students whose tryout decision is yes.",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT avg(T1.HS), max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'"
  },
  {
    "instruction": "How many Target are there in \" Los Angeles \" ?",
    "input": "create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city = \"Los Angeles\" AND name = \"Target\";"
  },
  {
    "instruction": "Give the names, details, and data types of characteristics that are not found in any product.",
    "input": "create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT characteristic_name, other_characteristic_details, characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name, t1.other_characteristic_details, t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id"
  },
  {
    "instruction": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT stu_gpa, stu_phone, stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5"
  },
  {
    "instruction": "Return the names of shops, ordered by year of opening ascending.",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC"
  },
  {
    "instruction": "which venue publishes the most papers about deep learning",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t4.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"deep learning\" GROUP BY t4.venueid ORDER BY COUNT ( t3.paperid ) DESC;"
  },
  {
    "instruction": "Show other account details for account with name 338.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT other_account_details FROM Accounts WHERE account_name = \"338\""
  },
  {
    "instruction": "List the names and emails of customers who payed by Visa card.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(10) not null, `customer_name` varchar(80), `customer_phone` varchar(80), `customer_email` varchar(80), `date_became_customer` datetime);",
    "output": "SELECT customer_email, customer_name FROM customers WHERE payment_method = 'Visa'"
  },
  {
    "instruction": "Count the number of distinct names associated with the photos.",
    "input": "create table photos (photo_id integer not null, tourist_attraction_id integer not null, name varchar(255), description varchar(255), filename varchar(255), other_details varchar(255), primary key (photo_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id));",
    "output": "SELECT count(DISTINCT Name) FROM PHOTOS"
  },
  {
    "instruction": "Show the most common position of players in match seasons.",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the descriptions for the aircrafts?",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));",
    "output": "SELECT Description FROM aircraft"
  },
  {
    "instruction": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T1.FacID, count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID"
  },
  {
    "instruction": "What are teh names of the different products, as well as the number of customers who have ordered each product.",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));create table `products` (`product_id` integer primary key, `parent_product_id` integer, `production_type_code` varchar(15) not null, `unit_price` decimal(19, 4), `product_name` varchar(80), `product_color` varchar(20), `product_size` varchar(20), foreign key (`production_type_code`) references `product_categories`(`production_type_code`));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T2.product_name, count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name"
  },
  {
    "instruction": "Which allergy type has most number of allergies?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List the name of ships whose nationality is not \"United States\".",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT Name FROM ship WHERE Nationality != \"United States\""
  },
  {
    "instruction": "How many hours do the students spend studying in each department?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT sum(stu_hrs), dept_code FROM student GROUP BY dept_code"
  },
  {
    "instruction": "what is the longest river in the state with the highest point",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT t1.river_name FROM highlow AS t2 JOIN river AS t1 ON t1.traverse = t2.state_name WHERE t2.highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow ) ORDER BY t1.length DESC LIMIT 1;"
  },
  {
    "instruction": "Count the number of distinct claim outcome codes.",
    "input": "create table claims_processing (claim_processing_id integer not null, claim_id integer not null, claim_outcome_code char(15) not null, claim_stage_id integer not null, staff_id integer, primary key (claim_processing_id), foreign key (claim_id) references claim_headers (claim_header_id), foreign key (staff_id) references staff (staff_id));",
    "output": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing"
  },
  {
    "instruction": "Please show the employee last names that serves no more than 20 customers.",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `employee` (`employeeid` integer not null , `lastname` varchar(20) not null , `firstname` varchar(20) not null , `title` varchar(30) default null , `reportsto` integer default null , `birthdate` datetime default null , `hiredate` datetime default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) default null , primary key (`employeeid`) , constraint `fk_employeereportsto` foreign key (`reportsto`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20"
  },
  {
    "instruction": "What is the code of each role and the number of employees in each role?",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT role_code, count(*) FROM Employees GROUP BY role_code"
  },
  {
    "instruction": "What are the countries for each market ordered by decreasing number of cities?",
    "input": "create table \"market\" (\"Market_ID\" int, \"Country\" text, \"Number_cities\" int, primary key (\"Market_ID\"));",
    "output": "SELECT Country FROM market ORDER BY Number_cities DESC"
  },
  {
    "instruction": "Show the company name and the main industry for all companies whose headquarters are not from USA.",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT company, main_industry FROM company WHERE headquarters != 'USA'"
  },
  {
    "instruction": "What are the types of vocals used in the song \"Demon Kitty Rag\"?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Demon Kitty Rag\""
  },
  {
    "instruction": "How many users have reviewed Irish Pub in Dallas ?",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.city = \"Dallas\" AND t2.category_name = \"Irish Pub\";"
  },
  {
    "instruction": "What is the average access count of documents that have the least common structure?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "what papers were published in Academic radiology in 1995 ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `journal` (`journalid` integer not null , `journalname` varchar(100) default null , primary key (`journalid`));",
    "output": "SELECT DISTINCT t2.paperid FROM paper AS t2 JOIN journal AS t1 ON t2.journalid = t1.journalid WHERE t1.journalname = \"Academic radiology\" AND t2.year = 1995;"
  },
  {
    "instruction": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
    "input": "create table `fault_log` (`fault_log_entry_id` integer primary key, `asset_id` integer not null, `recorded_by_staff_id` integer not null, `fault_log_entry_datetime` datetime, `fault_description` varchar(255), `other_fault_details` varchar(255), foreign key (`asset_id`) references `assets`(`asset_id`), foreign key (`recorded_by_staff_id`) references `staff`(`staff_id`));create table `fault_log_parts` (`fault_log_entry_id` integer not null, `part_fault_id` integer not null, `fault_status` varchar(10) not null, foreign key (`part_fault_id`) references `part_faults`(`part_fault_id`), foreign key (`fault_log_entry_id`) references `fault_log`(`fault_log_entry_id`));",
    "output": "SELECT T1.fault_log_entry_id, T1.fault_description, T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many courses are there in total?",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));",
    "output": "SELECT count(*) FROM COURSES"
  },
  {
    "instruction": "Find the number of papers published by authors from the institution \"Tokohu University\".",
    "input": "create table papers (paperid integer, title text, primary key (paperid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Tokohu University\""
  },
  {
    "instruction": "What is the most popular paper this year in CVPR ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.citedpaperid, COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2016 AND t2.venuename = \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;"
  },
  {
    "instruction": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT DISTINCT T1.fname, T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = \"Milk\" OR T2.Allergy = \"Cat\""
  },
  {
    "instruction": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?",
    "input": "create table statements (statement_id integer not null, statement_details varchar(255), primary key (statement_id), foreign key (statement_id) references documents (document_id));create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT T1.statement_details, T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id = T2.document_id WHERE T1.statement_details = 'Private Project'"
  },
  {
    "instruction": "Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".",
    "input": "create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT First_year, Last_year FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\""
  },
  {
    "instruction": "what state has the sparsest population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state );"
  },
  {
    "instruction": "Find the names of the customers who have an deputy policy.",
    "input": "create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));",
    "output": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\""
  },
  {
    "instruction": "What is the first name of the author with last name \"Ueno\"?",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));",
    "output": "SELECT fname FROM authors WHERE lname = \"Ueno\""
  },
  {
    "instruction": "what are the capital city in texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT capital FROM state WHERE state_name = \"texas\";"
  },
  {
    "instruction": "What is the most frequently ordered product? Tell me the detail of the product",
    "input": "create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));create table `products` (`product_id` integer primary key, `product_details` varchar(255));",
    "output": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what is the length of the rio grande river",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT LENGTH FROM river WHERE river_name = \"rio grande\";"
  },
  {
    "instruction": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));",
    "output": "SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activitor'"
  },
  {
    "instruction": "What are the distinct first names of the students who have class president votes?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_Senator_VOTE"
  },
  {
    "instruction": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name, salary FROM instructor WHERE salary < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')"
  },
  {
    "instruction": "what is the capital city of the largest state in the us",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT capital FROM state WHERE area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "what is the smallest state bordering texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" );"
  },
  {
    "instruction": "How many bank branches are there?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT count(*) FROM bank"
  },
  {
    "instruction": "Show the name, time, and service for all trains.",
    "input": "create table \"train\" (\"Train_ID\" int, \"Name\" text, \"Time\" text, \"Service\" text, primary key (\"Train_ID\"));",
    "output": "SELECT name, TIME, service FROM train"
  },
  {
    "instruction": "What are the different fates of the mission that involved ships from the United States?",
    "input": "create table \"mission\" (\"Mission_ID\" int, \"Ship_ID\" int, \"Code\" text, \"Launched_Year\" int, \"Location\" text, \"Speed_knots\" int, \"Fate\" text, primary key (\"Mission_ID\"), foreign key (\"Ship_ID\") references `ship`(\"Ship_ID\"));create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Nationality = \"United States\""
  },
  {
    "instruction": "What is the maximum, minimum and average years spent working on a school bus?",
    "input": "create table \"school_bus\" (\"School_ID\" int, \"Driver_ID\" int, \"Years_Working\" int, \"If_full_time\" bool, primary key (\"School_ID\",\"Driver_ID\"), foreign key (\"School_ID\") references `school`(\"School_ID\"), foreign key (\"Driver_ID\") references `driver`(\"Driver_ID\"));",
    "output": "SELECT max(years_working), min(years_working), avg(years_working) FROM school_bus"
  },
  {
    "instruction": "List all manufacturer names and ids ordered by their opening year.",
    "input": "create table \"manufacturer\" (\"Manufacturer_ID\" int, \"Open_Year\" real, \"Name\" text, \"Num_of_Factories\" int, \"Num_of_Shops\" int, primary key (\"Manufacturer_ID\"));",
    "output": "SELECT name, manufacturer_id FROM manufacturer ORDER BY open_year"
  },
  {
    "instruction": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));create table view_unit_status (apt_id integer, apt_booking_id integer, status_date datetime not null, available_yn bit, primary key (status_date), foreign key (apt_id) references apartments (apt_id), foreign key (apt_booking_id) references apartment_bookings (apt_booking_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));create table view_unit_status (apt_id integer, apt_booking_id integer, status_date datetime not null, available_yn bit, primary key (status_date), foreign key (apt_id) references apartments (apt_id), foreign key (apt_booking_id) references apartment_bookings (apt_booking_id));",
    "output": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 1"
  },
  {
    "instruction": "What are the average and minimum age of captains in different class?",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT avg(age), min(age), CLASS FROM captain GROUP BY CLASS"
  },
  {
    "instruction": "Who are the players from UCLA?",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT Player FROM match_season WHERE College = \"UCLA\""
  },
  {
    "instruction": "return me all the papers in PVLDB in \" University of Michigan \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN journal AS t3 ON t5.jid = t3.jid WHERE t3.name = \"PVLDB\" AND t2.name = \"University of Michigan\";"
  },
  {
    "instruction": "With which kind of payment method were the least number of payments processed?",
    "input": "create table payments (payment_id integer not null, settlement_id integer not null, payment_method_code varchar(255), date_payment_made date, amount_payment integer, primary key (payment_id), foreign key (settlement_id) references settlements (settlement_id));",
    "output": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "Which colleges does each player with a name that starts with the letter D  who tried out go to?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT T1.cName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T2.pName LIKE 'D%'"
  },
  {
    "instruction": "Which service id and type has the least number of participants?",
    "input": "create table participants (participant_id integer not null, participant_type_code char(15) not null, participant_details varchar(255), primary key (participant_id));create table participants_in_events (event_id integer not null, participant_id integer not null, primary key (event_id, participant_id), foreign key (participant_id) references participants (participant_id), foreign key (event_id) references events (event_id));create table events (event_id integer not null, service_id integer not null, event_details varchar(255), primary key (event_id), foreign key (service_id) references services (service_id));create table services (service_id integer not null, service_type_code char(15) not null, primary key (service_id));",
    "output": "SELECT T3.service_id, T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID = T3.Event_ID JOIN services AS T4 ON T3.service_id = T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "What are the names of representatives and the dates of elections they participated in.",
    "input": "create table \"election\" (\"Election_ID\" int, \"Representative_ID\" int, \"Date\" text, \"Votes\" real, \"Vote_Percent\" real, \"Seats\" real, \"Place\" real, primary key (\"Election_ID\"), foreign key (\"Representative_ID\") references `representative`(\"Representative_ID\"));create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));",
    "output": "SELECT T2.Name, T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID"
  },
  {
    "instruction": "what is the population of the capital of the largest state through which the mississippi runs",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE area = ( SELECT MAX ( t1.area ) FROM state AS t1 JOIN river AS t2 ON t1.state_name = t2.traverse WHERE t2.river_name = \"mississippi\" ) );"
  },
  {
    "instruction": "List all public schools and their locations.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT school, LOCATION FROM university WHERE affiliation = 'Public'"
  },
  {
    "instruction": "Please show the names and the players of clubs.",
    "input": "create table \"club\" (\"Club_ID\" int, \"name\" text, \"Region\" text, \"Start_year\" text, primary key (\"Club_ID\"));create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT T1.name, T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID"
  },
  {
    "instruction": "Return the the details of all products.",
    "input": "create table `products` (`product_id` integer primary key, `product_details` varchar(255));",
    "output": "SELECT DISTINCT product_details FROM products"
  },
  {
    "instruction": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900"
  },
  {
    "instruction": "What is the total number of products that are in orders with status \"Cancelled\"?",
    "input": "create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = \"Cancelled\""
  },
  {
    "instruction": "what rivers are in states that border alabama",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = \"alabama\" );"
  },
  {
    "instruction": "What is the average, maximum, and minimum budget for all movies before 2000.",
    "input": "create table \"movie\" (\"movie_id\" int, \"Title\" text, \"Year\" int, \"Director\" text, \"Budget_million\" real, \"Gross_worldwide\" int, primary key(\"movie_id\"));",
    "output": "SELECT avg(budget_million), max(budget_million), min(budget_million) FROM movie WHERE YEAR < 2000"
  },
  {
    "instruction": "what is the smallest city in the us",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city );"
  },
  {
    "instruction": "List the personal names and family names of all the students in alphabetical order of family name.",
    "input": "create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT personal_name, family_name FROM Students ORDER BY family_name"
  },
  {
    "instruction": "How many artists are from Bangladesh?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT count(*) FROM artist WHERE country = \"Bangladesh\""
  },
  {
    "instruction": "what is the average rating given in Michelle reviews",
    "input": "create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT AVG ( t1.rating ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t2.name = \"Michelle\";"
  },
  {
    "instruction": "Show the different nationalities and the number of journalists of each nationality.",
    "input": "create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));",
    "output": "SELECT Nationality, COUNT(*) FROM journalist GROUP BY Nationality"
  },
  {
    "instruction": "Which documents have more than 1 draft copies? List document id and number of draft copies.",
    "input": "create table draft_copies (document_id integer not null, draft_number integer not null, copy_number integer not null, primary key (document_id, draft_number, copy_number), foreign key (document_id, draft_number) references document_drafts (document_id, draft_number));",
    "output": "SELECT document_id, count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*) > 1;"
  },
  {
    "instruction": "where can i eat arabic food on buchanan in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Show the ids of the faculty who don't participate in any activity.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));",
    "output": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in"
  },
  {
    "instruction": "What is the total number of routes for each country and airline in that country?",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT T1.country, T1.name, count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.country, T1.name"
  },
  {
    "instruction": "What is the title of a course that is listed in both the Statistics and Psychology departments?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT title FROM course WHERE dept_name = 'Statistics' INTERSECT SELECT title FROM course WHERE dept_name = 'Psychology'"
  },
  {
    "instruction": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name, T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance > (SELECT avg(balance) FROM savings)"
  },
  {
    "instruction": "What is the name and city of the airport that the most routes end at?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT T1.name, T1.city, T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of departments either in division AS, or in division EN and in building NEB?",
    "input": "create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);",
    "output": "SELECT DName FROM DEPARTMENT WHERE Division = \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division = \"EN\" AND Building = \"NEB\""
  },
  {
    "instruction": "How many campuses are there in Los Angeles county?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT count(*) FROM campuses WHERE county = \"Los Angeles\""
  },
  {
    "instruction": "What are the first name and last name of all the teachers?",
    "input": "create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT firstname, lastname FROM teachers"
  },
  {
    "instruction": "give me a good french restaurant in the yosemite and mono lake area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"yosemite and mono lake area\" AND t1.food_type = \"french\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
    "input": "create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT International_Passengers, Domestic_Passengers FROM airport WHERE Airport_Name = \"London Heathrow\""
  },
  {
    "instruction": "What is the highest, lowest, and average student GPA for every department?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT max(stu_gpa), avg(stu_gpa), min(stu_gpa), dept_code FROM student GROUP BY dept_code"
  },
  {
    "instruction": "Return the names of songs for which format is mp3 and resolution is below 1000.",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution < 1000"
  },
  {
    "instruction": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT T1.claim_id, T1.date_claim_made, T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.claim_id HAVING count(*) = 1"
  },
  {
    "instruction": "topics at ACL 2014",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t3.year = 2014 AND t4.venuename = \"ACL\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
  },
  {
    "instruction": "Show different builders of railways, along with the corresponding number of railways using each builder.",
    "input": "create table \"railway\" (\"Railway_ID\" int, \"Railway\" text, \"Builder\" text, \"Built\" text, \"Wheels\" text, \"Location\" text, \"ObjectNumber\" text, primary key (\"Railway_ID\"));",
    "output": "SELECT Builder, COUNT(*) FROM railway GROUP BY Builder"
  },
  {
    "instruction": "List the names of all distinct wines that have scores higher than 90.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Name FROM WINE WHERE score > 90"
  },
  {
    "instruction": "What is the name of the 3 employees who get paid the least?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3"
  },
  {
    "instruction": "What are the first name and last name of all the instructors?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT fname, lname FROM Faculty WHERE Rank = \"Instructor\""
  },
  {
    "instruction": "How many faculty members does each building have? List the result with the name of the building.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT building, count(*) FROM Faculty GROUP BY building"
  },
  {
    "instruction": "return me the paper after 2000 in PVLDB with the most citations .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = \"PVLDB\" AND t2.year > 2000 ORDER BY t2.citation_num DESC LIMIT 1;"
  },
  {
    "instruction": "What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table accounts (custid bigint not null primary key, name varchar(64) not null);create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT avg(balance) FROM savings)"
  },
  {
    "instruction": "Count the number of different payment method codes used by parties.",
    "input": "create table `parties` (`party_id` integer primary key, `payment_method_code` varchar(15) not null, `party_phone` varchar(80), `party_email` varchar(80));",
    "output": "SELECT count(DISTINCT payment_method_code) FROM parties"
  },
  {
    "instruction": "List all company names with a book published by Alyson.",
    "input": "create table \"culture_company\" (\"Company_name\" text, \"Type\" text, \"Incorporated_in\" text, \"Group_Equity_Shareholding\" real, \"book_club_id\" text, \"movie_id\" text, primary key(\"Company_name\"), foreign key (\"book_club_id\") references \"book_club\"(\"book_club_id\"), foreign key (\"movie_id\") references \"movie\"(\"movie_id\"));create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id WHERE T2.publisher = 'Alyson'"
  },
  {
    "instruction": "What is the name and category code of the product with the highest price?",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `product_category_code` varchar(20) not null, `date_product_first_available` datetime, `date_product_discontinued` datetime, `product_name` varchar(80), `product_description` varchar(255), `product_price` decimal(19, 4));",
    "output": "SELECT product_name, product_category_code FROM products ORDER BY product_price DESC LIMIT 1"
  },
  {
    "instruction": "Give the different locations of tracks.",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT DISTINCT LOCATION FROM track"
  },
  {
    "instruction": "Show the location codes and the number of documents in each location.",
    "input": "create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT location_code, count(*) FROM Document_locations GROUP BY location_code"
  },
  {
    "instruction": "What is the campus fee of \"San Francisco State University\" in year 1996?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"csu_fees\" (\"Campus\" integer primary key, \"Year\" integer, \"CampusFee\" integer, foreign key (campus) references campuses(id));",
    "output": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND T2.year = 1996"
  },
  {
    "instruction": "Show names of cities and names of counties they are in.",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT T1.Name, T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID"
  },
  {
    "instruction": "Show the most common builder of railways.",
    "input": "create table \"railway\" (\"Railway_ID\" int, \"Railway\" text, \"Builder\" text, \"Built\" text, \"Wheels\" text, \"Location\" text, \"ObjectNumber\" text, primary key (\"Railway_ID\"));",
    "output": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names and scores of wines that are made of white color grapes?",
    "input": "create table \"grapes\" (\"ID\" integer primary key, \"Grape\" text unique, \"Color\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT T2.Name, T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"White\""
  },
  {
    "instruction": "List the builders of railways in ascending alphabetical order.",
    "input": "create table \"railway\" (\"Railway_ID\" int, \"Railway\" text, \"Builder\" text, \"Built\" text, \"Wheels\" text, \"Location\" text, \"ObjectNumber\" text, primary key (\"Railway_ID\"));",
    "output": "SELECT Builder FROM railway ORDER BY Builder ASC"
  },
  {
    "instruction": "Return the rank for which there are the fewest captains.",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Return the names of teams that have no match season record.",
    "input": "create table `team` (`team_id` int, `name` text, primary key (`team_id`));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
  },
  {
    "instruction": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
    "input": "create table `maintenance_engineers` (`engineer_id` integer primary key, `company_id` integer not null, `first_name` varchar(50), `last_name` varchar(50), `other_details` varchar(255), foreign key (`company_id`) references `third_party_companies`(`company_id`));create table `engineer_visits` (`engineer_visit_id` integer primary key, `contact_staff_id` integer, `engineer_id` integer not null, `fault_log_entry_id` integer not null, `fault_status` varchar(10) not null, `visit_start_datetime` datetime, `visit_end_datetime` datetime, `other_visit_details` varchar(255), foreign key (`fault_log_entry_id`) references `fault_log`(`fault_log_entry_id`), foreign key (`engineer_id`) references `maintenance_engineers`(`engineer_id`), foreign key (`contact_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.engineer_id, T1.first_name, T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `previous_transaction_id` integer, `account_id` integer not null, `card_id` integer not null, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` double null, `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`card_id`) references `customers_cards`(`card_id`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT account_id, count(*) FROM Financial_transactions GROUP BY account_id"
  },
  {
    "instruction": "What is the composer who created the track \"Fast As a Shark\"?",
    "input": "create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";"
  },
  {
    "instruction": "Count the number of video games with Massively multiplayer online game type .",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT count(*) FROM Video_games WHERE gtype = \"Massively multiplayer online game\""
  },
  {
    "instruction": "Please show the categories of the music festivals and the count.",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));",
    "output": "SELECT Category, COUNT(*) FROM music_festival GROUP BY Category"
  },
  {
    "instruction": "List all the characteristic names and data types of product \"cumin\".",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT t3.characteristic_name, t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"cumin\""
  },
  {
    "instruction": "What are the ids of courses without prerequisites?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));",
    "output": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq"
  },
  {
    "instruction": "How many students are enrolled in the class taught by some professor from the accounting department?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'"
  },
  {
    "instruction": "What are the location and nickname of each school?",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));create table \"school_details\" (\"School_ID\" int, \"Nickname\" text, \"Colors\" text, \"League\" text, \"Class\" text, \"Division\" text, primary key (\"School_Id\"), foreign key (`school_id`) references `school`(`school_id`));",
    "output": "SELECT T1.Location, T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID"
  },
  {
    "instruction": "List the email addresses of the drama workshop groups located in Alaska state.",
    "input": "create table addresses (address_id varchar(100) not null, line_1 varchar(255), line_2 varchar(255), city_town varchar(255), state_county varchar(255), other_details varchar(255), primary key (address_id), unique (address_id));create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = \"Alaska\""
  },
  {
    "instruction": "Who is the president of the club \"Bootup Baltimore\"? Give me the first and last name.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t2.position = \"President\""
  },
  {
    "instruction": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));",
    "output": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND faculty > (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = \"Orange\")"
  },
  {
    "instruction": "What are the names of perpetrators?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Home Town\" text, primary key (\"People_ID\"));create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID"
  },
  {
    "instruction": "Find the name, account type, and account balance of the customer who has the highest credit score.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT cust_name, acc_type, acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1"
  },
  {
    "instruction": "What is the level name of the cheapest catalog (in USD)?",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));create table `catalog_structure` (`catalog_level_number` integer primary key, `catalog_id` integer not null, `catalog_level_name` varchar(50), foreign key (`catalog_id`) references `catalogs`(`catalog_id`));",
    "output": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1"
  },
  {
    "instruction": "For each dorm, how many amenities does it have?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));",
    "output": "SELECT count(*), T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid WHERE T1.student_capacity > 100 GROUP BY T1.dormid"
  },
  {
    "instruction": "Find the catalog publisher that has the most catalogs.",
    "input": "create table `catalogs` (`catalog_id` integer primary key, `catalog_name` varchar(50), `catalog_publisher` varchar(80), `date_of_publication` datetime, `date_of_latest_revision` datetime);",
    "output": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the average gpa of the students enrolled in the course with code ACCT-211?",
    "input": "create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'"
  },
  {
    "instruction": "List the authors of submissions in ascending order of scores.",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT Author FROM submission ORDER BY Scores ASC"
  },
  {
    "instruction": "How many departments are in each school?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT dept_name), school_code FROM department GROUP BY school_code"
  },
  {
    "instruction": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described",
    "input": "create table `documents` (`document_id` integer primary key, `document_type_code` varchar(10), `grant_id` integer not null, `sent_date` datetime not null, `response_received_date` datetime not null, `other_details` varchar(255) not null, foreign key (`document_type_code`) references `document_types`(`document_type_code`), foreign key (`grant_id`) references `grants`(`grant_id`));create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));create table `organisation_types` (`organisation_type` varchar(10) primary key, `organisation_type_description` varchar(255) not null);",
    "output": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type WHERE T2.grant_amount > 5000 AND T4.organisation_type_description = 'Research'"
  },
  {
    "instruction": "return me all the researchers in Databases area in \" University of Michigan \" .",
    "input": "create table \"domain_author\" (\"aid\" int, \"did\" int, primary key (\"did\", \"aid\"), foreign key(\"aid\") references `author`(\"aid\"), foreign key(\"did\") references `domain`(\"did\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));",
    "output": "SELECT t1.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid WHERE t3.name = \"Databases\" AND t2.name = \"University of Michigan\";"
  },
  {
    "instruction": "For each type, what is the average tonnage?",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT TYPE, avg(Tonnage) FROM ship GROUP BY TYPE"
  },
  {
    "instruction": "How many movies were made before 2000?",
    "input": "create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT count(*) FROM Movie WHERE YEAR < 2000"
  },
  {
    "instruction": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\""
  },
  {
    "instruction": "Return the description of the document type name 'Film'.",
    "input": "create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));",
    "output": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name = \"Film\""
  },
  {
    "instruction": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.",
    "input": "create table \"workshop\" (\"Workshop_ID\" int, \"Date\" text, \"Venue\" text, \"Name\" text, primary key (\"Workshop_ID\"));",
    "output": "SELECT Date, Venue FROM workshop ORDER BY Venue"
  },
  {
    "instruction": "What are the percentage of hispanics in cities with the black percentage higher than 10?",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));",
    "output": "SELECT Hispanic FROM city WHERE Black > 10"
  },
  {
    "instruction": "Find the names of departments that are located in Houston.",
    "input": "create table department(dname text, dnumber integer primary key, mgr_ssn integer, mgr_start_date text);create table dept_locations(dnumber integer, dlocation text, primary key(dnumber, dlocation));",
    "output": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber WHERE t2.dlocation = 'Houston'"
  },
  {
    "instruction": "What is the average prices of wines for each each?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT avg(Price), YEAR FROM WINE GROUP BY YEAR"
  },
  {
    "instruction": "What are the email addresses of the drama workshop groups with address in Alaska state?",
    "input": "create table addresses (address_id varchar(100) not null, line_1 varchar(255), line_2 varchar(255), city_town varchar(255), state_county varchar(255), other_details varchar(255), primary key (address_id), unique (address_id));create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = \"Alaska\""
  },
  {
    "instruction": "On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT T1.date_of_enrolment, T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name = \"Karson\""
  },
  {
    "instruction": "How many papers were written on convolutional neural networks in the past year ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"convolutional neural networks\" AND t3.year = 2016;"
  },
  {
    "instruction": "Give me the best french in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" );"
  },
  {
    "instruction": "What are full names and salaries of employees working in the city of London?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));create table `locations` (`location_id` decimal(4, 0) not null default '0', `street_address` varchar(40) default null, `postal_code` varchar(12) default null, `city` varchar(30) not null, `state_province` varchar(25) default null, `country_id` varchar(2) default null, primary key (`location_id`), foreign key (`country_id`) references countries(`country_id`));",
    "output": "SELECT first_name, last_name, salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T3.city = 'London'"
  },
  {
    "instruction": "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected) >= 10"
  },
  {
    "instruction": "where can we find some restaurants in alameda ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"alameda\";"
  },
  {
    "instruction": "List of authors in acl 2016",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2016 AND t3.venuename = \"acl\";"
  },
  {
    "instruction": "return me the area of PVLDB .",
    "input": "create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));create table \"domain_journal\" (\"did\" int, \"jid\" int, primary key (\"did\", \"jid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"did\") references \"domain\"(\"did\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t3.name FROM DOMAIN AS t3 JOIN domain_journal AS t1 ON t3.did = t1.did JOIN journal AS t2 ON t2.jid = t1.jid WHERE t2.name = \"PVLDB\";"
  },
  {
    "instruction": "Who advises student 1004?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Advisor FROM Student WHERE StuID = 1004"
  },
  {
    "instruction": "What is the name and price of the cheapest product?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT name, price FROM Products ORDER BY price ASC LIMIT 1"
  },
  {
    "instruction": "What are the id and first name of the student whose addresses have the highest average monthly rental?",
    "input": "create table `student_addresses` (`student_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `date_address_to` datetime, `monthly_rental` decimal(19, 4), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`student_id`) references `students`(`student_id`));create table `students` (`student_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(40), `last_name` varchar(40), `cell_mobile_number` varchar(40), `email_address` varchar(40), `date_first_rental` datetime, `date_left_university` datetime, `other_student_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.student_id, T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1"
  },
  {
    "instruction": "Find the last name of the first ever contact person of the organization with the highest UK Vat number.",
    "input": "create table `organizations` (`organization_id` integer primary key, `date_formed` datetime, `organization_name` varchar(255), `uk_vat_number` varchar(20));create table `organization_contact_individuals` (`individual_id` integer not null, `organization_id` integer not null, `date_contact_from` datetime not null, `date_contact_to` datetime, primary key (`individual_id`,`organization_id`), foreign key (`organization_id`) references `organizations`(`organization_id`), foreign key (`individual_id`) references `individuals`(`individual_id`));create table `individuals` (`individual_id` integer primary key, `individual_first_name` varchar(80), `individual_middle_name` varchar(80), `inidividual_phone` varchar(80), `individual_email` varchar(80), `individual_address` varchar(255), `individual_last_name` varchar(80));create table `organizations` (`organization_id` integer primary key, `date_formed` datetime, `organization_name` varchar(255), `uk_vat_number` varchar(20));",
    "output": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.uk_vat_number = (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1"
  },
  {
    "instruction": "What are the lifespans of representatives in descending order of vote percent?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Representative_ID\" int, \"Date\" text, \"Votes\" real, \"Vote_Percent\" real, \"Seats\" real, \"Place\" real, primary key (\"Election_ID\"), foreign key (\"Representative_ID\") references `representative`(\"Representative_ID\"));create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));",
    "output": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY Vote_Percent DESC"
  },
  {
    "instruction": "what is the area of the new mexico state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT area FROM state WHERE state_name = \"new mexico\";"
  },
  {
    "instruction": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT T1.cust_name, T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount) > 5000"
  },
  {
    "instruction": "How many movie directors are there?",
    "input": "create table \"movie\" (\"movie_id\" int, \"Title\" text, \"Year\" int, \"Director\" text, \"Budget_million\" real, \"Gross_worldwide\" int, primary key(\"movie_id\"));",
    "output": "SELECT COUNT (DISTINCT director) FROM movie"
  },
  {
    "instruction": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.",
    "input": "create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math' ORDER BY T3.tot_cred"
  },
  {
    "instruction": "Which locations are shared by more than two wrestlers?",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*) > 2"
  },
  {
    "instruction": "Retrieve the average age of members of the club \"Tennis Club\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\""
  },
  {
    "instruction": "What is the last name of the staff who has handled the first ever complaint?",
    "input": "create table `staff` (`staff_id` integer primary key, `gender` varchar(1), `first_name` varchar(80), `last_name` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1"
  },
  {
    "instruction": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT T1.Claim_id, count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id"
  },
  {
    "instruction": "what is the smallest state by area",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state );"
  },
  {
    "instruction": "Find the total number of courses offered.",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));",
    "output": "SELECT count(*) FROM COURSES"
  },
  {
    "instruction": "What is the name and distance for the aircraft that has an id of 12?",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT name, distance FROM Aircraft WHERE aid = 12"
  },
  {
    "instruction": "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT FirstName, LastName FROM CUSTOMER WHERE Email = \"luisg@embraer.com.br\""
  },
  {
    "instruction": "What are the description and credit of the course which the student whose last name is Smithson took?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T4.crs_description, T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE T3.stu_lname = 'Smithson'"
  },
  {
    "instruction": "What is the average score of submissions?",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT avg(Scores) FROM submission"
  },
  {
    "instruction": "Find the names of the channels that are broadcast in the morning.",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));",
    "output": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning'"
  },
  {
    "instruction": "List the number of invoices from Chicago, IL.",
    "input": "create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT COUNT(*) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\";"
  },
  {
    "instruction": "Count the number of tourists who did not visit any place.",
    "input": "create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )"
  },
  {
    "instruction": "What is the average rating and resolution of all bangla songs?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT avg(rating), avg(resolution) FROM song WHERE languages = \"bangla\""
  },
  {
    "instruction": "What is the headquarter of the company whose founder is James?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT headquarter FROM manufacturers WHERE founder = 'James'"
  },
  {
    "instruction": "Find the policy type the most customers choose.",
    "input": "create table customer_policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date date, end_date date, primary key (policy_id), foreign key (customer_id) references customers (customer_id));",
    "output": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what are the major cities in states through which the mississippi runs",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population > 150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH > 750 AND river_name = \"mississippi\" );"
  },
  {
    "instruction": "What are the titles of courses without prerequisites?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));",
    "output": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
  },
  {
    "instruction": "How many students are 18 years old?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM Student WHERE age = 18"
  },
  {
    "instruction": "What is the average capacity of the stadiums that were opened in year 2005?",
    "input": "create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));",
    "output": "SELECT avg(capacity) FROM stadium WHERE opening_year = 2005"
  },
  {
    "instruction": "what is the most populated capital in the usa",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );"
  },
  {
    "instruction": "Find the id of routes whose source and destination airports are in the United States.",
    "input": "create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'United States') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')"
  },
  {
    "instruction": "What are the staff roles of the staff who",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT role_code FROM Project_Staff WHERE date_from > '2003-04-19 15:06:20' AND date_to < '2016-03-15 00:33:18'"
  },
  {
    "instruction": "How many reviewers listed?",
    "input": "create table reviewer(rid int primary key, name text);",
    "output": "SELECT count(*) FROM Reviewer"
  },
  {
    "instruction": "number of papers by year from jamie callan",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"jamie callan\" GROUP BY t3.year;"
  },
  {
    "instruction": "What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?",
    "input": "create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table scientists (ssn int, name char(30) not null, primary key (ssn));",
    "output": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'"
  },
  {
    "instruction": "List the name of all products along with the number of complaints that they have received.",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `product_category_code` varchar(20) not null, `date_product_first_available` datetime, `date_product_discontinued` datetime, `product_name` varchar(80), `product_description` varchar(255), `product_price` decimal(19, 4));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT t1.product_name, count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name"
  },
  {
    "instruction": "what is the population of boulder city",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = \"boulder\";"
  },
  {
    "instruction": "How many different captain ranks are there?",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT count(DISTINCT rank) FROM captain"
  },
  {
    "instruction": "What did Liwen Xiong published in 2015 ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Liwen Xiong\" AND t3.year = 2015;"
  },
  {
    "instruction": "List all academic papers on machine networks for one shot learning",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT paperid FROM paper WHERE title = \"machine networks for one shot learning\";"
  },
  {
    "instruction": "return me the conferences, which have more than 60 papers containing keyword \" Relational Database \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid WHERE t1.keyword = \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title ) > 60;"
  },
  {
    "instruction": "question answering 2016 papers",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"question answering\" AND t3.year = 2016;"
  },
  {
    "instruction": "Find the locations that have more than one movie theater with capacity above 300.",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) > 1"
  },
  {
    "instruction": "What are the names of all the tracks that are in both the Movies and music playlists?",
    "input": "create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);create table playlist_tracks (playlist_id integer not null, track_id integer not null, constraint pk_playlisttrack primary key (playlist_id, track_id), foreign key (playlist_id) references playlists (id)\n        ON delete no action\n        ON update no action, foreign key (track_id) references tracks (id)\n        ON delete no action\n        ON update no action);create table playlists (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);create table playlist_tracks (playlist_id integer not null, track_id integer not null, constraint pk_playlisttrack primary key (playlist_id, track_id), foreign key (playlist_id) references playlists (id)\n        ON delete no action\n        ON update no action, foreign key (track_id) references tracks (id)\n        ON delete no action\n        ON update no action);create table playlists (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'"
  },
  {
    "instruction": "How many available hotels are there in total?",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT count(*) FROM HOTELS"
  },
  {
    "instruction": "What is the decor of room Recluse and defiance?",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT decor FROM Rooms WHERE roomName = \"Recluse and defiance\";"
  },
  {
    "instruction": "what is the total area of the usa",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT SUM ( area ) FROM state;"
  },
  {
    "instruction": "Find the names of the swimmers who have no record.",
    "input": "create table \"swimmer\" (\"ID\" int, \"name\" text, \"Nationality\" text, \"meter_100\" real, \"meter_200\" text, \"meter_300\" text, \"meter_400\" text, \"meter_500\" text, \"meter_600\" text, \"meter_700\" text, \"Time\" text, primary key (\"ID\"));create table \"record\" (\"ID\" int, \"Result\" text, \"Swimmer_ID\" int, \"Event_ID\" int, primary key (\"Swimmer_ID\",\"Event_ID\"), foreign key (`event_id`) references `event`(`id`), foreign key (`swimmer_id`) references `swimmer`(`id`));",
    "output": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)"
  },
  {
    "instruction": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?",
    "input": "create table customer (customer_id smallint unsigned not null, store_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, email varchar(50) default null, address_id smallint unsigned not null, active boolean not null default true, create_date datetime not null, last_update timestamp default current_timestamp, primary key (customer_id), foreign key (address_id) references address (address_id), foreign key (store_id) references store (store_id));create table rental (rental_id int not null, rental_date datetime not null, inventory_id mediumint unsigned not null, customer_id smallint unsigned not null, return_date datetime default null, staff_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (rental_id), foreign key (staff_id) references staff (staff_id), foreign key (inventory_id) references inventory (inventory_id), foreign key (customer_id) references customer (customer_id));",
    "output": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date > '2005-08-23 02:06:01' )"
  },
  {
    "instruction": "What are the countries with the most airlines whose active status is Y?",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);",
    "output": "SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the phone number and postal code of the address 1031 Daugavpils Parkway?",
    "input": "create table address (address_id smallint unsigned not null, address varchar(50) not null, address2 varchar(50) default null, district varchar(20) not null, city_id smallint unsigned not null, postal_code varchar(10) default null, phone varchar(20) not null, last_update timestamp not null default current_timestamp, primary key (address_id), foreign key (city_id) references city (city_id));",
    "output": "SELECT phone, postal_code FROM address WHERE address = '1031 Daugavpils Parkway'"
  },
  {
    "instruction": "Find all reviews by Patrick with a rating above 4",
    "input": "create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t1.rating > 4 AND t2.name = \"Patrick\";"
  },
  {
    "instruction": "where is the smallest city",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city );"
  },
  {
    "instruction": "Which countries have at least 3 cities?",
    "input": "create table city (city_id smallint unsigned not null, city varchar(50) not null, country_id smallint unsigned not null, last_update timestamp not null default current_timestamp, primary key (city_id), foreign key (country_id) references country (country_id));create table country (country_id smallint unsigned not null, country varchar(50) not null, last_update timestamp not null default current_timestamp, primary key (country_id));",
    "output": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id GROUP BY T2.country_id HAVING count(*) >= 3"
  },
  {
    "instruction": "What are the weights of entrepreneurs in descending order of money requested?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC"
  },
  {
    "instruction": "How many policies are listed for the customer named \"Dayana Robel\"?",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table customers_policies (customer_id integer not null, policy_id integer not null, date_opened date, date_closed date, primary key (customer_id, policy_id), foreign key (customer_id) references customers (customer_id), foreign key (policy_id) references available_policies (policy_id));",
    "output": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Dayana Robel\""
  },
  {
    "instruction": "What journals has Takashi Matsumoto published in ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Takashi Matsumoto\" GROUP BY t3.journalid;"
  },
  {
    "instruction": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));",
    "output": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\""
  },
  {
    "instruction": "Find the name of bank branch that provided the greatest total amount of loans.",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name, T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance < T2.balance"
  },
  {
    "instruction": "What instruments does the the song \"Le Pop\" use?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\""
  },
  {
    "instruction": "How many unique labels are there for albums?",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);",
    "output": "SELECT count(DISTINCT label) FROM albums"
  },
  {
    "instruction": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));create table `team` (`team_id` int, `name` text, primary key (`team_id`));",
    "output": "SELECT T1.Season, T1.Player, T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id"
  },
  {
    "instruction": "How many papers has Noah Smith co-authored since 2009 ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname != \"Noah Smith\" AND t3.year > 2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname LIKE \"Noah Smith\" );"
  },
  {
    "instruction": "List the id of students who registered some courses and the number of their registered courses?",
    "input": "create table students (student_id integer not null, student_details varchar(255), primary key (student_id), foreign key (student_id) references people (person_id));create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));",
    "output": "SELECT T1.student_id, count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
  },
  {
    "instruction": "Show ids of students who play video game and play sports.",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games"
  },
  {
    "instruction": "How many distinct order ids correspond to each product?",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT product_id, count(DISTINCT order_id) FROM Order_items GROUP BY product_id"
  },
  {
    "instruction": "List document type codes and the number of documents in each code.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT document_type_code, count(*) FROM Documents GROUP BY document_type_code"
  },
  {
    "instruction": "Show each state and the number of addresses in each state.",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT state_province_county, count(*) FROM addresses GROUP BY state_province_county"
  },
  {
    "instruction": "Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"USA\" AND t2.authorder = 2 AND t1.lname = \"Turon\""
  },
  {
    "instruction": "what states border texas and have a major river",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM border_info WHERE border = \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH > 750 );"
  },
  {
    "instruction": "What are the the full names and ids for all customers, and how many accounts does each have?",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name, count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id"
  },
  {
    "instruction": "Find the semester and year which has the least number of student taking any class.",
    "input": "create table takes (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), grade varchar(2), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references student (id)\n        ON delete cascade);",
    "output": "SELECT semester, YEAR FROM takes GROUP BY semester, YEAR ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "what are the top 3 highest support rates?",
    "input": "create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
  },
  {
    "instruction": "which state capital has the smallest population",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );"
  },
  {
    "instruction": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?",
    "input": "create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));",
    "output": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Louisville, Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Hiram, Georgia'"
  },
  {
    "instruction": "What are the card numbers of members from Kentucky?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));",
    "output": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\""
  },
  {
    "instruction": "How many customers are from California?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*) FROM customers WHERE state = \"CA\";"
  },
  {
    "instruction": "Find the description of the claim status \"Open\".",
    "input": "create table claims_processing_stages (claim_stage_id integer not null, next_claim_stage_id integer, claim_status_name varchar(255) not null, claim_status_description varchar(255) not null, primary key (claim_stage_id));",
    "output": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name = \"Open\""
  },
  {
    "instruction": "What are the first names of the professors who do not teach a class.",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num"
  },
  {
    "instruction": "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT count(*) FROM Companies WHERE Industry = \"Banking\" OR Industry = \"Conglomerate\""
  },
  {
    "instruction": "what is the biggest state in continental us",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "What are the names and cities of the branches that do not have any registered members?",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));",
    "output": "SELECT name, city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)"
  },
  {
    "instruction": "What is the first name and last name employee helps the customer with first name Leonie?",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `employee` (`employeeid` integer not null , `lastname` varchar(20) not null , `firstname` varchar(20) not null , `title` varchar(30) default null , `reportsto` integer default null , `birthdate` datetime default null , `hiredate` datetime default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) default null , primary key (`employeeid`) , constraint `fk_employeereportsto` foreign key (`reportsto`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.FirstName, T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = \"Leonie\""
  },
  {
    "instruction": "Count the number of accounts.",
    "input": "create table accounts (account_id integer not null, statement_id integer not null, account_details varchar(255), primary key (account_id), foreign key (statement_id) references statements (statement_id));",
    "output": "SELECT count(*) FROM Accounts"
  },
  {
    "instruction": "Count the number of artists who have had volumes.",
    "input": "create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT COUNT(DISTINCT Artist_ID) FROM volume"
  },
  {
    "instruction": "List the name and the number of enrolled student for each course.",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT T1.course_name, COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name"
  },
  {
    "instruction": "Find all the papers published by the institution \"Google\".",
    "input": "create table papers (paperid integer, title text, primary key (paperid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\""
  },
  {
    "instruction": "return me the conferences, which have more than 10 papers by \" H. V. Jagadish \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title ) > 10;"
  },
  {
    "instruction": "What are all the phone numbers?",
    "input": "create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));",
    "output": "SELECT customer_phone FROM available_policies"
  },
  {
    "instruction": "What are the names of regions with two or more storms?",
    "input": "create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*) >= 2"
  },
  {
    "instruction": "Find the total number of available hotels.",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT count(*) FROM HOTELS"
  },
  {
    "instruction": "Count the number of customers.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT count(*) FROM Customers"
  },
  {
    "instruction": "What are the maximum price and score of wines in each year?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT max(Price), max(Score), YEAR FROM WINE GROUP BY YEAR"
  },
  {
    "instruction": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, hire_date, salary, department_id FROM employees WHERE first_name NOT LIKE '%M%'"
  },
  {
    "instruction": "rivers in illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = \"illinois\";"
  },
  {
    "instruction": "Show the authors of submissions and the acceptance results of their submissions.",
    "input": "create table \"Acceptance\" (\"Submission_ID\" int, \"Workshop_ID\" int, \"Result\" text, primary key (\"Submission_ID\",\"Workshop_ID\"), foreign key (\"Submission_ID\") references `submission`(\"Submission_ID\"), foreign key (\"Workshop_ID\") references `workshop`(\"Workshop_ID\"));create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT T2.Author, T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID"
  },
  {
    "instruction": "What are the different film Directors?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT DISTINCT Director FROM film"
  },
  {
    "instruction": "Show the country where people older than 30 and younger than 25 are from.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Country\" text, \"Is_Male\" text, \"Age\" int, primary key (\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Country\" text, \"Is_Male\" text, \"Age\" int, primary key (\"People_ID\"));",
    "output": "SELECT country FROM people WHERE age < 25 INTERSECT SELECT country FROM people WHERE age > 30"
  },
  {
    "instruction": "How many different product types are there?",
    "input": "create table `products_for_hire` (`product_id` integer primary key, `product_type_code` varchar(15) not null, `daily_hire_cost` decimal(19, 4), `product_name` varchar(80), `product_description` varchar(255));",
    "output": "SELECT count(DISTINCT product_type_code) FROM products_for_hire"
  },
  {
    "instruction": "What are the titles and authors or editors that correspond to books made after 1989?",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT book_title, author_or_editor FROM book_club WHERE YEAR > 1989"
  },
  {
    "instruction": "What are the aircrafts with top 3 shortest lengthes? List their names.",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3"
  },
  {
    "instruction": "List name of all tracks in Balls to the Wall.",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";"
  },
  {
    "instruction": "List all information about college sorted by enrollment number in the ascending order.",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT * FROM College ORDER BY enr"
  },
  {
    "instruction": "Find the number of web accelerators used for each Operating system.",
    "input": "create table \"Web_client_accelerator\" (\"id\" int, \"name\" text, \"Operating_system\" text, \"Client\" text, \"Connection\" text, primary key(\"id\"));",
    "output": "SELECT Operating_system, count(*) FROM web_client_accelerator GROUP BY Operating_system"
  },
  {
    "instruction": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?",
    "input": "create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT District_name, City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000"
  },
  {
    "instruction": "What are the names of enzymes in descending order?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT name FROM enzyme ORDER BY name DESC"
  },
  {
    "instruction": "When did Carole Bernhard first become a customer?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";"
  },
  {
    "instruction": "What are the average prices of products for each manufacturer?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT avg(T1.price), T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name"
  },
  {
    "instruction": "What are the types and countries of competitions?",
    "input": "create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));",
    "output": "SELECT Competition_type, Country FROM competition"
  },
  {
    "instruction": "List the distinct ranges of the mountains with the top 3 prominence.",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3"
  },
  {
    "instruction": "Who are the friends of Bob?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Bob'"
  },
  {
    "instruction": "Find all actors born in Tehran",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT name FROM actor WHERE birth_city = \"Tehran\";"
  },
  {
    "instruction": "What are the names of all aircrafts that can cover more distances than average?",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT name FROM Aircraft WHERE distance > (SELECT avg(distance) FROM Aircraft)"
  },
  {
    "instruction": "What is all the information about all people?",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));",
    "output": "SELECT * FROM people"
  },
  {
    "instruction": "Find the checking balance and saving balance in the Brown\u2019s account.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T2.balance, T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name = 'Brown'"
  },
  {
    "instruction": "What are the ids and names of department stores with both marketing and managing departments?",
    "input": "create table `departments` (`department_id` integer primary key, `dept_store_id` integer not null, `department_name` varchar(80), foreign key (`dept_store_id`) references `department_stores`(`dept_store_id`));create table `department_stores` (`dept_store_id` integer primary key, `dept_store_chain_id` integer, `store_name` varchar(80), `store_address` varchar(255), `store_phone` varchar(80), `store_email` varchar(80), foreign key (`dept_store_chain_id`) references `department_store_chain`(`dept_store_chain_id`));create table `departments` (`department_id` integer primary key, `dept_store_id` integer not null, `department_name` varchar(80), foreign key (`dept_store_id`) references `department_stores`(`dept_store_id`));create table `department_stores` (`dept_store_id` integer primary key, `dept_store_chain_id` integer, `store_name` varchar(80), `store_address` varchar(255), `store_phone` varchar(80), `store_email` varchar(80), foreign key (`dept_store_chain_id`) references `department_store_chain`(`dept_store_chain_id`));",
    "output": "SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"marketing\" INTERSECT SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"managing\""
  },
  {
    "instruction": "How many rooms are there?",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT count(*) FROM Rooms;"
  },
  {
    "instruction": "Which ministers are not a part of the Progress Party?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT minister FROM party WHERE party_name != 'Progress Party'"
  },
  {
    "instruction": "Find the number of students for each department.",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT count(*), dept_code FROM student GROUP BY dept_code"
  },
  {
    "instruction": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".",
    "input": "create table \"phone\" (\"Name\" text, \"Phone_ID\" int, \"Memory_in_G\" int, \"Carrier\" text, \"Price\" real, primary key (\"Phone_ID\"));",
    "output": "SELECT Name FROM phone WHERE Carrier = \"Sprint\" OR Carrier = \"TMobile\""
  },
  {
    "instruction": "For each type, how many ships are there?",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT TYPE, COUNT(*) FROM ship GROUP BY TYPE"
  },
  {
    "instruction": "Show the name of track and the number of races in each track.",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT T2.name, count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id"
  },
  {
    "instruction": "How many products have the characteristic named \"hot\"?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = \"hot\""
  },
  {
    "instruction": "Please show the titles of films and the types of market estimations.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));",
    "output": "SELECT T1.Title, T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID"
  },
  {
    "instruction": "Give the order ids for all orders, as well as the total product quantity in each.",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT order_id, sum(product_quantity) FROM Order_items GROUP BY order_id"
  },
  {
    "instruction": "How many rooms whose capacity is less than 50 does the Lamberton building have?",
    "input": "create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));",
    "output": "SELECT count(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50"
  },
  {
    "instruction": "Find the name of companies whose revenue is greater than the average revenue of all companies.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT name FROM manufacturers WHERE revenue > (SELECT avg(revenue) FROM manufacturers)"
  },
  {
    "instruction": "Show the names of people who have been on the negative side of debates at least twice.",
    "input": "create table \"debate_people\" (\"Debate_ID\" int, \"Affirmative\" int, \"Negative\" int, \"If_Affirmative_Win\" bool, primary key (\"Debate_ID\",\"Affirmative\",\"Negative\"), foreign key (\"Debate_ID\") references `debate`(\"Debate_ID\"), foreign key (\"Affirmative\") references `people`(\"People_ID\"), foreign key (\"Negative\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"District\" text, \"Name\" text, \"Party\" text, \"Age\" int, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID GROUP BY T2.Name HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "What are the ids of the students who registered for course 301?",
    "input": "create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT student_id FROM student_course_attendance WHERE course_id = 301"
  },
  {
    "instruction": "Find the white grape used to produce wines with scores above 90.",
    "input": "create table \"grapes\" (\"ID\" integer primary key, \"Grape\" text unique, \"Color\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"White\" AND T2.score > 90"
  },
  {
    "instruction": "How many leagues are there in England?",
    "input": "create table `country` (`id`\tinteger primary key autoincrement, `name`\ttext unique);create table `league` (`id`\tinteger primary key autoincrement, `country_id`\tinteger, `name`\ttext unique, foreign key(`country_id`) references `country`(`id`));",
    "output": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T1.name = \"England\""
  },
  {
    "instruction": "What is the name of the oldest manager?",
    "input": "create table \"manager\" (\"Manager_ID\" int, \"Name\" text, \"Country\" text, \"Working_year_starts\" text, \"Age\" int, \"Level\" int, primary key (\"Manager_ID\"));",
    "output": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1"
  },
  {
    "instruction": "What are the countries for each market, ordered alphabetically?",
    "input": "create table \"market\" (\"Market_ID\" int, \"Country\" text, \"Number_cities\" int, primary key (\"Market_ID\"));",
    "output": "SELECT Country FROM market ORDER BY Country ASC"
  },
  {
    "instruction": "Find the list of page size which have more than 3 product listed",
    "input": "create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));",
    "output": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*) > 3"
  },
  {
    "instruction": "Show the number of documents.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT count(*) FROM Documents"
  },
  {
    "instruction": "Which is the email of the party that has used the services the most number of times?",
    "input": "create table `parties` (`party_id` integer primary key, `payment_method_code` varchar(15) not null, `party_phone` varchar(80), `party_email` varchar(80));create table `party_services` (`booking_id` integer not null , `customer_id` integer not null, `service_id` integer not null, `service_datetime` datetime not null, `booking_made_date` datetime, foreign key (`service_id`) references `services`(`service_id`), foreign key (`customer_id`) references `parties`(`party_id`));",
    "output": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the temperature of \"Shanghai\" city in January?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"temperature\" (\"City_ID\" int, \"Jan\" real, \"Feb\" real, \"Mar\" real, \"Apr\" real, \"Jun\" real, \"Jul\" real, \"Aug\" real, \"Sep\" real, \"Oct\" real, \"Nov\" real, \"Dec\" real, primary key (\"City_ID\"), foreign key (`city_id`) references `city`(`city_id`));",
    "output": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\""
  },
  {
    "instruction": "Show all region code and region name sorted by the codes.",
    "input": "create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));",
    "output": "SELECT region_code, region_name FROM region ORDER BY region_code"
  },
  {
    "instruction": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT f_id FROM song WHERE resolution > (SELECT avg(resolution) FROM song WHERE genre_is = \"modern\")"
  },
  {
    "instruction": "return me all the papers in VLDB conference in \" University of Michigan \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t5.title FROM organization AS t3 JOIN author AS t1 ON t3.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN conference AS t2 ON t5.cid = t2.cid WHERE t2.name = \"VLDB\" AND t3.name = \"University of Michigan\";"
  },
  {
    "instruction": "Show all distinct region names ordered by their labels.",
    "input": "create table \"region\" (\"Region_ID\" int, \"Region_name\" text, \"Date\" text, \"Label\" text, \"Format\" text, \"Catalogue\" text, primary key (\"Region_ID\"));",
    "output": "SELECT DISTINCT region_name FROM region ORDER BY Label"
  },
  {
    "instruction": "How many stores are headquarted in each city?",
    "input": "create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));create table \"store_district\" (\"Store_ID\" int, \"District_ID\" int, primary key (\"Store_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`district_id`) references `district`(`district_id`));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT t3.headquartered_city, count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city"
  },
  {
    "instruction": "who publishes in NIPS ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t3.venuename = \"NIPS\";"
  },
  {
    "instruction": "Find the city where the most customers live.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_addresses` (`customer_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `address_type` varchar(15) not null, `date_address_to` datetime, foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the number of professors who are in the Accounting or Biology departments?",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology'"
  },
  {
    "instruction": "List the names of wrestlers in descending order of days held.",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT Name FROM wrestler ORDER BY Days_held DESC"
  },
  {
    "instruction": "Show total hours per week and number of games played for students under 20.",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT sum(hoursperweek), sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.age < 20"
  },
  {
    "instruction": "Find the name and address of the customers who have both New and Pending orders.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name, T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"New\" INTERSECT SELECT T1.customer_name, T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Pending\""
  },
  {
    "instruction": "what is the smallest state that borders texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" );"
  },
  {
    "instruction": "What is the count of the songs that last approximately 4 minutes?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);",
    "output": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\""
  },
  {
    "instruction": "What are the names of cities that are in counties that have a crime rate below 100?",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)"
  },
  {
    "instruction": "Find all Dallas restaurant with a rating above 4.5",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t1.rating > 4.5 AND t2.category_name = \"restaurant\";"
  },
  {
    "instruction": "Count the number of different account types.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT count(DISTINCT acc_type) FROM customer"
  },
  {
    "instruction": "Count the number of captains younger than 50 of each rank.",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT count(*), rank FROM captain WHERE age < 50 GROUP BY rank"
  },
  {
    "instruction": "What are the ids of the courses that are registered or attended by the student whose id is 121?",
    "input": "create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"
  },
  {
    "instruction": "How many artists are above age 46 and joined after 1990?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT count(*) FROM artist WHERE age > 46 AND year_join > 1990"
  },
  {
    "instruction": "Find the number of rooms with king bed for each decor type.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT decor, count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;"
  },
  {
    "instruction": "display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a \u2019T\u2019.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id, first_name, last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )"
  },
  {
    "instruction": "which states lie on the largest river in the united states",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );"
  },
  {
    "instruction": "return me the number of papers in PVLDB after 2000 in \" University of Michigan \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN journal AS t3 ON t5.jid = t3.jid WHERE t3.name = \"PVLDB\" AND t2.name = \"University of Michigan\" AND t5.year > 2000;"
  },
  {
    "instruction": "What is the id of the routes whose source and destination airports are in the United States?",
    "input": "create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'United States') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')"
  },
  {
    "instruction": "Show the price ranges of hotels with 5 star ratings.",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT price_range FROM HOTELS WHERE star_rating_code = \"5\""
  },
  {
    "instruction": "Find the id of instructors who didn't teach any courses?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);",
    "output": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches"
  },
  {
    "instruction": "List the date of perpetrators in descending order of the number of people killed.",
    "input": "create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Date FROM perpetrator ORDER BY Killed DESC"
  },
  {
    "instruction": "How many departments are led by heads who are not mentioned?",
    "input": "create table \"department\" (\"Department_ID\" int, \"Name\" text, \"Creation\" text, \"Ranking\" int, \"Budget_in_Billions\" real, \"Num_Employees\" real, primary key (\"Department_ID\"));create table \"management\" (\"department_ID\" int, \"head_ID\" int, \"temporary_acting\" text, primary key (\"Department_ID\",\"head_ID\"), foreign key (\"Department_ID\") references `department`(\"Department_ID\"), foreign key (\"head_ID\") references `head`(\"head_ID\"));",
    "output": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);"
  },
  {
    "instruction": "IN which year did city \"Taizhou ( Zhejiang )\" serve as a host city?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));",
    "output": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T1.city = \"Taizhou ( Zhejiang )\""
  },
  {
    "instruction": "what is the largest state that borders the state with the highest population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) ) );"
  },
  {
    "instruction": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
    "input": "create table \"movie\" (\"movie_id\" int, \"Title\" text, \"Year\" int, \"Director\" text, \"Budget_million\" real, \"Gross_worldwide\" int, primary key(\"movie_id\"));",
    "output": "SELECT title, director FROM movie WHERE YEAR <= 2000 ORDER BY gross_worldwide DESC LIMIT 1"
  },
  {
    "instruction": "Show the locations of parties with hosts older than 50.",
    "input": "create table \"party_host\" (\"Party_ID\" int, \"Host_ID\" int, \"Is_Main_in_Charge\" bool, primary key (\"Party_ID\",\"Host_ID\"), foreign key (\"Host_ID\") references `host`(\"Host_ID\"), foreign key (\"Party_ID\") references `party`(\"Party_ID\"));create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T2.Age > 50"
  },
  {
    "instruction": "Find the names of the courses that have just one student enrollment.",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) = 1"
  },
  {
    "instruction": "What are the first and last names of the artist who perfomed the song \"Badlands\"?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Badlands\""
  },
  {
    "instruction": "Show aircraft names and number of flights for each aircraft.",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T2.name, count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid"
  },
  {
    "instruction": "What are the different names of all reviewers whose ratings do not have a date field?",
    "input": "create table reviewer(rid int primary key, name text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE ratingDate = \"null\""
  },
  {
    "instruction": "Return the full names and salaries of employees with null commissions.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, salary FROM employees WHERE commission_pct = \"null\""
  },
  {
    "instruction": "how high is the highest point in delaware",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_elevation FROM highlow WHERE state_name = \"delaware\";"
  },
  {
    "instruction": "Find courses that ran in Fall 2009 and in Spring 2010.",
    "input": "create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);",
    "output": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010"
  },
  {
    "instruction": "keyphrases used by Luke Zettlemoyer",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Luke Zettlemoyer\";"
  },
  {
    "instruction": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.",
    "input": "create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));",
    "output": "SELECT Nationality, COUNT(*) FROM pilot GROUP BY Nationality"
  },
  {
    "instruction": "How many females does this network has?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT count(*) FROM Person WHERE gender = 'female'"
  },
  {
    "instruction": "Find the business which has the most number of categories",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;"
  },
  {
    "instruction": "Show the number of audience in year 2008 or 2010.",
    "input": "create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));",
    "output": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010"
  },
  {
    "instruction": "Find all the players' first name and last name who have empty death record.",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);",
    "output": "SELECT name_first, name_last FROM player WHERE death_year = '';"
  },
  {
    "instruction": "How many employees have salary between 100000 and 200000?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000"
  },
  {
    "instruction": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer primary key, `product_id` integer not null, `order_id` integer not null, `order_item_status` varchar(10) not null, `order_item_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\""
  },
  {
    "instruction": "what state is salem the capital of",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE capital = \"salem\";"
  },
  {
    "instruction": "List all the Sci-Fi movies which released in 2010",
    "input": "create table \"genre\" (\"gid\" int, \"genre\" text, primary key(\"gid\"));create table \"classification\" (\"id\" int, \"msid\" int, \"gid\" int, primary key(\"id\"), foreign key(\"gid\") references `genre`(\"gid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.genre = \"Sci-Fi\" AND t3.release_year = 2010;"
  },
  {
    "instruction": "What are the campuses that had between 600 and 1000 faculty members in 2004?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));",
    "output": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T1.year = 2004"
  },
  {
    "instruction": "Which artist does the album \"Balls to the Wall\" belong to?",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));",
    "output": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = \"Balls to the Wall\""
  },
  {
    "instruction": "what is the shortest river in the us",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MIN ( LENGTH ) FROM river );"
  },
  {
    "instruction": "Find the name of the item with the lowest average rating.",
    "input": "create table `item` (`i_id` integer not null , `title` varchar(20) default null , primary key (`i_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1"
  },
  {
    "instruction": "In which country and state does Janessa Sawayn live?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.country, T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
  },
  {
    "instruction": "Show the name and the nationality of the oldest host.",
    "input": "create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));",
    "output": "SELECT Name, Nationality FROM HOST ORDER BY Age DESC LIMIT 1"
  },
  {
    "instruction": "Show order ids and the number of products in each order.",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT order_id, count(DISTINCT product_id) FROM Order_items GROUP BY order_id"
  },
  {
    "instruction": "What is the name of the hardware product with the greatest price?",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1"
  },
  {
    "instruction": "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.",
    "input": "create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table scientists (ssn int, name char(30) not null, primary key (ssn));",
    "output": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'"
  },
  {
    "instruction": "What is the age of the friend of Zach with longest year relationship?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Zach' AND T2.year = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')"
  },
  {
    "instruction": "What is the color of the grape whose wine products has the highest average price?",
    "input": "create table \"grapes\" (\"ID\" integer primary key, \"Grape\" text unique, \"Color\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1"
  },
  {
    "instruction": "papers brian curless wrote about convolution",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"brian curless\" AND t5.keyphrasename = \"convolution\";"
  },
  {
    "instruction": "What are the names of the courses in alphabetical order?",
    "input": "create table courses (course_id varchar(100) not null, course_name varchar(120), course_description varchar(255), other_details varchar(255), primary key (course_id));",
    "output": "SELECT course_name FROM courses ORDER BY course_name"
  },
  {
    "instruction": "which states have points higher than the highest point in colorado",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM highlow WHERE highest_elevation > ( SELECT highest_elevation FROM highlow WHERE state_name = \"colorado\" );"
  },
  {
    "instruction": "Find the full names of employees who help customers with the first name Leonie.",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `employee` (`employeeid` integer not null , `lastname` varchar(20) not null , `firstname` varchar(20) not null , `title` varchar(30) default null , `reportsto` integer default null , `birthdate` datetime default null , `hiredate` datetime default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) default null , primary key (`employeeid`) , constraint `fk_employeereportsto` foreign key (`reportsto`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T2.FirstName, T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = \"Leonie\""
  },
  {
    "instruction": "Return the weight of the shortest person.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1"
  },
  {
    "instruction": "give me a restaurant in mountain view that serves good arabic food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "How many girl students who are younger than 25?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM student WHERE sex = 'F' AND age < 25"
  },
  {
    "instruction": "Count the number of customers that have the customer type that is most common.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How old is the average person for each job?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT avg(age), job FROM Person GROUP BY job"
  },
  {
    "instruction": "Show different teams in eliminations and the number of eliminations from each team.",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));",
    "output": "SELECT Team, COUNT(*) FROM elimination GROUP BY Team"
  },
  {
    "instruction": "Find the name of the nurse who has the largest number of appointments.",
    "input": "create table nurse (employeeid integer primary key not null, name varchar(30) not null, position varchar(30) not null, registered boolean not null, ssn integer not null);create table appointment (appointmentid integer primary key not null, patient integer not null, prepnurse integer, physician integer not null, start datetime not null, end datetime not null, examinationroom text not null, constraint fk_appointment_patient_ssn foreign key(patient) references patient(ssn), constraint fk_appointment_nurse_employeeid foreign key(prepnurse) references nurse(employeeid), constraint fk_appointment_physician_employeeid foreign key(physician) references physician(employeeid));",
    "output": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the total rating ratio for each channel owner.",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));",
    "output": "SELECT sum(Rating_in_percent), OWNER FROM channel GROUP BY OWNER"
  },
  {
    "instruction": "What is the id of the event with the most participants?",
    "input": "create table participants_in_events (event_id integer not null, participant_id integer not null, primary key (event_id, participant_id), foreign key (participant_id) references participants (participant_id), foreign key (event_id) references events (event_id));",
    "output": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show all product sizes.",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `production_type_code` varchar(15) not null, `unit_price` decimal(19, 4), `product_name` varchar(80), `product_color` varchar(20), `product_size` varchar(20), foreign key (`production_type_code`) references `product_categories`(`production_type_code`));",
    "output": "SELECT DISTINCT product_size FROM Products"
  },
  {
    "instruction": "What is all the information regarding employees with salaries above the minimum and under 2500?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500"
  },
  {
    "instruction": "Show the ids for all the faculty members who have at least 2 students.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID HAVING count(*) >= 2"
  },
  {
    "instruction": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
    "input": "create table `player` (`id`\tinteger primary key autoincrement, `player_api_id`\tinteger unique, `player_name`\ttext, `player_fifa_api_id`\tinteger unique, `birthday`\ttext, `height`\tinteger, `weight`\tinteger);create table \"Player_Attributes\" (`id`\tinteger primary key autoincrement, `player_fifa_api_id`\tinteger, `player_api_id`\tinteger, `date`\ttext, `overall_rating`\tinteger, `potential`\tinteger, `preferred_foot`\ttext, `attacking_work_rate`\ttext, `defensive_work_rate`\ttext, `crossing`\tinteger, `finishing`\tinteger, `heading_accuracy`\tinteger, `short_passing`\tinteger, `volleys`\tinteger, `dribbling`\tinteger, `curve`\tinteger, `free_kick_accuracy`\tinteger, `long_passing`\tinteger, `ball_control`\tinteger, `acceleration`\tinteger, `sprint_speed`\tinteger, `agility`\tinteger, `reactions`\tinteger, `balance`\tinteger, `shot_power`\tinteger, `jumping`\tinteger, `stamina`\tinteger, `strength`\tinteger, `long_shots`\tinteger, `aggression`\tinteger, `interceptions`\tinteger, `positioning`\tinteger, `vision`\tinteger, `penalties`\tinteger, `marking`\tinteger, `standing_tackle`\tinteger, `sliding_tackle`\tinteger, `gk_diving`\tinteger, `gk_handling`\tinteger, `gk_kicking`\tinteger, `gk_positioning`\tinteger, `gk_reflexes`\tinteger, foreign key(`player_fifa_api_id`) references `player`(`player_fifa_api_id`), foreign key(`player_api_id`) references `player`(`player_api_id`));",
    "output": "SELECT player_api_id FROM Player WHERE height >= 180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85"
  },
  {
    "instruction": "List all statement ids and statement details.",
    "input": "create table statements (statement_id integer not null, statement_details varchar(255), primary key (statement_id), foreign key (statement_id) references documents (document_id));",
    "output": "SELECT STATEMENT_ID, statement_details FROM Statements"
  },
  {
    "instruction": "What are the first names of all employees that are professors ordered by date of birth?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);",
    "output": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob"
  },
  {
    "instruction": "List the names of all the customers in alphabetical order.",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));",
    "output": "SELECT customer_details FROM customers ORDER BY customer_details"
  },
  {
    "instruction": "how many papers use ImageNet ?",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";"
  },
  {
    "instruction": "Given the titles of all courses, in order of titles and credits.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT title FROM course ORDER BY title, credits"
  },
  {
    "instruction": "acl papers in 2012 on Parsing",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"Parsing\" AND t3.year = 2012 AND t4.venuename = \"acl\";"
  },
  {
    "instruction": "How many clubs are there?",
    "input": "create table \"club\" (\"Club_ID\" int, \"name\" text, \"Region\" text, \"Start_year\" text, primary key (\"Club_ID\"));",
    "output": "SELECT count(*) FROM club"
  },
  {
    "instruction": "What is the total salary paid by team Boston Red Stockings in 2010?",
    "input": "create table salary (year integer, team_id text, league_id text, player_id text, salary integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2010"
  },
  {
    "instruction": "In which country does Roberto Almeida?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";"
  },
  {
    "instruction": "List the creation year, name and budget of each department.",
    "input": "create table \"department\" (\"Department_ID\" int, \"Name\" text, \"Creation\" text, \"Ranking\" int, \"Budget_in_Billions\" real, \"Num_Employees\" real, primary key (\"Department_ID\"));",
    "output": "SELECT creation, name, budget_in_billions FROM department"
  },
  {
    "instruction": "What is the number of escape games in \" Madison \" ?",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Madison\" AND t2.category_name = \"escape games\";"
  },
  {
    "instruction": "What are the names of instructors who didn't teach?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);",
    "output": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
  },
  {
    "instruction": "Give me the description of the service type that offers not only the photo product but also the film product.",
    "input": "create table ref_service_types (service_type_code char(15) not null, parent_service_type_code char(15), service_type_description varchar(255), primary key (service_type_code), unique (service_type_code));create table services (service_id integer not null, service_type_code char(15), workshop_group_id integer not null, product_description varchar(255), product_name varchar(255), product_price decimal(20, 4), other_product_service_details varchar(255), primary key (service_id), unique (service_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id), foreign key (service_type_code) references ref_service_types (service_type_code));create table ref_service_types (service_type_code char(15) not null, parent_service_type_code char(15), service_type_description varchar(255), primary key (service_type_code), unique (service_type_code));create table services (service_id integer not null, service_type_code char(15), workshop_group_id integer not null, product_description varchar(255), product_name varchar(255), product_price decimal(20, 4), other_product_service_details varchar(255), primary key (service_id), unique (service_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id), foreign key (service_type_code) references ref_service_types (service_type_code));",
    "output": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'film'"
  },
  {
    "instruction": "What are the names and ages of every person who is a friend of both Dan and Alice?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' INTERSECT SELECT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice'"
  },
  {
    "instruction": "Compute the average price of all products with manufacturer code equal to 2.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT avg(price) FROM products WHERE Manufacturer = 2"
  },
  {
    "instruction": "List the name of the shop with the latest open year.",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1"
  },
  {
    "instruction": "What is the total number of clubs that have less than 10 medals in total?",
    "input": "create table \"club_rank\" (\"Rank\" real, \"Club_ID\" int, \"Gold\" real, \"Silver\" real, \"Bronze\" real, \"Total\" real, primary key (\"Rank\",\"Club_ID\") foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT count(*) FROM club_rank WHERE Total < 10"
  },
  {
    "instruction": "Which policy type appears most frequently in the available policies?",
    "input": "create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));",
    "output": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "which papers has sharon goldwater written ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "What is the maximum and minimum market value of companies?",
    "input": "create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));",
    "output": "SELECT max(Market_Value_in_Billion), min(Market_Value_in_Billion) FROM company"
  },
  {
    "instruction": "What are all locations of train stations?",
    "input": "create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));",
    "output": "SELECT DISTINCT LOCATION FROM station"
  },
  {
    "instruction": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t2.name = \"H. V. Jagadish\" AND t1.name = \"Divesh Srivastava\";"
  },
  {
    "instruction": "What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'"
  },
  {
    "instruction": "display all the information of those employees who did not have any job in the past.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `job_history` (`employee_id` decimal(6, 0) not null, `start_date` date not null, `end_date` date not null, `job_id` varchar(10) not null, `department_id` decimal(4, 0) default null, primary key (`employee_id`,`start_date`), foreign key (`employee_id`) references employees(`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"
  },
  {
    "instruction": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 1 EXCEPT SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"OTHA\" AND T2.lastname = \"MOYER\""
  },
  {
    "instruction": "what keywords are used by papers at uist",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t4.venuename = \"uist\";"
  },
  {
    "instruction": "What are the different names of friends who are younger than the average age for a friend?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age < (SELECT avg(age) FROM person)"
  },
  {
    "instruction": "What is the number of players who have points less than 30 for each position?",
    "input": "create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT count(*), POSITION FROM player WHERE points < 30 GROUP BY POSITION"
  },
  {
    "instruction": "How many students have had at least one \"B\" grade?",
    "input": "create table enrolled_in (stuid integer, cid varchar(7), grade varchar(2), foreign key(stuid) references student(stuid), foreign key(cid) references course(cid), foreign key(grade) references gradeconversion(lettergrade));",
    "output": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade = \"B\""
  },
  {
    "instruction": "How many distinct parties are there for representatives?",
    "input": "create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));",
    "output": "SELECT count(DISTINCT Party) FROM representative"
  },
  {
    "instruction": "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?",
    "input": "create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));",
    "output": "SELECT T3.title, T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = (SELECT max(capacity) FROM classroom)"
  },
  {
    "instruction": "How many kinds of roles are there for the staff?",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT count(DISTINCT role_code) FROM Project_Staff"
  },
  {
    "instruction": "Show the phone, room, and building for the faculty named Jerry Prince.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT phone, room, building FROM Faculty WHERE Fname = \"Jerry\" AND Lname = \"Prince\""
  },
  {
    "instruction": "How many students are there?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM student"
  },
  {
    "instruction": "How many distinct kinds of injuries happened after season 2010?",
    "input": "create table \"injury_accident\" (\"game_id\" int, \"id\" int, \"Player\" text, \"Injury\" text, \"Number_of_matches\" text, \"Source\" text, primary key (\"id\"), foreign key (\"game_id\") references `game`(\"id\"));create table \"game\" (\"stadium_id\" int, \"id\" int, \"Season\" int, \"Date\" text, \"Home_team\" text, \"Away_team\" text, \"Score\" text, \"Competition\" text, primary key (\"id\"), foreign key (\"stadium_id\") references `stadium`(\"id\"));",
    "output": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010"
  },
  {
    "instruction": "How many colleges has more than 15000 students?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT count(*) FROM College WHERE enr > 15000"
  },
  {
    "instruction": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500"
  },
  {
    "instruction": "How many exhibition are there in year 2005 or after?",
    "input": "create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT count(*) FROM exhibition WHERE YEAR >= 2005"
  },
  {
    "instruction": "List the names of aircrafts and that did not win any match.",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)"
  },
  {
    "instruction": "how many people are in the state of california",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM state WHERE state_name = \"california\";"
  },
  {
    "instruction": "How many gymnasts are from each hometown?",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Hometown, COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown"
  },
  {
    "instruction": "Which course authors teach two or more courses? Give me their addresses and author IDs.",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));",
    "output": "SELECT T1.address_line_1, T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count(*) >= 2"
  },
  {
    "instruction": "Count the number of characteristics of the 'flax' product.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"flax\""
  },
  {
    "instruction": "How many papers are \"Atsushi Ohori\" the author of?",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Atsushi\" AND t1.lname = \"Ohori\""
  },
  {
    "instruction": "what state has the least population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state );"
  },
  {
    "instruction": "return me all the papers after 2000 in \" University of Michigan \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid WHERE t2.name = \"University of Michigan\" AND t4.year > 2000;"
  },
  {
    "instruction": "What are the cities no customers live in?",
    "input": "create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_addresses` (`customer_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `address_type` varchar(15) not null, `date_address_to` datetime, foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id)"
  },
  {
    "instruction": "Please show the most common age of editors.",
    "input": "create table \"editor\" (\"Editor_ID\" int, \"Name\" text, \"Age\" real, primary key (\"Editor_ID\"));",
    "output": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "what rivers flow through states that border the state with the largest population",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) ) );"
  },
  {
    "instruction": "How many credits does course CIS-220 have, and what its description?",
    "input": "create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT crs_credit, crs_description FROM course WHERE crs_code = 'CIS-220'"
  },
  {
    "instruction": "Find the names of stadiums which have never had any event.",
    "input": "create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));create table \"event\" (\"ID\" int, \"Name\" text, \"Stadium_ID\" int, \"Year\" text, primary key (\"ID\"), foreign key (`stadium_id`) references `stadium`(`id`));",
    "output": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)"
  },
  {
    "instruction": "How many problems does the product with the most problems have? List the number of the problems and product name.",
    "input": "create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT count(*), T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "conferences that Daniella Coelho has published in",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Daniella Coelho\";"
  },
  {
    "instruction": "what states border states that the mississippi runs through",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );"
  },
  {
    "instruction": "which is the highest peak not in alaska",
    "input": "create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT mountain_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain WHERE state_name != \"alaska\" );"
  },
  {
    "instruction": "Show all product names without an order.",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `production_type_code` varchar(15) not null, `unit_price` decimal(19, 4), `product_name` varchar(80), `product_color` varchar(20), `product_size` varchar(20), foreign key (`production_type_code`) references `product_categories`(`production_type_code`));create table `products` (`product_id` integer primary key, `parent_product_id` integer, `production_type_code` varchar(15) not null, `unit_price` decimal(19, 4), `product_name` varchar(80), `product_color` varchar(20), `product_size` varchar(20), foreign key (`production_type_code`) references `product_categories`(`production_type_code`));create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id"
  },
  {
    "instruction": "Count the number of schools.",
    "input": "create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));",
    "output": "SELECT count(*) FROM school"
  },
  {
    "instruction": "What are the names of the five oldest people?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5"
  },
  {
    "instruction": "What are the grade number and classroom number of each class in the list?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT classroom, grade FROM list"
  },
  {
    "instruction": "return me the number of papers by \" H. V. Jagadish \" on PVLDB after 2000 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\" AND t2.name = \"PVLDB\" AND t4.year > 2000;"
  },
  {
    "instruction": "parsing papers that have the most citations",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "Show different types of ships and the number of ships of each type.",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT TYPE, COUNT(*) FROM ship GROUP BY TYPE"
  },
  {
    "instruction": "Find the number of routes for each source airport and the airport name.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT count(*), T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name"
  },
  {
    "instruction": "Show the names of donors who donated to both school \"Glenn\" and \"Triton.\"",
    "input": "create table \"endowment\" (\"endowment_id\" int, \"School_id\" int, \"donator_name\" text, \"amount\" real, primary key(\"endowment_id\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));create table \"endowment\" (\"endowment_id\" int, \"School_id\" int, \"donator_name\" text, \"amount\" real, primary key(\"endowment_id\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));",
    "output": "SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Triton'"
  },
  {
    "instruction": "Find number of tracks in each genre?",
    "input": "create table genres (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*), T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;"
  },
  {
    "instruction": "How many universities have a location that contains NY?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
  },
  {
    "instruction": "What year was the movie \" The Imitation Game \" produced",
    "input": "create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT release_year FROM movie WHERE title = \"The Imitation Game\";"
  },
  {
    "instruction": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT email FROM employees WHERE commission_pct = \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50"
  },
  {
    "instruction": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T1.fname, T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')"
  },
  {
    "instruction": "Show the locations of schools that have more than 1 player.",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*) > 1"
  },
  {
    "instruction": "What are the country names, area and population which has both roller coasters with speed higher",
    "input": "create table \"country\" (\"Country_ID\" int, \"Name\" text, \"Population\" int, \"Area\" int, \"Languages\" text, primary key (\"Country_ID\"));create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));create table \"country\" (\"Country_ID\" int, \"Name\" text, \"Population\" int, \"Area\" int, \"Languages\" text, primary key (\"Country_ID\"));create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT T1.name, T1.area, T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID WHERE T2.speed > 60 INTERSECT SELECT T1.name, T1.area, T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID WHERE T2.speed < 55"
  },
  {
    "instruction": "What is the song in the volume with the maximum weeks on top?",
    "input": "create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1"
  },
  {
    "instruction": "What are the department ids, full names, and salaries for employees who make the most in their departments?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, salary, department_id, MAX(salary) FROM employees GROUP BY department_id"
  },
  {
    "instruction": "return me the papers in PVLDB containing keyword \" Keyword search \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t4.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid = t1.kid JOIN publication AS t4 ON t4.pid = t2.pid JOIN journal AS t3 ON t4.jid = t3.jid WHERE t3.name = \"PVLDB\" AND t1.keyword = \"Keyword search\";"
  },
  {
    "instruction": "How many states have a college with more students than average?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT count(DISTINCT state) FROM college WHERE enr > (SELECT avg(enr) FROM college)"
  },
  {
    "instruction": "Tell me the total quantity of products bought by the customer called \"Rodrick Heaney\".",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\""
  },
  {
    "instruction": "Show all home cities except for those having a driver older than 40.",
    "input": "create table \"driver\" (\"Driver_ID\" int, \"Name\" text, \"Party\" text, \"Home_city\" text, \"Age\" int, primary key (\"Driver_ID\"));create table \"driver\" (\"Driver_ID\" int, \"Name\" text, \"Party\" text, \"Home_city\" text, \"Age\" int, primary key (\"Driver_ID\"));",
    "output": "SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age > 40"
  },
  {
    "instruction": "Show the number of customer cards.",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT count(*) FROM Customers_cards"
  },
  {
    "instruction": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.",
    "input": "create table employee(fname text, minit text, lname text, ssn integer primary key, bdate text, address text, sex text, salary integer, super_ssn integer, dno integer);",
    "output": "SELECT fname, lname, address FROM employee ORDER BY Bdate"
  },
  {
    "instruction": "What are the enrollment and primary conference for the university which was founded the earliest?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT enrollment, primary_conference FROM university ORDER BY founded LIMIT 1"
  },
  {
    "instruction": "How many movies did \" Quentin Tarantino \" direct after 2010 ?",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT COUNT ( DISTINCT t3.title ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Quentin Tarantino\" AND t3.release_year > 2010;"
  },
  {
    "instruction": "What is the detail of the location UK Gallery?",
    "input": "create table locations (location_id integer not null, location_name varchar(255), address varchar(255), other_details varchar(255), primary key (location_id));",
    "output": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name = \"UK Gallery\""
  },
  {
    "instruction": "How many papers used ImageNet datasets in cvpr ?",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.datasetname = \"ImageNet\" AND t4.venuename = \"cvpr\";"
  },
  {
    "instruction": "list the card number of all members whose hometown address includes word \"Kentucky\".",
    "input": "create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));",
    "output": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\""
  },
  {
    "instruction": "List in alphabetic order all different amenities.",
    "input": "create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name"
  },
  {
    "instruction": "Return the ids of documents that do not have expenses.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses"
  },
  {
    "instruction": "How many songs use drums as an instrument?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));",
    "output": "SELECT count(*) FROM instruments WHERE instrument = \"drums\""
  },
  {
    "instruction": "What are the names of departments that have primarily affiliated physicians.",
    "input": "create table affiliated_with (physician integer not null, department integer not null, primaryaffiliation boolean not null, constraint fk_affiliated_with_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_affiliated_with_department_departmentid foreign key(department) references department(departmentid), primary key(physician, department));create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));",
    "output": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation = 1"
  },
  {
    "instruction": "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t3.sex = \"M\""
  },
  {
    "instruction": "how many David M. Blei papers are in AISTATS ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"David M. Blei\" AND t4.venuename = \"AISTATS\";"
  },
  {
    "instruction": "Show the names of all the employees with role \"HR\".",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT employee_name FROM Employees WHERE role_code = \"HR\""
  },
  {
    "instruction": "Find the id of the customer who made the most orders.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of book clubs.",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT count(*) FROM book_club"
  },
  {
    "instruction": "where is springfield",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE city_name = \"springfield\";"
  },
  {
    "instruction": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?",
    "input": "create table \"camera_lens\" (\"id\" int, \"brand\" text, \"name\" text, \"focal_length_mm\" real, \"max_aperture\" real, primary key(\"id\"));create table \"photos\" (\"id\" int, \"camera_lens_id\" int, \"mountain_id\" int, \"color\" text, \"name\" text, primary key(\"id\"), foreign key(\"camera_lens_id\") references `camera_lens`(\"id\"), foreign key(\"mountain_id\") references `mountain`(\"id\"));",
    "output": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus'"
  },
  {
    "instruction": "List the state names and the number of customers living in each state.",
    "input": "create table `customer_addresses` (`customer_id` integer not null, `address_id` integer not null, `date_from` datetime not null, `address_type` varchar(10) not null, `date_to` datetime, foreign key (`customer_id`) references `customers`(`customer_id`), foreign key (`address_id`) references `addresses`(`address_id`));create table `addresses` (`address_id` integer primary key, `address_details` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT t2.state_province_county, count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county"
  },
  {
    "instruction": "What are the three most costly procedures?",
    "input": "create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT name FROM procedures ORDER BY cost LIMIT 3"
  },
  {
    "instruction": "How many scientists do not have any projects assigned to them?",
    "input": "create table scientists (ssn int, name char(30) not null, primary key (ssn));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));",
    "output": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)"
  },
  {
    "instruction": "show the titles, and authors or editors for all books made after the year 1989.",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT book_title, author_or_editor FROM book_club WHERE YEAR > 1989"
  },
  {
    "instruction": "Show all student ids who are older than 20.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT StuID FROM Student WHERE age > 20"
  },
  {
    "instruction": "Return the full name and phone of the customer who has card number 4560596484842.",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = \"4560596484842\""
  },
  {
    "instruction": "Find the cities which were once a host city after 2010?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));",
    "output": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year > 2010"
  },
  {
    "instruction": "Find the first and last name of the faculty who is involved in the largest number of activities.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));",
    "output": "SELECT T1.fname, T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of different hometowns of these people.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT count(DISTINCT Hometown) FROM people"
  },
  {
    "instruction": "return me the papers by \" H. V. Jagadish \" on VLDB conference with more than 200 citations .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\" AND t2.name = \"VLDB\" AND t4.citation_num > 200;"
  },
  {
    "instruction": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Membership_card\" text, \"Age\" int, \"Time_of_purchase\" int, \"Level_of_membership\" int, \"Address\" text, primary key (\"Member_ID\"));create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Membership_card\" text, \"Age\" int, \"Time_of_purchase\" int, \"Level_of_membership\" int, \"Address\" text, primary key (\"Member_ID\"));",
    "output": "SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'"
  },
  {
    "instruction": "What is all the information of all the products that have a price between 60 and 120?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT * FROM products WHERE price BETWEEN 60 AND 120"
  },
  {
    "instruction": "Show the nicknames of schools that are not in division 1.",
    "input": "create table \"school_details\" (\"School_ID\" int, \"Nickname\" text, \"Colors\" text, \"League\" text, \"Class\" text, \"Division\" text, primary key (\"School_Id\"), foreign key (`school_id`) references `school`(`school_id`));",
    "output": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\""
  },
  {
    "instruction": "What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT avg(T2.fastestlapspeed), T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"
  },
  {
    "instruction": "Find the physician who prescribed the highest dose. What is his or her name?",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));",
    "output": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1"
  },
  {
    "instruction": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100"
  },
  {
    "instruction": "What is the last name of the musician that has been at the back position the most?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE stageposition = \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "are there any syntactic parsing papers not written by chris dyer ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorname, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename = \"syntactic parsing\";"
  },
  {
    "instruction": "List roles that have more than one employee. List the role description and number of employees.",
    "input": "create table roles (role_code char(15) not null, role_description varchar(255), primary key (role_code));create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT Roles.role_description, count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id) > 1;"
  },
  {
    "instruction": "What is the product description of the product booked with an amount of 102.76?",
    "input": "create table `products_booked` (`booking_id` integer not null, `product_id` integer not null, `returned_yn` varchar(1), `returned_late_yn` varchar(1), `booked_count` integer, `booked_amount` float null, primary key (`booking_id`, `product_id`) foreign key (`booking_id`) references `bookings`(`booking_id`), foreign key (`product_id`) references `products_for_hire`(`product_id`));create table `products_for_hire` (`product_id` integer primary key, `product_type_code` varchar(15) not null, `daily_hire_cost` decimal(19, 4), `product_name` varchar(80), `product_description` varchar(255));",
    "output": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.booked_amount = 102.76"
  },
  {
    "instruction": "Find the busiest destination airport that runs most number of routes in China.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Compute the total amount of payment processed.",
    "input": "create table payments (payment_id integer not null, settlement_id integer not null, payment_method_code varchar(255), date_payment_made date, amount_payment integer, primary key (payment_id), foreign key (settlement_id) references settlements (settlement_id));",
    "output": "SELECT sum(Amount_Payment) FROM Payments"
  },
  {
    "instruction": "how many major rivers cross ohio",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( river_name ) FROM river WHERE LENGTH > 750 AND traverse = \"ohio\";"
  },
  {
    "instruction": "How many order items correspond to each order id?",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT order_id, count(*) FROM Order_items GROUP BY order_id"
  },
  {
    "instruction": "what datasets did jitendra malik use ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"jitendra malik\";"
  },
  {
    "instruction": "What are the names of entrepreneurs?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID"
  },
  {
    "instruction": "What are the highest cost, lowest cost and average cost of procedures?",
    "input": "create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT MAX(cost), MIN(cost), AVG(cost) FROM procedures"
  },
  {
    "instruction": "Which city does has most number of customers?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "instruction": "Find the names of schools that have some students playing in goalie and mid positions.",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid'"
  },
  {
    "instruction": "What is the salaray and name of the employee that is certified to fly the most planes?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT T1.name, T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Return the detail of the location named \"UK Gallery\".",
    "input": "create table locations (location_id integer not null, location_name varchar(255), address varchar(255), other_details varchar(255), primary key (location_id));",
    "output": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name = \"UK Gallery\""
  },
  {
    "instruction": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".",
    "input": "create table \"Institution\" (\"Institution_id\" text, \"Institution\" text, \"Location\" text, \"Founded\" real, \"Type\" text, \"Enrollment\" int, \"Team\" text, \"Primary_Conference\" text, \"building_id\" text, primary key(\"Institution_id\"), foreign key (\"building_id\") references \"building\"(\"building_id\"));",
    "output": "SELECT institution, LOCATION FROM institution WHERE founded > 1990 AND TYPE = 'Private'"
  },
  {
    "instruction": "For each city, list their names in decreasing order by their highest station latitude.",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC"
  },
  {
    "instruction": "Find the captain rank that has some captains in both Cutter and Armed schooner classes.",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT rank FROM captain WHERE CLASS = 'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS = 'Armed schooner'"
  },
  {
    "instruction": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900"
  },
  {
    "instruction": "Find the name of the organization that has published the largest number of papers.",
    "input": "create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.",
    "input": "create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country"
  },
  {
    "instruction": "List all the policy types used by the customer enrolled in the most policies.",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table customers_policies (customer_id integer not null, policy_id integer not null, date_opened date, date_closed date, primary key (customer_id, policy_id), foreign key (customer_id) references customers (customer_id), foreign key (policy_id) references available_policies (policy_id));create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table customers_policies (customer_id integer not null, policy_id integer not null, date_opened date, date_closed date, primary key (customer_id, policy_id), foreign key (customer_id) references customers (customer_id), foreign key (policy_id) references available_policies (policy_id));",
    "output": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "What are the login names used both by some course authors and some students?",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students"
  },
  {
    "instruction": "Which grade is studying in classroom 103?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT grade FROM list WHERE classroom = 103"
  },
  {
    "instruction": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
  },
  {
    "instruction": "What types of vocals are used in the song \"Badlands\"?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Badlands\""
  },
  {
    "instruction": "Show the card type codes and the number of transactions.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `previous_transaction_id` integer, `account_id` integer not null, `card_id` integer not null, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` double null, `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`card_id`) references `customers_cards`(`card_id`), foreign key (`account_id`) references `accounts`(`account_id`));create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT T2.card_type_code, count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code"
  },
  {
    "instruction": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT product, chromosome, porphyria FROM enzyme WHERE LOCATION = 'Cytosol'"
  },
  {
    "instruction": "conferences in 2013",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT venueid FROM paper WHERE YEAR = 2013;"
  },
  {
    "instruction": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_product_categories` (`product_category_code` varchar(15) primary key, `product_category_description` varchar(80), `unit_of_measure` varchar(20));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code WHERE t3.color_description = \"white\" AND t2.unit_of_measure != \"Handful\""
  },
  {
    "instruction": "Count the number of races.",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));",
    "output": "SELECT count(*) FROM race"
  },
  {
    "instruction": "What is the location with the most cinemas opened in year 2010 or later?",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the completion dates of all the tests that have result \"Fail\"?",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));create table `student_tests_taken` (`registration_id` integer not null, `date_test_taken` datetime not null, `test_result` varchar(255), foreign key (`registration_id`) references `student_course_enrolment`(`registration_id`));",
    "output": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Fail\""
  },
  {
    "instruction": "How many accounts have a savings balance above the average savings balance?",
    "input": "create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT count(*) FROM savings WHERE balance > (SELECT avg(balance) FROM savings)"
  },
  {
    "instruction": "What is the maximum stars and year for the most recent movie?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT max(T1.stars), T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT max(YEAR) FROM Movie)"
  },
  {
    "instruction": "What are the department names, cities, and state provinces for each department?",
    "input": "create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));create table `locations` (`location_id` decimal(4, 0) not null default '0', `street_address` varchar(40) default null, `postal_code` varchar(12) default null, `city` varchar(30) not null, `state_province` varchar(25) default null, `country_id` varchar(2) default null, primary key (`location_id`), foreign key (`country_id`) references countries(`country_id`));",
    "output": "SELECT T1.department_name, T2.city, T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id = T1.location_id"
  },
  {
    "instruction": "Which cities served as a host city after 2010?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));",
    "output": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year > 2010"
  },
  {
    "instruction": "Find the average and total capacity of dorms for the students with gender X.",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT avg(student_capacity), sum(student_capacity) FROM dorm WHERE gender = 'X'"
  },
  {
    "instruction": "Show the maximum and minimum share count of different transaction types.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT transaction_type_code, max(share_count), min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code"
  },
  {
    "instruction": "What are the name and assets of each company, sorted in ascending order of company name?",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT name, Assets_billion FROM Companies ORDER BY name ASC"
  },
  {
    "instruction": "How many regions do we have?",
    "input": "create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));",
    "output": "SELECT count(*) FROM region"
  },
  {
    "instruction": "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?",
    "input": "create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1"
  },
  {
    "instruction": "Show the home city with the most number of drivers.",
    "input": "create table \"driver\" (\"Driver_ID\" int, \"Name\" text, \"Party\" text, \"Home_city\" text, \"Age\" int, primary key (\"Driver_ID\"));",
    "output": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"temperature\" (\"City_ID\" int, \"Jan\" real, \"Feb\" real, \"Mar\" real, \"Apr\" real, \"Jun\" real, \"Jul\" real, \"Aug\" real, \"Sep\" real, \"Oct\" real, \"Nov\" real, \"Dec\" real, primary key (\"City_ID\"), foreign key (`city_id`) references `city`(`city_id`));",
    "output": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct"
  },
  {
    "instruction": "For how many clubs is \"Tracy Kim\" a member?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Tracy\" AND t3.lname = \"Kim\""
  },
  {
    "instruction": "return me the number of the organizations .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));",
    "output": "SELECT COUNT ( DISTINCT name ) FROM organization;"
  },
  {
    "instruction": "where is denny in the bay area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"bay area\" AND t1.name = \"denny\";"
  },
  {
    "instruction": "Find the name of the storm that affected both Afghanistan and Albania regions.",
    "input": "create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'"
  },
  {
    "instruction": "Find all the ids and dates of the logs for the problem whose id is 10.",
    "input": "create table `problem_log` (`problem_log_id` integer primary key, `assigned_to_staff_id` integer not null, `problem_id` integer not null, `problem_category_code` varchar(20) not null, `problem_status_code` varchar(20) not null, `log_entry_date` datetime, `log_entry_description` varchar(255), `log_entry_fix` varchar(255), `other_log_details` varchar(255), foreign key (`problem_category_code`) references `problem_category_codes`(`problem_category_code`), foreign key (`assigned_to_staff_id`) references `staff`(`staff_id`), foreign key (`problem_id`) references `problems`(`problem_id`), foreign key (`problem_status_code`) references `problem_status_codes`(`problem_status_code`));",
    "output": "SELECT problem_log_id, log_entry_date FROM problem_log WHERE problem_id = 10"
  },
  {
    "instruction": "Which papers have Peter Mertens and Dina Barbian as co-authors ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
    "input": "create table `mailshot_customers` (`mailshot_id` integer not null, `customer_id` integer not null, `outcome_code` varchar(15) not null, `mailshot_customer_date` datetime, foreign key (`customer_id`) references `customers`(`customer_id`), foreign key (`mailshot_id`) references `mailshot_campaigns`(`mailshot_id`));create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `customer_phone` varchar(80), `customer_email` varchar(80), `customer_address` varchar(255), `customer_login` varchar(80), `customer_password` varchar(10));",
    "output": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE outcome_code = 'Order' GROUP BY T1.customer_id HAVING count(*) >= 2"
  },
  {
    "instruction": "What is the total number of enrollment of schools that do not have any goalie player?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos = \"goalie\")"
  },
  {
    "instruction": "What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Der Kapitan\" AND T1.StagePosition = \"back\""
  },
  {
    "instruction": "What are the first names of students in room 108?",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT firstname FROM list WHERE classroom = 108"
  },
  {
    "instruction": "What are the cities that do not have any branches with more than 100 members?",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount > 100"
  },
  {
    "instruction": "Show the names of editors that are on the committee of journals with sales bigger than 3000.",
    "input": "create table \"journal_committee\" (\"Editor_ID\" int, \"Journal_ID\" int, \"Work_Type\" text, primary key (\"Editor_ID\",\"Journal_ID\"), foreign key (\"Editor_ID\") references `editor`(\"Editor_ID\"), foreign key (\"Journal_ID\") references `journal`(\"Journal_ID\"));create table \"editor\" (\"Editor_ID\" int, \"Name\" text, \"Age\" real, primary key (\"Editor_ID\"));create table \"journal\" (\"Journal_ID\" int, \"Date\" text, \"Theme\" text, \"Sales\" int, primary key (\"Journal_ID\"));",
    "output": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000"
  },
  {
    "instruction": "How old is the doctor named Zach?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT age FROM Person WHERE job = 'doctor' AND name = 'Zach'"
  },
  {
    "instruction": "papers related to Question Answering",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "what are the populations of the states through which the mississippi river runs",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );"
  },
  {
    "instruction": "return me the number of authors who have cited the papers by \" H. V. Jagadish \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"cite\" (\"cited\" int, \"citing\" int, foreign key(\"cited\") references \"publication\"(\"pid\"), foreign key(\"citing\") references \"publication\"(\"pid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t7 JOIN cite AS t5 ON t7.pid = t5.citing JOIN publication AS t6 ON t6.pid = t5.cited JOIN writes AS t3 ON t3.pid = t7.pid JOIN writes AS t4 ON t4.pid = t6.pid JOIN author AS t2 ON t3.aid = t2.aid JOIN author AS t1 ON t4.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\";"
  },
  {
    "instruction": "How many professors are in the accounting dept?",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = \"Accounting\""
  },
  {
    "instruction": "List the state in the US with the most invoices.",
    "input": "create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;"
  },
  {
    "instruction": "What document types do have more than 10000 total access number.",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count) > 10000"
  },
  {
    "instruction": "Show all artist names and the number of exhibitions for each artist.",
    "input": "create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT T2.name, count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id"
  },
  {
    "instruction": "Find the average number of checkins in restaurant \" Barrio Cafe \" per day",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"checkin\" (\"cid\" int, \"business_id\" text, \"count\" int, \"day\" text, primary key(\"cid\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT AVG ( t3.count ), t3.day FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN checkin AS t3 ON t3.business_id = t1.business_id WHERE t1.name = \"Barrio Cafe\" AND t2.category_name = \"restaurant\" GROUP BY t3.day;"
  },
  {
    "instruction": "List the id of students who attended some courses?",
    "input": "create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT student_id FROM student_course_attendance"
  },
  {
    "instruction": "what are the capitals of states that border texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border WHERE t1.state_name = \"texas\";"
  },
  {
    "instruction": "What are the names of the tourist attractions that can be accessed by bus?",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\""
  },
  {
    "instruction": "For each journal_committee, find the editor name and the journal theme.",
    "input": "create table \"journal_committee\" (\"Editor_ID\" int, \"Journal_ID\" int, \"Work_Type\" text, primary key (\"Editor_ID\",\"Journal_ID\"), foreign key (\"Editor_ID\") references `editor`(\"Editor_ID\"), foreign key (\"Journal_ID\") references `journal`(\"Journal_ID\"));create table \"editor\" (\"Editor_ID\" int, \"Name\" text, \"Age\" real, primary key (\"Editor_ID\"));create table \"journal\" (\"Journal_ID\" int, \"Date\" text, \"Theme\" text, \"Sales\" int, primary key (\"Journal_ID\"));",
    "output": "SELECT T2.Name, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID"
  },
  {
    "instruction": "Find the total saving balance for each account name.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT sum(T2.balance), T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name"
  },
  {
    "instruction": "what are some good restaurants in the yosemite and mono lake area for french food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"yosemite and mono lake area\" AND t1.food_type = \"french\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Please show the most common type of ships.",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",
    "input": "create table circulation_history (document_id integer not null, draft_number integer not null, copy_number integer not null, employee_id integer not null, primary key (document_id, draft_number, copy_number, employee_id), foreign key (document_id, draft_number, copy_number) references draft_copies (document_id, draft_number, copy_number), foreign key (employee_id) references employees (employee_id));",
    "output": "SELECT document_id, count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;"
  },
  {
    "instruction": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT T1.account_id, T1.date_account_opened, T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'"
  },
  {
    "instruction": "Show the positions of the players from the team with name \"Ryley Goldner\".",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));create table `team` (`team_id` int, `name` text, primary key (`team_id`));",
    "output": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Ryley Goldner\""
  },
  {
    "instruction": "How many assets does each third party company supply? List the count and the company id.",
    "input": "create table `third_party_companies` (`company_id` integer primary key , `company_type` varchar(5) not null, `company_name` varchar(255), `company_address` varchar(255), `other_company_details` varchar(255));create table `assets` (`asset_id` integer primary key, `maintenance_contract_id` integer not null, `supplier_company_id` integer not null, `asset_details` varchar(255), `asset_make` varchar(20), `asset_model` varchar(20), `asset_acquired_date` datetime, `asset_disposed_date` datetime, `other_asset_details` varchar(255), foreign key (`maintenance_contract_id`) references `maintenance_contracts`(`maintenance_contract_id`), foreign key (`supplier_company_id`) references `third_party_companies`(`company_id`));",
    "output": "SELECT count(*), T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id GROUP BY T1.company_id"
  },
  {
    "instruction": "How many international and domestic passengers are there in the airport London Heathrow?",
    "input": "create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT International_Passengers, Domestic_Passengers FROM airport WHERE Airport_Name = \"London Heathrow\""
  },
  {
    "instruction": "Find the organisation ids and details of the organisations which are involved in",
    "input": "create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));",
    "output": "SELECT T2.organisation_id, T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount) > 6000"
  },
  {
    "instruction": "What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT name FROM manufacturers WHERE revenue < (SELECT min(revenue) FROM manufacturers WHERE headquarter = 'Austin')"
  },
  {
    "instruction": "List the publisher of the publication with the highest price.",
    "input": "create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));",
    "output": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of all people, ordered by their date of birth?",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));",
    "output": "SELECT name FROM people ORDER BY date_of_birth"
  },
  {
    "instruction": "What is the founded year of the non public school that was founded most recently?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1"
  },
  {
    "instruction": "What is the average latitude and longitude of stations located in San Jose city?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT avg(lat), avg(long) FROM station WHERE city = \"San Jose\""
  },
  {
    "instruction": "Find the name of the customers who have at most two orders.",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));",
    "output": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*) <= 2"
  },
  {
    "instruction": "What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it?",
    "input": "create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table scientists (ssn int, name char(30) not null, primary key (ssn));create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT T2.name, T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT min(hours) FROM projects)"
  },
  {
    "instruction": "How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')?",
    "input": "create table postseason (year integer, round text, team_id_winner text, league_id_winner text, team_id_loser text, league_id_loser text, wins integer, losses integer, ties integer);",
    "output": "SELECT count(*) FROM postseason WHERE YEAR = 1885 AND ties = 1;"
  },
  {
    "instruction": "What are all the players who played in match season, sorted by college in ascending alphabetical order?",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT player FROM match_season ORDER BY College ASC"
  },
  {
    "instruction": "keywords used by Luke Zettlemoyer",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Luke Zettlemoyer\";"
  },
  {
    "instruction": "What are the crime rates of counties sorted by number of offices ascending?",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC"
  },
  {
    "instruction": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name FROM employees WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163 )"
  },
  {
    "instruction": "How many papers were written on question answering in 2011 through 2016 ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"question answering\" AND t3.year >= 2011;"
  },
  {
    "instruction": "What are the lengths and heights of roller coasters?",
    "input": "create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT LENGTH, Height FROM roller_coaster"
  },
  {
    "instruction": "Which film has the highest rental rate? And what is the rate?",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));",
    "output": "SELECT title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1"
  },
  {
    "instruction": "How many papers did michael i. jordan publish in 2016",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"michael i. jordan\" AND t3.year = 2016;"
  },
  {
    "instruction": "List the names of all distinct wines ordered by price.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT Name FROM WINE ORDER BY price"
  },
  {
    "instruction": "Find the emails of the user named \"Mary\".",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));",
    "output": "SELECT email FROM user_profiles WHERE name = 'Mary'"
  },
  {
    "instruction": "List the name of ships that are not involved in any mission",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));create table \"mission\" (\"Mission_ID\" int, \"Ship_ID\" int, \"Code\" text, \"Launched_Year\" int, \"Location\" text, \"Speed_knots\" int, \"Fate\" text, primary key (\"Mission_ID\"), foreign key (\"Ship_ID\") references `ship`(\"Ship_ID\"));",
    "output": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)"
  },
  {
    "instruction": "Find the title and score of the movie with the lowest rating among all movies directed by each director.",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title, T1.stars, T2.director, min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.director"
  },
  {
    "instruction": "List the details of the customers who do not have any policies.",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table customer_policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date date, end_date date, primary key (policy_id), foreign key (customer_id) references customers (customer_id));",
    "output": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id"
  },
  {
    "instruction": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.first_name, T1.last_name, COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;"
  },
  {
    "instruction": "Show the ids for all the students who participate in an activity and are under 20.",
    "input": "create table participates_in (stuid integer, actid integer, foreign key(stuid) references student(stuid), foreign key(actid) references activity(actid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age < 20"
  },
  {
    "instruction": "papers about WebKB",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"WebKB\";"
  },
  {
    "instruction": "How many branches where have more than average number of memberships are there?",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT count(*) FROM branch WHERE membership_amount > (SELECT avg(membership_amount) FROM branch)"
  },
  {
    "instruction": "List the names of departments where some physicians are primarily affiliated with.",
    "input": "create table affiliated_with (physician integer not null, department integer not null, primaryaffiliation boolean not null, constraint fk_affiliated_with_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_affiliated_with_department_departmentid foreign key(department) references department(departmentid), primary key(physician, department));create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));",
    "output": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation = 1"
  },
  {
    "instruction": "Who are the actors born in \" Austin \" after 1980 ?",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT name FROM actor WHERE birth_city = \"Austin\" AND birth_year > 1980;"
  },
  {
    "instruction": "What are the names of all students who successfully tried out for the position of striker?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' AND T2.pPos = 'striker'"
  },
  {
    "instruction": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name, T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested"
  },
  {
    "instruction": "How many manufacturers have headquarters in either Tokyo or Beijing?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT count(*) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Beijing'"
  },
  {
    "instruction": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
    "input": "create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));",
    "output": "SELECT building, room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"
  },
  {
    "instruction": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.",
    "input": "create table `fault_log` (`fault_log_entry_id` integer primary key, `asset_id` integer not null, `recorded_by_staff_id` integer not null, `fault_log_entry_datetime` datetime, `fault_description` varchar(255), `other_fault_details` varchar(255), foreign key (`asset_id`) references `assets`(`asset_id`), foreign key (`recorded_by_staff_id`) references `staff`(`staff_id`));create table `engineer_visits` (`engineer_visit_id` integer primary key, `contact_staff_id` integer, `engineer_id` integer not null, `fault_log_entry_id` integer not null, `fault_status` varchar(10) not null, `visit_start_datetime` datetime, `visit_end_datetime` datetime, `other_visit_details` varchar(255), foreign key (`fault_log_entry_id`) references `fault_log`(`fault_log_entry_id`), foreign key (`engineer_id`) references `maintenance_engineers`(`engineer_id`), foreign key (`contact_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT count(*), T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "For each county, find the name of the county and the number of delegates from that county.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT T1.County_name, COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id"
  },
  {
    "instruction": "How many different kinds of information sources are there for injury accidents?",
    "input": "create table \"injury_accident\" (\"game_id\" int, \"id\" int, \"Player\" text, \"Injury\" text, \"Number_of_matches\" text, \"Source\" text, primary key (\"id\"), foreign key (\"game_id\") references `game`(\"id\"));",
    "output": "SELECT count(DISTINCT SOURCE) FROM injury_accident"
  },
  {
    "instruction": "Return the names and typical buying prices for all products.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT product_name, typical_buying_price FROM products"
  },
  {
    "instruction": "Find the average unit price of tracks from the Rock genre.",
    "input": "create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\""
  },
  {
    "instruction": "Which product has been ordered most number of times?",
    "input": "create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));create table `products` (`product_id` integer primary key, `product_details` varchar(255));",
    "output": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "List the height and weight of people in descending order of height.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));",
    "output": "SELECT Height, Weight FROM people ORDER BY Height DESC"
  },
  {
    "instruction": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));",
    "output": "SELECT Kids FROM Reservations WHERE CheckIn = \"2010-09-21\" AND FirstName = \"DAMIEN\" AND LastName = \"TRACHSEL\";"
  },
  {
    "instruction": "highly cited parsing papers",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "Count the number of countries.",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));",
    "output": "SELECT count(*) FROM country"
  },
  {
    "instruction": "What are the names of cities that are in the county with the most police officers?",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT name FROM city WHERE county_ID = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)"
  },
  {
    "instruction": "What is the gender of the student Linda Smith?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Sex FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
  },
  {
    "instruction": "Find all the stage positions of the musicians with first name \"Solveig\"",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE Firstname = \"Solveig\""
  },
  {
    "instruction": "Find all movies featuring both \" Woody Strode \" and \" Jason Robards \"",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN CAST AS t3 ON t4.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid WHERE t1.name = \"Woody Strode\" AND t2.name = \"Jason Robards\";"
  },
  {
    "instruction": "What papers have Peter Mertens and Dina Barbian written ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "How many people are under 40 for each gender?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT count(*), gender FROM Person WHERE age < 40 GROUP BY gender"
  },
  {
    "instruction": "Find all information about student addresses, and sort by monthly rental in descending order.",
    "input": "create table `student_addresses` (`student_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `date_address_to` datetime, `monthly_rental` decimal(19, 4), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC"
  },
  {
    "instruction": "Find the name and population of district with population between 200000 and 2000000",
    "input": "create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT District_name, City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000"
  },
  {
    "instruction": "What are the total number of credits offered by each department?",
    "input": "create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT sum(T1.crs_credit), T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code"
  },
  {
    "instruction": "What is the average age of the members of the club \"Bootup Baltimore\"?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\""
  },
  {
    "instruction": "return me the paper in PVLDB with the most citations .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;"
  },
  {
    "instruction": "What is the name of the room that can accommodate the most people?",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;"
  },
  {
    "instruction": "most cited EMNLP 2010 papers",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.citedpaperid, COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t1.year = 2010 AND t2.venuename = \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;"
  },
  {
    "instruction": "Find the year in which the least people enter hall of fame.",
    "input": "create table hall_of_fame (player_id text, yearid integer, votedby text, ballots numeric, needed numeric, votes numeric, inducted text, category text, needed_note text, foreign key (player_id) references player(player_id));",
    "output": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;"
  },
  {
    "instruction": "which papers in eccv 2014 use ImageNet ?",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.datasetname = \"ImageNet\" AND t3.year = 2014 AND t4.venuename = \"eccv\";"
  },
  {
    "instruction": "What are the visit date and details of the visitor whose detail is 'Vincent'?",
    "input": "create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT T2.Visit_Date, T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE T1.Tourist_Details = \"Vincent\""
  },
  {
    "instruction": "How many drama workshop groups are there in each city? Return both the city and the count.",
    "input": "create table addresses (address_id varchar(100) not null, line_1 varchar(255), line_2 varchar(255), city_town varchar(255), state_county varchar(255), other_details varchar(255), primary key (address_id), unique (address_id));create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT T1.City_Town, count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town"
  },
  {
    "instruction": "Find the building that has the largest number of faculty members.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, salary, department_id, MAX(salary) FROM employees GROUP BY department_id"
  },
  {
    "instruction": "What are the names of the products that have a color description of 'red' and the 'fast' characteristic?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"red\" AND t3.characteristic_name = \"fast\""
  },
  {
    "instruction": "How many students are age 18?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM Student WHERE age = 18"
  },
  {
    "instruction": "Find all the phone numbers.",
    "input": "create table available_policies (policy_id integer not null, policy_type_code char(15), customer_phone varchar(255), primary key (policy_id), unique (policy_id));",
    "output": "SELECT customer_phone FROM available_policies"
  },
  {
    "instruction": "Which song has the most vocals?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show all countries and the number of people from each country.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Country\" text, \"Is_Male\" text, \"Age\" int, primary key (\"People_ID\"));",
    "output": "SELECT country, count(*) FROM people GROUP BY country"
  },
  {
    "instruction": "Which countries have more than two members?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Country\" text, \"College_ID\" int, primary key (\"Member_ID\"), foreign key (\"College_ID\") references `college`(\"College_ID\"));",
    "output": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*) > 2"
  },
  {
    "instruction": "Return the names of cities, ordered alphabetically.",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));",
    "output": "SELECT Name FROM city ORDER BY Name ASC"
  },
  {
    "instruction": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table guests (guest_id integer not null , gender_code char(1), guest_first_name varchar(80), guest_last_name varchar(80), date_of_birth datetime, primary key (guest_id), unique (guest_id));",
    "output": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\""
  },
  {
    "instruction": "Find the names and number of works of all artists who have at least one English songs.",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.artist_name, count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"english\" GROUP BY T2.artist_name HAVING count(*) >= 1"
  },
  {
    "instruction": "How many dorms are in the database?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT count(*) FROM dorm"
  },
  {
    "instruction": "pldi 2015 list of papers",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "What are the ids of the movies that are not reviewed by Brittany Harris.",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table reviewer(rid int primary key, name text);",
    "output": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = \"Brittany Harris\""
  },
  {
    "instruction": "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
    "input": "create table products (product_id integer not null, product_type_code char(15), product_name varchar(255), product_price decimal(20, 4), primary key (product_id), unique (product_id));",
    "output": "SELECT Product_Price FROM Products WHERE Product_Name = \"Dining\" OR Product_Name = \"Trading Policy\""
  },
  {
    "instruction": "What is the average distance and price for all flights from LA?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT avg(distance), avg(price) FROM Flight WHERE origin = \"Los Angeles\""
  },
  {
    "instruction": "For every student who is registered for some course, how many courses are they registered for?",
    "input": "create table students (student_id integer not null, student_details varchar(255), primary key (student_id), foreign key (student_id) references people (person_id));create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));",
    "output": "SELECT T1.student_id, count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
  },
  {
    "instruction": "What is the average price for each type of product?",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT product_type_code, avg(product_price) FROM products GROUP BY product_type_code"
  },
  {
    "instruction": "Return the id of the customer who has the most cards, as well as the number of cards.",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT customer_id, count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the ids of all reviewers who did not give 4 stars?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4"
  },
  {
    "instruction": "return me the number of the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t5.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t5 ON t5.pid = t3.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t2.name = \"H. V. Jagadish\" AND t1.keyword = \"User Study\";"
  },
  {
    "instruction": "What are the ids of all reviewers who have not given 4 stars at least once?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT rID FROM Rating WHERE stars != 4"
  },
  {
    "instruction": "List the campus that have between 600 and 1000 faculty lines in year 2004.",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));",
    "output": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T1.year = 2004"
  },
  {
    "instruction": "What is the count of customers that Steve Johnson supports?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";"
  },
  {
    "instruction": "List categories that have at least two books after year 1989.",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT category FROM book_club WHERE YEAR > 1989 GROUP BY category HAVING count(*) >= 2"
  },
  {
    "instruction": "what is the high point of texas",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE state_name = \"texas\";"
  },
  {
    "instruction": "Return the unit of measure for 'Herb' products.",
    "input": "create table `ref_product_categories` (`product_category_code` varchar(15) primary key, `product_category_description` varchar(80), `unit_of_measure` varchar(20));",
    "output": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code = \"Herbs\""
  },
  {
    "instruction": "What are the names of the dorm with the largest capacity?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of addressed in the California district.",
    "input": "create table address (address_id smallint unsigned not null, address varchar(50) not null, address2 varchar(50) default null, district varchar(20) not null, city_id smallint unsigned not null, postal_code varchar(10) default null, phone varchar(20) not null, last_update timestamp not null default current_timestamp, primary key (address_id), foreign key (city_id) references city (city_id));",
    "output": "SELECT count(*) FROM address WHERE district = 'California'"
  },
  {
    "instruction": "Show the name of colleges that have at least two players.",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2"
  },
  {
    "instruction": "Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\".",
    "input": "create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT date_of_latest_logon FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\""
  },
  {
    "instruction": "What is the vocal type of the band mate whose first name is \"Marianne\" played the most?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the denomination shared by more than one school.",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*) > 1"
  },
  {
    "instruction": "Find the number of distinct products Rodrick Heaney has bought so far.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));",
    "output": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = \"Rodrick Heaney\""
  },
  {
    "instruction": "What are the distinct names and nationalities of the architects who have ever built a mill?",
    "input": "create table \"architect\" (\"id\" text, \"name\" text, \"nationality\" text, \"gender\" text, primary key(\"id\"));create table \"mill\" (\"architect_id\" int, \"id\" int, \"location\" text, \"name\" text, \"type\" text, \"built_year\" int, \"notes\" text, primary key (\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));",
    "output": "SELECT DISTINCT T1.name, T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id = T2.architect_id"
  },
  {
    "instruction": "Give the section titles of the document with the name \"David CV\".",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `document_sections` (`section_id` integer primary key, `document_code` varchar(15) not null, `section_sequence` integer, `section_code` varchar(20), `section_title` varchar(80), foreign key (`document_code`) references `documents`(`document_code`));",
    "output": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code WHERE t1.document_name = \"David CV\""
  },
  {
    "instruction": "Find the states or counties where the stores with marketing region code \"CA\" are located.",
    "input": "create table addresses (address_id varchar(100) not null, line_1 varchar(255), line_2 varchar(255), city_town varchar(255), state_county varchar(255), other_details varchar(255), primary key (address_id), unique (address_id));create table stores (store_id varchar(100) not null, address_id integer not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (store_id), unique (store_id), foreign key (address_id) references addresses (address_id), foreign key (marketing_region_code) references marketing_regions (marketing_region_code));",
    "output": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = \"CA\""
  },
  {
    "instruction": "Show the delegates and the names of county they belong to.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT T2.Delegate, T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District"
  },
  {
    "instruction": "what is the city in wyoming with the largest population",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"wyoming\" ) AND state_name = \"wyoming\";"
  },
  {
    "instruction": "Show ids for all the male faculty.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT FacID FROM Faculty WHERE Sex = 'M'"
  },
  {
    "instruction": "Show home city where at least two drivers older than 40 are from.",
    "input": "create table \"driver\" (\"Driver_ID\" int, \"Name\" text, \"Party\" text, \"Home_city\" text, \"Age\" int, primary key (\"Driver_ID\"));",
    "output": "SELECT home_city FROM driver WHERE age > 40 GROUP BY home_city HAVING count(*) >= 2"
  },
  {
    "instruction": "Show ids for all students who live in CHI.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT StuID FROM Student WHERE city_code = \"CHI\""
  },
  {
    "instruction": "How many vehicle in total?",
    "input": "create table `vehicles` (`vehicle_id` integer primary key, `vehicle_details` varchar(255));",
    "output": "SELECT count(*) FROM Vehicles;"
  },
  {
    "instruction": "For each customer who has at least two orders, find the customer name and number of orders made.",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));",
    "output": "SELECT T2.customer_name, count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*) >= 2"
  },
  {
    "instruction": "conference papers of subhasis chaudhuri",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"subhasis chaudhuri\";"
  },
  {
    "instruction": "What are the checking and savings balances in accounts belonging to Brown?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T2.balance, T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name = 'Brown'"
  },
  {
    "instruction": "what capital has the largest population",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );"
  },
  {
    "instruction": "What are id and name of the products whose price is lower than 600 or higher than 900?",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT product_id, product_name FROM products WHERE product_price < 600 OR product_price > 900"
  },
  {
    "instruction": "What are the names of the drama workshop groups with address in Feliciaberg city?",
    "input": "create table addresses (address_id varchar(100) not null, line_1 varchar(255), line_2 varchar(255), city_town varchar(255), state_county varchar(255), other_details varchar(255), primary key (address_id), unique (address_id));create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = \"Feliciaberg\""
  },
  {
    "instruction": "Show the name and opening year for three churches that opened most recently.",
    "input": "create table \"church\" (\"Church_ID\" int, \"Name\" text, \"Organized_by\" text, \"Open_Date\" int, \"Continuation_of\" text, primary key (\"Church_ID\"));",
    "output": "SELECT name, open_date FROM church ORDER BY open_date DESC LIMIT 3"
  },
  {
    "instruction": "What are the different dorm amenity names in alphabetical order?",
    "input": "create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name"
  },
  {
    "instruction": "what is the highest point in each state whose lowest point is sea level",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_point, state_name FROM highlow WHERE lowest_elevation = 0;"
  },
  {
    "instruction": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));",
    "output": "SELECT booking_status_code, COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code"
  },
  {
    "instruction": "How many professors who are from either Accounting or Biology department?",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology'"
  },
  {
    "instruction": "How many project members were leaders or started working before '1989-04-24 23:51:54'?",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT count(*) FROM Project_Staff WHERE role_code = 'leader' OR date_from < '1989-04-24 23:51:54'"
  },
  {
    "instruction": "How old is the youngest winning pilot and what is their name?",
    "input": "create table `pilot` (`pilot_id` int(11) not null, `name` varchar(50) not null, `age` int(11) not null, primary key (`pilot_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT t1.name, t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot ORDER BY t1.age LIMIT 1"
  },
  {
    "instruction": "Please show the different statuses, ordered by the number of cities that have each.",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC"
  },
  {
    "instruction": "How many schools have students playing in goalie and mid-field positions?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT COUNT(*) FROM (SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid')"
  },
  {
    "instruction": "How many department stores does the store chain South have?",
    "input": "create table `department_stores` (`dept_store_id` integer primary key, `dept_store_chain_id` integer, `store_name` varchar(80), `store_address` varchar(255), `store_phone` varchar(80), `store_email` varchar(80), foreign key (`dept_store_chain_id`) references `department_store_chain`(`dept_store_chain_id`));create table `department_store_chain` (`dept_store_chain_id` integer primary key, `dept_store_chain_name` varchar(80));",
    "output": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE T2.dept_store_chain_name = \"South\""
  },
  {
    "instruction": "What is the average longitude of stations that never had bike availability more than 10?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));",
    "output": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available) > 10)"
  },
  {
    "instruction": "what states does the ohio river run through",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE river_name = \"ohio\";"
  },
  {
    "instruction": "What is the maximum point for climbers whose country is United Kingdom?",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));",
    "output": "SELECT max(Points) FROM climber WHERE Country = \"United Kingdom\""
  },
  {
    "instruction": "Find the name of the ships that have more than one captain.",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING count(*) > 1"
  },
  {
    "instruction": "What is the complete description of the job of a researcher?",
    "input": "create table `staff_roles` (`role_code` varchar(10) primary key, `role_description` varchar(255) not null);",
    "output": "SELECT role_description FROM Staff_Roles WHERE role_code = 'researcher'"
  },
  {
    "instruction": "return me the authors who have cooperated both with \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t2.name FROM writes AS t4 JOIN author AS t2 ON t4.aid = t2.aid JOIN publication AS t7 ON t4.pid = t7.pid JOIN writes AS t5 ON t5.pid = t7.pid JOIN writes AS t6 ON t6.pid = t7.pid JOIN author AS t1 ON t5.aid = t1.aid JOIN author AS t3 ON t6.aid = t3.aid WHERE t1.name = \"H. V. Jagadish\" AND t3.name = \"Divesh Srivastava\";"
  },
  {
    "instruction": "What are the different locations of the school with the code BUS?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code = 'BUS'"
  },
  {
    "instruction": "What are the manager's first name, last name and id who won the most manager award?",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);create table manager_award (player_id text, award_id text, year integer, league_id text, tie text, notes numeric, foreign key (player_id) references player(player_id));",
    "output": "SELECT T1.name_first, T1.name_last, T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "instruction": "How many rooms does each block floor have?",
    "input": "create table block (blockfloor integer not null, blockcode integer not null, primary key(blockfloor, blockcode));create table room (roomnumber integer primary key not null, roomtype varchar(30) not null, blockfloor integer not null, blockcode integer not null, unavailable boolean not null, constraint fk_room_block_pk foreign key(blockfloor, blockcode) references block(blockfloor, blockcode));",
    "output": "SELECT count(*), T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockfloor"
  },
  {
    "instruction": "Show the details of the top 3 most expensive hotels.",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3"
  },
  {
    "instruction": "Show the names of mountains with height more than 5000 or prominence more than 1000.",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000"
  },
  {
    "instruction": "Find the name and age of the person who is a friend of Dan or Alice.",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT DISTINCT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' OR T2.friend = 'Alice'"
  },
  {
    "instruction": "List the enrollment for each school that does not have \"Catholic\" as denomination.",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\""
  },
  {
    "instruction": "Show all card type codes and the number of cards in each type.",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT card_type_code, count(*) FROM Customers_cards GROUP BY card_type_code"
  },
  {
    "instruction": "what are the major cities in kansas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population > 150000 AND state_name = \"kansas\";"
  },
  {
    "instruction": "What are the first names of the faculty members playing both Canoeing and Kayaking?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));create table activity (actid integer primary key, activity_name varchar(25));create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));create table activity (actid integer primary key, activity_name varchar(25));",
    "output": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'"
  },
  {
    "instruction": "Find the id of the order which is shipped most recently.",
    "input": "create table `shipments` (`shipment_id` integer primary key, `order_id` integer not null, `invoice_number` integer not null, `shipment_tracking_number` varchar(80), `shipment_date` datetime, `other_shipment_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`invoice_number`) references `invoices`(`invoice_number`));create table `shipments` (`shipment_id` integer primary key, `order_id` integer not null, `invoice_number` integer not null, `shipment_tracking_number` varchar(80), `shipment_date` datetime, `other_shipment_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`invoice_number`) references `invoices`(`invoice_number`));",
    "output": "SELECT order_id FROM shipments WHERE shipment_date = (SELECT max(shipment_date) FROM shipments)"
  },
  {
    "instruction": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of all pilots listed by descending age?",
    "input": "create table `pilot` (`pilot_id` int(11) not null, `name` varchar(50) not null, `age` int(11) not null, primary key (`pilot_id`));",
    "output": "SELECT Name FROM pilot ORDER BY Age DESC"
  },
  {
    "instruction": "How many captains with younger than 50 are in each rank?",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT count(*), rank FROM captain WHERE age < 50 GROUP BY rank"
  },
  {
    "instruction": "What was the conference name that approved Trophic Cascade ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Trophic Cascade\";"
  },
  {
    "instruction": "Select all the data from the products and each product's manufacturer.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"
  },
  {
    "instruction": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.",
    "input": "create table activity (actid integer primary key, activity_name varchar(25));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));",
    "output": "SELECT T1.activity_name, count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID"
  },
  {
    "instruction": "display the employee ID and job name for all those jobs in department 80.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `jobs` (`job_id` varchar(10) not null default '', `job_title` varchar(35) not null, `min_salary` decimal(6, 0) default null, `max_salary` decimal(6, 0) default null, primary key (`job_id`));",
    "output": "SELECT T1.employee_id, T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80"
  },
  {
    "instruction": "Give the state that has the most customers.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "What is the city_code of the city that the most students live in?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the names of stadiums that the most swimmers have been to.",
    "input": "create table \"record\" (\"ID\" int, \"Result\" text, \"Swimmer_ID\" int, \"Event_ID\" int, primary key (\"Swimmer_ID\",\"Event_ID\"), foreign key (`event_id`) references `event`(`id`), foreign key (`swimmer_id`) references `swimmer`(`id`));create table \"event\" (\"ID\" int, \"Name\" text, \"Stadium_ID\" int, \"Year\" text, primary key (\"ID\"), foreign key (`stadium_id`) references `stadium`(`id`));create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));",
    "output": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id = t2.id JOIN stadium AS t3 ON t3.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the first, middle, and last names of all individuals, ordered by last name?",
    "input": "create table `individuals` (`individual_id` integer primary key, `individual_first_name` varchar(80), `individual_middle_name` varchar(80), `inidividual_phone` varchar(80), `individual_email` varchar(80), `individual_address` varchar(255), `individual_last_name` varchar(80));",
    "output": "SELECT individual_first_name, individual_middle_name, individual_last_name FROM individuals ORDER BY individual_last_name"
  },
  {
    "instruction": "How many cities are in counties that have populations of over 20000?",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)"
  },
  {
    "instruction": "For each position, what is the average number of points for players in that position?",
    "input": "create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT POSITION, avg(Points) FROM player GROUP BY POSITION"
  },
  {
    "instruction": "List the object number of railways that do not have any trains.",
    "input": "create table \"railway\" (\"Railway_ID\" int, \"Railway\" text, \"Builder\" text, \"Built\" text, \"Wheels\" text, \"Location\" text, \"ObjectNumber\" text, primary key (\"Railway_ID\"));create table \"train\" (\"Train_ID\" int, \"Train_Num\" text, \"Name\" text, \"\nFROM\" text, \"Arrival\" text, \"Railway_ID\" int, primary key (\"Train_ID\"), foreign key (\"Railway_ID\") references `railway`(\"Railway_ID\"));",
    "output": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)"
  },
  {
    "instruction": "the papers on semantic parsing by li dong at acl in 2016",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid = t3.keyphraseid JOIN paper AS t2 ON t2.paperid = t5.paperid JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN writes AS t4 ON t4.paperid = t2.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"li dong\" AND t3.keyphrasename = \"semantic parsing\" AND t2.year = 2016 AND t6.venuename = \"acl\";"
  },
  {
    "instruction": "Find the number of routes with destination airports in Italy.",
    "input": "create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = 'Italy'"
  },
  {
    "instruction": "Return the total revenue of companies with headquarters in Tokyo or Taiwan.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter = 'Tokyo' OR Headquarter = 'Taiwan'"
  },
  {
    "instruction": "Find the first names and offices of all instructors who have taught some course and the course description and the department name.",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.emp_fname, T4.prof_office, T3.crs_description, T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num JOIN department AS T5 ON T4.dept_code = T5.dept_code"
  },
  {
    "instruction": "Find the names of the trains that do not pass any station located in London.",
    "input": "create table \"train_station\" (\"Train_ID\" int, \"Station_ID\" int, primary key (\"Train_ID\",\"Station_ID\"), foreign key (\"Train_ID\") references \"train\"(\"Train_ID\"), foreign key (\"Station_ID\") references \"station\"(\"Station_ID\"));create table \"train\" (\"Train_ID\" int, \"Name\" text, \"Time\" text, \"Service\" text, primary key (\"Train_ID\"));create table \"train_station\" (\"Train_ID\" int, \"Station_ID\" int, primary key (\"Train_ID\",\"Station_ID\"), foreign key (\"Train_ID\") references \"train\"(\"Train_ID\"), foreign key (\"Station_ID\") references \"station\"(\"Station_ID\"));create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));",
    "output": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id = T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id = T4.station_id WHERE t4.location = \"London\")"
  },
  {
    "instruction": "How many clubs does the student named \"Eric Tai\" belong to?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Eric\" AND t3.lname = \"Tai\""
  },
  {
    "instruction": "What are the last names of staff with email addressed containing the substring \"wrau\"?",
    "input": "create table `staff` (`staff_id` integer primary key, `gender` varchar(1), `first_name` varchar(80), `last_name` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\""
  },
  {
    "instruction": "What are the name of rooms that cost more than the average.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName FROM Rooms WHERE basePrice > ( SELECT avg(basePrice) FROM Rooms );"
  },
  {
    "instruction": "Show the pair of male and female names in all weddings after year 2014",
    "input": "create table \"wedding\" (\"Church_ID\" int, \"Male_ID\" int, \"Female_ID\" int, \"Year\" int, primary key (\"Church_ID\",\"Male_ID\",\"Female_ID\"), foreign key (\"Church_ID\") references `church`(\"Church_ID\"), foreign key (\"Male_ID\") references `people`(\"People_ID\"), foreign key (\"Female_ID\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Country\" text, \"Is_Male\" text, \"Age\" int, primary key (\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Country\" text, \"Is_Male\" text, \"Age\" int, primary key (\"People_ID\"));",
    "output": "SELECT T2.name, T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE T1.year > 2014"
  },
  {
    "instruction": "Find the last names of the students in third grade that are not taught by COVIN JEROME.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\""
  },
  {
    "instruction": "What are the titles of all movies that have not been rated?",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)"
  },
  {
    "instruction": "Which months have more than 2 happy hours?",
    "input": "create table \"happy_hour\" (\"HH_ID\" int, \"Shop_ID\" int, \"Month\" text, \"Num_of_shaff_in_charge\" int, primary key (\"HH_ID\",\"Shop_ID\",\"Month\"), foreign key (\"Shop_ID\") references `shop`(\"Shop_ID\"));",
    "output": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*) > 2"
  },
  {
    "instruction": "What are the name and the nationality of the host of the highest age?",
    "input": "create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));",
    "output": "SELECT Name, Nationality FROM HOST ORDER BY Age DESC LIMIT 1"
  },
  {
    "instruction": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT T1.lat, T1.long, T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1"
  },
  {
    "instruction": "What is the average enrollment of schools?",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT avg(Enrollment) FROM school"
  },
  {
    "instruction": "Return the famous release date for the oldest artist.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));",
    "output": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1"
  },
  {
    "instruction": "What is the maximum OMIM value in the database?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT max(OMIM) FROM enzyme"
  },
  {
    "instruction": "Show the ids of students whose advisors are professors.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.rank = \"Professor\""
  },
  {
    "instruction": "What are the names of patients who are not taking the medication of Procrastin-X.",
    "input": "create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));create table medication (code integer primary key not null, name varchar(30) not null, brand varchar(30) not null, description varchar(30) not null);",
    "output": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code WHERE T3.name = 'Procrastin-X'"
  },
  {
    "instruction": "papers in chi",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"chi\";"
  },
  {
    "instruction": "What are the names and year of joining for artists that do not have the country \"United States\"?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT name, year_join FROM artist WHERE country != 'United States'"
  },
  {
    "instruction": "Return the most frequent result across all musicals.",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of invoices.",
    "input": "create table `invoices` (`invoice_number` integer primary key, `order_id` integer not null, `invoice_date` datetime, foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT count(*) FROM Invoices"
  },
  {
    "instruction": "Return the code of the document type that is most common.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of climbers who are not from the country of Switzerland?",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));",
    "output": "SELECT Name FROM climber WHERE Country != \"Switzerland\""
  },
  {
    "instruction": "How many claim processing stages are there in total?",
    "input": "create table claims_processing_stages (claim_stage_id integer not null, next_claim_stage_id integer, claim_status_name varchar(255) not null, claim_status_description varchar(255) not null, primary key (claim_stage_id));",
    "output": "SELECT count(*) FROM claims_processing_stages"
  },
  {
    "instruction": "return me the authors who have cooperated with \" H. V. Jagadish \" .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\";"
  },
  {
    "instruction": "What is the total number of students?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM Student"
  },
  {
    "instruction": "what is the GDP of the city with the largest population.",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));",
    "output": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1"
  },
  {
    "instruction": "return me the number of papers after 2000 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT title ) FROM publication WHERE YEAR > 2000;"
  },
  {
    "instruction": "what length is the rio grande",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT LENGTH FROM river WHERE river_name = \"rio grande\";"
  },
  {
    "instruction": "Count the number of all the calendar items.",
    "input": "create table ref_calendar (calendar_date datetime not null, day_number integer, primary key (calendar_date));",
    "output": "SELECT count(*) FROM Ref_calendar"
  },
  {
    "instruction": "What are the names of shops in ascending order of open year?",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC"
  },
  {
    "instruction": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
    "input": "create table `products_for_hire` (`product_id` integer primary key, `product_type_code` varchar(15) not null, `daily_hire_cost` decimal(19, 4), `product_name` varchar(80), `product_description` varchar(255));",
    "output": "SELECT product_name, product_description FROM products_for_hire WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20"
  },
  {
    "instruction": "what is the area of the largest state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT MAX ( area ) FROM state;"
  },
  {
    "instruction": "what mountains are in alaska",
    "input": "create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT mountain_name FROM mountain WHERE state_name = \"alaska\";"
  },
  {
    "instruction": "How many documents have the status code done?",
    "input": "create table documents (document_id integer not null, document_status_code char(15) not null, document_type_code char(15) not null, shipping_agent_code char(15), receipt_date datetime, receipt_number varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (document_status_code) references ref_document_status (document_status_code), foreign key (shipping_agent_code) references ref_shipping_agents (shipping_agent_code));",
    "output": "SELECT count(*) FROM Documents WHERE document_status_code = \"done\";"
  },
  {
    "instruction": "What are the names of all the different reviewers who rates Gone with the Wind?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table reviewer(rid int primary key, name text);",
    "output": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind'"
  },
  {
    "instruction": "Which city has the most addresses? List the city name, number of addresses, and city id.",
    "input": "create table address (address_id smallint unsigned not null, address varchar(50) not null, address2 varchar(50) default null, district varchar(20) not null, city_id smallint unsigned not null, postal_code varchar(10) default null, phone varchar(20) not null, last_update timestamp not null default current_timestamp, primary key (address_id), foreign key (city_id) references city (city_id));create table city (city_id smallint unsigned not null, city varchar(50) not null, country_id smallint unsigned not null, last_update timestamp not null default current_timestamp, primary key (city_id), foreign key (country_id) references country (country_id));",
    "output": "SELECT T2.city, count(*), T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of characteristics the product 'sesame' has.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = \"sesame\""
  },
  {
    "instruction": "what state has the smallest area",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state );"
  },
  {
    "instruction": "How many students are attending English courses?",
    "input": "create table courses (course_id varchar(100) not null, course_name varchar(120), course_description varchar(255), other_details varchar(255), primary key (course_id));create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
  },
  {
    "instruction": "papers written by sharon goldwater",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "What are all the different food allergies?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = \"food\""
  },
  {
    "instruction": "How many students play each sport?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT sportname, count(*) FROM Sportsinfo GROUP BY sportname"
  },
  {
    "instruction": "Count the number of bank branches.",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT count(*) FROM bank"
  },
  {
    "instruction": "Find the id and name of the most expensive base price room.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;"
  },
  {
    "instruction": "give me names of all compatible browsers and accelerators in the descending order of compatible year",
    "input": "create table \"accelerator_compatible_browser\" (\"accelerator_id\" int, \"browser_id\" int, \"compatible_since_year\" int, primary key(\"accelerator_id\", \"browser_id\"), foreign key (\"accelerator_id\") references `web_client_accelerator`(\"id\"), foreign key (\"browser_id\") references `browser`(\"id\"));create table \"browser\" (\"id\" int, \"name\" text, \"market_share\" real, primary key(\"id\"));create table \"Web_client_accelerator\" (\"id\" int, \"name\" text, \"Operating_system\" text, \"Client\" text, \"Connection\" text, primary key(\"id\"));",
    "output": "SELECT T2.name, T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id ORDER BY T1.compatible_since_year DESC"
  },
  {
    "instruction": "Find the average and minimum weight for each gender.",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));",
    "output": "SELECT avg(weight), min(weight), sex FROM people GROUP BY sex"
  },
  {
    "instruction": "How many train stations are there?",
    "input": "create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));",
    "output": "SELECT count(*) FROM station"
  },
  {
    "instruction": "What are the titles and ids for albums containing tracks with unit price greater than 1?",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.Title, T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID"
  },
  {
    "instruction": "Show all headquarters without a company in banking industry.",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking'"
  },
  {
    "instruction": "Return me the number of cities that has \" Panda Express \" .",
    "input": "create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT COUNT ( DISTINCT city ) FROM business WHERE name = \"Panda Express\";"
  },
  {
    "instruction": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));create table customers_policies (customer_id integer not null, policy_id integer not null, date_opened date, date_closed date, primary key (customer_id, policy_id), foreign key (customer_id) references customers (customer_id), foreign key (policy_id) references available_policies (policy_id));",
    "output": "SELECT t2.date_opened, t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\""
  },
  {
    "instruction": "return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t2.name = \"H. V. Jagadish\" AND t1.name = \"Divesh Srivastava\" AND t5.year < 2000;"
  },
  {
    "instruction": "return me the paper after 2000 in PVLDB with more than 200 citations .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = \"PVLDB\" AND t2.citation_num > 200 AND t2.year > 2000;"
  },
  {
    "instruction": "datasets for semantic parsing",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid WHERE t4.keyphrasename = \"semantic parsing\";"
  },
  {
    "instruction": "What is the name of the institution that \"Matthias Blume\" belongs to?",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Matthias\" AND t1.lname = \"Blume\""
  },
  {
    "instruction": "Which minister left office the latest?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1"
  },
  {
    "instruction": "What is the theme, date, and attendance for the exhibition in year 2004?",
    "input": "create table \"exhibition_record\" (\"Exhibition_ID\" int, \"Date\" text, \"Attendance\" int, primary key (\"Exhibition_ID\",\"Date\"), foreign key (`exhibition_id`) references `exhibition`(`exhibition_id`));create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T2.theme, T1.date, T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004"
  },
  {
    "instruction": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT T1.Name, T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" OR T2.Tourist_Details = \"Vivian\""
  },
  {
    "instruction": "List the names of members in ascending alphabetical order.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Country\" text, \"College_ID\" int, primary key (\"Member_ID\"), foreign key (\"College_ID\") references `college`(\"College_ID\"));",
    "output": "SELECT Name FROM member ORDER BY Name ASC"
  },
  {
    "instruction": "What is the average number of international passengers of all airports?",
    "input": "create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT avg(International_Passengers) FROM airport"
  },
  {
    "instruction": "which states border kentucky",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "Find the average and oldest age for students with different sex.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(age), max(age), sex FROM student GROUP BY sex"
  },
  {
    "instruction": "What are the nationalities and ages of journalists?",
    "input": "create table \"journalist\" (\"journalist_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, \"Years_working\" int, primary key (\"journalist_ID\"));",
    "output": "SELECT Nationality, Age FROM journalist"
  },
  {
    "instruction": "What is the type with the fewest games?",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "return the smallest salary for every departments.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT MIN(salary), department_id FROM employees GROUP BY department_id"
  },
  {
    "instruction": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT min(salary), dept_name FROM instructor GROUP BY dept_name HAVING avg(salary) > (SELECT avg(salary) FROM instructor)"
  },
  {
    "instruction": "How many products are there?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT count(*) FROM products"
  },
  {
    "instruction": "Find the distinct winery of wines having price between 50 and 100.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100"
  },
  {
    "instruction": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Fname, Lname FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F';"
  },
  {
    "instruction": "How many different types of beds are there?",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT count(DISTINCT bedType) FROM Rooms;"
  },
  {
    "instruction": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?",
    "input": "create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));",
    "output": "SELECT product FROM product WHERE max_page_size = \"A4\" OR pages_per_minute_color < 5"
  },
  {
    "instruction": "what cities are located in texas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE state_name = \"texas\";"
  },
  {
    "instruction": "Show the product type codes that have at least two products.",
    "input": "create table products (product_id integer not null, product_type_code char(15), product_name varchar(255), product_price decimal(20, 4), primary key (product_id), unique (product_id));",
    "output": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT f_id FROM files WHERE formats = \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution < 1000"
  },
  {
    "instruction": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));",
    "output": "SELECT T1.id, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 3"
  },
  {
    "instruction": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.",
    "input": "create table \"grapes\" (\"ID\" integer primary key, \"Grape\" text unique, \"Color\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"White\" AND T2.score > 90"
  },
  {
    "instruction": "What is the id of the reviewer whose name has substring \u201cMike\u201d?",
    "input": "create table reviewer(rid int primary key, name text);",
    "output": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\""
  },
  {
    "instruction": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT DISTINCT T1.state, T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'"
  },
  {
    "instruction": "Please show the countries and the number of climbers from each country.",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));",
    "output": "SELECT Country, COUNT(*) FROM climber GROUP BY Country"
  },
  {
    "instruction": "How many distinct official languages are there among countries of players whose positions are defenders.",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\""
  },
  {
    "instruction": "Return the names of gymnasts who did not grow up in Santo Domingo.",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown != \"Santo Domingo\""
  },
  {
    "instruction": "What are the employee ids for employees who have held two or more jobs?",
    "input": "create table `job_history` (`employee_id` decimal(6, 0) not null, `start_date` date not null, `end_date` date not null, `job_id` varchar(10) not null, `department_id` decimal(4, 0) default null, primary key (`employee_id`,`start_date`), foreign key (`employee_id`) references employees(`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "List all the document names which contains \"CV\".",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\""
  },
  {
    "instruction": "What are the ids of all aircrafts that can cover a distance of more than 1000?",
    "input": "create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT aid FROM Aircraft WHERE distance > 1000"
  },
  {
    "instruction": "how many states border the state with the largest population",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );"
  },
  {
    "instruction": "Show headquarters with at least two companies in the banking industry.",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING count(*) >= 2"
  },
  {
    "instruction": "Count the number of schools that have had basketball matches.",
    "input": "create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));",
    "output": "SELECT count(DISTINCT school_id) FROM basketball_match"
  },
  {
    "instruction": "Show names for all employees who do not have certificate of Boeing 737-800.",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\""
  },
  {
    "instruction": "How many papers were published in nature communications in 2015 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"nature communications\";"
  },
  {
    "instruction": "Find the average price of wines that are not produced from Sonoma county.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma')"
  },
  {
    "instruction": "What are the students ids of students who have more than one allergy?",
    "input": "create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*) >= 2"
  },
  {
    "instruction": "Find all the albums in 2012.",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);",
    "output": "SELECT * FROM Albums WHERE YEAR = 2012"
  },
  {
    "instruction": "How many different types of rooms are there?",
    "input": "create table room (roomnumber integer primary key not null, roomtype varchar(30) not null, blockfloor integer not null, blockcode integer not null, unavailable boolean not null, constraint fk_room_block_pk foreign key(blockfloor, blockcode) references block(blockfloor, blockcode));",
    "output": "SELECT count(DISTINCT roomtype) FROM room"
  },
  {
    "instruction": "What is the id and market share of the browser Safari?",
    "input": "create table \"browser\" (\"id\" int, \"name\" text, \"market_share\" real, primary key(\"id\"));",
    "output": "SELECT id, market_share FROM browser WHERE name = 'Safari'"
  },
  {
    "instruction": "Find the phone number and email address of customer \"Harold\".",
    "input": "create table customers (customer_id varchar(100) not null, address_id integer not null, customer_name varchar(255), customer_phone varchar(255), customer_email_address varchar(255), other_details varchar(255), primary key (customer_id), unique (customer_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT Customer_Phone, Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name = \"Harold\""
  },
  {
    "instruction": "What is the zip code the county named \"Howard\" is located in?",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT Zip_code FROM county WHERE County_name = \"Howard\""
  },
  {
    "instruction": "Return the description and unit of measurement for products in the 'Herbs' category.",
    "input": "create table `ref_product_categories` (`product_category_code` varchar(15) primary key, `product_category_description` varchar(80), `unit_of_measure` varchar(20));",
    "output": "SELECT product_category_description, unit_of_measure FROM ref_product_categories WHERE product_category_code = \"Herbs\""
  },
  {
    "instruction": "Show the customer ids and firstname without a credit card.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT customer_id, customer_first_name FROM Customers EXCEPT SELECT T1.customer_id, T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = \"Credit\""
  },
  {
    "instruction": "what rivers do not run through tennessee",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse = \"tennessee\" );"
  },
  {
    "instruction": "What are names of patients who made an appointment?",
    "input": "create table appointment (appointmentid integer primary key not null, patient integer not null, prepnurse integer, physician integer not null, start datetime not null, end datetime not null, examinationroom text not null, constraint fk_appointment_patient_ssn foreign key(patient) references patient(ssn), constraint fk_appointment_nurse_employeeid foreign key(prepnurse) references nurse(employeeid), constraint fk_appointment_physician_employeeid foreign key(physician) references physician(employeeid));create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));",
    "output": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn"
  },
  {
    "instruction": "Which movies did \" Alfred Hitchcock \" direct ?",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid WHERE t2.name = \"Alfred Hitchcock\";"
  },
  {
    "instruction": "Find the state of the college which player Charles is attending.",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE T3.pName = 'Charles'"
  },
  {
    "instruction": "What are the different types of video games?",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT DISTINCT gtype FROM Video_games"
  },
  {
    "instruction": "List title of albums have the number of tracks greater than 10.",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id) > 10;"
  },
  {
    "instruction": "Which three cities have the largest regional population?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));",
    "output": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3"
  },
  {
    "instruction": "Show names for all employees who have certificate of Boeing 737-800.",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\""
  },
  {
    "instruction": "Show all official native languages that contain the word \"English\".",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));",
    "output": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""
  },
  {
    "instruction": "How films are produced by each studio?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT Studio, COUNT(*) FROM film GROUP BY Studio"
  },
  {
    "instruction": "What are the unique block codes that have available rooms?",
    "input": "create table room (roomnumber integer primary key not null, roomtype varchar(30) not null, blockfloor integer not null, blockcode integer not null, unavailable boolean not null, constraint fk_room_block_pk foreign key(blockfloor, blockcode) references block(blockfloor, blockcode));",
    "output": "SELECT DISTINCT blockcode FROM room WHERE unavailable = 0"
  },
  {
    "instruction": "Show the people that have been comptroller the most times and the corresponding number of times.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT Comptroller, COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the id of the appointment with the most recent start date?",
    "input": "create table appointment (appointmentid integer primary key not null, patient integer not null, prepnurse integer, physician integer not null, start datetime not null, end datetime not null, examinationroom text not null, constraint fk_appointment_patient_ssn foreign key(patient) references patient(ssn), constraint fk_appointment_nurse_employeeid foreign key(prepnurse) references nurse(employeeid), constraint fk_appointment_physician_employeeid foreign key(physician) references physician(employeeid));",
    "output": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1"
  },
  {
    "instruction": "What are the names and capitals of each country?",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));",
    "output": "SELECT Country_name, Capital FROM country"
  },
  {
    "instruction": "For each main industry, what is the total number of companies for the industry with the highest total market value?",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));",
    "output": "SELECT main_industry, count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1"
  },
  {
    "instruction": "How many appointments are there?",
    "input": "create table appointment (appointmentid integer primary key not null, patient integer not null, prepnurse integer, physician integer not null, start datetime not null, end datetime not null, examinationroom text not null, constraint fk_appointment_patient_ssn foreign key(patient) references patient(ssn), constraint fk_appointment_nurse_employeeid foreign key(prepnurse) references nurse(employeeid), constraint fk_appointment_physician_employeeid foreign key(physician) references physician(employeeid));",
    "output": "SELECT count(*) FROM appointment"
  },
  {
    "instruction": "How many students are there?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM Student"
  },
  {
    "instruction": "How many routes does American Airlines operate?",
    "input": "create table airlines (alid integer primary key, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- \"Y\" if the airline is or has until recently been operational,);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'"
  },
  {
    "instruction": "For each aircraft that has won an award, what is its name and how many time has it won?",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT T1.Aircraft, COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft"
  },
  {
    "instruction": "What is the partition id of the user named \"Iron Man\".",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));",
    "output": "SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'"
  },
  {
    "instruction": "What is the venue of Fracture of acrylic bone cement ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT venueid FROM paper WHERE title = \"Fracture of acrylic bone cement\";"
  },
  {
    "instruction": "What are the names of people who are shorter than average?",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));",
    "output": "SELECT name FROM people WHERE height < (SELECT avg(height) FROM people)"
  },
  {
    "instruction": "Show the average and maximum damage for all storms with max speed higher than 1000.",
    "input": "create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT avg(damage_millions_USD), max(damage_millions_USD) FROM storm WHERE max_speed > 1000"
  },
  {
    "instruction": "what is the highest point of the usa",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Which trip started from the station with the largest dock count? Give me the trip id.",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1"
  },
  {
    "instruction": "How many movie reviews does each director get?",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT count(*), T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director"
  },
  {
    "instruction": "how many rivers are there in idaho",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( river_name ) FROM river WHERE traverse = \"idaho\";"
  },
  {
    "instruction": "what rivers run through the states that border the state with the capital atlanta",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital = \"atlanta\" ) );"
  },
  {
    "instruction": "Which students are advised by Michael Goodrich? Give me their first and last names.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T2.fname, T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.fname = \"Michael\" AND T1.lname = \"Goodrich\""
  },
  {
    "instruction": "What parties have at least three representatives?",
    "input": "create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));",
    "output": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 3"
  },
  {
    "instruction": "What is the total likes on tips from Niloofar",
    "input": "create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));create table \"tip\" (\"tip_id\" int, \"business_id\" text, \"text\" text, \"user_id\" text, \"likes\" int, \"year\" int, \"month\" text, primary key(\"tip_id\") foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT SUM ( t1.likes ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id WHERE t2.name = \"Niloofar\";"
  },
  {
    "instruction": "Find the country of origin for the artist who made the least number of songs?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "List the names of hosts who did not serve as a host of any party in our record.",
    "input": "create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));create table \"party_host\" (\"Party_ID\" int, \"Host_ID\" int, \"Is_Main_in_Charge\" bool, primary key (\"Party_ID\",\"Host_ID\"), foreign key (\"Host_ID\") references `host`(\"Host_ID\"), foreign key (\"Party_ID\") references `party`(\"Party_ID\"));",
    "output": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)"
  },
  {
    "instruction": "List the titles of the papers whose authors are from the institution \"Indiana University\".",
    "input": "create table papers (paperid integer, title text, primary key (paperid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Indiana University\""
  },
  {
    "instruction": "Give the maximum and minimum gradepoints for students living in NYC?",
    "input": "create table enrolled_in (stuid integer, cid varchar(7), grade varchar(2), foreign key(stuid) references student(stuid), foreign key(cid) references course(cid), foreign key(grade) references gradeconversion(lettergrade));create table gradeconversion (lettergrade varchar(2) primary key, gradepoint float);create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT max(T2.gradepoint), min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = \"NYC\""
  },
  {
    "instruction": "What are the names and genders of all artists who released songs in the month of March?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.artist_name, T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\""
  },
  {
    "instruction": "What are the names of the states where at least 3 heads were born?",
    "input": "create table \"head\" (\"head_ID\" int, \"name\" text, \"born_state\" text, \"age\" real, primary key (\"head_ID\"));",
    "output": "SELECT born_state FROM head GROUP BY born_state HAVING count(*) >= 3"
  },
  {
    "instruction": "How many movies were made before 2000?",
    "input": "create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT count(*) FROM Movie WHERE YEAR < 2000"
  },
  {
    "instruction": "what is the biggest city in the smallest state",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) );"
  },
  {
    "instruction": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'"
  },
  {
    "instruction": "What are the account details with the largest value or with value having char '5' in it?",
    "input": "create table accounts (account_id integer not null, statement_id integer not null, account_details varchar(255), primary key (account_id), foreign key (statement_id) references statements (statement_id));create table accounts (account_id integer not null, statement_id integer not null, account_details varchar(255), primary key (account_id), foreign key (statement_id) references statements (statement_id));",
    "output": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\""
  },
  {
    "instruction": "What is the date of birth for the staff member named Janessa Sawayn?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
  },
  {
    "instruction": "number of people in boulder",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = \"boulder\";"
  },
  {
    "instruction": "What are the emails and phone numbers of custoemrs who have never filed a complaint?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT email_address, phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)"
  },
  {
    "instruction": "Find the balance of the checking account belonging to an owner whose name contains 'ee'.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE '%ee%'"
  },
  {
    "instruction": "Find the average checking balance.",
    "input": "create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT avg(balance) FROM checking"
  },
  {
    "instruction": "What are the distinct districts for elections?",
    "input": "create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT DISTINCT District FROM election"
  },
  {
    "instruction": "What are the first names and office of the professors who are in the history department and have a Ph.D?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T1.emp_fname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code WHERE T3.dept_name = 'History' AND T2.prof_high_degree = 'Ph.D.'"
  },
  {
    "instruction": "What is the average room count of the apartments whose booking status code is \"Provisional\"?",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\""
  },
  {
    "instruction": "What is the last name of the student who received an A in the class with the code 10018?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));",
    "output": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A' AND T2.class_code = 10018"
  },
  {
    "instruction": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40"
  },
  {
    "instruction": "kentucky borders how many states",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( border ) FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "Which product has the most problems? Give me the number of problems and the product name.",
    "input": "create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT count(*), T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "which state has the least population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state );"
  },
  {
    "instruction": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Investor, COUNT(*) FROM entrepreneur GROUP BY Investor"
  },
  {
    "instruction": "what is the state with the largest density in usa",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MAX ( density ) FROM state );"
  },
  {
    "instruction": "What are the names of the heads who are born outside the California state?",
    "input": "create table \"head\" (\"head_ID\" int, \"name\" text, \"born_state\" text, \"age\" real, primary key (\"head_ID\"));",
    "output": "SELECT name FROM head WHERE born_state != 'California'"
  },
  {
    "instruction": "what is the state with the lowest point",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Papers about Question Answering",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "what state has the capital salem",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE capital = \"salem\";"
  },
  {
    "instruction": "What is the full name of the employee who has the most customers?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.first_name, T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "which ACL 2014 papers about Parsing used Jeopardy! Questions ?",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid = t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid = t3.paperid JOIN paper AS t2 ON t2.paperid = t3.paperid JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid = t1.keyphraseid WHERE t5.datasetname = \"Jeopardy! Questions\" AND t1.keyphrasename = \"Parsing\" AND t2.year = 2014 AND t6.venuename = \"ACL\";"
  },
  {
    "instruction": "Find the branch names of banks in the New York state.",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT bname FROM bank WHERE state = 'New York'"
  },
  {
    "instruction": "Find the last names of faculties who are members of computer science department.",
    "input": "create table department (dno integer primary key, division varchar(2), dname varchar(25), room varchar(5), building varchar(13), dphone integer);create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table member_of (facid integer, dno integer, appt_type varchar(15), foreign key(facid) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = \"Computer Science\""
  },
  {
    "instruction": "Find the ship type that are used by both ships with Panama and Malta flags.",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));",
    "output": "SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta'"
  },
  {
    "instruction": "List the official names of cities that have not held any competition.",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));create table \"farm_competition\" (\"Competition_ID\" int, \"Year\" int, \"Theme\" text, \"Host_city_ID\" int, \"Hosts\" text, primary key (\"Competition_ID\"), foreign key (`host_city_id`) references `city`(`city_id`));",
    "output": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)"
  },
  {
    "instruction": "What are the names of movies that get 3 star and 4 star?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 4"
  },
  {
    "instruction": "What is the first and last name of all the German drivers?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);",
    "output": "SELECT forename, surname FROM drivers WHERE nationality = \"German\""
  },
  {
    "instruction": "Count the number of parties.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Party_Theme\" text, \"Location\" text, \"First_year\" text, \"Last_year\" text, \"Number_of_hosts\" int, primary key (\"Party_ID\"));",
    "output": "SELECT count(*) FROM party"
  },
  {
    "instruction": "who wrote the most papers on syntactic parsing ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.paperid ), t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid WHERE t2.keyphrasename = \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;"
  },
  {
    "instruction": "Which Advisor has most of students? List advisor and the number of students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Advisor, count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;"
  },
  {
    "instruction": "Return the titles of any movies with an R rating.",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));",
    "output": "SELECT title FROM film WHERE rating = 'R'"
  },
  {
    "instruction": "Show the locations that have more than one railways.",
    "input": "create table \"railway\" (\"Railway_ID\" int, \"Railway\" text, \"Builder\" text, \"Built\" text, \"Wheels\" text, \"Location\" text, \"ObjectNumber\" text, primary key (\"Railway_ID\"));",
    "output": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*) > 1"
  },
  {
    "instruction": "Return the minister who left office at the latest time.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1"
  },
  {
    "instruction": "List the maximum scores of the team Boston Red Stockings when the team won in postseason?",
    "input": "create table postseason (year integer, round text, team_id_winner text, league_id_winner text, team_id_loser text, league_id_loser text, wins integer, losses integer, ties integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings';"
  },
  {
    "instruction": "brian curless 's paper about convolution",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid, t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"brian curless\" AND t5.keyphrasename = \"convolution\";"
  },
  {
    "instruction": "number of citations of noah a smith",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"noah a smith\";"
  },
  {
    "instruction": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = \"John Williams\""
  },
  {
    "instruction": "What are the faculty ids of all the male faculty members?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT FacID FROM Faculty WHERE Sex = 'M'"
  },
  {
    "instruction": "List the area and county of all appelations.",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);",
    "output": "SELECT Area, County FROM APPELLATIONS"
  },
  {
    "instruction": "what is the largest city in wyoming",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name = \"wyoming\" ) AND state_name = \"wyoming\";"
  },
  {
    "instruction": "How many different products are produced in each headquarter city?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT count(DISTINCT T1.name), T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.Headquarter"
  },
  {
    "instruction": "what is the largest of the state that the rio grande runs through",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name = \"rio grande\" );"
  },
  {
    "instruction": "How many people reviewed \" Bistro Di Napoli \" in 2015 ?",
    "input": "create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t1.name = \"Bistro Di Napoli\" AND t2.year = 2015;"
  },
  {
    "instruction": "Show the short names of the buildings managed by \"Emma\".",
    "input": "create table apartment_buildings (building_id integer not null, building_short_name char(15), building_full_name varchar(80), building_description varchar(255), building_address varchar(255), building_manager varchar(50), building_phone varchar(80), primary key (building_id), unique (building_id));",
    "output": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = \"Emma\""
  },
  {
    "instruction": "List all countries of markets in ascending alphabetical order.",
    "input": "create table \"market\" (\"Market_ID\" int, \"Country\" text, \"Number_cities\" int, primary key (\"Market_ID\"));",
    "output": "SELECT Country FROM market ORDER BY Country ASC"
  },
  {
    "instruction": "Find the number of students whose age is older than the average age for each gender.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*), sex FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY sex"
  },
  {
    "instruction": "what is the lowest point in iowa",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT lowest_point FROM highlow WHERE state_name = \"iowa\";"
  },
  {
    "instruction": "What are the first names of student who only took one course?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));",
    "output": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T2.stu_num HAVING count(*) = 1"
  },
  {
    "instruction": "Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\".",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `town_city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));",
    "output": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\""
  },
  {
    "instruction": "most cited parsing papers",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "How many documents do not have any expense?",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )"
  },
  {
    "instruction": "List the names of people that are not entrepreneurs.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)"
  },
  {
    "instruction": "Return the flag that is most common among all ships.",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));",
    "output": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Papers about TAIL in NIPS",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"TAIL\" AND t4.venuename = \"NIPS\";"
  },
  {
    "instruction": "What is the total amount of money loaned by banks in New York state?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T1.state = 'New York'"
  },
  {
    "instruction": "Find all Mexican restaurant in Dallas with at least 3.5 stars",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t1.rating > 3.5 AND t2.category_name = \"Mexican\" AND t3.category_name = \"restaurant\";"
  },
  {
    "instruction": "Compute the average price of all the products.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT avg(price) FROM products"
  },
  {
    "instruction": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT cName FROM College WHERE enr > 18000 ORDER BY cName"
  },
  {
    "instruction": "Find the names and number of works of the three artists who have produced the most songs.",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.artist_name, count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "Find the total number of students and total number of instructors for each department.",
    "input": "create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT count(DISTINCT T2.id), count(DISTINCT T3.id), T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name GROUP BY T3.dept_name"
  },
  {
    "instruction": "what state has highest elevation",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Find the name of dorms that do not have amenity TV Lounge.",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'"
  },
  {
    "instruction": "Find the names of users who did not leave any review.",
    "input": "create table `useracct` (`u_id` integer not null , `name` varchar(128) default null , primary key (`u_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)"
  },
  {
    "instruction": "What are the details for the project whose research has been published?",
    "input": "create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));create table `research_outcomes` (`outcome_code` varchar(10) primary key, `outcome_description` varchar(255) not null);",
    "output": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'"
  },
  {
    "instruction": "Who is the oldest person whose job is student?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT name FROM Person WHERE job = 'student' AND age = (SELECT max(age) FROM person WHERE job = 'student' )"
  },
  {
    "instruction": "Find the average age of students who live in the city with code \"NYC\" and have secretary votes in the spring election cycle.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.city_code = \"NYC\" AND T2.Election_Cycle = \"Spring\""
  },
  {
    "instruction": "Count the number of distinct delegates who are from counties with population above 50000.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000"
  },
  {
    "instruction": "Count the number of artists who are older than 46 and joined after 1990.",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, primary key (\"Artist_ID\"));",
    "output": "SELECT count(*) FROM artist WHERE age > 46 AND year_join > 1990"
  },
  {
    "instruction": "Show the location code of the country \"Canada\".",
    "input": "create table ref_locations (location_code char(15) not null, location_name varchar(255) not null, location_description varchar(255) not null, primary key (location_code));",
    "output": "SELECT location_code FROM Ref_locations WHERE location_name = \"Canada\""
  },
  {
    "instruction": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\""
  },
  {
    "instruction": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?",
    "input": "create table \"station_company\" (\"Station_ID\" int, \"Company_ID\" int, \"Rank_of_the_Year\" int, primary key (\"Station_ID\",\"Company_ID\"), foreign key (`station_id`) references `gas_station`(`station_id`), foreign key (`company_id`) references `company`(`company_id`));create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));create table \"gas_station\" (\"Station_ID\" int, \"Open_Year\" int, \"Location\" text, \"Manager_Name\" text, \"Vice_Manager_Name\" text, \"Representative_Name\" text, primary key (\"Station_ID\"));",
    "output": "SELECT T3.location, T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3"
  },
  {
    "instruction": "Find the number of bands.",
    "input": "create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT count(*) FROM Band"
  },
  {
    "instruction": "List all the image name and URLs in the order of their names.",
    "input": "create table `images` (`image_id` integer primary key, `image_alt_text` varchar(80), `image_name` varchar(40), `image_url` varchar(255));",
    "output": "SELECT image_name, image_url FROM images ORDER BY image_name"
  },
  {
    "instruction": "Return the names and locations of shops, ordered by name in alphabetical order.",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT Shop_Name, LOCATION FROM shop ORDER BY Shop_Name ASC"
  },
  {
    "instruction": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table accounts (custid bigint not null primary key, name varchar(64) not null);create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT avg(balance) FROM savings))"
  },
  {
    "instruction": "Find the average prices of all products from each manufacture, and list each company's name.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT avg(T1.price), T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name"
  },
  {
    "instruction": "Show the student id of the oldest student.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT StuID FROM Student WHERE age = (SELECT max(age) FROM Student)"
  },
  {
    "instruction": "List the first names of all the students in room 107.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT firstname FROM list WHERE classroom = 107"
  },
  {
    "instruction": "Which game type has most number of games?",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Question Answering experiments",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500"
  },
  {
    "instruction": "how many papers appeared at nature communications last year",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"nature communications\";"
  },
  {
    "instruction": "Return the name of the member who is in charge of the most events.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));create table \"party_events\" (\"Event_ID\" int, \"Event_Name\" text, \"Party_ID\" int, \"Member_in_charge_ID\" int, primary key (\"Event_ID\"), foreign key (`party_id`) references `party`(`party_id`), foreign key (`member_in_charge_id`) references `member`(`member_id`));",
    "output": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the ages of the gymnasts, ordered descending by their total points?",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T1.Total_Points DESC"
  },
  {
    "instruction": "What is the name of the airport that is the destination of the most number of routes that start in China?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the id of the student who most recently registered course 301?",
    "input": "create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"
  },
  {
    "instruction": "How many products are there for each manufacturer?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT count(*), T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name"
  },
  {
    "instruction": "What is the name and checking balance of the account which has the lowest savings balance?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T2.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1"
  },
  {
    "instruction": "Count the number of tracks that are part of the rock genre.",
    "input": "create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\""
  },
  {
    "instruction": "how many people lived in boulder",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = \"boulder\";"
  },
  {
    "instruction": "Find the number of scientists who are not assigned to any project.",
    "input": "create table scientists (ssn int, name char(30) not null, primary key (ssn));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));",
    "output": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)"
  },
  {
    "instruction": "Count the number of markets that have a number of cities lower than 300.",
    "input": "create table \"market\" (\"Market_ID\" int, \"Country\" text, \"Number_cities\" int, primary key (\"Market_ID\"));",
    "output": "SELECT count(*) FROM market WHERE Number_cities < 300"
  },
  {
    "instruction": "Show the start dates and end dates of all the apartment bookings.",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));",
    "output": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings"
  },
  {
    "instruction": "what is the highest mountain in us",
    "input": "create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT mountain_name FROM mountain WHERE mountain_altitude = ( SELECT MAX ( mountain_altitude ) FROM mountain );"
  },
  {
    "instruction": "which states adjoin kentucky",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "List all the distinct product names ordered by product id?",
    "input": "create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT DISTINCT product_name FROM product ORDER BY product_id"
  },
  {
    "instruction": "what topics does Luke Zettlemoyer publish in",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid WHERE t5.authorname = \"Luke Zettlemoyer\";"
  },
  {
    "instruction": "Show the budget type code and description and the corresponding document id.",
    "input": "create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));create table ref_budget_codes (budget_type_code char(15) not null, budget_type_description varchar(255) not null, primary key (budget_type_code));",
    "output": "SELECT T2.budget_type_code, T2.budget_type_description, T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code"
  },
  {
    "instruction": "which state is mount whitney in",
    "input": "create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM mountain WHERE mountain_name = \"whitney\";"
  },
  {
    "instruction": "Return the city with the customer type code \"Good Credit Rating\" that had the fewest customers.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT town_city FROM customers WHERE customer_type_code = \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "Show the minimum, maximum, average price for all products.",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(15), `product_name` varchar(80), `product_price` double null);",
    "output": "SELECT min(product_price), max(product_price), avg(product_price) FROM products"
  },
  {
    "instruction": "Give the names and scores of wines made from white grapes.",
    "input": "create table \"grapes\" (\"ID\" integer primary key, \"Grape\" text unique, \"Color\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT T2.Name, T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"White\""
  },
  {
    "instruction": "Show the names of phones that are on market with number of shops greater than 50.",
    "input": "create table \"phone_market\" (\"Market_ID\" int, \"Phone_ID\" text, \"Num_of_stock\" int, primary key (\"Market_ID\",\"Phone_ID\"), foreign key (\"Market_ID\") references `market`(\"Market_ID\"), foreign key (\"Phone_ID\") references `phone`(\"Phone_ID\"));create table \"market\" (\"Market_ID\" int, \"District\" text, \"Num_of_employees\" int, \"Num_of_shops\" real, \"Ranking\" int, primary key (\"Market_ID\"));create table \"phone\" (\"Name\" text, \"Phone_ID\" int, \"Memory_in_G\" int, \"Carrier\" text, \"Price\" real, primary key (\"Phone_ID\"));",
    "output": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T2.Num_of_shops > 50"
  },
  {
    "instruction": "Show names of climbers and the names of mountains they climb.",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT T1.Name, T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID"
  },
  {
    "instruction": "What is the oldest log id and its corresponding problem id?",
    "input": "create table `problem_log` (`problem_log_id` integer primary key, `assigned_to_staff_id` integer not null, `problem_id` integer not null, `problem_category_code` varchar(20) not null, `problem_status_code` varchar(20) not null, `log_entry_date` datetime, `log_entry_description` varchar(255), `log_entry_fix` varchar(255), `other_log_details` varchar(255), foreign key (`problem_category_code`) references `problem_category_codes`(`problem_category_code`), foreign key (`assigned_to_staff_id`) references `staff`(`staff_id`), foreign key (`problem_id`) references `problems`(`problem_id`), foreign key (`problem_status_code`) references `problem_status_codes`(`problem_status_code`));",
    "output": "SELECT problem_log_id, problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1"
  },
  {
    "instruction": "What are the names of all reviewers that have given 3 or 4 stars for reviews?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table reviewer(rid int primary key, name text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table reviewer(rid int primary key, name text);",
    "output": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 4"
  },
  {
    "instruction": "What are the names of catalog entries with level number 8?",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));create table `catalog_contents_additional_attributes` (`catalog_entry_id` integer not null, `catalog_level_number` integer not null, `attribute_id` integer not null, `attribute_value` varchar(255) not null, foreign key (`catalog_entry_id`) references `catalog_contents`(`catalog_entry_id`), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\""
  },
  {
    "instruction": "How many students whose are playing the role of goalie?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT count(*) FROM tryout WHERE pPos = 'goalie'"
  },
  {
    "instruction": "What is the country that has the most perpetrators?",
    "input": "create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Sort all the industries in descending order of the count of companies in each industry",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC"
  },
  {
    "instruction": "Find the average price of all product clothes.",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes'"
  },
  {
    "instruction": "What are the phone, room, and building of the faculty member called Jerry Prince?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT phone, room, building FROM Faculty WHERE Fname = \"Jerry\" AND Lname = \"Prince\""
  },
  {
    "instruction": "Give me the product type, name and price for all the products supplied by supplier id 3.",
    "input": "create table `product_suppliers` (`product_id` integer not null, `supplier_id` integer not null, `date_supplied_from` datetime not null, `date_supplied_to` datetime, `total_amount_purchased` varchar(80), `total_value_purchased` decimal(19, 4), primary key (`product_id`, `supplier_id`), foreign key (`supplier_id`) references `suppliers`(`supplier_id`), foreign key (`product_id`) references `products`(`product_id`));create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT T2.product_type_code, T2.product_name, T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3"
  },
  {
    "instruction": "What authors wrote papers about Bacterial Wilt in 2016 ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid JOIN author AS t5 ON t3.authorid = t5.authorid WHERE t2.keyphrasename = \"Bacterial Wilt\" AND t4.year = 2016;"
  },
  {
    "instruction": "what is the highest point in the usa",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT highest_point FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Give me all the Moroccan restaurant in Texas",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.state = \"Texas\" AND t2.category_name = \"Moroccan\" AND t3.category_name = \"restaurant\";"
  },
  {
    "instruction": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?",
    "input": "create table `documents` (`document_id` integer primary key, `document_type_code` varchar(10), `grant_id` integer not null, `sent_date` datetime not null, `response_received_date` datetime not null, `other_details` varchar(255) not null, foreign key (`document_type_code`) references `document_types`(`document_type_code`), foreign key (`grant_id`) references `grants`(`grant_id`));create table `document_types` (`document_type_code` varchar(10) primary key, `document_description` varchar(255) not null);create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id WHERE T2.document_description = 'Regular' OR T3.grant_amount > 100"
  },
  {
    "instruction": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Membership_card\" text, \"Age\" int, \"Time_of_purchase\" int, \"Level_of_membership\" int, \"Address\" text, primary key (\"Member_ID\"));",
    "output": "SELECT Time_of_purchase, age, address FROM member ORDER BY Time_of_purchase"
  },
  {
    "instruction": "name the rivers in illinois",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse = \"illinois\";"
  },
  {
    "instruction": "Count the number of accounts corresponding to each customer id.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(*), customer_id FROM Accounts GROUP BY customer_id"
  },
  {
    "instruction": "Find the name and training hours of players whose hours are below 1500.",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT pName, HS FROM Player WHERE HS < 1500"
  },
  {
    "instruction": "give me some good restaurants on bethel island rd in bethel island ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"bethel island\" AND t2.street_name = \"bethel island rd\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "what is the capital of the state texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT capital FROM state WHERE state_name = \"texas\";"
  },
  {
    "instruction": "How many female Professors do we have?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT count(*) FROM Faculty WHERE Sex = 'F' AND Rank = \"Professor\""
  },
  {
    "instruction": "Which person whose friends have the oldest average age?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T2.name, avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of all wines produced in 2008?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Name FROM WINE WHERE YEAR = \"2008\""
  },
  {
    "instruction": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT DISTINCT artist_name FROM song WHERE languages = \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 8"
  },
  {
    "instruction": "Find the names of customers who have no policies associated.",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));",
    "output": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id"
  },
  {
    "instruction": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT avg(capacity), min(capacity), max(capacity) FROM cinema WHERE openning_year >= 2011"
  },
  {
    "instruction": "What are the names of mountains in ascending alphabetical order?",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT Name FROM mountain ORDER BY Name ASC"
  },
  {
    "instruction": "What are the issue dates of volumes associated with the artist aged 23 or younger?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 23"
  },
  {
    "instruction": "Find the name of all customers whose name contains \"Alex\".",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\""
  },
  {
    "instruction": "Show the census ranking of cities whose status are not \"Village\".",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT Census_Ranking FROM city WHERE Status != \"Village\""
  },
  {
    "instruction": "Tell me the first and last name of the student who has the most activities.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table participates_in (stuid integer, actid integer, foreign key(stuid) references student(stuid), foreign key(actid) references activity(actid));",
    "output": "SELECT T1.fname, T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the name and access counts of all documents, in alphabetic order of the document name.",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_name, access_count FROM documents ORDER BY document_name"
  },
  {
    "instruction": "Find the name of the genre that is most frequent across all tracks.",
    "input": "create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the date and venue of each debate?",
    "input": "create table \"debate\" (\"Debate_ID\" int, \"Date\" text, \"Venue\" text, \"Num_of_Audience\" int, primary key (\"Debate_ID\"));",
    "output": "SELECT Date, Venue FROM debate"
  },
  {
    "instruction": "Find the number of dorms and total capacity for each gender.",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT count(*), sum(student_capacity), gender FROM dorm GROUP BY gender"
  },
  {
    "instruction": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"temperature\" (\"City_ID\" int, \"Jan\" real, \"Feb\" real, \"Mar\" real, \"Apr\" real, \"Jun\" real, \"Jul\" real, \"Aug\" real, \"Sep\" real, \"Oct\" real, \"Nov\" real, \"Dec\" real, primary key (\"City_ID\"), foreign key (`city_id`) references `city`(`city_id`));create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));",
    "output": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city"
  },
  {
    "instruction": "Count different addresses of each school.",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT dept_address), school_code FROM department GROUP BY school_code"
  },
  {
    "instruction": "How many hosts does each nationality have? List the nationality and the count.",
    "input": "create table \"host\" (\"Host_ID\" int, \"Name\" text, \"Nationality\" text, \"Age\" text, primary key (\"Host_ID\"));",
    "output": "SELECT Nationality, COUNT(*) FROM HOST GROUP BY Nationality"
  },
  {
    "instruction": "Find the country that has the most stadiums.",
    "input": "create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));",
    "output": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "where is a restaurant on buchanan in san francisco that serves good arabic food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Which year had the greatest number of courses?",
    "input": "create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);",
    "output": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Return the different classes of races.",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));",
    "output": "SELECT DISTINCT CLASS FROM race"
  },
  {
    "instruction": "List all information about customer master index, and sort them by details in descending order.",
    "input": "create table customer_master_index (master_customer_id integer not null, cmi_details varchar(255), primary key (master_customer_id));",
    "output": "SELECT * FROM customer_master_index ORDER BY cmi_details DESC"
  },
  {
    "instruction": "What are the names of all employees who are not certified to fly Boeing 737-800s?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));create table aircraft(aid number(9, 0) primary key, name varchar2(30), distance number(6, 0));",
    "output": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\""
  },
  {
    "instruction": "What is the average and total capacity for all dorms who are of gender X?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT avg(student_capacity), sum(student_capacity) FROM dorm WHERE gender = 'X'"
  },
  {
    "instruction": "What is the paper about parsing of the most citation ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT name, trade_name FROM medicine EXCEPT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T3.product = 'Protoporphyrinogen IX'"
  },
  {
    "instruction": "Find the number of distinct gender for dorms.",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT count(DISTINCT gender) FROM dorm"
  },
  {
    "instruction": "Find the name of persons who are friends with Alice for the shortest years.",
    "input": "create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT name FROM PersonFriend WHERE friend = 'Alice' AND YEAR = (SELECT min(YEAR) FROM PersonFriend WHERE friend = 'Alice')"
  },
  {
    "instruction": "What are the names of the colleges that are larger than at least one college in Florida?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT DISTINCT cName FROM college WHERE enr > (SELECT min(enr) FROM college WHERE state = 'FL')"
  },
  {
    "instruction": "Count the number of customers who hold an account.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT count(DISTINCT customer_id) FROM Accounts"
  },
  {
    "instruction": "What are the faculty id and the number of students each faculty has?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T1.FacID, count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID"
  },
  {
    "instruction": "What are the ids of all male students who do not play football?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Student WHERE sex = 'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname = \"Football\""
  },
  {
    "instruction": "In what city does Janessa Sawayn live?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
  },
  {
    "instruction": "papers from 2014",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT paperid FROM paper WHERE YEAR = 2014;"
  },
  {
    "instruction": "What is the average horizontal bar points for all gymnasts?",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT avg(Horizontal_Bar_Points) FROM gymnast"
  },
  {
    "instruction": "list all the businesses which Niloofar rated 5",
    "input": "create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id WHERE t2.rating = 5 AND t3.name = \"Niloofar\";"
  },
  {
    "instruction": "What are the types of film market estimations in year 1995?",
    "input": "create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));",
    "output": "SELECT TYPE FROM film_market_estimation WHERE YEAR = 1995"
  },
  {
    "instruction": "Find the id and location of circuits that belong to France or Belgium?",
    "input": "create table \"circuits\" (\"circuitId\" integer primary key, \"circuitRef\" text, \"name\" text, \"location\" text, \"country\" text, \"lat\" real, \"lng\" real, \"alt\" text, \"url\" text);",
    "output": "SELECT circuitid, LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\""
  },
  {
    "instruction": "What is the country of the airport with the highest elevation?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1"
  },
  {
    "instruction": "what state has the largest urban population",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) DESC LIMIT 1;"
  },
  {
    "instruction": "Find the product type whose average price is higher than the average price of all products.",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price) > (SELECT avg(product_price) FROM products)"
  },
  {
    "instruction": "What are the last names and ages of the students who are allergic to milk and cat?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT lname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")"
  },
  {
    "instruction": "Which orders are made by the customer named \"Jeramie\"? Give me the order ids and status.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T2.order_id, T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\""
  },
  {
    "instruction": "How many faculty do we have?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT count(*) FROM Faculty"
  },
  {
    "instruction": "Papers from pldi 2015 conference",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "Find the max, average and min training hours of all players.",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT avg(HS), max(HS), min(HS) FROM Player"
  },
  {
    "instruction": "What is employee Nancy Edwards's phone number?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
  },
  {
    "instruction": "How many instruments does the song \"Le Pop\" use?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\""
  },
  {
    "instruction": "What movies have the same director as the movie \" Revolutionary Road \" ?",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did = t2.did JOIN directed_by AS t1 ON t5.did = t1.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN movie AS t3 ON t3.mid = t1.msid WHERE t4.title = \"Revolutionary Road\";"
  },
  {
    "instruction": "How many documents are there of each type?",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT document_type_code, count(*) FROM Documents GROUP BY document_type_code"
  },
  {
    "instruction": "List the name of all customers sorted by their account balance in ascending order.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT cust_name FROM customer ORDER BY acc_bal"
  },
  {
    "instruction": "What are the total amount of money in the invoices billed from Chicago, Illinois?",
    "input": "create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT sum(total) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\";"
  },
  {
    "instruction": "How many games in total did team Boston Red Stockings attend from 2000 to 2010?",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;"
  },
  {
    "instruction": "Which enzyme names have the substring \"ALA\"?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\""
  },
  {
    "instruction": "What are the names of customers who have purchased both products Latte and Americano?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));create table `products` (`product_id` integer primary key, `product_details` varchar(255));create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(15) not null, `order_date` datetime, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));create table `products` (`product_id` integer primary key, `product_details` varchar(255));",
    "output": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Americano'"
  },
  {
    "instruction": "What are the names of all of Bob's friends?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Bob'"
  },
  {
    "instruction": "What is the company where Eduardo Martins is a customer?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";"
  },
  {
    "instruction": "What is the ordered list of customer ids?",
    "input": "create table customers (customer_id integer not null, customer_name varchar(40), primary key (customer_id));",
    "output": "SELECT customer_id, customer_name FROM customers ORDER BY customer_id ASC"
  },
  {
    "instruction": "How many students are not involved in any behavior incident?",
    "input": "create table `students` (`student_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(40), `last_name` varchar(40), `cell_mobile_number` varchar(40), `email_address` varchar(40), `date_first_rental` datetime, `date_left_university` datetime, `other_student_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));create table `behavior_incident` (`incident_id` integer primary key, `incident_type_code` varchar(10) not null, `student_id` integer not null, `date_incident_start` datetime, `date_incident_end` datetime, `incident_summary` varchar(255), `recommendations` varchar(255), `other_details` varchar(255), foreign key (`incident_type_code`) references `ref_incident_type`(`incident_type_code`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )"
  },
  {
    "instruction": "Which people severed as governor most frequently?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Where is the best french in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" AND t1.rating = ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.food_type = \"french\" );"
  },
  {
    "instruction": "How many patients' prescriptions are made by physician John Dorian?",
    "input": "create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));",
    "output": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid WHERE T3.name = \"John Dorian\""
  },
  {
    "instruction": "Count the number of devices.",
    "input": "create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));",
    "output": "SELECT count(*) FROM device"
  },
  {
    "instruction": "How many sections does each course has?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT count(*), crs_code FROM CLASS GROUP BY crs_code"
  },
  {
    "instruction": "what is the number of neighboring states for kentucky",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( border ) FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "What are the distinct billing countries of the invoices?",
    "input": "create table `invoice` (`invoiceid` integer not null , `customerid` integer not null , `invoicedate` datetime not null , `billingaddress` varchar(70) default null , `billingcity` varchar(40) default null , `billingstate` varchar(40) default null , `billingcountry` varchar(40) default null , `billingpostalcode` varchar(10) default null , `total` decimal(10, 2) not null , primary key (`invoiceid`) , constraint `fk_invoicecustomerid` foreign key (`customerid`) references `customer` (`customerid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT distinct(BillingCountry) FROM INVOICE"
  },
  {
    "instruction": "give me some restaurants good for arabic food in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));",
    "output": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available) < 7"
  },
  {
    "instruction": "what is the state with the smallest area",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state );"
  },
  {
    "instruction": "Give the name of the wine with the highest score.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Name FROM WINE ORDER BY Score LIMIT 1"
  },
  {
    "instruction": "List the description of all aircrafts.",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));",
    "output": "SELECT Description FROM aircraft"
  },
  {
    "instruction": "Give me the average and minimum price (in Euro) of the products.",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT avg(price_in_euros), min(price_in_euros) FROM catalog_contents"
  },
  {
    "instruction": "what paper has Richard Ladner published in chi journal ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Richard Ladner\" AND t4.venuename = \"chi\";"
  },
  {
    "instruction": "List all the name of organizations in order of the date formed.",
    "input": "create table `organizations` (`organization_id` integer primary key, `date_formed` datetime, `organization_name` varchar(255), `uk_vat_number` varchar(20));",
    "output": "SELECT organization_name FROM organizations ORDER BY date_formed ASC"
  },
  {
    "instruction": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.",
    "input": "create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));create table \"market\" (\"Market_ID\" int, \"Country\" text, \"Number_cities\" int, primary key (\"Market_ID\"));",
    "output": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country = \"Japan\" ORDER BY T1.Year DESC"
  },
  {
    "instruction": "Show the names of employees that work for companies with sales bigger than 200.",
    "input": "create table \"employment\" (\"Company_ID\" int, \"People_ID\" int, \"Year_working\" int, primary key (\"Company_ID\",\"People_ID\"), foreign key (\"Company_ID\") references `company`(\"Company_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Age\" int, \"Name\" text, \"Nationality\" text, \"Graduation_College\" text, primary key (\"People_ID\"));create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));",
    "output": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID WHERE T3.Sales_in_Billion > 200"
  },
  {
    "instruction": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_name` varchar(255), `gender` varchar(1), `other_staff_details` varchar(255));create table `engineer_visits` (`engineer_visit_id` integer primary key, `contact_staff_id` integer, `engineer_id` integer not null, `fault_log_entry_id` integer not null, `fault_status` varchar(10) not null, `visit_start_datetime` datetime, `visit_end_datetime` datetime, `other_visit_details` varchar(255), foreign key (`fault_log_entry_id`) references `fault_log`(`fault_log_entry_id`), foreign key (`engineer_id`) references `maintenance_engineers`(`engineer_id`), foreign key (`contact_staff_id`) references `staff`(`staff_id`));create table `maintenance_engineers` (`engineer_id` integer primary key, `company_id` integer not null, `first_name` varchar(50), `last_name` varchar(50), `other_details` varchar(255), foreign key (`company_id`) references `third_party_companies`(`company_id`));",
    "output": "SELECT T1.staff_name, T3.first_name, T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id"
  },
  {
    "instruction": "Show all storm names affecting region \"Denmark\".",
    "input": "create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table \"storm\" (\"Storm_ID\" int, \"Name\" text, \"Dates_active\" text, \"Max_speed\" int, \"Damage_millions_USD\" real, \"Number_Deaths\" int, primary key (\"Storm_ID\"));",
    "output": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'"
  },
  {
    "instruction": "Count the number of services.",
    "input": "create table `services` (`service_id` integer primary key, `service_type_code` varchar(15) not null, `service_name` varchar(80), `service_descriptio` varchar(255));",
    "output": "SELECT count(*) FROM services"
  },
  {
    "instruction": "What is the average age for each gender?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT avg(age), gender FROM Person GROUP BY gender"
  },
  {
    "instruction": "What is the total amount of all payments?",
    "input": "create table payment (payment_id smallint unsigned not null, customer_id smallint unsigned not null, staff_id tinyint unsigned not null, rental_id int default null, amount decimal(5, 2) not null, payment_date datetime not null, last_update timestamp default current_timestamp, primary key (payment_id), foreign key (rental_id) references rental (rental_id), foreign key (customer_id) references customer (customer_id), foreign key (staff_id) references staff (staff_id));",
    "output": "SELECT sum(amount) FROM payment"
  },
  {
    "instruction": "What is the maximum elevation of all airports in the country of Iceland?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT max(elevation) FROM airports WHERE country = 'Iceland'"
  },
  {
    "instruction": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT t1.name, t1.sex, min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex"
  },
  {
    "instruction": "Show the different statuses and the numbers of roller coasters for each status.",
    "input": "create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT Status, COUNT(*) FROM roller_coaster GROUP BY Status"
  },
  {
    "instruction": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
    "input": "create table \"bridge\" (\"architect_id\" int, \"id\" int, \"name\" text, \"location\" text, \"length_meters\" real, \"length_feet\" real, primary key(\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));",
    "output": "SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge'"
  },
  {
    "instruction": "What are the details of the lots which are not used in any transactions?",
    "input": "create table `lots` (`lot_id` integer primary key, `investor_id` integer not null, `lot_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`));create table `lots` (`lot_id` integer primary key, `investor_id` integer not null, `lot_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`));create table `transactions_lots` (`transaction_id` integer not null, `lot_id` integer not null, foreign key (`lot_id`) references `lots`(`lot_id`), foreign key (`transaction_id`) references `transactions`(`transaction_id`));",
    "output": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id = T2.lot_id"
  },
  {
    "instruction": "Find the id of the song that lasts the longest.",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);",
    "output": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1"
  },
  {
    "instruction": "List all the neighbourhoods with Italian restaurant in Madison",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"neighbourhood\" (\"id\" int, \"business_id\" text, \"neighbourhood_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id = t2.business_id JOIN category AS t4 ON t4.business_id = t2.business_id JOIN neighbourhood AS t1 ON t1.business_id = t2.business_id WHERE t2.city = \"Madison\" AND t3.category_name = \"Italian\" AND t4.category_name = \"restaurant\";"
  },
  {
    "instruction": "How many papers were written on the convolutional neural networks this year ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"convolutional neural networks\" AND t3.year = 2016;"
  },
  {
    "instruction": "papers that used WebKB",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"WebKB\";"
  },
  {
    "instruction": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT cName FROM College WHERE enr > 18000 ORDER BY cName"
  },
  {
    "instruction": "What is the document type name for the document with name \"How to read a book\"?",
    "input": "create table all_documents (document_id integer not null, date_stored datetime, document_type_code char(15) not null, document_name char(255), document_description char(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (date_stored) references ref_calendar (calendar_date));create table ref_document_types (document_type_code char(15) not null, document_type_name varchar(255) not null, document_type_description varchar(255) not null, primary key (document_type_code));",
    "output": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T1.document_name = \"How to read a book\""
  },
  {
    "instruction": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));",
    "output": "SELECT count(*), T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name"
  },
  {
    "instruction": "What are the investors that have invested in at least two entrepreneurs?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "What are the appelations for wines produced after 2008 but not in the Central Coast area?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);",
    "output": "SELECT Appelation FROM WINE WHERE YEAR > 2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area = \"Central Coast\""
  },
  {
    "instruction": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT max(T1.HS), pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS > 1000 GROUP BY T2.pPos"
  },
  {
    "instruction": "how many inhabitants does boulder have",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = \"boulder\";"
  },
  {
    "instruction": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"pitStops\" (\"raceId\" integer, \"driverId\" integer, \"stop\" integer, \"lap\" integer, \"time\" text, \"duration\" text, \"milliseconds\" integer, primary key (\"raceId\", \"driverId\", \"stop\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) = 11 INTERSECT SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) > 5"
  },
  {
    "instruction": "what is the size of the largest state in the usa",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT MAX ( area ) FROM state;"
  },
  {
    "instruction": "What is the title of the course with Differential Geometry as a prerequisite?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry')"
  },
  {
    "instruction": "List the names and buildings of all departments sorted by the budget from large to small.",
    "input": "create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));",
    "output": "SELECT dept_name, building FROM department ORDER BY budget DESC"
  },
  {
    "instruction": "display the department name and number of employees in each of the department.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));",
    "output": "SELECT department_name, COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name"
  },
  {
    "instruction": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Katsuhiro\" AND t1.lname = \"Ueno\""
  },
  {
    "instruction": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Grape, Appelation, Name FROM WINE WHERE Score > 93 ORDER BY Name"
  },
  {
    "instruction": "how many french restaurant are there in palo alto ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"palo alto\" AND t1.food_type = \"french\";"
  },
  {
    "instruction": "List the names of all left-footed players who have overall rating between 85 and 90.",
    "input": "create table `player` (`id`\tinteger primary key autoincrement, `player_api_id`\tinteger unique, `player_name`\ttext, `player_fifa_api_id`\tinteger unique, `birthday`\ttext, `height`\tinteger, `weight`\tinteger);create table \"Player_Attributes\" (`id`\tinteger primary key autoincrement, `player_fifa_api_id`\tinteger, `player_api_id`\tinteger, `date`\ttext, `overall_rating`\tinteger, `potential`\tinteger, `preferred_foot`\ttext, `attacking_work_rate`\ttext, `defensive_work_rate`\ttext, `crossing`\tinteger, `finishing`\tinteger, `heading_accuracy`\tinteger, `short_passing`\tinteger, `volleys`\tinteger, `dribbling`\tinteger, `curve`\tinteger, `free_kick_accuracy`\tinteger, `long_passing`\tinteger, `ball_control`\tinteger, `acceleration`\tinteger, `sprint_speed`\tinteger, `agility`\tinteger, `reactions`\tinteger, `balance`\tinteger, `shot_power`\tinteger, `jumping`\tinteger, `stamina`\tinteger, `strength`\tinteger, `long_shots`\tinteger, `aggression`\tinteger, `interceptions`\tinteger, `positioning`\tinteger, `vision`\tinteger, `penalties`\tinteger, `marking`\tinteger, `standing_tackle`\tinteger, `sliding_tackle`\tinteger, `gk_diving`\tinteger, `gk_handling`\tinteger, `gk_kicking`\tinteger, `gk_positioning`\tinteger, `gk_reflexes`\tinteger, foreign key(`player_fifa_api_id`) references `player`(`player_fifa_api_id`), foreign key(`player_api_id`) references `player`(`player_api_id`));",
    "output": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = \"left\" AND T2.overall_rating >= 85 AND T2.overall_rating <= 90"
  },
  {
    "instruction": "what state is the largest in population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state );"
  },
  {
    "instruction": "Show all video game types.",
    "input": "create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT DISTINCT gtype FROM Video_games"
  },
  {
    "instruction": "Find the name of the program that is broadcast most frequently.",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));",
    "output": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names and players of all the clubs?",
    "input": "create table \"club\" (\"Club_ID\" int, \"name\" text, \"Region\" text, \"Start_year\" text, primary key (\"Club_ID\"));create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT T1.name, T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID"
  },
  {
    "instruction": "Which students are unaffected by allergies?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy"
  },
  {
    "instruction": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));",
    "output": "SELECT customer_id, customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\""
  },
  {
    "instruction": "what state has the greatest population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MAX ( density ) FROM state );"
  },
  {
    "instruction": "What are all the section titles of the document named \"David CV\"?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `document_sections` (`section_id` integer primary key, `document_code` varchar(15) not null, `section_sequence` integer, `section_code` varchar(20), `section_title` varchar(80), foreign key (`document_code`) references `documents`(`document_code`));",
    "output": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code WHERE t1.document_name = \"David CV\""
  },
  {
    "instruction": "how many states does the missouri river run through",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( traverse ) FROM river WHERE river_name = \"missouri\";"
  },
  {
    "instruction": "For each payment method, return how many customers use it.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));",
    "output": "SELECT payment_method_code, count(*) FROM customers GROUP BY payment_method_code"
  },
  {
    "instruction": "Which distinct source system code includes the substring 'en'?",
    "input": "create table cmi_cross_references (cmi_cross_ref_id integer not null, master_customer_id integer not null, source_system_code char(15) not null, primary key (cmi_cross_ref_id), foreign key (master_customer_id) references customer_master_index (master_customer_id));",
    "output": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'"
  },
  {
    "instruction": "Find all breweries in \" Los Angeles \"",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"breweries\";"
  },
  {
    "instruction": "What are the years of opening for tracks with seating between 4000 and 5000?",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000"
  },
  {
    "instruction": "Show the name of the shop that have the largest quantity of devices in stock.",
    "input": "create table \"stock\" (\"Shop_ID\" int, \"Device_ID\" int, \"Quantity\" int, primary key (\"Shop_ID\",\"Device_ID\"), foreign key (`shop_id`) references `shop`(`shop_id`), foreign key (`device_id`) references `device`(`device_id`));create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1"
  },
  {
    "instruction": "What is the list of school locations sorted in ascending order of school enrollment?",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT LOCATION FROM school ORDER BY Enrollment ASC"
  },
  {
    "instruction": "What are the first names and last names of students with address in Wisconsin state?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1` varchar(120), `line_2` varchar(120), `line_3` varchar(120), `city` varchar(80), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));create table `students` (`student_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(40), `last_name` varchar(40), `cell_mobile_number` varchar(40), `email_address` varchar(40), `date_first_rental` datetime, `date_left_university` datetime, `other_student_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T2.first_name, T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Wisconsin\""
  },
  {
    "instruction": "What is the name and salary for employee with id 242518965?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT name, salary FROM Employee WHERE eid = 242518965"
  },
  {
    "instruction": "What products are available at store named \"Miramichi\"?",
    "input": "create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));create table \"store_product\" (\"Store_ID\" int, \"Product_ID\" int, primary key (\"Store_ID\",\"Product_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`product_id`) references `product`(`product_id`));create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));",
    "output": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id WHERE t3.store_name = \"Miramichi\""
  },
  {
    "instruction": "What is the most common amenity in the dorms?",
    "input": "create table dorm_amenity (amenid integer, amenity_name varchar(25));create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));",
    "output": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid = T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.",
    "input": "create table ref_attraction_types (attraction_type_code char(15) not null, attraction_type_description varchar(255), primary key (attraction_type_code), unique (attraction_type_code));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T1.Attraction_Type_Description, T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "WebKB papers",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname = \"WebKB\";"
  },
  {
    "instruction": "How many different levels do members have?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));",
    "output": "SELECT count(DISTINCT LEVEL) FROM member"
  },
  {
    "instruction": "How many books are there?",
    "input": "create table \"book\" (\"Book_ID\" int, \"Title\" text, \"Issues\" real, \"Writer\" text, primary key (\"Book_ID\"));",
    "output": "SELECT count(*) FROM book"
  },
  {
    "instruction": "When did researchers start and stop working?",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT date_from, date_to FROM Project_Staff WHERE role_code = 'researcher'"
  },
  {
    "instruction": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
    "input": "create table \"mill\" (\"architect_id\" int, \"id\" int, \"location\" text, \"name\" text, \"type\" text, \"built_year\" int, \"notes\" text, primary key (\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));create table \"architect\" (\"id\" text, \"name\" text, \"nationality\" text, \"gender\" text, primary key(\"id\"));create table \"bridge\" (\"architect_id\" int, \"id\" int, \"name\" text, \"location\" text, \"length_meters\" real, \"length_feet\" real, primary key(\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));",
    "output": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id JOIN bridge AS T3 ON T3.architect_id = T2.id WHERE T3.length_meters > 80"
  },
  {
    "instruction": "Show flight number for all flights with more than 2000 distance.",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT flno FROM Flight WHERE distance > 2000"
  },
  {
    "instruction": "Return all detention summaries.",
    "input": "create table `detention` (`detention_id` integer primary key, `detention_type_code` varchar(10) not null, `teacher_id` integer, `datetime_detention_start` datetime, `datetime_detention_end` datetime, `detention_summary` varchar(255), `other_details` varchar(255), foreign key (`detention_type_code`) references `ref_detention_type`(`detention_type_code`), foreign key (`teacher_id`) references `teachers`(`teacher_id`));",
    "output": "SELECT detention_summary FROM Detention"
  },
  {
    "instruction": "What are the different location codes for documents?",
    "input": "create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT DISTINCT location_code FROM Document_locations"
  },
  {
    "instruction": "Show names of actors and names of musicals they are in.",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT T1.Name, T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID"
  },
  {
    "instruction": "What are the full names of the 3 instructors who teach the most courses?",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT T2.Fname, T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "display the employee ID for each employee and the date on which he ended his previous job.",
    "input": "create table `job_history` (`employee_id` decimal(6, 0) not null, `start_date` date not null, `end_date` date not null, `job_id` varchar(10) not null, `department_id` decimal(4, 0) default null, primary key (`employee_id`,`start_date`), foreign key (`employee_id`) references employees(`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id, MAX(end_date) FROM job_history GROUP BY employee_id"
  },
  {
    "instruction": "How many artists are there?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));",
    "output": "SELECT count(*) FROM artist"
  },
  {
    "instruction": "How many instructors are in the department with the highest budget, and what is their average salary?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));",
    "output": "SELECT avg(T1.salary), count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1"
  },
  {
    "instruction": "List the names of all distinct medications, ordered in an alphabetical order.",
    "input": "create table medication (code integer primary key not null, name varchar(30) not null, brand varchar(30) not null, description varchar(30) not null);",
    "output": "SELECT DISTINCT name FROM medication ORDER BY name"
  },
  {
    "instruction": "Show the names of companies and the number of employees they have",
    "input": "create table \"employment\" (\"Company_ID\" int, \"People_ID\" int, \"Year_working\" int, primary key (\"Company_ID\",\"People_ID\"), foreign key (\"Company_ID\") references `company`(\"Company_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Age\" int, \"Name\" text, \"Nationality\" text, \"Graduation_College\" text, primary key (\"People_ID\"));create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));",
    "output": "SELECT T3.Name, COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID GROUP BY T3.Name"
  },
  {
    "instruction": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Meaghan\" AND T2.customer_last_name = \"Keeling\""
  },
  {
    "instruction": "How many airports are there per city in the US ordered from most to least?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT count(*), city FROM airports WHERE country = 'United States' GROUP BY city ORDER BY count(*) DESC"
  },
  {
    "instruction": "How many animal type allergies exist?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT count(*) FROM Allergy_type WHERE allergytype = \"animal\""
  },
  {
    "instruction": "What is the count of enzymes without any interactions?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));",
    "output": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"
  },
  {
    "instruction": "Find the distinct years when the governor was named \"Eliot Spitzer\".",
    "input": "create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT DISTINCT YEAR FROM party WHERE Governor = \"Eliot Spitzer\""
  },
  {
    "instruction": "How many Bangladeshi artists are listed?",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT count(*) FROM artist WHERE country = \"Bangladesh\""
  },
  {
    "instruction": "what state that borders oklahoma has the highest population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"oklahoma\" ) ORDER BY population DESC LIMIT 1;"
  },
  {
    "instruction": "Which clubs are located at \"AKW\"? Return the club names.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT clubname FROM club WHERE clublocation = \"AKW\""
  },
  {
    "instruction": "where is a restaurant in alameda ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"alameda\";"
  },
  {
    "instruction": "what are the states that the ohio run through",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT traverse FROM river WHERE river_name = \"ohio\";"
  },
  {
    "instruction": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT Name, Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = \"bus\" OR How_to_Get_There = \"walk\""
  },
  {
    "instruction": "What is the id of the appointment that started most recently?",
    "input": "create table appointment (appointmentid integer primary key not null, patient integer not null, prepnurse integer, physician integer not null, start datetime not null, end datetime not null, examinationroom text not null, constraint fk_appointment_patient_ssn foreign key(patient) references patient(ssn), constraint fk_appointment_nurse_employeeid foreign key(prepnurse) references nurse(employeeid), constraint fk_appointment_physician_employeeid foreign key(physician) references physician(employeeid));",
    "output": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1"
  },
  {
    "instruction": "Find the name and price of the product that has been ordered the greatest number of times.",
    "input": "create table `products` (`product_id` integer primary key, `product_name` varchar(20), `product_price` decimal(19, 4), `product_description` varchar(255));create table `regular_order_products` (`regular_order_id` integer not null, `product_id` integer not null, foreign key (`product_id`) references `products`(`product_id`), foreign key (`regular_order_id`) references `regular_orders`(`regular_order_id`));",
    "output": "SELECT t1.product_name, t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "display the full name (first and last name), and salary of those employees who working in any department located in London.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));create table `locations` (`location_id` decimal(4, 0) not null default '0', `street_address` varchar(40) default null, `postal_code` varchar(12) default null, `city` varchar(30) not null, `state_province` varchar(25) default null, `country_id` varchar(2) default null, primary key (`location_id`), foreign key (`country_id`) references countries(`country_id`));",
    "output": "SELECT first_name, last_name, salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T3.city = 'London'"
  },
  {
    "instruction": "What is the maximum and minimum height of all players?",
    "input": "create table `player` (`id`\tinteger primary key autoincrement, `player_api_id`\tinteger unique, `player_name`\ttext, `player_fifa_api_id`\tinteger unique, `birthday`\ttext, `height`\tinteger, `weight`\tinteger);",
    "output": "SELECT max(weight), min(weight) FROM Player"
  },
  {
    "instruction": "which river goes through the most states",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;"
  },
  {
    "instruction": "What are the names of the workshop groups that have bookings with status code \"stop\"?",
    "input": "create table bookings (booking_id integer not null , customer_id integer not null, workshop_group_id varchar(100) not null, status_code char(15) not null, store_id integer not null, order_date datetime not null, planned_delivery_date datetime not null, actual_delivery_date datetime not null, other_order_details varchar(255), primary key (booking_id), unique (booking_id), foreign key (customer_id) references clients (client_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id));create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Status_Code = \"stop\""
  },
  {
    "instruction": "how big is new mexico",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT area FROM state WHERE state_name = \"new mexico\";"
  },
  {
    "instruction": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT minister, party_name FROM party ORDER BY took_office DESC"
  },
  {
    "instruction": "who wrote the most papers for CVPR 2007",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t2.paperid ), t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2007 AND t3.venuename = \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;"
  },
  {
    "instruction": "Give the names of characteristics that are in two or more products?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*) >= 2"
  },
  {
    "instruction": "What are the teams with the most technicians?",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "return me the number of papers on VLDB conference after 2000 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = \"VLDB\" AND t2.year > 2000;"
  },
  {
    "instruction": "What are the first names and last names of the students who are 18 years old and have vice president votes.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT T1.Fname, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE WHERE T1.age = 18"
  },
  {
    "instruction": "Find the first names of students whose first names contain letter \"a\".",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'"
  },
  {
    "instruction": "Find the payment method that is used most frequently.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(10) not null, `customer_name` varchar(80), `customer_phone` varchar(80), `customer_email` varchar(80), `date_became_customer` datetime);",
    "output": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the total amount of money spent by Lucas Mancini?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
  },
  {
    "instruction": "How many songs have a shared vocal?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = \"shared\""
  },
  {
    "instruction": "What are the names of cities in ascending alphabetical order?",
    "input": "create table \"city\" (\"City_ID\" int, \"County_ID\" int, \"Name\" text, \"White\" real, \"Black\" real, \"Amerindian\" real, \"Asian\" real, \"Multiracial\" real, \"Hispanic\" real, primary key (\"City_ID\"), foreign key (\"County_ID\") references \"county_public_safety\"(\"County_ID\"));",
    "output": "SELECT Name FROM city ORDER BY Name ASC"
  },
  {
    "instruction": "Who is the person whose age is below 30?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT name FROM Person WHERE age < 30"
  },
  {
    "instruction": "What is the savings balance of the account belonging to the customer with the highest checking balance?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1"
  },
  {
    "instruction": "For each fourth-grade classroom, show the classroom number and the total number of students using it.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT classroom, count(*) FROM list WHERE grade = \"4\" GROUP BY classroom"
  },
  {
    "instruction": "What campuses are located in Chico?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE LOCATION = \"Chico\""
  },
  {
    "instruction": "Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\".",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = \"red\" AND t3.characteristic_name = \"slow\""
  },
  {
    "instruction": "what state has the most people",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state );"
  },
  {
    "instruction": "What are the names and arrival times of trains?",
    "input": "create table \"train\" (\"Train_ID\" int, \"Train_Num\" text, \"Name\" text, \"\nFROM\" text, \"Arrival\" text, \"Railway_ID\" int, primary key (\"Train_ID\"), foreign key (\"Railway_ID\") references `railway`(\"Railway_ID\"));",
    "output": "SELECT Name, Arrival FROM train"
  },
  {
    "instruction": "What is the most common result of the music festival?",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));",
    "output": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are total salaries and department id for each department that has more than 2 employees?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT department_id, SUM(salary) FROM employees GROUP BY department_id HAVING count(*) >= 2"
  },
  {
    "instruction": "What is the status of the city that has hosted the most competitions?",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));create table \"farm_competition\" (\"Competition_ID\" int, \"Year\" int, \"Theme\" text, \"Host_city_ID\" int, \"Hosts\" text, primary key (\"Competition_ID\"), foreign key (`host_city_id`) references `city`(`city_id`));",
    "output": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "what cities in texas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE state_name = \"texas\";"
  },
  {
    "instruction": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
    "input": "create table apartment_buildings (building_id integer not null, building_short_name char(15), building_full_name varchar(80), building_description varchar(255), building_address varchar(255), building_manager varchar(50), building_phone varchar(80), primary key (building_id), unique (building_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = \"Columbus Square\""
  },
  {
    "instruction": "Show the season, the player, and the name of the country that player belongs to.",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT T2.Season, T2.Player, T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country"
  },
  {
    "instruction": "What are the full names of customers with the account name 900?",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"900\""
  },
  {
    "instruction": "Who acts \" Olivia Pope \" in the series Scandal ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"tv_series\" (\"sid\" int, \"title\" text, \"release_year\" int, \"num_of_seasons\" int, \"num_of_episodes\" int, \"title_aka\" text, \"budget\" text, primary key(\"sid\"));",
    "output": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN tv_series AS t2 ON t2.sid = t3.msid WHERE t3.role = \"Olivia Pope\" AND t2.title = \"Scandal\";"
  },
  {
    "instruction": "List the position of players with average number of points scored by players of that position bigger than 20.",
    "input": "create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points) >= 20"
  },
  {
    "instruction": "List the distinct police forces of counties whose location is not on east side.",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\""
  },
  {
    "instruction": "Find all the tips from a user who has written a review in 2012",
    "input": "create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"tip\" (\"tip_id\" int, \"business_id\" text, \"text\" text, \"user_id\" text, \"likes\" int, \"year\" int, \"month\" text, primary key(\"tip_id\") foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT t2.text FROM USER AS t3 JOIN review AS t1 ON t3.user_id = t1.user_id JOIN tip AS t2 ON t3.user_id = t2.user_id WHERE t1.year = 2012;"
  },
  {
    "instruction": "Find the name and hours of the students whose tryout decision is yes.",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT T1.pName, T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'"
  },
  {
    "instruction": "acl papers in 2012 in Parsing",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"Parsing\" AND t3.year = 2012 AND t4.venuename = \"acl\";"
  },
  {
    "instruction": "Show the first names and last names of customers without any account.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id"
  },
  {
    "instruction": "What is the most common competition type?",
    "input": "create table \"competition\" (\"Competition_ID\" int, \"Year\" real, \"Competition_type\" text, \"Country\" text, primary key (\"Competition_ID\"));",
    "output": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
    "input": "create table `attribute_definitions` (`attribute_id` integer primary key, `attribute_name` varchar(30), `attribute_data_type` varchar(10));",
    "output": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3"
  },
  {
    "instruction": "What are the states or counties of the address of the stores with marketing region code \"CA\"?",
    "input": "create table addresses (address_id varchar(100) not null, line_1 varchar(255), line_2 varchar(255), city_town varchar(255), state_county varchar(255), other_details varchar(255), primary key (address_id), unique (address_id));create table stores (store_id varchar(100) not null, address_id integer not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (store_id), unique (store_id), foreign key (address_id) references addresses (address_id), foreign key (marketing_region_code) references marketing_regions (marketing_region_code));",
    "output": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = \"CA\""
  },
  {
    "instruction": "What is the list of distinct product names sorted by product id?",
    "input": "create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT DISTINCT product_name FROM product ORDER BY product_id"
  },
  {
    "instruction": "What are the names of all the dorms that can accomdate more than 300 students?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT dorm_name FROM dorm WHERE student_capacity > 300"
  },
  {
    "instruction": "Find the name and id of the good with the highest average rank.",
    "input": "create table `item` (`i_id` integer not null , `title` varchar(20) default null , primary key (`i_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1"
  },
  {
    "instruction": "How many members of club \"Bootup Baltimore\" are younger than 18?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.age < 18"
  },
  {
    "instruction": "Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products.",
    "input": "create table `product_suppliers` (`product_id` integer not null, `supplier_id` integer not null, `date_supplied_from` datetime not null, `date_supplied_to` datetime, `total_amount_purchased` varchar(80), `total_value_purchased` decimal(19, 4), primary key (`product_id`, `supplier_id`), foreign key (`supplier_id`) references `suppliers`(`supplier_id`), foreign key (`product_id`) references `products`(`product_id`));create table `product_suppliers` (`product_id` integer not null, `supplier_id` integer not null, `date_supplied_from` datetime not null, `date_supplied_to` datetime, `total_amount_purchased` varchar(80), `total_value_purchased` decimal(19, 4), primary key (`product_id`, `supplier_id`), foreign key (`supplier_id`) references `suppliers`(`supplier_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT avg(total_amount_purchased), avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id = (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "how long is the longest river in the usa",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT LENGTH FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );"
  },
  {
    "instruction": "Find the average hours of all projects.",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT avg(hours) FROM projects"
  },
  {
    "instruction": "How many tracks are in each genre?",
    "input": "create table genres (id integer primary key autoincrement, name varchar(120));create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*), T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;"
  },
  {
    "instruction": "return me the paper in PVLDB with more than 200 citations .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = \"PVLDB\" AND t2.citation_num > 200;"
  },
  {
    "instruction": "Find the title of course that is provided by both Statistics and Psychology departments.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT title FROM course WHERE dept_name = 'Statistics' INTERSECT SELECT title FROM course WHERE dept_name = 'Psychology'"
  },
  {
    "instruction": "How many members are in each party?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT T2.party_name, count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"
  },
  {
    "instruction": "Show names of shops that have more than one kind of device in stock.",
    "input": "create table \"stock\" (\"Shop_ID\" int, \"Device_ID\" int, \"Quantity\" int, primary key (\"Shop_ID\",\"Device_ID\"), foreign key (`shop_id`) references `shop`(`shop_id`), foreign key (`device_id`) references `device`(`device_id`));create table \"shop\" (\"Shop_ID\" int, \"Shop_Name\" text, \"Location\" text, \"Open_Date\" text, \"Open_Year\" int, primary key (\"Shop_ID\"));",
    "output": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*) > 1"
  },
  {
    "instruction": "How many cities have a stadium that was opened before the year of 2006?",
    "input": "create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));",
    "output": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year < 2006"
  },
  {
    "instruction": "Find the first name and gender of the student who has allergy to milk but not cat.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT fname, sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")"
  },
  {
    "instruction": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Hopkins Student Enterprises\" AND t2.position = \"CTO\""
  },
  {
    "instruction": "What is the average number of gold medals for a club?",
    "input": "create table \"club_rank\" (\"Rank\" real, \"Club_ID\" int, \"Gold\" real, \"Silver\" real, \"Bronze\" real, \"Total\" real, primary key (\"Rank\",\"Club_ID\") foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT avg(Gold) FROM club_rank"
  },
  {
    "instruction": "Which team has the oldest player?",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));",
    "output": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1"
  },
  {
    "instruction": "Find the title, credit, and department name of courses that have more than one prerequisites?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));",
    "output": "SELECT T1.title, T1.credits, T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count(*) > 1"
  },
  {
    "instruction": "Return the name of each physician and the number of patients he or she treats.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));",
    "output": "SELECT T1.name, count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid"
  },
  {
    "instruction": "Find the component amounts and names of all furnitures that have more than 10 components.",
    "input": "create table \"furniture\" (\"Furniture_ID\" int, \"Name\" text, \"Num_of_Component\" int, \"Market_Rate\" real, primary key (\"Furniture_ID\"));",
    "output": "SELECT Num_of_Component, name FROM furniture WHERE Num_of_Component > 10"
  },
  {
    "instruction": "Find the ids and names of stations from which at least 200 trips started.",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200"
  },
  {
    "instruction": "How many staff does each project has? List the project id and the number in an ascending order.",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));",
    "output": "SELECT T1.project_id, count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC"
  },
  {
    "instruction": "Find all the catalog publishers whose name contains \"Murray\"",
    "input": "create table `catalogs` (`catalog_id` integer primary key, `catalog_name` varchar(50), `catalog_publisher` varchar(80), `date_of_publication` datetime, `date_of_latest_revision` datetime);",
    "output": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\""
  },
  {
    "instruction": "What are the main industries of the companies without gas stations and what are the companies?",
    "input": "create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));create table \"station_company\" (\"Station_ID\" int, \"Company_ID\" int, \"Rank_of_the_Year\" int, primary key (\"Station_ID\",\"Company_ID\"), foreign key (`station_id`) references `gas_station`(`station_id`), foreign key (`company_id`) references `company`(`company_id`));",
    "output": "SELECT company, main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
  },
  {
    "instruction": "what is the smallest state in the usa",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state );"
  },
  {
    "instruction": "How many different colleges do attend the tryout test?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT count(DISTINCT cName) FROM tryout"
  },
  {
    "instruction": "Return the full name of the customer who made the first rental.",
    "input": "create table customer (customer_id smallint unsigned not null, store_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, email varchar(50) default null, address_id smallint unsigned not null, active boolean not null default true, create_date datetime not null, last_update timestamp default current_timestamp, primary key (customer_id), foreign key (address_id) references address (address_id), foreign key (store_id) references store (store_id));create table rental (rental_id int not null, rental_date datetime not null, inventory_id mediumint unsigned not null, customer_id smallint unsigned not null, return_date datetime default null, staff_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (rental_id), foreign key (staff_id) references staff (staff_id), foreign key (inventory_id) references inventory (inventory_id), foreign key (customer_id) references customer (customer_id));",
    "output": "SELECT T1.first_name, T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1"
  },
  {
    "instruction": "display the country ID and number of cities for each country.",
    "input": "create table `locations` (`location_id` decimal(4, 0) not null default '0', `street_address` varchar(40) default null, `postal_code` varchar(12) default null, `city` varchar(30) not null, `state_province` varchar(25) default null, `country_id` varchar(2) default null, primary key (`location_id`), foreign key (`country_id`) references countries(`country_id`));",
    "output": "SELECT country_id, COUNT(*) FROM locations GROUP BY country_id"
  },
  {
    "instruction": "Show the names and main services for train stations that have the top three total number of passengers.",
    "input": "create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));",
    "output": "SELECT name, main_services FROM station ORDER BY total_passengers DESC LIMIT 3"
  },
  {
    "instruction": "What are the addresses of the course authors who teach either \"operating system\" or \"data structure\" course.",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));",
    "output": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = \"operating system\" OR T2.course_name = \"data structure\""
  },
  {
    "instruction": "Show all product colors.",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `production_type_code` varchar(15) not null, `unit_price` decimal(19, 4), `product_name` varchar(80), `product_color` varchar(20), `product_size` varchar(20), foreign key (`production_type_code`) references `product_categories`(`production_type_code`));",
    "output": "SELECT DISTINCT product_color FROM Products"
  },
  {
    "instruction": "What is the average number of bank customers?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT avg(no_of_customers) FROM bank"
  },
  {
    "instruction": "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table affiliated_with (physician integer not null, department integer not null, primaryaffiliation boolean not null, constraint fk_affiliated_with_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_affiliated_with_department_departmentid foreign key(department) references department(departmentid), primary key(physician, department));create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table affiliated_with (physician integer not null, department integer not null, primaryaffiliation boolean not null, constraint fk_affiliated_with_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_affiliated_with_department_departmentid foreign key(department) references department(departmentid), primary key(physician, department));create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));",
    "output": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Psychiatry'"
  },
  {
    "instruction": "What are the first names and office locations for all professors sorted alphabetically by first name?",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);",
    "output": "SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY T2.emp_fname"
  },
  {
    "instruction": "What are the valid from and valid to dates for the card with the number 4560596484842?",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT date_valid_from, date_valid_to FROM Customers_cards WHERE card_number = \"4560596484842\""
  },
  {
    "instruction": "Find id of the candidate whose email is stanley.monahan@example.org?",
    "input": "create table people (person_id integer not null, first_name varchar(255), middle_name varchar(255), last_name varchar(255), cell_mobile_number varchar(40), email_address varchar(40), login_name varchar(40), password varchar(40), primary key (person_id));create table candidates (candidate_id integer not null , candidate_details varchar(255), primary key (candidate_id), foreign key (candidate_id) references people (person_id));",
    "output": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""
  },
  {
    "instruction": "Give the budget type code that is most common among documents with expenses.",
    "input": "create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
    "input": "create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT max(support_rate), min(consider_rate), min(oppose_rate) FROM candidate"
  },
  {
    "instruction": "what is the longest river that runs through a state that borders tennessee",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name = \"tennessee\" );"
  },
  {
    "instruction": "What are the first name and last name of the players who have weight above 220 or height below 75?",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);",
    "output": "SELECT name_first, name_last FROM player WHERE weight > 220 OR height < 75"
  },
  {
    "instruction": "List every album whose title starts with A in alphabetical order.",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;"
  },
  {
    "instruction": "At which conferences does Daniella Coelho publish ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Daniella Coelho\";"
  },
  {
    "instruction": "What is the total amount of settlement made for all the settlements?",
    "input": "create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT sum(Amount_Settled) FROM Settlements"
  },
  {
    "instruction": "Sort the apartment numbers in ascending order of room count.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_number FROM Apartments ORDER BY room_count ASC"
  },
  {
    "instruction": "For each director, how many reviews have they received?",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT count(*), T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director"
  },
  {
    "instruction": "where is mount whitney",
    "input": "create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM mountain WHERE mountain_name = \"whitney\";"
  },
  {
    "instruction": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".",
    "input": "create table `investors` (`investor_id` integer primary key, `investor_details` varchar(255));create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT T2.investor_id, T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "what is the name and position of the head whose department has least number of employees?",
    "input": "create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));",
    "output": "SELECT T2.name, T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;"
  },
  {
    "instruction": "Show the first name and last name for the customer with account name 900.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));",
    "output": "SELECT T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"900\""
  },
  {
    "instruction": "Who are the players that have names containing the letter a?",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));",
    "output": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'"
  },
  {
    "instruction": "What are the different names of all songs without back vocals?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"back\""
  },
  {
    "instruction": "what is the longest river flowing through texas",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = \"texas\" ) AND traverse = \"texas\";"
  },
  {
    "instruction": "Show the member names which are in both the party with id 3 and the party with id 1.",
    "input": "create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));",
    "output": "SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1"
  },
  {
    "instruction": "Find the different first names and cities of the students who have allergy to milk or cat.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT DISTINCT T1.fname, T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = \"Milk\" OR T2.Allergy = \"Cat\""
  },
  {
    "instruction": "Find the first names and last names of the authors whose institution affiliation is \"Google\".",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));",
    "output": "SELECT DISTINCT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\""
  },
  {
    "instruction": "Which countries have more than one mountain?",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1"
  },
  {
    "instruction": "Return the description of the product called \"Chocolate\".",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `product_category_code` varchar(20) not null, `date_product_first_available` datetime, `date_product_discontinued` datetime, `product_name` varchar(80), `product_description` varchar(255), `product_price` decimal(19, 4));",
    "output": "SELECT product_description FROM products WHERE product_name = \"Chocolate\""
  },
  {
    "instruction": "What is the name of the most common genre in all tracks?",
    "input": "create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the station station and end station for the trips with the three smallest ids?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT start_station_name, end_station_name FROM trip ORDER BY id LIMIT 3"
  },
  {
    "instruction": "Which city does the student whose last name is \"Kim\" live in?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT city_code FROM Student WHERE LName = \"Kim\""
  },
  {
    "instruction": "When and in what zip code did max temperature reach 80?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT date, zip_code FROM weather WHERE max_temperature_f >= 80"
  },
  {
    "instruction": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT How_to_Get_There, COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There"
  },
  {
    "instruction": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));",
    "output": "SELECT Team FROM Elimination WHERE Eliminated_By = \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By = \"Benjamin\""
  },
  {
    "instruction": "Find all restaurant Seafood in Los Angeles",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"Seafood\" AND t3.category_name = \"restaurant\";"
  },
  {
    "instruction": "What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT min(membership_amount), max(membership_amount) FROM branch WHERE open_year = 2011 OR city = 'London'"
  },
  {
    "instruction": "Show all advisors and corresponding number of students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT advisor, count(*) FROM Student GROUP BY advisor"
  },
  {
    "instruction": "Show all role codes and the number of employees in each role.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT role_code, count(*) FROM Employees GROUP BY role_code"
  },
  {
    "instruction": "Which team had the least number of attendances in home games in 1980?",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;"
  },
  {
    "instruction": "What are all the movies featuring \" Robin Wright \" ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Robin Wright\";"
  },
  {
    "instruction": "Which team offers the lowest average salary? Give me the name and id of the team.",
    "input": "create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);create table salary (year integer, team_id text, league_id text, player_id text, salary integer);",
    "output": "SELECT T1.name, T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;"
  },
  {
    "instruction": "What is the average number of stars that each reviewer awards for a movie?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table reviewer(rid int primary key, name text);",
    "output": "SELECT T2.name, avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name"
  },
  {
    "instruction": "Find the number of different states which banks are located at.",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT count(DISTINCT state) FROM bank"
  },
  {
    "instruction": "Find all movies produced in 2015",
    "input": "create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT title FROM movie WHERE release_year = 2015;"
  },
  {
    "instruction": "List all the reviews which rated a business less than 1",
    "input": "create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT text FROM review WHERE rating < 1;"
  },
  {
    "instruction": "What are the start station's name and id for the one that had the most start trips in August?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);",
    "output": "SELECT start_station_name, start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "what is the height of the highest mountain in texas",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT MAX ( DISTINCT highest_elevation ) FROM highlow WHERE state_name = \"texas\";"
  },
  {
    "instruction": "Find the location of the club \"Pen and Paper Gaming\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT clublocation FROM club WHERE clubname = \"Pen and Paper Gaming\""
  },
  {
    "instruction": "List the names of technicians in ascending order of age.",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Name FROM technician ORDER BY Age ASC"
  },
  {
    "instruction": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Fname, Lname FROM Student WHERE Age > 18 AND Major = 600;"
  },
  {
    "instruction": "What is the least common faculty rank?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "Show teams that have suffered more than three eliminations.",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));",
    "output": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*) > 3"
  },
  {
    "instruction": "Find the name of all students who were in the tryout sorted in alphabetic order.",
    "input": "create table player (pid numeric(5, 0) not null, pname varchar(20), ycard varchar(3), hs numeric(5, 0), primary key (pid));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID ORDER BY T1.pName"
  },
  {
    "instruction": "Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'.",
    "input": "create table \"mountain\" (\"id\" int, \"name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key(\"id\"));create table \"mountain\" (\"id\" int, \"name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key(\"id\"));create table \"photos\" (\"id\" int, \"camera_lens_id\" int, \"mountain_id\" int, \"color\" text, \"name\" text, primary key(\"id\"), foreign key(\"camera_lens_id\") references `camera_lens`(\"id\"), foreign key(\"mountain_id\") references `mountain`(\"id\"));create table \"camera_lens\" (\"id\" int, \"brand\" text, \"name\" text, \"focal_length_mm\" real, \"max_aperture\" real, primary key(\"id\"));",
    "output": "SELECT name, prominence FROM mountain EXCEPT SELECT T1.name, T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T3.brand = 'Sigma'"
  },
  {
    "instruction": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT count(*) FROM Project_Staff WHERE role_code = 'leader' OR date_from < '1989-04-24 23:51:54'"
  },
  {
    "instruction": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?",
    "input": "create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table tourist_attraction_features (tourist_attraction_id integer not null, feature_id integer not null, primary key (tourist_attraction_id, feature_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (feature_id) references features (feature_id));create table features (feature_id integer not null, feature_details varchar(255), primary key (feature_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));create table tourist_attraction_features (tourist_attraction_id integer not null, feature_id integer not null, primary key (tourist_attraction_id, feature_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (feature_id) references features (feature_id));create table features (feature_id integer not null, feature_details varchar(255), primary key (feature_id));",
    "output": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping'"
  },
  {
    "instruction": "Show the names of the drivers without a school bus.",
    "input": "create table \"driver\" (\"Driver_ID\" int, \"Name\" text, \"Party\" text, \"Home_city\" text, \"Age\" int, primary key (\"Driver_ID\"));create table \"school_bus\" (\"School_ID\" int, \"Driver_ID\" int, \"Years_Working\" int, \"If_full_time\" bool, primary key (\"School_ID\",\"Driver_ID\"), foreign key (\"School_ID\") references `school`(\"School_ID\"), foreign key (\"Driver_ID\") references `driver`(\"Driver_ID\"));",
    "output": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)"
  },
  {
    "instruction": "Find all the stores in the district with the most population.",
    "input": "create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));create table \"store_district\" (\"Store_ID\" int, \"District_ID\" int, primary key (\"Store_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`district_id`) references `district`(`district_id`));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)"
  },
  {
    "instruction": "find the number of escape games in Madison",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Madison\" AND t2.category_name = \"escape games\";"
  },
  {
    "instruction": "what is the area of the state with the capital albany",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT area FROM state WHERE capital = \"albany\";"
  },
  {
    "instruction": "what is the population in boulder",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = \"boulder\";"
  },
  {
    "instruction": "how many papers jamie callan published each year ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"jamie callan\" GROUP BY t3.year;"
  },
  {
    "instruction": "What are the names and flags of ships that do not have a captain with the rank of Midshipman?",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT name, flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman')"
  },
  {
    "instruction": "Find the maximum and minimum durations of tracks in milliseconds.",
    "input": "create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT max(Milliseconds), min(Milliseconds) FROM TRACK"
  },
  {
    "instruction": "Show the product ids and the number of unique orders containing each product.",
    "input": "create table `order_items` (`order_item_id` integer primary key, `order_id` integer not null, `product_id` integer not null, `product_quantity` varchar(50), `other_order_item_details` varchar(255), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `orders`(`order_id`));",
    "output": "SELECT product_id, count(DISTINCT order_id) FROM Order_items GROUP BY product_id"
  },
  {
    "instruction": "Which building has the largest number of company offices? Give me the building name.",
    "input": "create table \"Office_locations\" (\"building_id\" int, \"company_id\" int, \"move_in_year\" int, primary key (\"building_id\", \"company_id\"), foreign key (\"building_id\") references \"buildings\"(\"id\"), foreign key (\"company_id\") references \"Companies\"(\"id\"));create table \"buildings\" (\"id\" int, \"name\" text, \"City\" text, \"Height\" int, \"Stories\" int, \"Status\" text, primary key(\"id\"));create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Count the number of stores.",
    "input": "create table store (store_id tinyint unsigned not null, manager_staff_id tinyint unsigned not null, address_id smallint unsigned not null, last_update timestamp not null default current_timestamp, primary key (store_id), foreign key (manager_staff_id) references staff (staff_id), foreign key (address_id) references address (address_id));",
    "output": "SELECT count(*) FROM store"
  },
  {
    "instruction": "Find the name, address, number of students in the departments that have the top 3 highest number of students.",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T2.dept_name, T2.dept_address, count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "What are the names of wines made from red grapes?",
    "input": "create table \"grapes\" (\"ID\" integer primary key, \"Grape\" text unique, \"Color\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = \"Red\""
  },
  {
    "instruction": "What are the all games score and location of the school called Clemson?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));",
    "output": "SELECT t2.All_Games, t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'"
  },
  {
    "instruction": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.lastname = \"Heilo\" AND T2.title = \"Der Kapitan\""
  },
  {
    "instruction": "return me the author in the \" University of Michigan \" whose papers have the most total citations .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid WHERE t2.name = \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t4.citation_num ) DESC LIMIT 1;"
  },
  {
    "instruction": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?",
    "input": "create table cmi_cross_references (cmi_cross_ref_id integer not null, master_customer_id integer not null, source_system_code char(15) not null, primary key (cmi_cross_ref_id), foreign key (master_customer_id) references customer_master_index (master_customer_id));create table parking_fines (council_tax_id integer not null, cmi_cross_ref_id integer not null, primary key (council_tax_id), foreign key (cmi_cross_ref_id) references cmi_cross_references (cmi_cross_ref_id));",
    "output": "SELECT T1.source_system_code, T1.master_customer_id, T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id"
  },
  {
    "instruction": "What are the names of all instructors in the Comp. Sci. department?",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'"
  },
  {
    "instruction": "What are the maximum scores the team Boston Red Stockings got when the team won in postseason?",
    "input": "create table postseason (year integer, round text, team_id_winner text, league_id_winner text, team_id_loser text, league_id_loser text, wins integer, losses integer, ties integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings';"
  },
  {
    "instruction": "Return the maximum and minimum customer codes.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));",
    "output": "SELECT max(customer_code), min(customer_code) FROM Customers"
  },
  {
    "instruction": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name, T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T2.balance DESC LIMIT 3"
  },
  {
    "instruction": "What is the id, name and nationality of the architect who built most mills?",
    "input": "create table \"architect\" (\"id\" text, \"name\" text, \"nationality\" text, \"gender\" text, primary key(\"id\"));create table \"mill\" (\"architect_id\" int, \"id\" int, \"location\" text, \"name\" text, \"type\" text, \"built_year\" int, \"notes\" text, primary key (\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));",
    "output": "SELECT T1.id, T1.name, T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Please show the team that has the most number of technicians.",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Grape, Appelation, Name FROM WINE WHERE Score > 93 ORDER BY Name"
  },
  {
    "instruction": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));",
    "output": "SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the number of dorms that have some amenity.",
    "input": "create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));",
    "output": "SELECT count(DISTINCT dormid) FROM has_amenity"
  },
  {
    "instruction": "What are the first names of all students who took ACCT-211 and received a C?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'"
  },
  {
    "instruction": "where is a good arabic restaurant in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "what states neighbor kentucky",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "what are the parsing papers that have the most citations ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "What is the last name of the musician who was in the most songs?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Show the names of editors of age either 24 or 25.",
    "input": "create table \"editor\" (\"Editor_ID\" int, \"Name\" text, \"Age\" real, primary key (\"Editor_ID\"));",
    "output": "SELECT Name FROM editor WHERE Age = 24 OR Age = 25"
  },
  {
    "instruction": "Find the name and credit score of the customers who have some loans.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT DISTINCT T1.cust_name, T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id"
  },
  {
    "instruction": "Find the id and address of the shops whose score is below the average score.",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Address\" text, \"Num_of_staff\" text, \"Score\" real, \"Open_Year\" text, primary key (\"Shop_ID\"));create table \"shop\" (\"Shop_ID\" int, \"Address\" text, \"Num_of_staff\" text, \"Score\" real, \"Open_Year\" text, primary key (\"Shop_ID\"));",
    "output": "SELECT shop_id, address FROM shop WHERE score < (SELECT avg(score) FROM shop)"
  },
  {
    "instruction": "which state has the lowest point that borders idaho",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"idaho\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"idaho\" );"
  },
  {
    "instruction": "How many budget types do we have?",
    "input": "create table ref_budget_codes (budget_type_code char(15) not null, budget_type_description varchar(255) not null, primary key (budget_type_code));",
    "output": "SELECT count(*) FROM Ref_budget_codes"
  },
  {
    "instruction": "What are the titles of all the Aerosmith albums?",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);create table artists (id integer primary key autoincrement, name varchar(120));",
    "output": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";"
  },
  {
    "instruction": "Find the total number of reviews written in March",
    "input": "create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT COUNT ( DISTINCT text ) FROM review WHERE MONTH = \"March\";"
  },
  {
    "instruction": "List the name of the phone model launched in year 2002 and with the highest RAM size.",
    "input": "create table \"chip_model\" (\"Model_name\" text, \"Launch_year\" real, \"RAM_MiB\" real, \"ROM_MiB\" real, \"Slots\" text, \"WiFi\" text, \"Bluetooth\" text, primary key (\"Model_name\"));create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;"
  },
  {
    "instruction": "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100"
  },
  {
    "instruction": "Find all tips for \" Cafe Zinho \" in Texas .",
    "input": "create table \"tip\" (\"tip_id\" int, \"business_id\" text, \"text\" text, \"user_id\" text, \"likes\" int, \"year\" int, \"month\" text, primary key(\"tip_id\") foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.name = \"Cafe Zinho\" AND t1.state = \"Texas\";"
  },
  {
    "instruction": "how many papers has Christopher D. Manning written ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Christopher D. Manning\";"
  },
  {
    "instruction": "Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = \"Der Kapitan\" AND T1.StagePosition = \"back\""
  },
  {
    "instruction": "What is the location name of the document \"Robin CV\"?",
    "input": "create table all_documents (document_id integer not null, date_stored datetime, document_type_code char(15) not null, document_name char(255), document_description char(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (date_stored) references ref_calendar (calendar_date));create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));create table ref_locations (location_code char(15) not null, location_name varchar(255) not null, location_description varchar(255) not null, primary key (location_code));",
    "output": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = \"Robin CV\""
  },
  {
    "instruction": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));",
    "output": "SELECT T1.Date_Claim_Made, T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.Claim_id HAVING count(*) > 2 UNION SELECT T1.Date_Claim_Made, T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id WHERE T1.Amount_Claimed = ( SELECT max(Amount_Claimed) FROM Claims )"
  },
  {
    "instruction": "Eric C. Kerrigan 's Liquid Automatica paper",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid = t3.keyphraseid JOIN writes AS t4 ON t4.paperid = t5.paperid JOIN paper AS t2 ON t4.paperid = t2.paperid JOIN author AS t1 ON t4.authorid = t1.authorid JOIN venue AS t6 ON t6.venueid = t2.venueid WHERE t1.authorname = \"Eric C. Kerrigan\" AND t3.keyphrasename = \"Liquid\" AND t6.venuename = \"Automatica\";"
  },
  {
    "instruction": "Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT T1.claim_id, T1.date_claim_made, T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.claim_id HAVING count(*) = 1"
  },
  {
    "instruction": "Find the name of projects that require between 100 and 300 hours of work.",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300"
  },
  {
    "instruction": "What is the number of faculty at Long Beach State University in 2002?",
    "input": "create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2002 AND T2.campus = \"Long Beach State University\""
  },
  {
    "instruction": "What are each document's location code, and starting date and ending data in that location?",
    "input": "create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT location_code, date_in_location_from, date_in_locaton_to FROM Document_locations"
  },
  {
    "instruction": "What are the majors of male (sex is M) students?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Major FROM STUDENT WHERE Sex = \"M\""
  },
  {
    "instruction": "What are the names of teams from universities that have a below average enrollment?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < (SELECT avg(enrollment) FROM university)"
  },
  {
    "instruction": "Show the ids of all employees who have either destroyed a document or made an authorization to do this.",
    "input": "create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed"
  },
  {
    "instruction": "What are the name and ID of the product bought the most.",
    "input": "create table `order_items` (`order_id` integer not null, `product_id` integer not null, `order_quantity` varchar(15), foreign key (`product_id`) references `products`(`product_id`), foreign key (`order_id`) references `customer_orders`(`order_id`));create table `products` (`product_id` integer primary key, `product_details` varchar(255));",
    "output": "SELECT t2.product_details, t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1"
  },
  {
    "instruction": "What are the names and countries of origin for the artists who produced the top three highly rated songs.",
    "input": "create table artist(artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating DESC LIMIT 3"
  },
  {
    "instruction": "Find all movies featuring \" Robin Wright \"",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid WHERE t1.name = \"Robin Wright\";"
  },
  {
    "instruction": "What papers were written by authors Peter Mertens and Dina Barbian",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "What is the order date of each booking?",
    "input": "create table bookings (booking_id integer not null , customer_id integer not null, workshop_group_id varchar(100) not null, status_code char(15) not null, store_id integer not null, order_date datetime not null, planned_delivery_date datetime not null, actual_delivery_date datetime not null, other_order_details varchar(255), primary key (booking_id), unique (booking_id), foreign key (customer_id) references clients (client_id), foreign key (workshop_group_id) references drama_workshop_groups (workshop_group_id));",
    "output": "SELECT Order_Date FROM BOOKINGS"
  },
  {
    "instruction": "What is the number of states that has some college whose enrollment is larger than the average enrollment?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT count(DISTINCT state) FROM college WHERE enr > (SELECT avg(enr) FROM college)"
  },
  {
    "instruction": "How many rooms does the Lamberton building have?",
    "input": "create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));",
    "output": "SELECT count(*) FROM classroom WHERE building = 'Lamberton'"
  },
  {
    "instruction": "List all information about the assessment notes sorted by date in ascending order.",
    "input": "create table `assessment_notes` (`notes_id` integer not null , `student_id` integer, `teacher_id` integer not null, `date_of_notes` datetime, `text_of_notes` varchar(255), `other_details` varchar(255), foreign key (`student_id`) references `students`(`student_id`), foreign key (`teacher_id`) references `teachers`(`teacher_id`));",
    "output": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC"
  },
  {
    "instruction": "How many distinct incident type codes are there?",
    "input": "create table `behavior_incident` (`incident_id` integer primary key, `incident_type_code` varchar(10) not null, `student_id` integer not null, `date_incident_start` datetime, `date_incident_end` datetime, `incident_summary` varchar(255), `recommendations` varchar(255), `other_details` varchar(255), foreign key (`incident_type_code`) references `ref_incident_type`(`incident_type_code`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident"
  },
  {
    "instruction": "what datasets did jitendra malik use in his papers ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t1.authorname = \"jitendra malik\";"
  },
  {
    "instruction": "Find the average age of students who are living in the dorm with the largest capacity.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table lives_in (stuid integer, dormid integer, room_number\tinteger, foreign key (stuid) references `student`(stuid), foreign key (dormid) references `dorm`(dormid));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.student_capacity = (SELECT max(student_capacity) FROM dorm)"
  },
  {
    "instruction": "For each product which has problems, what are the number of problems and the product id?",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `product` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT count(*), T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id"
  },
  {
    "instruction": "what is the longest river in the largest state",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );"
  },
  {
    "instruction": "Count the number of different ranks of captain.",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT count(DISTINCT rank) FROM captain"
  },
  {
    "instruction": "What is the average age for all managers?",
    "input": "create table \"manager\" (\"Manager_ID\" int, \"Name\" text, \"Country\" text, \"Working_year_starts\" text, \"Age\" int, \"Level\" int, primary key (\"Manager_ID\"));",
    "output": "SELECT avg(Age) FROM manager"
  },
  {
    "instruction": "How many Bars in Dallas have a rating above 3.5 ?",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t1.rating > 3.5 AND t2.category_name = \"Bars\";"
  },
  {
    "instruction": "What are the songs in volumes that have resulted in a nomination at music festivals?",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T1.Result = \"Nominated\""
  },
  {
    "instruction": "Which colleges have both authors with submission score above 90 and authors with submission score below 80?",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT College FROM submission WHERE Scores > 90 INTERSECT SELECT College FROM submission WHERE Scores < 80"
  },
  {
    "instruction": "Who wrote on the topic of Bacterial Wilt in 2016 ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid JOIN author AS t5 ON t3.authorid = t5.authorid WHERE t2.keyphrasename = \"Bacterial Wilt\" AND t4.year = 2016;"
  },
  {
    "instruction": "How many CSU campuses are there?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT count(*) FROM campuses"
  },
  {
    "instruction": "What are the different names and ages of every friend of either Dan or alice?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT DISTINCT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' OR T2.friend = 'Alice'"
  },
  {
    "instruction": "Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T1.name != 'Brown'"
  },
  {
    "instruction": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\""
  },
  {
    "instruction": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);",
    "output": "SELECT T2.building, T2.room_number, T2.semester, T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title"
  },
  {
    "instruction": "List the file size and format for all songs that have resolution lower than 800.",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT DISTINCT T1.file_size, T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 800"
  },
  {
    "instruction": "Find the number of professors with a Ph.D. degree in each department.",
    "input": "create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT count(*), dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code"
  },
  {
    "instruction": "What are the issue dates of volumes associated with the artist \"Gorgoroth\"?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = \"Gorgoroth\""
  },
  {
    "instruction": "What are the first names and date of birth of professors teaching course ACCT-211?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT DISTINCT T1.EMP_FNAME, T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\""
  },
  {
    "instruction": "Where is the headquarter of the company founded by James?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT headquarter FROM manufacturers WHERE founder = 'James'"
  },
  {
    "instruction": "What are the ids and details of all accounts?",
    "input": "create table accounts (account_id integer not null, statement_id integer not null, account_details varchar(255), primary key (account_id), foreign key (statement_id) references statements (statement_id));",
    "output": "SELECT account_id, account_details FROM Accounts"
  },
  {
    "instruction": "return me the abstract of \" Making database systems usable \" .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT abstract FROM publication WHERE title = \"Making database systems usable\";"
  },
  {
    "instruction": "what was the first deep learning paper ?",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));",
    "output": "SELECT DISTINCT t2.datasetid, t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN paper AS t4 ON t4.paperid = t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid = t5.keyphraseid WHERE t5.keyphrasename = \"deep learning\" ORDER BY t4.year ASC;"
  },
  {
    "instruction": "Find the common login name of course authors and students.",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students"
  },
  {
    "instruction": "What is the most common participant type?",
    "input": "create table participants (participant_id integer not null, participant_type_code char(15) not null, participant_details varchar(255), primary key (participant_id));",
    "output": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many companies were created by Andy?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT count(*) FROM manufacturers WHERE founder = 'Andy'"
  },
  {
    "instruction": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3"
  },
  {
    "instruction": "Show all information on the airport that has the largest number of international passengers.",
    "input": "create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1"
  },
  {
    "instruction": "What is the count of distinct employees with certificates?",
    "input": "create table certificate(eid number(9, 0), aid number(9, 0), primary key(eid, aid), foreign key(\"eid\") references `employee`(\"eid\"), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT count(DISTINCT eid) FROM Certificate"
  },
  {
    "instruction": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.",
    "input": "create table \"operate_company\" (\"id\" int, \"name\" text, \"Type\" text, \"Principal_activities\" text, \"Incorporated_in\" text, \"Group_Equity_Shareholding\" real, primary key (\"id\"));create table \"flight\" (\"id\" int, \"Vehicle_Flight_number\" text, \"Date\" text, \"Pilot\" text, \"Velocity\" real, \"Altitude\" real, \"airport_id\" int, \"company_id\" int, primary key (\"id\"), foreign key (\"airport_id\") references `airport`(\"id\"), foreign key (\"company_id\") references `operate_company`(\"id\"));create table \"operate_company\" (\"id\" int, \"name\" text, \"Type\" text, \"Principal_activities\" text, \"Incorporated_in\" text, \"Group_Equity_Shareholding\" real, primary key (\"id\"));create table \"flight\" (\"id\" int, \"Vehicle_Flight_number\" text, \"Date\" text, \"Pilot\" text, \"Velocity\" real, \"Altitude\" real, \"airport_id\" int, \"company_id\" int, primary key (\"id\"), foreign key (\"airport_id\") references `airport`(\"id\"), foreign key (\"company_id\") references `operate_company`(\"id\"));",
    "output": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Catering services'"
  },
  {
    "instruction": "What are the names of captains that have either the rank Midshipman or Lieutenant?",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT name FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant'"
  },
  {
    "instruction": "What are the full names and department ids for the lowest paid employees across all departments.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)"
  },
  {
    "instruction": "What is the last name of the professor whose office is located in DRE 102, and when were they hired?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T1.emp_lname, T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'"
  },
  {
    "instruction": "Count the number of different scientists assigned to any project.",
    "input": "create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));",
    "output": "SELECT count(DISTINCT scientist) FROM assignedto"
  },
  {
    "instruction": "Find all restaurant reviewed by Patrick in \" Dallas \"",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t1.city = \"Dallas\" AND t2.category_name = \"restaurant\" AND t4.name = \"Patrick\";"
  },
  {
    "instruction": "Count the number of colors that are not used in any products.",
    "input": "create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )"
  },
  {
    "instruction": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT state, acc_type, credit_score FROM customer WHERE no_of_loans = 0"
  },
  {
    "instruction": "Which rank has the smallest number of faculty members?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "Give the songs included in volumes that have more than 1 week on top.",
    "input": "create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT Song FROM volume WHERE Weeks_on_Top > 1"
  },
  {
    "instruction": "What are the first names and last names of the students that minor in the department with DNO 140.",
    "input": "create table minor_in (stuid integer, dno integer, foreign key(stuid) references student(stuid), foreign key(dno) references department(dno));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT T2.Fname, T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140"
  },
  {
    "instruction": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table accounts (custid bigint not null primary key, name varchar(64) not null);create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT avg(balance) FROM savings)"
  },
  {
    "instruction": "Show the distinct leader names of colleges associated with members from country \"Canada\".",
    "input": "create table \"college\" (\"College_ID\" int, \"Name\" text, \"Leader_Name\" text, \"College_Location\" text, primary key (\"College_ID\"));create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Country\" text, \"College_ID\" int, primary key (\"Member_ID\"), foreign key (\"College_ID\") references `college`(\"College_ID\"));",
    "output": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID WHERE T2.Country = \"Canada\""
  },
  {
    "instruction": "What is the last date that a staff member left a project?",
    "input": "create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));",
    "output": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of the ships that are not from the United States?",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT Name FROM ship WHERE Nationality != \"United States\""
  },
  {
    "instruction": "What are the names of the songs by the artist whose last name is \"Heilo\"?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.Lastname = \"Heilo\""
  },
  {
    "instruction": "Return the code of the city that has the most students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the count and code of the job has most employees.",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);",
    "output": "SELECT emp_jobcode, count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems.",
    "input": "create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));create table `problems` (`problem_id` integer primary key, `product_id` integer not null, `closure_authorised_by_staff_id` integer not null, `reported_by_staff_id` integer not null, `date_problem_reported` datetime not null, `date_problem_closed` datetime, `problem_description` varchar(255), `other_problem_details` varchar(255), foreign key (`closure_authorised_by_staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `product`(`product_id`), foreign key (`reported_by_staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));",
    "output": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\""
  },
  {
    "instruction": "Which building has most faculty members?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "For each grade 0 classroom, return the classroom number and the count of students.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT classroom, count(*) FROM list WHERE grade = \"0\" GROUP BY classroom"
  },
  {
    "instruction": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.",
    "input": "create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1"
  },
  {
    "instruction": "What is the average number of customers across banks in the state of Utah?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT avg(no_of_customers) FROM bank WHERE state = 'Utah'"
  },
  {
    "instruction": "what state has the smallest population",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE population = ( SELECT MIN ( population ) FROM state );"
  },
  {
    "instruction": "How many escape games are there in Madison ?",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Madison\" AND t2.category_name = \"escape games\";"
  },
  {
    "instruction": "What are the names of races held after 12:00:00 or before 09:00:00?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\""
  },
  {
    "instruction": "What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code = \"PIT\""
  },
  {
    "instruction": "Show me the classrooms grade 5 is using.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT DISTINCT classroom FROM list WHERE grade = 5"
  },
  {
    "instruction": "When was the school with the largest enrollment founded?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
  },
  {
    "instruction": "Find the names of all instructors who have taught some course and the course_id.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table teaches (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references instructor (id)\n        ON delete cascade);",
    "output": "SELECT name, course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID"
  },
  {
    "instruction": "give me some good restaurants in the bay area ?",
    "input": "create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t2.house_number, t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = \"region0\" ) AND t1.rating > 2.5;"
  },
  {
    "instruction": "What are the entry names of catalog with the attribute possessed by most entries.",
    "input": "create table `catalog_contents` (`catalog_entry_id` integer primary key, `catalog_level_number` integer not null, `parent_entry_id` integer, `previous_entry_id` integer, `next_entry_id` integer, `catalog_entry_name` varchar(80), `product_stock_number` varchar(50), `price_in_dollars` double null, `price_in_euros` double null, `price_in_pounds` double null, `capacity` varchar(20), `length` varchar(20), `height` varchar(20), `width` varchar(20), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));create table `catalog_contents_additional_attributes` (`catalog_entry_id` integer not null, `catalog_level_number` integer not null, `attribute_id` integer not null, `attribute_value` varchar(255) not null, foreign key (`catalog_entry_id`) references `catalog_contents`(`catalog_entry_id`), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));create table `catalog_contents_additional_attributes` (`catalog_entry_id` integer not null, `catalog_level_number` integer not null, `attribute_id` integer not null, `attribute_value` varchar(255) not null, foreign key (`catalog_entry_id`) references `catalog_contents`(`catalog_entry_id`), foreign key (`catalog_level_number`) references `catalog_structure`(`catalog_level_number`));",
    "output": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "How many rooms have king beds? Report the number for each decor type.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT decor, count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;"
  },
  {
    "instruction": "What destination has the fewest number of flights?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
  },
  {
    "instruction": "Display the first and last name, and salary for those employees whose first name is ending with the letter m.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, salary FROM employees WHERE first_name LIKE '%m'"
  },
  {
    "instruction": "Show the number of documents with document type code CV or BK.",
    "input": "create table all_documents (document_id integer not null, date_stored datetime, document_type_code char(15) not null, document_name char(255), document_description char(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (date_stored) references ref_calendar (calendar_date));",
    "output": "SELECT count(*) FROM All_documents WHERE document_type_code = \"CV\" OR document_type_code = \"BK\""
  },
  {
    "instruction": "Show the average amount of transactions for different investors.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT investor_id, avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id"
  },
  {
    "instruction": "Find the number of users who posted some tweets.",
    "input": "create table `tweets` (`id` bigint(20) not null, `uid` int(11) not null, `text` char(140) not null, `createdate` datetime default current_timestamp, primary key (`id`), foreign key (`uid`) references `user_profiles`(`uid`));",
    "output": "SELECT count(DISTINCT UID) FROM tweets"
  },
  {
    "instruction": "List the official name and status of the city with the largest population.",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1"
  },
  {
    "instruction": "Show the number of projects.",
    "input": "create table projects (project_id integer not null, project_details varchar(255), primary key (project_id));",
    "output": "SELECT count(*) FROM Projects"
  },
  {
    "instruction": "give me a good restaurant in the bay area ?",
    "input": "create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t2.house_number, t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = \"region0\" ) AND t1.rating > 2.5;"
  },
  {
    "instruction": "How many allergy entries are there?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT count(DISTINCT allergy) FROM Allergy_type"
  },
  {
    "instruction": "Show all payment method codes and the number of orders for each code.",
    "input": "create table invoices (invoice_id integer not null, order_id integer not null, payment_method_code char(15), product_id integer not null, order_quantity varchar(288), other_item_details varchar(255), order_item_id integer not null, primary key (invoice_id), foreign key (order_id) references customer_orders (order_id), foreign key (order_id) references bookings (booking_id), foreign key (payment_method_code) references ref_payment_methods (payment_method_code));",
    "output": "SELECT payment_method_code, count(*) FROM INVOICES GROUP BY payment_method_code"
  },
  {
    "instruction": "return me the paper in VLDB conference with more than 200 citations .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = \"VLDB\" AND t2.citation_num > 200;"
  },
  {
    "instruction": "what states border states that border colorado",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"colorado\" );"
  },
  {
    "instruction": "How many acting statuses are there?",
    "input": "create table \"management\" (\"department_ID\" int, \"head_ID\" int, \"temporary_acting\" text, primary key (\"Department_ID\",\"head_ID\"), foreign key (\"Department_ID\") references `department`(\"Department_ID\"), foreign key (\"head_ID\") references `head`(\"head_ID\"));",
    "output": "SELECT count(DISTINCT temporary_acting) FROM management"
  },
  {
    "instruction": "How many drivers were in the Australian Grand Prix held in 2009?",
    "input": "create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009"
  },
  {
    "instruction": "How many faculty members did the university that conferred the most degrees in 2002 have?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1"
  },
  {
    "instruction": "What are all the instruments used by the musician with the last name \"Heilo\"?",
    "input": "create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = \"Heilo\""
  },
  {
    "instruction": "What is the total revenue of each manufacturer?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT sum(revenue), name FROM manufacturers GROUP BY name"
  },
  {
    "instruction": "What are the names of parties that have no members?",
    "input": "create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));",
    "output": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)"
  },
  {
    "instruction": "What are the names of the wrestlers, ordered descending by days held?",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT Name FROM wrestler ORDER BY Days_held DESC"
  },
  {
    "instruction": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT Name FROM WINE WHERE YEAR < 2000 OR YEAR > 2010"
  },
  {
    "instruction": "How many students live in HKG or CHI?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM Student WHERE city_code = \"HKG\" OR city_code = \"CHI\""
  },
  {
    "instruction": "journal articles by mohammad rastegari",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"mohammad rastegari\" AND t3.journalid >= 0;"
  },
  {
    "instruction": "What are the names of projects that have taken longer than the average number of hours for all projects?",
    "input": "create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT name FROM projects WHERE hours > (SELECT avg(hours) FROM projects)"
  },
  {
    "instruction": "how is the most cited author in CVPR ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid ), t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid JOIN cite AS t4 ON t1.paperid = t4.citedpaperid WHERE t3.venuename = \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;"
  },
  {
    "instruction": "What are the name and id of the team with the most victories in 2008 postseason?",
    "input": "create table postseason (year integer, round text, team_id_winner text, league_id_winner text, team_id_loser text, league_id_loser text, wins integer, losses integer, ties integer);create table team (year integer, league_id text, team_id text, franchise_id text, div_id text, rank integer, g integer, ghome numeric, w integer, l integer, div_win text, wc_win text, lg_win text, ws_win text, r integer, ab integer, h integer, double integer, triple integer, hr integer, bb integer, so numeric, sb numeric, cs numeric, hbp numeric, sf numeric, ra integer, er integer, era numeric, cg integer, sho integer, sv integer, ipouts integer, ha integer, hra integer, bba integer, soa integer, e integer, dp numeric, fp numeric, name text, park text, attendance numeric, bpf integer, ppf integer, team_id_br text, team_id_lahman45 text, team_id_retro text);",
    "output": "SELECT T2.name, T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "instruction": "What is the sum of revenue from companies with headquarters in Austin?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT sum(revenue) FROM manufacturers WHERE headquarter = 'Austin'"
  },
  {
    "instruction": "How many rooms in each building have a capacity of over 50?",
    "input": "create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));",
    "output": "SELECT count(*), building FROM classroom WHERE capacity > 50 GROUP BY building"
  },
  {
    "instruction": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"lapTimes\" (\"raceId\" integer, \"driverId\" integer, \"lap\" integer, \"position\" integer, \"time\" text, \"milliseconds\" integer, primary key(\"raceId\", \"driverId\", \"lap\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT DISTINCT T1.driverid, T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds > 100000"
  },
  {
    "instruction": "List the states which have between 2 to 4 staffs living there.",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;"
  },
  {
    "instruction": "What are the names of the songs that are modern or sung in English?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT song_name FROM song WHERE genre_is = \"modern\" OR languages = \"english\""
  },
  {
    "instruction": "Please show different denominations and the corresponding number of schools.",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT Denomination, COUNT(*) FROM school GROUP BY Denomination"
  },
  {
    "instruction": "Which college has the most authors with submissions?",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the maximum and average capacity among rooms in each building.",
    "input": "create table classroom (building varchar(15), room_number varchar(7), capacity numeric(4, 0), primary key (building, room_number));",
    "output": "SELECT max(capacity), avg(capacity), building FROM classroom GROUP BY building"
  },
  {
    "instruction": "What are the names of teams that do no have match season record?",
    "input": "create table `team` (`team_id` int, `name` text, primary key (`team_id`));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
  },
  {
    "instruction": "Find the salaries of all distinct instructors that are less than the largest salary.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT max(salary) FROM instructor)"
  },
  {
    "instruction": "Find the total checkins in \" Brighton Heights \" neighbourhood",
    "input": "create table \"checkin\" (\"cid\" int, \"business_id\" text, \"count\" int, \"day\" text, primary key(\"cid\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"neighbourhood\" (\"id\" int, \"business_id\" text, \"neighbourhood_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT SUM ( t3.count ) FROM checkin AS t3 JOIN business AS t1 ON t3.business_id = t1.business_id JOIN neighbourhood AS t2 ON t2.business_id = t1.business_id WHERE t2.neighbourhood_name = \"Brighton Heights\";"
  },
  {
    "instruction": "Return the hometown that is most common among gymnasts.",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the names of all modern rooms with a base price below $160 and two beds.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName FROM Rooms WHERE basePrice < 160 AND beds = 2 AND decor = 'modern';"
  },
  {
    "instruction": "List the names of counties in descending order of population.",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT Name FROM county_public_safety ORDER BY Population DESC"
  },
  {
    "instruction": "Count the number of different positions in the club \"Bootup Baltimore\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));",
    "output": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = \"Bootup Baltimore\""
  },
  {
    "instruction": "Give the names of people who did not participate in the candidate election.",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)"
  },
  {
    "instruction": "How many different locations does each school have?",
    "input": "create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT count(DISTINCT dept_address), school_code FROM department GROUP BY school_code"
  },
  {
    "instruction": "what is the longest river in the states that border tennessee",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name = \"tennessee\" );"
  },
  {
    "instruction": "How many citation noah a smith has ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"noah a smith\";"
  },
  {
    "instruction": "What is the name of the most recent movie?",
    "input": "create table movie(mid int primary key, title text, year int, director text);create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT title FROM Movie WHERE YEAR = (SELECT max(YEAR) FROM Movie)"
  },
  {
    "instruction": "What are the last names of employees who serve at most 20 customers?",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `employee` (`employeeid` integer not null , `lastname` varchar(20) not null , `firstname` varchar(20) not null , `title` varchar(30) default null , `reportsto` integer default null , `birthdate` datetime default null , `hiredate` datetime default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) default null , primary key (`employeeid`) , constraint `fk_employeereportsto` foreign key (`reportsto`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20"
  },
  {
    "instruction": "What are the average ages for male and female students?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT avg(age), sex FROM Student GROUP BY sex"
  },
  {
    "instruction": "Show the id and details for the investors who have the top 3 number of transactions.",
    "input": "create table `investors` (`investor_id` integer primary key, `investor_details` varchar(255));create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT T2.investor_id, T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3"
  },
  {
    "instruction": "What is the name and age of every male? Order the results by age.",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT name FROM Person WHERE gender = 'male' ORDER BY age"
  },
  {
    "instruction": "Show the official names of the cities that have hosted more than one competition.",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));create table \"farm_competition\" (\"Competition_ID\" int, \"Year\" int, \"Theme\" text, \"Host_city_ID\" int, \"Hosts\" text, primary key (\"Competition_ID\"), foreign key (`host_city_id`) references `city`(`city_id`));",
    "output": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1"
  },
  {
    "instruction": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));",
    "output": "SELECT Amount_Settled, Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1"
  },
  {
    "instruction": "For each submission, show the author and their affiliated college.",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT Author, College FROM submission"
  },
  {
    "instruction": "What are the names of enzymes who does not produce 'Heme'?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT name FROM enzyme WHERE product != 'Heme'"
  },
  {
    "instruction": "Show cinema name, film title, date, and price for each record in schedule.",
    "input": "create table \"schedule\" (\"Cinema_ID\" int, \"Film_ID\" int, \"Date\" text, \"Show_times_per_day\" int, \"Price\" float, primary key (\"Cinema_ID\",\"Film_ID\"), foreign key (`film_id`) references `film`(`film_id`), foreign key (`cinema_id`) references `cinema`(`cinema_id`));create table \"film\" (\"Film_ID\" int, \"Rank_in_series\" int, \"Number_in_season\" int, \"Title\" text, \"Directed_by\" text, \"Original_air_date\" text, \"Production_code\" text, primary key (\"Film_ID\"));create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT T3.name, T2.title, T1.date, T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id"
  },
  {
    "instruction": "Find the names of goods that receive a rating of 10.",
    "input": "create table `item` (`i_id` integer not null , `title` varchar(20) default null , primary key (`i_id`));create table `review` (`a_id` integer not null primary key , `u_id` integer not null , `i_id` integer not null , `rating` integer default null , `rank` integer default null , foreign key (`u_id`) references `useracct`(`u_id`) , foreign key (`i_id`) references `item`(`i_id`));",
    "output": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating = 10"
  },
  {
    "instruction": "What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT first_name, last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;"
  },
  {
    "instruction": "chi papers",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"chi\";"
  },
  {
    "instruction": "Find the name of services that have been used for more than 2 times in first notification of loss.",
    "input": "create table first_notification_of_loss (fnol_id integer not null, customer_id integer not null, policy_id integer not null, service_id integer not null, primary key (fnol_id), unique (fnol_id), foreign key (service_id) references services (service_id), foreign key (customer_id, policy_id) references customers_policies (customer_id, policy_id));create table services (service_id integer not null, service_name varchar(40), primary key (service_id));",
    "output": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING count(*) > 2"
  },
  {
    "instruction": "how many states are there",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT COUNT ( state_name ) FROM state;"
  },
  {
    "instruction": "What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?",
    "input": "create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));",
    "output": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'"
  },
  {
    "instruction": "List all user ids with name Michelle",
    "input": "create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT user_id FROM USER WHERE name = \"Michelle\";"
  },
  {
    "instruction": "Show the id and name of the employee with maximum salary.",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT eid, name FROM Employee ORDER BY salary DESC LIMIT 1"
  },
  {
    "instruction": "Return the name of the mountain with the greatest height.",
    "input": "create table \"mountain\" (\"Mountain_ID\" int, \"Name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key (\"Mountain_ID\"));",
    "output": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"
  },
  {
    "instruction": "what is the size of the capital of texas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = ( SELECT capital FROM state WHERE state_name = \"texas\" );"
  },
  {
    "instruction": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT departure_date, arrival_date FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\""
  },
  {
    "instruction": "What are the delegate and name of the county they belong to, for each county?",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT T2.Delegate, T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District"
  },
  {
    "instruction": "For grants that have descriptions of Regular and Initial Applications, what are their start dates?",
    "input": "create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `documents` (`document_id` integer primary key, `document_type_code` varchar(10), `grant_id` integer not null, `sent_date` datetime not null, `response_received_date` datetime not null, `other_details` varchar(255) not null, foreign key (`document_type_code`) references `document_types`(`document_type_code`), foreign key (`grant_id`) references `grants`(`grant_id`));create table `document_types` (`document_type_code` varchar(10) primary key, `document_description` varchar(255) not null);create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `documents` (`document_id` integer primary key, `document_type_code` varchar(10), `grant_id` integer not null, `sent_date` datetime not null, `response_received_date` datetime not null, `other_details` varchar(255) not null, foreign key (`document_type_code`) references `document_types`(`document_type_code`), foreign key (`grant_id`) references `grants`(`grant_id`));create table `document_types` (`document_type_code` varchar(10) primary key, `document_description` varchar(255) not null);",
    "output": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'"
  },
  {
    "instruction": "How many roles are there?",
    "input": "create table roles (role_code char(15) not null, role_name varchar(255), role_description varchar(255), primary key (role_code));",
    "output": "SELECT count(*) FROM ROLES"
  },
  {
    "instruction": "What are the first and last name for those employees who works either in department 70 or 90?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name FROM employees WHERE department_id = 70 OR department_id = 90"
  },
  {
    "instruction": "What are the dates of the assessment notes?",
    "input": "create table `assessment_notes` (`notes_id` integer not null , `student_id` integer, `teacher_id` integer not null, `date_of_notes` datetime, `text_of_notes` varchar(255), `other_details` varchar(255), foreign key (`student_id`) references `students`(`student_id`), foreign key (`teacher_id`) references `teachers`(`teacher_id`));",
    "output": "SELECT date_of_notes FROM Assessment_Notes"
  },
  {
    "instruction": "character recognition papers earlier than 2010",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"character recognition\" AND t3.year < 2010;"
  },
  {
    "instruction": "where is a good restaurant in the yosemite and mono lake area for french food ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"yosemite and mono lake area\" AND t1.food_type = \"french\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.major = \"600\""
  },
  {
    "instruction": "Find the name of the artist who made the album \"Balls to the Wall\".",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));",
    "output": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = \"Balls to the Wall\""
  },
  {
    "instruction": "What is the average number of people injured by all perpetrators?",
    "input": "create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT avg(Injured) FROM perpetrator"
  },
  {
    "instruction": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.",
    "input": "create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));create table claims (claim_id integer not null, policy_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, primary key (claim_id), foreign key (policy_id) references customer_policies (policy_id));",
    "output": "SELECT Date_Claim_Made, Date_Claim_Settled FROM Claims WHERE Amount_Claimed > ( SELECT avg(Amount_Claimed) FROM Claims )"
  },
  {
    "instruction": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id, first_name, last_name, job_id FROM employees WHERE salary > ( SELECT max(salary) FROM employees WHERE job_id = 'PU_MAN' )"
  },
  {
    "instruction": "who does Noah A Smith collaborate with ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Noah A Smith\";"
  },
  {
    "instruction": "Find the first and last names of people who payed more than the rooms' base prices.",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT T1.firstname, T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Rate - T2.basePrice > 0"
  },
  {
    "instruction": "Show student ids who don't have any sports.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo"
  },
  {
    "instruction": "What is the average price for flights from Los Angeles to Honolulu.",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT avg(price) FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\""
  },
  {
    "instruction": "Find the job ID for those jobs which average salary is above 8000.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000"
  },
  {
    "instruction": "How many papers has Christopher D. Manning published ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Christopher D. Manning\";"
  },
  {
    "instruction": "What is the maximum enrollment across all schools?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT max(Enrollment) FROM university"
  },
  {
    "instruction": "What is the first name and job id for all employees in the Finance department?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));",
    "output": "SELECT T1.first_name, T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance'"
  },
  {
    "instruction": "List the project details of the projects with the research outcome described with the substring 'Published'.",
    "input": "create table `projects` (`project_id` integer primary key, `organisation_id` integer not null, `project_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));create table `research_outcomes` (`outcome_code` varchar(10) primary key, `outcome_description` varchar(255) not null);",
    "output": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'"
  },
  {
    "instruction": "Find the club which has the largest number of members majoring in \"600\".",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.major = \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what river is the longest one in the united states",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river );"
  },
  {
    "instruction": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_gender` varchar(1), `staff_name` varchar(80));create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));create table `staff` (`staff_id` integer primary key, `staff_gender` varchar(1), `staff_name` varchar(80));create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Sales Person\" EXCEPT SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Clerical Staff\""
  },
  {
    "instruction": "Find the name of customers who do not have an saving account.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = 'saving'"
  },
  {
    "instruction": "Find names and ids of all documents with document type code BK.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT document_name, document_id FROM Documents WHERE document_type_code = \"BK\""
  },
  {
    "instruction": "How many articles were published in the Cell journal in 2015 ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `journal` (`journalid` integer not null , `journalname` varchar(100) default null , primary key (`journalid`));create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid = t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid = t1.paperid WHERE t2.journalname = \"Cell\" AND t3.year = 2015;"
  },
  {
    "instruction": "Which category does the product named \"flax\" belong to?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));",
    "output": "SELECT product_category_code FROM products WHERE product_name = \"flax\""
  },
  {
    "instruction": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method_code` varchar(10) not null, `customer_code` varchar(20), `customer_name` varchar(80), `customer_address` varchar(255), `customer_phone` varchar(80), `customer_email` varchar(80));create table `customer_orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status_code` varchar(10) not null, `order_date` datetime not null, foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Pending\" ORDER BY T2.customer_id"
  },
  {
    "instruction": "Find the name, type, and flag of the ship that is built in the most recent year.",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));",
    "output": "SELECT name, TYPE, flag FROM ship ORDER BY built_year DESC LIMIT 1"
  },
  {
    "instruction": "For each staff id, what is the description of the role that is involved with the most number of projects?",
    "input": "create table `staff_roles` (`role_code` varchar(10) primary key, `role_description` varchar(255) not null);create table `project_staff` (`staff_id` double primary key, `project_id` integer not null, `role_code` varchar(10) not null, `date_from` datetime, `date_to` datetime, `other_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`role_code`) references `staff_roles`(`role_code`));create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));",
    "output": "SELECT T1.role_description, T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Select the name of the products with a price less than or equal to $200.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT name FROM products WHERE price <= 200"
  },
  {
    "instruction": "For the oldest movie listed, what is its average rating and title?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT avg(T1.stars), T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT min(YEAR) FROM Movie)"
  },
  {
    "instruction": "return me the number of papers in VLDB conference in \" University of Michigan \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t3 JOIN author AS t1 ON t3.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN conference AS t2 ON t5.cid = t2.cid WHERE t2.name = \"VLDB\" AND t3.name = \"University of Michigan\";"
  },
  {
    "instruction": "What is the name of the album that has the track Ball to the Wall?",
    "input": "create table albums (id integer primary key autoincrement, title varchar(160) not null, artist_id integer not null, foreign key (artist_id) references artists (id)\n        ON delete no action\n        ON update no action);create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";"
  },
  {
    "instruction": "For each player, show the team and the location of school they belong to.",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT T1.Team, T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID"
  },
  {
    "instruction": "What papers have been written by Peter Mertens and Dina Barbian .",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "Which countries do not have a stadium that was opened after 2006?",
    "input": "create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));create table \"stadium\" (\"ID\" int, \"name\" text, \"Capacity\" int, \"City\" text, \"Country\" text, \"Opening_year\" int, primary key (\"ID\"));",
    "output": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year > 2006"
  },
  {
    "instruction": "how many papers has Christopher D. Manning published ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Christopher D. Manning\";"
  },
  {
    "instruction": "How many papers written on ImageNet ?",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";"
  },
  {
    "instruction": "List the full name (first and last name), and salary for those employees who earn below 6000.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, last_name, salary FROM employees WHERE salary < 6000"
  },
  {
    "instruction": "Which city lives most of staffs? List the city name and number of staffs.",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.city, count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "instruction": "Show the product type and name for the products with price higher than 1000 or lower than 500.",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(15), `product_name` varchar(80), `product_price` double null);",
    "output": "SELECT product_type_code, product_name FROM products WHERE product_price > 1000 OR product_price < 500"
  },
  {
    "instruction": "What are the names, checking balances, and savings balances for all customers?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid"
  },
  {
    "instruction": "What are the different budget type codes, and how many documents are there for each?",
    "input": "create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));",
    "output": "SELECT budget_type_code, count(*) FROM Documents_with_expenses GROUP BY budget_type_code"
  },
  {
    "instruction": "Find the number of different product types.",
    "input": "create table `products` (`product_id` integer primary key, `product_type_code` varchar(10) not null, `product_name` varchar(80), `product_price` decimal(19, 4));",
    "output": "SELECT count(DISTINCT product_type_code) FROM products"
  },
  {
    "instruction": "What is the total number of points for all players?",
    "input": "create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT sum(Points) FROM player"
  },
  {
    "instruction": "How many customers have an active value of 1?",
    "input": "create table customer (customer_id smallint unsigned not null, store_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, email varchar(50) default null, address_id smallint unsigned not null, active boolean not null default true, create_date datetime not null, last_update timestamp default current_timestamp, primary key (customer_id), foreign key (address_id) references address (address_id), foreign key (store_id) references store (store_id));",
    "output": "SELECT count(*) FROM customer WHERE active = '1'"
  },
  {
    "instruction": "how many chinese places are there in the bay area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name WHERE t2.region = \"bay area\" AND t1.food_type = \"chinese\";"
  },
  {
    "instruction": "Count the number of distinct artists who have volumes.",
    "input": "create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT COUNT(DISTINCT Artist_ID) FROM volume"
  },
  {
    "instruction": "what major cities are located in kansas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population > 150000 AND state_name = \"kansas\";"
  },
  {
    "instruction": "What student id corresponds to the oldest student?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT StuID FROM Student WHERE age = (SELECT max(age) FROM Student)"
  },
  {
    "instruction": "Return the names of wrestlers with fewer than 100 days held.",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT Name FROM wrestler WHERE Days_held < 100"
  },
  {
    "instruction": "On what dates were employees without the letter M in their first names hired?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
  },
  {
    "instruction": "what rivers flow through the state with the largest population",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) );"
  },
  {
    "instruction": "Show the most common apartment type code.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What campus has the most degrees  conferrred over its entire existence?",
    "input": "create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1"
  },
  {
    "instruction": "what rivers flow through states that alabama borders",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = \"alabama\" );"
  },
  {
    "instruction": "Count the number of programs broadcast for each time section of a day.",
    "input": "create table \"broadcast\" (\"Channel_ID\" int, \"Program_ID\" int, \"Time_of_day\" text, primary key (\"Channel_ID\",\"Program_ID\"), foreign key (`channel_id`) references `channel`(`channel_id`), foreign key (`program_id`) references `program`(`program_id`));",
    "output": "SELECT count(*), time_of_day FROM broadcast GROUP BY time_of_day"
  },
  {
    "instruction": "Which city is the headquarter of the store named \"Blackville\" in?",
    "input": "create table \"store\" (\"Store_ID\" int, \"Store_Name\" text, \"Type\" text, \"Area_size\" real, \"Number_of_product_category\" real, \"Ranking\" int, primary key (\"Store_ID\"));create table \"store_district\" (\"Store_ID\" int, \"District_ID\" int, primary key (\"Store_ID\"), foreign key (`store_id`) references `store`(`store_id`), foreign key (`district_id`) references `district`(`district_id`));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.store_name = \"Blackville\""
  },
  {
    "instruction": "Show each location and the number of cinemas there.",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT LOCATION, count(*) FROM cinema GROUP BY LOCATION"
  },
  {
    "instruction": "Return the descriptions and names of the courses that have more than two students enrolled in.",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT T1.course_description, T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) > 2"
  },
  {
    "instruction": "Find the number of male (sex is 'M') students who have some food type allery.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT count(*) FROM Student WHERE sex = \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")"
  },
  {
    "instruction": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
    "input": "create table `invoices` (`invoice_number` integer primary key, `invoice_date` datetime, `invoice_details` varchar(255));",
    "output": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""
  },
  {
    "instruction": "How many tourists did not make any visit?",
    "input": "create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));create table visits (visit_id integer not null, tourist_attraction_id integer not null, tourist_id integer not null, visit_date datetime not null, visit_details varchar(40) not null, primary key (visit_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id), foreign key (tourist_id) references visitors (tourist_id));",
    "output": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )"
  },
  {
    "instruction": "Show theme and year for all exhibitions in an descending order of ticket price.",
    "input": "create table \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, primary key (\"Exhibition_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT theme, YEAR FROM exhibition ORDER BY ticket_price DESC"
  },
  {
    "instruction": "What are the names and descriptions of the all courses under the \"Computer Science\" subject?",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `subjects` (`subject_id` integer primary key, `subject_name` varchar(120));",
    "output": "SELECT T1.course_name, T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = \"Computer Science\""
  },
  {
    "instruction": "What are the first names and department numbers for employees with last name McEwen?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT first_name, department_id FROM employees WHERE last_name = 'McEwen'"
  },
  {
    "instruction": "Show the location codes with at least 3 documents.",
    "input": "create table document_locations (document_id integer not null, location_code char(15) not null, date_in_location_from datetime not null, date_in_locaton_to datetime, primary key (document_id, location_code, date_in_location_from), foreign key (location_code) references ref_locations (location_code), foreign key (date_in_location_from) references ref_calendar (calendar_date), foreign key (date_in_locaton_to) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*) >= 3"
  },
  {
    "instruction": "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));create table projects (project_id integer not null, project_details varchar(255), primary key (project_id));",
    "output": "SELECT document_name, document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'"
  },
  {
    "instruction": "Which engineer has visited the most times? Show the engineer id, first name and last name.",
    "input": "create table `maintenance_engineers` (`engineer_id` integer primary key, `company_id` integer not null, `first_name` varchar(50), `last_name` varchar(50), `other_details` varchar(255), foreign key (`company_id`) references `third_party_companies`(`company_id`));create table `engineer_visits` (`engineer_visit_id` integer primary key, `contact_staff_id` integer, `engineer_id` integer not null, `fault_log_entry_id` integer not null, `fault_status` varchar(10) not null, `visit_start_datetime` datetime, `visit_end_datetime` datetime, `other_visit_details` varchar(255), foreign key (`fault_log_entry_id`) references `fault_log`(`fault_log_entry_id`), foreign key (`engineer_id`) references `maintenance_engineers`(`engineer_id`), foreign key (`contact_staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.engineer_id, T1.first_name, T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the total grant amount of the organisations described as research?",
    "input": "create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `organisations` (`organisation_id` integer primary key, `organisation_type` varchar(10) not null, `organisation_details` varchar(255) not null, foreign key (`organisation_type`) references `organisation_types`(`organisation_type`));create table `organisation_types` (`organisation_type` varchar(10) primary key, `organisation_type_description` varchar(255) not null);",
    "output": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type WHERE T3.organisation_type_description = 'Research'"
  },
  {
    "instruction": "what is the name and age of the youngest winning pilot?",
    "input": "create table `pilot` (`pilot_id` int(11) not null, `name` varchar(50) not null, `age` int(11) not null, primary key (`pilot_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT t1.name, t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot ORDER BY t1.age LIMIT 1"
  },
  {
    "instruction": "Show the id and details of the investor that has the largest number of transactions.",
    "input": "create table `investors` (`investor_id` integer primary key, `investor_details` varchar(255));create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT T2.investor_id, T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Which districts have at least two addresses?",
    "input": "create table address (address_id smallint unsigned not null, address varchar(50) not null, address2 varchar(50) default null, district varchar(20) not null, city_id smallint unsigned not null, postal_code varchar(10) default null, phone varchar(20) not null, last_update timestamp not null default current_timestamp, primary key (address_id), foreign key (city_id) references city (city_id));",
    "output": "SELECT district FROM address GROUP BY district HAVING count(*) >= 2"
  },
  {
    "instruction": "Show the parties that have both representatives in New York state and representatives in Pennsylvania state.",
    "input": "create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));create table \"representative\" (\"Representative_ID\" int, \"Name\" text, \"State\" text, \"Party\" text, \"Lifespan\" text, primary key (\"Representative_ID\"));",
    "output": "SELECT Party FROM representative WHERE State = \"New York\" INTERSECT SELECT Party FROM representative WHERE State = \"Pennsylvania\""
  },
  {
    "instruction": "Which services have been used more than twice in first notification of loss? Return the service name.",
    "input": "create table first_notification_of_loss (fnol_id integer not null, customer_id integer not null, policy_id integer not null, service_id integer not null, primary key (fnol_id), unique (fnol_id), foreign key (service_id) references services (service_id), foreign key (customer_id, policy_id) references customers_policies (customer_id, policy_id));create table services (service_id integer not null, service_name varchar(40), primary key (service_id));",
    "output": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING count(*) > 2"
  },
  {
    "instruction": "acl 2016 authors",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid WHERE t2.year = 2016 AND t3.venuename = \"acl\";"
  },
  {
    "instruction": "Find the id and star rating of each hotel and sort them in increasing order of price.",
    "input": "create table hotels (hotel_id integer not null, star_rating_code char(15) not null, pets_allowed_yn char(1), price_range real, other_hotel_details varchar(255), primary key (hotel_id), foreign key (star_rating_code) references ref_hotel_star_ratings (star_rating_code));",
    "output": "SELECT hotel_id, star_rating_code FROM HOTELS ORDER BY price_range ASC"
  },
  {
    "instruction": "Find the name and salary of the instructors who are advisors of any student from History department?",
    "input": "create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'History'"
  },
  {
    "instruction": "Count the number of courses without prerequisites.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));",
    "output": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
  },
  {
    "instruction": "who acted the role of \" Mr. Bean \"",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid WHERE t2.role = \"Mr. Bean\";"
  },
  {
    "instruction": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\""
  },
  {
    "instruction": "Which state has the greatest total number of bank customers?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1"
  },
  {
    "instruction": "How many regions are affected?",
    "input": "create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT count(DISTINCT region_id) FROM affected_region"
  },
  {
    "instruction": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
    "input": "create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT roomName, RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2;"
  },
  {
    "instruction": "Compute the average profits companies make.",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT avg(Profits_billion) FROM Companies"
  },
  {
    "instruction": "What is the total share of transactions?",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT sum(share_count) FROM TRANSACTIONS"
  },
  {
    "instruction": "how many airports are there in each country?",
    "input": "create table \"airport\" (\"id\" int, \"City\" text, \"Country\" text, \"IATA\" text, \"ICAO\" text, \"name\" text, primary key(\"id\"));",
    "output": "SELECT count(*), country FROM airport GROUP BY country"
  },
  {
    "instruction": "return me the authors who have papers in PVLDB 2010 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t2.name = \"PVLDB\" AND t4.year = 2010;"
  },
  {
    "instruction": "return me the number of organizations in Databases area .",
    "input": "create table \"domain_author\" (\"aid\" int, \"did\" int, primary key (\"did\", \"aid\"), foreign key(\"aid\") references `author`(\"aid\"), foreign key(\"did\") references `domain`(\"did\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));",
    "output": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid WHERE t3.name = \"Databases\";"
  },
  {
    "instruction": "What is the publisher with most number of books?",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the countries for appelations with at most 3 wines?",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING count(*) <= 3"
  },
  {
    "instruction": "Find the wineries that have at least four wines.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*) >= 4"
  },
  {
    "instruction": "How many dorms have amenities?",
    "input": "create table has_amenity (dormid integer, amenid integer, foreign key (dormid) references `dorm`(dormid), foreign key (amenid) references `dorm_amenity`(amenid));",
    "output": "SELECT count(DISTINCT dormid) FROM has_amenity"
  },
  {
    "instruction": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));",
    "output": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20"
  },
  {
    "instruction": "What are the teams that have the 5 oldest players?",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));",
    "output": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5"
  },
  {
    "instruction": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.",
    "input": "create table \"debate_people\" (\"Debate_ID\" int, \"Affirmative\" int, \"Negative\" int, \"If_Affirmative_Win\" bool, primary key (\"Debate_ID\",\"Affirmative\",\"Negative\"), foreign key (\"Debate_ID\") references `debate`(\"Debate_ID\"), foreign key (\"Affirmative\") references `people`(\"People_ID\"), foreign key (\"Negative\") references `people`(\"People_ID\"));create table \"debate\" (\"Debate_ID\" int, \"Date\" text, \"Venue\" text, \"Num_of_Audience\" int, primary key (\"Debate_ID\"));create table \"people\" (\"People_ID\" int, \"District\" text, \"Name\" text, \"Party\" text, \"Age\" int, primary key (\"People_ID\"));",
    "output": "SELECT T3.Name, T2.Date, T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID ORDER BY T3.Name ASC"
  },
  {
    "instruction": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"
  },
  {
    "instruction": "What are the emails and phone numbers of all customers, sorted by email address and phone number?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_type_code` varchar(20) not null, `address_line_1` varchar(80), `address_line_2` varchar(80), `town_city` varchar(80), `state` varchar(80), `email_address` varchar(255), `phone_number` varchar(80));",
    "output": "SELECT email_address, phone_number FROM customers ORDER BY email_address, phone_number"
  },
  {
    "instruction": "What is the document status description of the document with id 1?",
    "input": "create table ref_document_status (document_status_code char(15) not null, document_status_description varchar(255) not null, primary key (document_status_code));create table documents (document_id integer not null, document_status_code char(15) not null, document_type_code char(15) not null, shipping_agent_code char(15), receipt_date datetime, receipt_number varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (document_status_code) references ref_document_status (document_status_code), foreign key (shipping_agent_code) references ref_shipping_agents (shipping_agent_code));",
    "output": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;"
  },
  {
    "instruction": "Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `subjects` (`subject_id` integer primary key, `subject_name` varchar(120));",
    "output": "SELECT T1.subject_id, T2.subject_name, COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC"
  },
  {
    "instruction": "How many different jobs are listed?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT count(DISTINCT job) FROM Person"
  },
  {
    "instruction": "which is the smallest state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state );"
  },
  {
    "instruction": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.",
    "input": "create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `documents` (`document_id` integer primary key, `document_type_code` varchar(10), `grant_id` integer not null, `sent_date` datetime not null, `response_received_date` datetime not null, `other_details` varchar(255) not null, foreign key (`document_type_code`) references `document_types`(`document_type_code`), foreign key (`grant_id`) references `grants`(`grant_id`));create table `document_types` (`document_type_code` varchar(10) primary key, `document_description` varchar(255) not null);create table `grants` (`grant_id` integer primary key, `organisation_id` integer not null, `grant_amount` decimal(19, 4) not null default 0, `grant_start_date` datetime not null, `grant_end_date` datetime not null, `other_details` varchar(255) not null, foreign key (`organisation_id`) references `organisations`(`organisation_id`));create table `documents` (`document_id` integer primary key, `document_type_code` varchar(10), `grant_id` integer not null, `sent_date` datetime not null, `response_received_date` datetime not null, `other_details` varchar(255) not null, foreign key (`document_type_code`) references `document_types`(`document_type_code`), foreign key (`grant_id`) references `grants`(`grant_id`));create table `document_types` (`document_type_code` varchar(10) primary key, `document_description` varchar(255) not null);",
    "output": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'"
  },
  {
    "instruction": "When did the staff member Janessa Sawayn leave the company?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";"
  },
  {
    "instruction": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT DISTINCT Name FROM WINE WHERE Price > (SELECT min(Price) FROM wine WHERE Winery = \"John Anthony\")"
  },
  {
    "instruction": "What are the allergy types and how many allergies correspond to each one?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT allergytype, count(*) FROM Allergy_type GROUP BY allergytype"
  },
  {
    "instruction": "Which papers were accepted in pldi 2015 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"pldi\";"
  },
  {
    "instruction": "List the industry shared by the most companies.",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "How many diffrent dorm amenities are there?",
    "input": "create table dorm_amenity (amenid integer, amenity_name varchar(25));",
    "output": "SELECT count(*) FROM dorm_amenity"
  },
  {
    "instruction": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?",
    "input": "create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table trained_in (physician integer not null, treatment integer not null, certificationdate datetime not null, certificationexpires datetime not null, constraint fk_trained_in_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_trained_in_procedures_code foreign key(treatment) references procedures(code), primary key(physician, treatment));create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT name FROM procedures WHERE cost > 1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\""
  },
  {
    "instruction": "Return the titles and directors of films that were never in the market of China.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));create table \"market\" (\"Market_ID\" int, \"Country\" text, \"Number_cities\" int, primary key (\"Market_ID\"));",
    "output": "SELECT title, director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id = T2.Market_ID WHERE country = 'China')"
  },
  {
    "instruction": "What is the name of the department and office location for the professor with the last name of Heffington?",
    "input": "create table employee (emp_num int primary key, emp_lname varchar(15), emp_fname varchar(12), emp_initial varchar(1), emp_jobcode varchar(5), emp_hiredate datetime, emp_dob datetime);create table professor (emp_num int, dept_code varchar(10), prof_office varchar(50), prof_extension varchar(4), prof_high_degree varchar(5), foreign key (emp_num) references employee(emp_num), foreign key (dept_code) references department(dept_code));create table department (dept_code varchar(10) primary key, dept_name varchar(30), school_code varchar(8), emp_num int, dept_address varchar(20), dept_extension varchar(4), foreign key (emp_num) references employee(emp_num));",
    "output": "SELECT T3.dept_name, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'"
  },
  {
    "instruction": "Return the type of transaction with the highest total amount.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `previous_transaction_id` integer, `account_id` integer not null, `card_id` integer not null, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` double null, `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`card_id`) references `customers_cards`(`card_id`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names and types of the dorms that have a capacity greater than 300 or less than 100?",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT dorm_name, gender FROM dorm WHERE student_capacity > 300 OR student_capacity < 100"
  },
  {
    "instruction": "Question Answering publications",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"Question Answering\";"
  },
  {
    "instruction": "Please list the countries and years of film market estimations.",
    "input": "create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));create table \"market\" (\"Market_ID\" int, \"Country\" text, \"Number_cities\" int, primary key (\"Market_ID\"));",
    "output": "SELECT T2.Country, T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID"
  },
  {
    "instruction": "What are the name and primarily affiliated department name of each physician?",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table affiliated_with (physician integer not null, department integer not null, primaryaffiliation boolean not null, constraint fk_affiliated_with_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_affiliated_with_department_departmentid foreign key(department) references department(departmentid), primary key(physician, department));create table department (departmentid integer not null, name varchar(30) not null, head integer not null, constraint pk_department primary key(departmentid), constraint fk_department_physician_employeeid foreign key(head) references physician(employeeid));",
    "output": "SELECT T1.name, T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1"
  },
  {
    "instruction": "Find the average credit score of the customers who have some loan.",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));",
    "output": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)"
  },
  {
    "instruction": "List the method, date and amount of all the payments, in ascending order of date.",
    "input": "create table payments (payment_id integer not null, settlement_id integer not null, payment_method_code varchar(255), date_payment_made date, amount_payment integer, primary key (payment_id), foreign key (settlement_id) references settlements (settlement_id));",
    "output": "SELECT Payment_Method_Code, Date_Payment_Made, Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC"
  },
  {
    "instruction": "Show first name and last name for all students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Fname, Lname FROM Student"
  },
  {
    "instruction": "Which city has the most customers living in?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(15) not null, `customer_name` varchar(80), `date_became_customer` datetime, `other_customer_details` varchar(255));create table `customer_addresses` (`customer_id` integer not null, `address_id` integer not null, `date_address_from` datetime not null, `address_type` varchar(15) not null, `date_address_to` datetime, foreign key (`address_id`) references `addresses`(`address_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"?",
    "input": "create table \"Albums\" (\"AId\" integer primary key, \"Title\" text, \"Year\" integer, \"Label\" text, \"Type\" text);create table \"Tracklists\" (\"AlbumId\" integer, \"Position\" integer, \"SongId\" integer , primary key(albumid, position), foreign key (songid) references songs(songid), foreign key (albumid) references albums(aid));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE T1.title = \"A Kiss Before You Go: Live in Hamburg\""
  },
  {
    "instruction": "Show the name of the party that has at least two records.",
    "input": "create table \"party\" (\"Party_ID\" int, \"Year\" real, \"Party\" text, \"Governor\" text, \"Lieutenant_Governor\" text, \"Comptroller\" text, \"Attorney_General\" text, \"US_Senate\" text, primary key (\"Party_ID\"));",
    "output": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "Find the last names of all the teachers that teach GELL TAMI.",
    "input": "create table \"list\" (\"LastName\" text, \"FirstName\" text, \"Grade\" integer, \"Classroom\" integer, primary key(lastname, firstname));create table \"teachers\" (\"LastName\" text, \"FirstName\" text, \"Classroom\" integer, primary key(lastname, firstname));",
    "output": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = \"GELL\" AND T1.lastname = \"TAMI\""
  },
  {
    "instruction": "Which schools have more than 1 player? Give me the school locations.",
    "input": "create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*) > 1"
  },
  {
    "instruction": "papers typically cited by parsing papers",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citingpaperid WHERE t1.keyphrasename = \"parsing\";"
  },
  {
    "instruction": "where is jamerican cuisine in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t1.name = \"jamerican cuisine\";"
  },
  {
    "instruction": "In which locations are there more than one movie theater with capacity above 300?",
    "input": "create table \"cinema\" (\"Cinema_ID\" int, \"Name\" text, \"Openning_year\" int, \"Capacity\" int, \"Location\" text, primary key (\"Cinema_ID\"));",
    "output": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) > 1"
  },
  {
    "instruction": "Show all student IDs with more than total 10 hours per week on all sports played.",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek) > 10"
  },
  {
    "instruction": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?",
    "input": "create table `invoices` (`invoice_number` integer primary key, `invoice_date` datetime, `invoice_details` varchar(255));",
    "output": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\""
  },
  {
    "instruction": "How many female actors were born in \" New York City \" after 1980 ?",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT COUNT ( DISTINCT name ) FROM actor WHERE birth_city = \"New York City\" AND birth_year > 1980 AND gender = \"female\";"
  },
  {
    "instruction": "how many capitals does rhode island have",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT COUNT ( capital ) FROM state WHERE state_name = \"rhode island\";"
  },
  {
    "instruction": "how many people are there in california",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM state WHERE state_name = \"california\";"
  },
  {
    "instruction": "What is the product category description and unit of measurement of category \"Herbs\"?",
    "input": "create table `ref_product_categories` (`product_category_code` varchar(15) primary key, `product_category_description` varchar(80), `unit_of_measure` varchar(20));",
    "output": "SELECT product_category_description, unit_of_measure FROM ref_product_categories WHERE product_category_code = \"Herbs\""
  },
  {
    "instruction": "What is the name of the activity that has the most faculty members involved in?",
    "input": "create table activity (actid integer primary key, activity_name varchar(25));create table faculty_participates_in (facid integer, actid integer, foreign key(facid) references faculty(facid), foreign key(actid) references activity(actid));",
    "output": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the total kills of the perpetrators with height more than 1.84.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Home Town\" text, primary key (\"People_ID\"));create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84"
  },
  {
    "instruction": "Return the investor who have invested in the greatest number of entrepreneurs.",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the marketing region code that has the most drama workshop groups?",
    "input": "create table drama_workshop_groups (workshop_group_id integer not null, address_id integer not null, currency_code char(15) not null, marketing_region_code char(15) not null, store_name varchar(255), store_phone varchar(255), store_email_address varchar(255), other_details varchar(255), primary key (workshop_group_id), unique (workshop_group_id), foreign key (address_id) references addresses (address_id));",
    "output": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the name of persons who are friends with Bob.",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Bob'"
  },
  {
    "instruction": "Show the album names, ids and the number of tracks for each album.",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.Title, T2.AlbumID, COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID"
  },
  {
    "instruction": "Give the average quantity of stocks.",
    "input": "create table \"stock\" (\"Shop_ID\" int, \"Device_ID\" int, \"Quantity\" int, primary key (\"Shop_ID\",\"Device_ID\"), foreign key (`shop_id`) references `shop`(`shop_id`), foreign key (`device_id`) references `device`(`device_id`));",
    "output": "SELECT avg(Quantity) FROM stock"
  },
  {
    "instruction": "What are the distinct types of mills that are built by American or Canadian architects?",
    "input": "create table \"mill\" (\"architect_id\" int, \"id\" int, \"location\" text, \"name\" text, \"type\" text, \"built_year\" int, \"notes\" text, primary key (\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));create table \"architect\" (\"id\" text, \"name\" text, \"nationality\" text, \"gender\" text, primary key(\"id\"));",
    "output": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id WHERE T2.nationality = 'American' OR T2.nationality = 'Canadian'"
  },
  {
    "instruction": "How many distinct characteristic names does the product \"cumin\" have?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\""
  },
  {
    "instruction": "most popular topics at NIPS 2015",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ), t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t3.year = 2015 AND t4.venuename = \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;"
  },
  {
    "instruction": "Show ids, customer ids, card type codes, card numbers for all cards.",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards"
  },
  {
    "instruction": "What are the titles for courses with two prerequisites?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));",
    "output": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count(*) = 2"
  },
  {
    "instruction": "sharon goldwater 's papers",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"sharon goldwater\";"
  },
  {
    "instruction": "which poll source does the highest oppose rate come from?",
    "input": "create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1"
  },
  {
    "instruction": "In how many different states are banks located?",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT count(DISTINCT state) FROM bank"
  },
  {
    "instruction": "what is the longest river in texas",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river WHERE traverse = \"texas\" ) AND traverse = \"texas\";"
  },
  {
    "instruction": "Find the number of complaints with Product Failure type for each complaint status.",
    "input": "create table `complaints` (`complaint_id` integer not null , `product_id` integer not null, `customer_id` integer not null, `complaint_outcome_code` varchar(20) not null, `complaint_status_code` varchar(20) not null, `complaint_type_code` varchar(20) not null, `date_complaint_raised` datetime, `date_complaint_closed` datetime, `staff_id` integer not null , foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`product_id`) references `products`(`product_id`), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT complaint_status_code, count(*) FROM complaints WHERE complaint_type_code = \"Product Failure\" GROUP BY complaint_status_code"
  },
  {
    "instruction": "How many members does the club \"Tennis Club\" has?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\""
  },
  {
    "instruction": "What are the names, address roads, and cities of the branches ordered by opening year?",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT name, address_road, city FROM branch ORDER BY open_year"
  },
  {
    "instruction": "return me the author in the \" University of Michigan \" whose papers in Databases area have the most total citations .",
    "input": "create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));create table \"domain_publication\" (\"did\" int, \"pid\" int, primary key (\"did\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"did\") references \"domain\"(\"did\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));",
    "output": "SELECT t1.name FROM DOMAIN AS t4 JOIN domain_publication AS t2 ON t4.did = t2.did JOIN publication AS t5 ON t5.pid = t2.pid JOIN writes AS t3 ON t3.pid = t5.pid JOIN author AS t1 ON t3.aid = t1.aid JOIN organization AS t6 ON t6.oid = t1.oid WHERE t4.name = \"Databases\" AND t6.name = \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t5.citation_num ) DESC LIMIT 1;"
  },
  {
    "instruction": "Show the employee ids and the number of documents destroyed by each employee.",
    "input": "create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT Destroyed_by_Employee_ID, count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID"
  },
  {
    "instruction": "Which year has the most degrees conferred?",
    "input": "create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1"
  },
  {
    "instruction": "Give me a list of all the service names sorted alphabetically.",
    "input": "create table services (service_id integer not null, service_name varchar(40), primary key (service_id));",
    "output": "SELECT service_name FROM services ORDER BY service_name"
  },
  {
    "instruction": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.",
    "input": "create table residents (resident_id integer not null, property_id integer not null, date_moved_in datetime not null, date_moved_out datetime not null, other_details varchar(255), primary key (resident_id, property_id, date_moved_in), foreign key (property_id) references properties (property_id));create table residents_services (resident_id integer not null, service_id integer not null, date_moved_in datetime, property_id integer, date_requested datetime, date_provided datetime, other_details varchar(255), primary key (resident_id, service_id), foreign key (service_id) references services (service_id), foreign key (resident_id, property_id, date_moved_in) references residents (resident_id, property_id, date_moved_in));",
    "output": "SELECT T1.resident_id, T1.other_details, count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id = T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC"
  },
  {
    "instruction": "what city has the least population",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MIN ( population ) FROM city );"
  },
  {
    "instruction": "state the state with the largest area",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid = t4.jid JOIN writes AS t3 ON t3.pid = t6.pid JOIN writes AS t5 ON t5.pid = t6.pid JOIN author AS t1 ON t5.aid = t1.aid JOIN author AS t2 ON t3.aid = t2.aid WHERE t2.name = \"H. V. Jagadish\" AND t1.name = \"Yunyao Li\" AND t4.name = \"PVLDB\";"
  },
  {
    "instruction": "For each product, show its name and the number of times it was ordered.",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `order_items` (`order_item_id` integer primary key, `product_id` integer not null, `order_id` integer not null, `order_item_status` varchar(10) not null, `order_item_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`product_id`) references `products`(`product_id`));create table `products` (`product_id` integer primary key, `product_name` varchar(80), `product_details` varchar(255));",
    "output": "SELECT T3.product_name, count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id"
  },
  {
    "instruction": "Show the season, the player, and the name of the team that players belong to.",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));create table `team` (`team_id` int, `name` text, primary key (`team_id`));",
    "output": "SELECT T1.Season, T1.Player, T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id"
  },
  {
    "instruction": "Find the list of documents that are both in the most three popular type and have the most three popular structure.",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3"
  },
  {
    "instruction": "List the names of pilots in ascending order of rank.",
    "input": "create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));",
    "output": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC"
  },
  {
    "instruction": "Find the first names and last names of teachers in alphabetical order of last name.",
    "input": "create table `teachers` (`teacher_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `gender` varchar(1), `cell_mobile_number` varchar(40), `email_address` varchar(40), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT first_name, last_name FROM Teachers ORDER BY last_name"
  },
  {
    "instruction": "What is the average and total transaction amount?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `previous_transaction_id` integer, `account_id` integer not null, `card_id` integer not null, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` double null, `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`card_id`) references `customers_cards`(`card_id`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT avg(transaction_amount), sum(transaction_amount) FROM Financial_transactions"
  },
  {
    "instruction": "what state has the lowest population density",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE density = ( SELECT MIN ( density ) FROM state );"
  },
  {
    "instruction": "What is the highest cited paper by ohad shamir ?",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;"
  },
  {
    "instruction": "Which teams had more than 3 eliminations?",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));",
    "output": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*) > 3"
  },
  {
    "instruction": "return me the conference, which has the most number of papers containing keyword \" Relational Database \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid WHERE t1.keyword = \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;"
  },
  {
    "instruction": "how many rivers in idaho",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( river_name ) FROM river WHERE traverse = \"idaho\";"
  },
  {
    "instruction": "What are the ids and details of events that have more than one participants?",
    "input": "create table events (event_id integer not null, service_id integer not null, event_details varchar(255), primary key (event_id), foreign key (service_id) references services (service_id));create table participants_in_events (event_id integer not null, participant_id integer not null, primary key (event_id, participant_id), foreign key (participant_id) references participants (participant_id), foreign key (event_id) references events (event_id));",
    "output": "SELECT T1.event_id, T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_ID HAVING count(*) > 1"
  },
  {
    "instruction": "Sort the names of all counties in ascending order of population.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));",
    "output": "SELECT County_name FROM county ORDER BY Population ASC"
  },
  {
    "instruction": "What is the number of employees that have a salary between 100000 and 200000?",
    "input": "create table employee(eid number(9, 0) primary key, name varchar2(30), salary number(10, 2));",
    "output": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000"
  },
  {
    "instruction": "Which member names corresponding to members who are not in the Progress Party?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Member_Name\" text, \"Party_ID\" text, \"In_office\" text, primary key (\"Member_ID\"), foreign key (`party_id`) references `party`(`party_id`));create table \"party\" (\"Party_ID\" int, \"Minister\" text, \"Took_office\" text, \"Left_office\" text, \"Region_ID\" int, \"Party_name\" text, primary key (\"Party_ID\"), foreign key (`region_id`) references `region`(`region_id`));",
    "output": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id WHERE T2.Party_name != \"Progress Party\""
  },
  {
    "instruction": "How many products are not made by Sony?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony')"
  },
  {
    "instruction": "Find the number of distinct students enrolled in courses.",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment"
  },
  {
    "instruction": "What are the names of all products that are not the most frequently-used maximum page size?",
    "input": "create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));create table \"product\" (\"product_id\" int, \"product\" text, \"dimensions\" text, \"dpi\" real, \"pages_per_minute_color\" real, \"max_page_size\" text, \"interface\" text, primary key (\"product_id\"));",
    "output": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)"
  },
  {
    "instruction": "Show different occupations along with the number of players in each occupation.",
    "input": "create table \"player\" (\"Player_ID\" int, \"Sponsor_name\" text, \"Player_name\" text, \"Gender\" text, \"Residence\" text, \"Occupation\" text, \"Votes\" int, \"Rank\" text, primary key (\"Player_ID\"));",
    "output": "SELECT Occupation, COUNT(*) FROM player GROUP BY Occupation"
  },
  {
    "instruction": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT max(Sales_billion), min(Sales_billion) FROM Companies WHERE Industry != \"Banking\""
  },
  {
    "instruction": "Find the total population of the districts where the area is bigger than the average city area.",
    "input": "create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT sum(city_population) FROM district WHERE city_area > (SELECT avg(city_area) FROM district)"
  },
  {
    "instruction": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"pitStops\" (\"raceId\" integer, \"driverId\" integer, \"stop\" integer, \"lap\" integer, \"time\" text, \"duration\" text, \"milliseconds\" integer, primary key (\"raceId\", \"driverId\", \"stop\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) > 8 UNION SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) > 5"
  },
  {
    "instruction": "List the title of films that do not have any market estimation.",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));",
    "output": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)"
  },
  {
    "instruction": "What are the names of customers who do not have saving accounts?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = 'saving'"
  },
  {
    "instruction": "Give me a list of id and status of orders which belong to the customer named \"Jeramie\".",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_name` varchar(80), `customer_details` varchar(255));create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT T2.order_id, T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\""
  },
  {
    "instruction": "What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT max(T1.duration), max(T2.resolution), T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.languages ORDER BY T2.languages"
  },
  {
    "instruction": "What are the 5 most recent papers of Mirella Lapata ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid, t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Mirella Lapata\" ORDER BY t3.year DESC LIMIT 5;"
  },
  {
    "instruction": "How many schools do not participate in the basketball match?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));create table \"basketball_match\" (\"Team_ID\" int, \"School_ID\" int, \"Team_Name\" text, \"ACC_Regular_Season\" text, \"ACC_Percent\" text, \"ACC_Home\" text, \"ACC_Road\" text, \"All_Games\" text, \"All_Games_Percent\" int, \"All_Home\" text, \"All_Road\" text, \"All_Neutral\" text, primary key (\"Team_ID\"), foreign key (`school_id`) references `university`(`school_id`));",
    "output": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)"
  },
  {
    "instruction": "What are the personal name, family name, and author ID of the course author who teaches the most courses?",
    "input": "create table `course_authors_and_tutors` (`author_id` integer primary key, `author_tutor_atb` varchar(3), `login_name` varchar(40), `password` varchar(40), `personal_name` varchar(80), `middle_name` varchar(80), `family_name` varchar(80), `gender_mf` varchar(1), `address_line_1` varchar(80));create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));",
    "output": "SELECT T1.personal_name, T1.family_name, T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of the states that have some college students playing in the positions of goalie and mid-field?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid'"
  },
  {
    "instruction": "Find all actors who were born in \" New York City \" in 1984",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT name FROM actor WHERE birth_city = \"New York City\" AND birth_year = 1984;"
  },
  {
    "instruction": "How many medicines were not approved by the FDA?",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));",
    "output": "SELECT count(*) FROM medicine WHERE FDA_approved = 'No'"
  },
  {
    "instruction": "Give the name of each department and the number of employees in each.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `departments` (`department_id` decimal(4, 0) not null default '0', `department_name` varchar(30) not null, `manager_id` decimal(6, 0) default null, `location_id` decimal(4, 0) default null, primary key (`department_id`));",
    "output": "SELECT T2.department_name, COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name"
  },
  {
    "instruction": "Show all the distinct buildings that have faculty rooms.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT DISTINCT building FROM Faculty"
  },
  {
    "instruction": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"circuits\" (\"circuitId\" integer primary key, \"circuitRef\" text, \"name\" text, \"location\" text, \"country\" text, \"lat\" real, \"lng\" real, \"alt\" text, \"url\" text);",
    "output": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017"
  },
  {
    "instruction": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?",
    "input": "create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT cust_name, acc_type, acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1"
  },
  {
    "instruction": "What is the zip code in which the average mean sea level pressure is the lowest?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1"
  },
  {
    "instruction": "Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.",
    "input": "create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table scientists (ssn int, name char(30) not null, primary key (ssn));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table scientists (ssn int, name char(30) not null, primary key (ssn));",
    "output": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax'"
  },
  {
    "instruction": "List the writers who have written more than one book.",
    "input": "create table \"book\" (\"Book_ID\" int, \"Title\" text, \"Issues\" real, \"Writer\" text, primary key (\"Book_ID\"));",
    "output": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1"
  },
  {
    "instruction": "give me the cities in usa",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city;"
  },
  {
    "instruction": "Who is the director of the tv series \" House of Cards \" from 2013 ?",
    "input": "create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"tv_series\" (\"sid\" int, \"title\" text, \"release_year\" int, \"num_of_seasons\" int, \"num_of_episodes\" int, \"title_aka\" text, \"budget\" text, primary key(\"sid\"));",
    "output": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN tv_series AS t3 ON t3.sid = t1.msid WHERE t3.release_year = 2013 AND t3.title = \"House of Cards\";"
  },
  {
    "instruction": "What papers has Liwen Xiong written in 2015",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Liwen Xiong\" AND t3.year = 2015;"
  },
  {
    "instruction": "What are the different first names for customers from Brazil who have also had an invoice?",
    "input": "create table `customer` (`customerid` integer not null , `firstname` varchar(40) not null , `lastname` varchar(20) not null , `company` varchar(80) default null , `address` varchar(70) default null , `city` varchar(40) default null , `state` varchar(40) default null , `country` varchar(40) default null , `postalcode` varchar(10) default null , `phone` varchar(24) default null , `fax` varchar(24) default null , `email` varchar(60) not null , `supportrepid` integer default null , primary key (`customerid`) , constraint `fk_customersupportrepid` foreign key (`supportrepid`) references `employee` (`employeeid`)\n        ON delete no action\n        ON update no action);create table `invoice` (`invoiceid` integer not null , `customerid` integer not null , `invoicedate` datetime not null , `billingaddress` varchar(70) default null , `billingcity` varchar(40) default null , `billingstate` varchar(40) default null , `billingcountry` varchar(40) default null , `billingpostalcode` varchar(10) default null , `total` decimal(10, 2) not null , primary key (`invoiceid`) , constraint `fk_invoicecustomerid` foreign key (`customerid`) references `customer` (`customerid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Brazil\""
  },
  {
    "instruction": "Find out the first name and last name of staff lived in city Damianfort.",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1_number_building` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T2.first_name, T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";"
  },
  {
    "instruction": "How many transaction does account with name 337 have?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = \"337\""
  },
  {
    "instruction": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with more than 200 citations .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t2.name = \"H. V. Jagadish\" AND t1.name = \"Divesh Srivastava\" AND t5.citation_num > 200;"
  },
  {
    "instruction": "What is the number of technicians?",
    "input": "create table \"technician\" (\"technician_id\" real, \"Name\" text, \"Team\" text, \"Starting_Year\" real, \"Age\" int, primary key (\"technician_id\"));",
    "output": "SELECT count(*) FROM technician"
  },
  {
    "instruction": "which rivers run through states bordering alabama",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name = \"alabama\" );"
  },
  {
    "instruction": "How many artworks are there?",
    "input": "create table artwork (\"Artwork_ID\" int, \"Type\" text, \"Name\" text, primary key (\"Artwork_ID\"));",
    "output": "SELECT count(*) FROM artwork"
  },
  {
    "instruction": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT max(T2.resolution), min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE \"3:%\""
  },
  {
    "instruction": "Which manufacturer has the most number of shops? List its name and year of opening.",
    "input": "create table \"manufacturer\" (\"Manufacturer_ID\" int, \"Open_Year\" real, \"Name\" text, \"Num_of_Factories\" int, \"Num_of_Shops\" int, primary key (\"Manufacturer_ID\"));",
    "output": "SELECT open_year, name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1"
  },
  {
    "instruction": "How many vocal types are used in the song \"Le Pop\"?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = \"Le Pop\""
  },
  {
    "instruction": "How many movie ratings have more than 3 stars?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT count(*) FROM Rating WHERE stars > 3"
  },
  {
    "instruction": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.",
    "input": "create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));create table inventory (inventory_id mediumint unsigned not null, film_id smallint unsigned not null, store_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (inventory_id), foreign key (store_id) references store (store_id), foreign key (film_id) references film (film_id));",
    "output": "SELECT title, film_id FROM film WHERE rental_rate = 0.99 INTERSECT SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id HAVING count(*) < 3"
  },
  {
    "instruction": "Return the address and email of the customer with the first name Linda.",
    "input": "create table customer (customer_id smallint unsigned not null, store_id tinyint unsigned not null, first_name varchar(45) not null, last_name varchar(45) not null, email varchar(50) default null, address_id smallint unsigned not null, active boolean not null default true, create_date datetime not null, last_update timestamp default current_timestamp, primary key (customer_id), foreign key (address_id) references address (address_id), foreign key (store_id) references store (store_id));create table address (address_id smallint unsigned not null, address varchar(50) not null, address2 varchar(50) default null, district varchar(20) not null, city_id smallint unsigned not null, postal_code varchar(10) default null, phone varchar(20) not null, last_update timestamp not null default current_timestamp, primary key (address_id), foreign key (city_id) references city (city_id));",
    "output": "SELECT T2.address, T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id = T1.address_id WHERE T1.first_name = 'LINDA'"
  },
  {
    "instruction": "return me the keyword, which have been contained by the most number of papers in PVLDB .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid WHERE t3.name = \"PVLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;"
  },
  {
    "instruction": "Count the number of different official languages corresponding to countries that players who play Defender are from.",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\""
  },
  {
    "instruction": "salem is the capital of which state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE capital = \"salem\";"
  },
  {
    "instruction": "What are the descriptions of all the project outcomes?",
    "input": "create table `research_outcomes` (`outcome_code` varchar(10) primary key, `outcome_description` varchar(255) not null);create table `project_outcomes` (`project_id` integer not null, `outcome_code` varchar(10) not null, `outcome_details` varchar(255), foreign key (`project_id`) references `projects`(`project_id`), foreign key (`outcome_code`) references `research_outcomes`(`outcome_code`));",
    "output": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code"
  },
  {
    "instruction": "What is the installation date for each ending station on all the trips?",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT T1.id, T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id"
  },
  {
    "instruction": "What are the cities with exactly two airports?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT city FROM airports GROUP BY city HAVING count(*) = 2"
  },
  {
    "instruction": "return me the citations of each paper in PVLDB .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT t2.citation_num FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = \"PVLDB\";"
  },
  {
    "instruction": "Show the name and country for all people whose age is smaller than the average.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Country\" text, \"Is_Male\" text, \"Age\" int, primary key (\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Country\" text, \"Is_Male\" text, \"Age\" int, primary key (\"People_ID\"));",
    "output": "SELECT name, country FROM people WHERE age < (SELECT avg(age) FROM people)"
  },
  {
    "instruction": "Which park did the most people attend in 2008?",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));create table park (park_id text, park_name text, park_alias text, city text, state text, country text);",
    "output": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;"
  },
  {
    "instruction": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Lieutenant'"
  },
  {
    "instruction": "Which room has the largest number of reservations?",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;"
  },
  {
    "instruction": "What is the total enrollment number of all colleges?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));",
    "output": "SELECT sum(enr) FROM College"
  },
  {
    "instruction": "How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));",
    "output": "SELECT Kids FROM Reservations WHERE CheckIn = \"2010-09-21\" AND FirstName = \"DAMIEN\" AND LastName = \"TRACHSEL\";"
  },
  {
    "instruction": "Show the shop addresses ordered by their opening year.",
    "input": "create table \"shop\" (\"Shop_ID\" int, \"Address\" text, \"Num_of_staff\" text, \"Score\" real, \"Open_Year\" text, primary key (\"Shop_ID\"));",
    "output": "SELECT address FROM shop ORDER BY open_year"
  },
  {
    "instruction": "Find the directors of all movies featuring \" Kate Winslet \"",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));",
    "output": "SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN directed_by AS t2 ON t5.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t1.name = \"Kate Winslet\";"
  },
  {
    "instruction": "when is the hire date for those employees whose first name does not containing the letter M?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
  },
  {
    "instruction": "List each birth place along with the number of people from there.",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));",
    "output": "SELECT Birth_Place, COUNT(*) FROM people GROUP BY Birth_Place"
  },
  {
    "instruction": "How many transaction does each account have? Show the number and account id.",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT count(*), account_id FROM Financial_transactions"
  },
  {
    "instruction": "How many papers on nature communications in 2015 ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t1.year = 2015 AND t2.venuename = \"nature communications\";"
  },
  {
    "instruction": "find the total checkins in Moroccan restaurant in \" Los Angeles \" per day",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"checkin\" (\"cid\" int, \"business_id\" text, \"count\" int, \"day\" text, primary key(\"cid\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT t4.day, SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"Moroccan\" AND t3.category_name = \"restaurant\" GROUP BY t4.day;"
  },
  {
    "instruction": "Show the average share count of transactions for different investors.",
    "input": "create table `transactions` (`transaction_id` integer primary key, `investor_id` integer not null, `transaction_type_code` varchar(10) not null, `date_of_transaction` datetime, `amount_of_transaction` decimal(19, 4), `share_count` varchar(40), `other_details` varchar(255), foreign key (`investor_id`) references `investors`(`investor_id`), foreign key (`transaction_type_code`) references `ref_transaction_types`(`transaction_type_code`));",
    "output": "SELECT investor_id, avg(share_count) FROM TRANSACTIONS GROUP BY investor_id"
  },
  {
    "instruction": "What are the distinct last names of the students who have class president votes?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table voting_record (stuid integer, registration_date varchar(12), election_cycle varchar(12), president_vote integer, vice_president_vote integer, secretary_vote integer, treasurer_vote integer, class_president_vote integer, class_senator_vote integer, foreign key(stuid) references student(stuid), foreign key(president_vote) references student(stuid), foreign key(vice_president_vote) references student(stuid), foreign key(secretary_vote) references student(stuid), foreign key(treasurer_vote) references student(stuid), foreign key(class_president_vote) references student(stuid), foreign key(class_senator_vote) references student(stuid));",
    "output": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_President_VOTE"
  },
  {
    "instruction": "What are the distinct location names?",
    "input": "create table locations (location_id integer not null, location_name varchar(255), address varchar(255), other_details varchar(255), primary key (location_id));",
    "output": "SELECT DISTINCT Location_Name FROM LOCATIONS"
  },
  {
    "instruction": "Find the ids of reviewers who didn't only give 4 star.",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));",
    "output": "SELECT rID FROM Rating WHERE stars != 4"
  },
  {
    "instruction": "Find the names of the companies whose headquarters are not located in \"USA\".",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT name FROM Companies WHERE Headquarters != 'USA'"
  },
  {
    "instruction": "find the total checkins in Moroccan restaurant in \" Los Angeles \"",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"checkin\" (\"cid\" int, \"business_id\" text, \"count\" int, \"day\" text, primary key(\"cid\"), foreign key(\"business_id\") references `business`(\"business_id\"));",
    "output": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id WHERE t1.city = \"Los Angeles\" AND t2.category_name = \"restaurant\" AND t3.category_name = \"Moroccan\";"
  },
  {
    "instruction": "Who wrote sensor fusion ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";"
  },
  {
    "instruction": "What is the alphabetically ordered list of all the distinct names of nurses?",
    "input": "create table nurse (employeeid integer primary key not null, name varchar(30) not null, position varchar(30) not null, registered boolean not null, ssn integer not null);",
    "output": "SELECT DISTINCT name FROM nurse ORDER BY name"
  },
  {
    "instruction": "Find all actors who were born in 1984",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT name FROM actor WHERE birth_year = 1984;"
  },
  {
    "instruction": "List the locations of schools that do not have any player.",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));create table \"player\" (\"Player_ID\" int, \"Player\" text, \"Team\" text, \"Age\" int, \"Position\" text, \"School_ID\" int, primary key (\"Player_ID\"), foreign key (`school_id`) references `school`(`school_id`));",
    "output": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)"
  },
  {
    "instruction": "How many music festivals have had each kind of result, ordered descending by count?",
    "input": "create table \"music_festival\" (\"ID\" int, \"Music_Festival\" text, \"Date_of_ceremony\" text, \"Category\" text, \"Volume\" int, \"Result\" text, primary key (`id`), foreign key (`volume`) references `volume`(`volume_id`));",
    "output": "SELECT RESULT, COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC"
  },
  {
    "instruction": "Give the name of the lowest earning instructor in the Statistics department.",
    "input": "create table instructor (id varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8, 2) check (salary > 29000), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1"
  },
  {
    "instruction": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.",
    "input": "create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));",
    "output": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms >= 15 AND total_passengers > 25"
  },
  {
    "instruction": "Find the names of procedures which physician John Wen was trained in.",
    "input": "create table physician (employeeid integer not null, name varchar(30) not null, position varchar(30) not null, ssn integer not null, constraint pk_physician primary key(employeeid));create table trained_in (physician integer not null, treatment integer not null, certificationdate datetime not null, certificationexpires datetime not null, constraint fk_trained_in_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_trained_in_procedures_code foreign key(treatment) references procedures(code), primary key(physician, treatment));create table procedures (code integer primary key not null, name varchar(30) not null, cost real not null);",
    "output": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\""
  },
  {
    "instruction": "how many papers by dan klein are cited by michael i. jordan",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN cite AS t5 ON t3.paperid = t5.citedpaperid JOIN writes AS t4 ON t4.paperid = t5.citingpaperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"michael i. jordan\" AND t1.authorname = \"dan klein\";"
  },
  {
    "instruction": "Show the id of the employee named Ebba.",
    "input": "create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), gender_mfu char(1) not null, date_of_birth datetime not null, other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT employee_ID FROM Employees WHERE employee_name = \"Ebba\""
  },
  {
    "instruction": "What are the names of all products?",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT Name FROM Products"
  },
  {
    "instruction": "noah a smith citation count",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"noah a smith\";"
  },
  {
    "instruction": "How many characteristics are there?",
    "input": "create table `characteristics` (`characteristic_id` integer primary key, `characteristic_type_code` varchar(15) not null, `characteristic_data_type` varchar(10), `characteristic_name` varchar(80), `other_characteristic_details` varchar(255), foreign key (`characteristic_type_code`) references `ref_characteristic_types`(`characteristic_type_code`));",
    "output": "SELECT count(*) FROM CHARACTERISTICS"
  },
  {
    "instruction": "List the names of editors in ascending order of age.",
    "input": "create table \"editor\" (\"Editor_ID\" int, \"Name\" text, \"Age\" real, primary key (\"Editor_ID\"));",
    "output": "SELECT Name FROM editor ORDER BY Age ASC"
  },
  {
    "instruction": "Which authors with submissions are from college \"Florida\" or \"Temple\"?",
    "input": "create table \"submission\" (\"Submission_ID\" int, \"Scores\" real, \"Author\" text, \"College\" text, primary key (\"Submission_ID\"));",
    "output": "SELECT Author FROM submission WHERE College = \"Florida\" OR College = \"Temple\""
  },
  {
    "instruction": "Find courses that ran in Fall 2009 or in Spring 2010.",
    "input": "create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);create table section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4, 0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (building, room_number) references classroom (building, room_number)\n        ON delete set null);",
    "output": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010"
  },
  {
    "instruction": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?",
    "input": "create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));create table \"ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Nationality\" text, \"Tonnage\" int, primary key (\"Ship_ID\"));",
    "output": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000"
  },
  {
    "instruction": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000"
  },
  {
    "instruction": "What is the id and name of the staff who has been assigned for the least amount of time?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_gender` varchar(1), `staff_name` varchar(80));create table `staff_department_assignments` (`staff_id` integer not null, `department_id` integer not null, `date_assigned_from` datetime not null, `job_title_code` varchar(10) not null, `date_assigned_to` datetime, primary key (`staff_id`, `department_id`), foreign key (`department_id`) references `departments`(`department_id`), foreign key (`staff_id`) references `staff`(`staff_id`));",
    "output": "SELECT T1.staff_id, T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1"
  },
  {
    "instruction": "List all the distinct cities",
    "input": "create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT DISTINCT city FROM addresses"
  },
  {
    "instruction": "authors working on ImageNet",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid = t1.datasetid JOIN paper AS t4 ON t4.paperid = t3.paperid JOIN writes AS t2 ON t2.paperid = t4.paperid WHERE t1.datasetname = \"ImageNet\" GROUP BY t2.paperid;"
  },
  {
    "instruction": "Find the name of students who took some course offered by Statistics department.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table takes (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), grade varchar(2), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references student (id)\n        ON delete cascade);create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE T1.dept_name = 'Statistics'"
  },
  {
    "instruction": "What are the subject ID, subject name, and the number of available courses for each subject?",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `subjects` (`subject_id` integer primary key, `subject_name` varchar(120));",
    "output": "SELECT T1.subject_id, T2.subject_name, COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id"
  },
  {
    "instruction": "Find the number of students who have the word \"son\" in their personal names.",
    "input": "create table `students` (`student_id` integer primary key, `date_of_registration` datetime, `date_of_latest_logon` datetime, `login_name` varchar(40), `password` varchar(10), `personal_name` varchar(40), `middle_name` varchar(40), `family_name` varchar(40));",
    "output": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\""
  },
  {
    "instruction": "Return the average price of products that have each category code.",
    "input": "create table `products` (`product_id` integer primary key, `parent_product_id` integer, `product_category_code` varchar(20) not null, `date_product_first_available` datetime, `date_product_discontinued` datetime, `product_name` varchar(80), `product_description` varchar(255), `product_price` decimal(19, 4));",
    "output": "SELECT avg(product_price), product_category_code FROM products GROUP BY product_category_code"
  },
  {
    "instruction": "Show the ids and names of festivals that have at least two nominations for artworks.",
    "input": "create table nomination (\"Artwork_ID\" int, \"Festival_ID\" int, \"Result\" text, primary key (\"Artwork_ID\",\"Festival_ID\"), foreign key (\"Artwork_ID\") references `artwork`(\"Artwork_ID\"), foreign key (\"Festival_ID\") references `festival_detail`(\"Festival_ID\"));create table artwork (\"Artwork_ID\" int, \"Type\" text, \"Name\" text, primary key (\"Artwork_ID\"));create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));",
    "output": "SELECT T1.Festival_ID, T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "List the description of all the colors.",
    "input": "create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT color_description FROM ref_colors"
  },
  {
    "instruction": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
    "input": "create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));",
    "output": "SELECT POSITION FROM pilot WHERE Join_Year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year > 2005"
  },
  {
    "instruction": "What are the names, headquarters and founders of the company with the highest revenue?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT name, headquarter, founder FROM manufacturers ORDER BY revenue DESC LIMIT 1"
  },
  {
    "instruction": "For each course id, how many students are registered and what are the course names?",
    "input": "create table students (student_id integer not null, student_details varchar(255), primary key (student_id), foreign key (student_id) references people (person_id));create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));create table courses (course_id varchar(100) not null, course_name varchar(120), course_description varchar(255), other_details varchar(255), primary key (course_id));",
    "output": "SELECT T3.course_name, count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
  },
  {
    "instruction": "Find the founder of the company whose name begins with the letter 'S'.",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'"
  },
  {
    "instruction": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));",
    "output": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'"
  },
  {
    "instruction": "How many countries do not have an roller coaster longer than 3000?",
    "input": "create table \"country\" (\"Country_ID\" int, \"Name\" text, \"Population\" int, \"Area\" int, \"Languages\" text, primary key (\"Country_ID\"));create table \"roller_coaster\" (\"Roller_Coaster_ID\" int, \"Name\" text, \"Park\" text, \"Country_ID\" int, \"Length\" real, \"Height\" real, \"Speed\" text, \"Opened\" text, \"Status\" text, primary key (\"Roller_Coaster_ID\"), foreign key (\"Country_ID\") references `country`(\"Country_ID\"));",
    "output": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH > 3000 )"
  },
  {
    "instruction": "What are the ids for transactions that have an amount greater than the average amount of a transaction?",
    "input": "create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));create table `financial_transactions` (`transaction_id` integer not null , `account_id` integer not null, `invoice_number` integer, `transaction_type` varchar(15) not null, `transaction_date` datetime, `transaction_amount` decimal(19, 4), `transaction_comment` varchar(255), `other_transaction_details` varchar(255), foreign key (`invoice_number`) references `invoices`(`invoice_number`), foreign key (`account_id`) references `accounts`(`account_id`));",
    "output": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > (SELECT avg(transaction_amount) FROM Financial_transactions)"
  },
  {
    "instruction": "Which classes have more than two captains?",
    "input": "create table \"captain\" (\"Captain_ID\" int, \"Name\" text, \"Ship_ID\" int, \"age\" text, \"Class\" text, \"Rank\" text, primary key (\"Captain_ID\"), foreign key (\"Ship_ID\") references \"Ship\"(\"Ship_ID\"));",
    "output": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*) > 2"
  },
  {
    "instruction": "What papers have been written by both Peter Mertens and Dina Barbian ?",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "What is the total number of faculty members?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT count(*) FROM Faculty"
  },
  {
    "instruction": "Which kind of policy type was chosen by the most customers?",
    "input": "create table customer_policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date date, end_date date, primary key (policy_id), foreign key (customer_id) references customers (customer_id));",
    "output": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the name of the person who is the oldest?",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table person (name varchar(20) primary key, age integer, city text, gender text, job text);",
    "output": "SELECT name FROM Person WHERE age = (SELECT max(age) FROM person)"
  },
  {
    "instruction": "what is the largest state in usa",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state );"
  },
  {
    "instruction": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));create table savings (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT T1.name, T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance < T2.balance"
  },
  {
    "instruction": "What is the id of the instructor who advises of all students from History department?",
    "input": "create table advisor (s_id varchar(5), i_id varchar(5), primary key (s_id), foreign key (i_id) references instructor (id)\n        ON delete set null, foreign key (s_id) references student (id)\n        ON delete cascade);create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History'"
  },
  {
    "instruction": "Find the number of medications prescribed for each brand.",
    "input": "create table medication (code integer primary key not null, name varchar(30) not null, brand varchar(30) not null, description varchar(30) not null);create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));",
    "output": "SELECT count(*), T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand"
  },
  {
    "instruction": "What are the names of candidates who have a lower support rate than oppose rate?",
    "input": "create table \"people\" (\"People_ID\" int, \"Sex\" text, \"Name\" text, \"Date_of_Birth\" text, \"Height\" real, \"Weight\" real, primary key (\"People_ID\"));create table \"candidate\" (\"Candidate_ID\" int, \"People_ID\" int, \"Poll_Source\" text, \"Date\" text, \"Support_rate\" real, \"Consider_rate\" real, \"Oppose_rate\" real, \"Unsure_rate\" real, primary key (\"Candidate_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate"
  },
  {
    "instruction": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table movie(mid int primary key, title text, year int, director text);create table reviewer(rid int primary key, name text);",
    "output": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000"
  },
  {
    "instruction": "Show ids, customer ids, names for all accounts.",
    "input": "create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `account_name` varchar(50), `other_account_details` varchar(255));",
    "output": "SELECT account_id, customer_id, account_name FROM Accounts"
  },
  {
    "instruction": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
    "input": "create table `documents` (`document_code` varchar(15) primary key, `document_structure_code` varchar(15) not null, `document_type_code` varchar(15) not null, `access_count` integer, `document_name` varchar(80), foreign key (`document_structure_code`) references `document_structures`(`document_structure_code`));",
    "output": "SELECT document_name, access_count FROM documents ORDER BY access_count DESC LIMIT 1"
  },
  {
    "instruction": "What is the total revenue of all companies whose main office is at Tokyo or Taiwan?",
    "input": "create table manufacturers (code integer, name varchar(255) not null, headquarter varchar(255) not null, founder varchar(255) not null, revenue real, primary key (code));",
    "output": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter = 'Tokyo' OR Headquarter = 'Taiwan'"
  },
  {
    "instruction": "Show the outcome code of mailshots along with the number of mailshots in each outcome code.",
    "input": "create table `mailshot_customers` (`mailshot_id` integer not null, `customer_id` integer not null, `outcome_code` varchar(15) not null, `mailshot_customer_date` datetime, foreign key (`customer_id`) references `customers`(`customer_id`), foreign key (`mailshot_id`) references `mailshot_campaigns`(`mailshot_id`));",
    "output": "SELECT outcome_code, count(*) FROM mailshot_customers GROUP BY outcome_code"
  },
  {
    "instruction": "What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT T1.first_name, T1.last_name, SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;"
  },
  {
    "instruction": "What are the details and ways to get to tourist attractions related to royal family?",
    "input": "create table royal_family (royal_family_id integer not null, royal_family_details varchar(255), primary key (royal_family_id), foreign key (royal_family_id) references tourist_attractions (tourist_attraction_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T1.Royal_Family_Details, T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID"
  },
  {
    "instruction": "For each trip, return its ending station's installation date.",
    "input": "create table trip (id integer primary key, duration integer, start_date text, start_station_name text, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER);create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT T1.id, T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id"
  },
  {
    "instruction": "give me some restaurants in the bay area ?",
    "input": "create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t2.house_number, t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = \"bay area\" );"
  },
  {
    "instruction": "What are all details of the students who registered but did not attend any course?",
    "input": "create table student_course_registrations (student_id integer not null, course_id integer not null, registration_date datetime not null, primary key (student_id, course_id), foreign key (student_id) references students (student_id), foreign key (course_id) references courses (course_id));create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
  },
  {
    "instruction": "Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details.",
    "input": "create table policies (policy_id integer not null, customer_id integer not null, policy_type_code char(15) not null, start_date datetime, end_date datetime, primary key (policy_id), foreign key (customer_id) references customers (customer_id));create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));",
    "output": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\" OR t1.policy_type_code = \"Uniform\""
  },
  {
    "instruction": "How many council taxes are collected for renting arrears ?",
    "input": "create table rent_arrears (council_tax_id integer not null, cmi_cross_ref_id integer not null, primary key (council_tax_id), foreign key (cmi_cross_ref_id) references cmi_cross_references (cmi_cross_ref_id));",
    "output": "SELECT count(*) FROM rent_arrears"
  },
  {
    "instruction": "What are all the distinct details of the customers?",
    "input": "create table customers (customer_id integer not null, customer_details varchar(255) not null, primary key (customer_id));",
    "output": "SELECT DISTINCT customer_details FROM Customers"
  },
  {
    "instruction": "Where is the club \"Hopkins Student Enterprises\" located?",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));",
    "output": "SELECT clublocation FROM club WHERE clubname = \"Hopkins Student Enterprises\""
  },
  {
    "instruction": "Show the dates of performances with attending members whose roles are \"Violin\".",
    "input": "create table \"member_attendance\" (\"Member_ID\" int, \"Performance_ID\" int, \"Num_of_Pieces\" int, primary key (\"Member_ID\",\"Performance_ID\"), foreign key (\"Member_ID\") references `member`(\"Member_ID\"), foreign key (\"Performance_ID\") references `performance`(\"Performance_ID\"));create table \"member\" (\"Member_ID\" text, \"Name\" text, \"Nationality\" text, \"Role\" text, primary key (\"Member_ID\"));create table \"performance\" (\"Performance_ID\" real, \"Date\" text, \"Host\" text, \"Location\" text, \"Attendance\" int, primary key (\"Performance_ID\"));",
    "output": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = \"Violin\""
  },
  {
    "instruction": "what is the phone number of employees whose salary is in the range of 8000 and 12000?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000"
  },
  {
    "instruction": "What is the first and last name of the student participating in the most activities?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table participates_in (stuid integer, actid integer, foreign key(stuid) references student(stuid), foreign key(actid) references activity(actid));",
    "output": "SELECT T1.fname, T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the different ages of editors? Show each age along with the number of editors of that age.",
    "input": "create table \"editor\" (\"Editor_ID\" int, \"Name\" text, \"Age\" real, primary key (\"Editor_ID\"));",
    "output": "SELECT Age, COUNT(*) FROM editor GROUP BY Age"
  },
  {
    "instruction": "List the race class with at least two races.",
    "input": "create table \"race\" (\"Race_ID\" int, \"Name\" text, \"Class\" text, \"Date\" text, \"Track_ID\" text, primary key (\"Race_ID\"), foreign key (\"Track_ID\") references \"track\"(\"Track_ID\"));",
    "output": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*) >= 2"
  },
  {
    "instruction": "What campuses opened between 1935 and 1939?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);",
    "output": "SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939"
  },
  {
    "instruction": "Report the distinct advisors who have more than 2 students.",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*) > 2"
  },
  {
    "instruction": "how many states border colorado and border new mexico",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name = \"new mexico\" ) AND state_name = \"colorado\";"
  },
  {
    "instruction": "What are the first and last name of the author who published the paper titled \"Nameless, Painless\"?",
    "input": "create table authors (authid integer, lname text, fname text, primary key (authid));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Nameless, Painless\""
  },
  {
    "instruction": "What is the paper with the most citation about Artificial Intelligence ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));",
    "output": "SELECT DISTINCT t4.citedpaperid, COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid WHERE t1.keyphrasename = \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;"
  },
  {
    "instruction": "Find the details for all chip models.",
    "input": "create table \"chip_model\" (\"Model_name\" text, \"Launch_year\" real, \"RAM_MiB\" real, \"ROM_MiB\" real, \"Slots\" text, \"WiFi\" text, \"Bluetooth\" text, primary key (\"Model_name\"));",
    "output": "SELECT * FROM chip_model"
  },
  {
    "instruction": "find the number of actors from Iran who played in \" Jim Jarmusch \" movies",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN directed_by AS t2 ON t5.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t1.nationality = \"Iran\" AND t3.name = \"Jim Jarmusch\";"
  },
  {
    "instruction": "What are the payment method codes that have been used by more than 3 parties?",
    "input": "create table `parties` (`party_id` integer primary key, `payment_method_code` varchar(15) not null, `party_phone` varchar(80), `party_email` varchar(80));",
    "output": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*) > 3"
  },
  {
    "instruction": "Show all locations where a gas station for company with market value greater than 100 is located.",
    "input": "create table \"station_company\" (\"Station_ID\" int, \"Company_ID\" int, \"Rank_of_the_Year\" int, primary key (\"Station_ID\",\"Company_ID\"), foreign key (`station_id`) references `gas_station`(`station_id`), foreign key (`company_id`) references `company`(`company_id`));create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));create table \"gas_station\" (\"Station_ID\" int, \"Open_Year\" int, \"Location\" text, \"Manager_Name\" text, \"Vice_Manager_Name\" text, \"Representative_Name\" text, primary key (\"Station_ID\"));",
    "output": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.market_value > 100"
  },
  {
    "instruction": "in which state does the highest point in usa exist",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".",
    "input": "create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));create table `follows` (`f1` int(11) not null, `f2` int(11) not null, primary key (`f1`,`f2`), foreign key (`f1`) references `user_profiles`(`uid`), foreign key (`f2`) references `user_profiles`(`uid`));create table \"user_profiles\" (`uid` int(11) not null, `name` varchar(255) default null, `email` varchar(255) default null, `partitionid` int(11) default null, `followers` int(11) default null, primary key (`uid`));create table `follows` (`f1` int(11) not null, `f2` int(11) not null, primary key (`f1`,`f2`), foreign key (`f1`) references `user_profiles`(`uid`), foreign key (`f2`) references `user_profiles`(`uid`));",
    "output": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count(*) > (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift')"
  },
  {
    "instruction": "Return the average age across all gymnasts.",
    "input": "create table \"gymnast\" (\"Gymnast_ID\" int, \"Floor_Exercise_Points\" real, \"Pommel_Horse_Points\" real, \"Rings_Points\" real, \"Vault_Points\" real, \"Parallel_Bars_Points\" real, \"Horizontal_Bar_Points\" real, \"Total_Points\" real, primary key (\"Gymnast_ID\"), foreign key (\"Gymnast_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Age\" real, \"Height\" real, \"Hometown\" text, primary key (\"People_ID\"));",
    "output": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID"
  },
  {
    "instruction": "What is the average number of cities of markets with low film market estimate bigger than 10000?",
    "input": "create table \"film_market_estimation\" (\"Estimation_ID\" int, \"Low_Estimate\" real, \"High_Estimate\" real, \"Film_ID\" int, \"Type\" text, \"Market_ID\" int, \"Year\" int, primary key (\"Estimation_ID\"), foreign key (\"Film_ID\") references film(\"Film_ID\"), foreign key (\"Market_ID\") references market(\"Market_ID\"));create table \"market\" (\"Market_ID\" int, \"Country\" text, \"Number_cities\" int, primary key (\"Market_ID\"));",
    "output": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000"
  },
  {
    "instruction": "what are the neighboring states for kentucky",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name = \"kentucky\";"
  },
  {
    "instruction": "What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT min(T1.duration), min(T2.rating), T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is"
  },
  {
    "instruction": "Count the number of documents.",
    "input": "create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT count(*) FROM Documents"
  },
  {
    "instruction": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));",
    "output": "SELECT T1.id, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 3"
  },
  {
    "instruction": "What are the titles of courses that are in the Statistics department but not the Psychology department?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'"
  },
  {
    "instruction": "How many distinct students are enrolled in courses?",
    "input": "create table `student_course_enrolment` (`registration_id` integer primary key, `student_id` integer not null, `course_id` integer not null, `date_of_enrolment` datetime not null, `date_of_completion` datetime not null, foreign key (`course_id`) references `courses`(`course_id`), foreign key (`student_id`) references `students`(`student_id`));",
    "output": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment"
  },
  {
    "instruction": "How many different students play games?",
    "input": "create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));",
    "output": "SELECT count(DISTINCT StuID) FROM Plays_games"
  },
  {
    "instruction": "What is the city with the smallest GDP? Return the city and its GDP.",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));",
    "output": "SELECT city, GDP FROM city ORDER BY GDP LIMIT 1"
  },
  {
    "instruction": "What are the reigns and days held of all wrestlers?",
    "input": "create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT Reign, Days_held FROM wrestler"
  },
  {
    "instruction": "Papers on chi",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"chi\";"
  },
  {
    "instruction": "what is the biggest city in usa",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population = ( SELECT MAX ( population ) FROM city );"
  },
  {
    "instruction": "What are the names of regions that were not affected?",
    "input": "create table \"region\" (`region_id` int, `region_code` text, `region_name` text, primary key (\"Region_id\"));create table `affected_region` (`region_id` int, `storm_id` int, `number_city_affected` real, primary key (`region_id`,`storm_id`), foreign key (`region_id`) references `region`(`region_id`), foreign key (`storm_id`) references `storm`(`storm_id`));",
    "output": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)"
  },
  {
    "instruction": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.",
    "input": "create table \"screen_mode\" (\"Graphics_mode\" real, \"Char_cells\" text, \"Pixels\" text, \"Hardware_colours\" real, \"used_kb\" real, \"map\" text, \"Type\" text, primary key (\"Graphics_mode\"));create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));create table \"screen_mode\" (\"Graphics_mode\" real, \"Char_cells\" text, \"Pixels\" text, \"Hardware_colours\" real, \"used_kb\" real, \"map\" text, \"Type\" text, primary key (\"Graphics_mode\"));create table \"phone\" (\"Company_name\" text, \"Hardware_Model_name\" text, \"Accreditation_type\" text, \"Accreditation_level\" text, \"Date\" text, \"chip_model\" text, \"screen_mode\" text, primary key(\"Hardware_Model_name\"), foreign key (`screen_mode`) references `screen_mode`(`graphics_mode`), foreign key (`chip_model`) references `chip_model`(`model_name`));",
    "output": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode WHERE t2.Accreditation_type = 'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode WHERE t2.Accreditation_type = 'Full'"
  },
  {
    "instruction": "What are the names of musicals who have at 3 or more actors?",
    "input": "create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3"
  },
  {
    "instruction": "Show the country names and the corresponding number of players.",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT Country_name, COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name"
  },
  {
    "instruction": "Tell me the name of the staff in charge of the attraction called \"US museum\".",
    "input": "create table staff (staff_id integer not null, tourist_attraction_id integer not null, name varchar(40), other_details varchar(255), primary key (staff_id), foreign key (tourist_attraction_id) references tourist_attractions (tourist_attraction_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = \"US museum\""
  },
  {
    "instruction": "name all the lakes of us",
    "input": "create table `lake` (`lake_name` text , `area` double default null , `country_name` varchar(3) not null default '' , `state_name` text);",
    "output": "SELECT lake_name FROM lake;"
  },
  {
    "instruction": "Find the first name and last name of the instructor of course that has course name",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT T2.Fname, T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = \"COMPUTER LITERACY\""
  },
  {
    "instruction": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?",
    "input": "create table address (address_id smallint unsigned not null, address varchar(50) not null, address2 varchar(50) default null, district varchar(20) not null, city_id smallint unsigned not null, postal_code varchar(10) default null, phone varchar(20) not null, last_update timestamp not null default current_timestamp, primary key (address_id), foreign key (city_id) references city (city_id));create table city (city_id smallint unsigned not null, city varchar(50) not null, country_id smallint unsigned not null, last_update timestamp not null default current_timestamp, primary key (city_id), foreign key (country_id) references country (country_id));",
    "output": "SELECT T2.city, count(*), T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the last names of faculties in building Barton in alphabetic order.",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT Lname FROM FACULTY WHERE Building = \"Barton\" ORDER BY Lname"
  },
  {
    "instruction": "Who is the composer of track Fast As a Shark?",
    "input": "create table tracks (id integer primary key autoincrement, name varchar(200) not null, album_id integer, media_type_id integer not null, genre_id integer, composer varchar(220), milliseconds integer not null, bytes integer, unit_price numeric(10, 2) not null, foreign key (album_id) references albums (id)\n        ON delete no action\n        ON update no action, foreign key (genre_id) references genres (id)\n        ON delete no action\n        ON update no action, foreign key (media_type_id) references media_types (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";"
  },
  {
    "instruction": "return me the total citations of papers in the VLDB conference in each year .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t2.year, SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = \"VLDB\" GROUP BY t2.year;"
  },
  {
    "instruction": "For each player, what are their name, season, and country that they belong to?",
    "input": "create table \"country\" (\"Country_id\" int, \"Country_name\" text, \"Capital\" text, \"Official_native_language\" text, primary key (\"Country_id\"));create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT T2.Season, T2.Player, T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country"
  },
  {
    "instruction": "Find the names of songs whose genre is modern or language is English.",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT song_name FROM song WHERE genre_is = \"modern\" OR languages = \"english\""
  },
  {
    "instruction": "what are the populations of the states through which the mississippi run",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );"
  },
  {
    "instruction": "Show the years, book titles, and publishers for all books, in descending order by year.",
    "input": "create table \"book_club\" (\"book_club_id\" int, \"Year\" int, \"Author_or_Editor\" text, \"Book_Title\" text, \"Publisher\" text, \"Category\" text, \"Result\" text, primary key (\"book_club_id\"));",
    "output": "SELECT YEAR, book_title, publisher FROM book_club ORDER BY YEAR DESC"
  },
  {
    "instruction": "Show the ids of all employees who have destroyed a document.",
    "input": "create table documents_to_be_destroyed (document_id integer not null, destruction_authorised_by_employee_id integer, destroyed_by_employee_id integer, planned_destruction_date datetime, actual_destruction_date datetime, other_details varchar(255), primary key (document_id), foreign key (destroyed_by_employee_id) references employees (employee_id), foreign key (destruction_authorised_by_employee_id) references employees (employee_id), foreign key (planned_destruction_date) references ref_calendar (calendar_date), foreign key (actual_destruction_date) references ref_calendar (calendar_date), foreign key (document_id) references all_documents (document_id));",
    "output": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed"
  },
  {
    "instruction": "How many cities are there that have more than 3 airports?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*) > 3)"
  },
  {
    "instruction": "Count the number of players who enter hall of fame for each year.",
    "input": "create table hall_of_fame (player_id text, yearid integer, votedby text, ballots numeric, needed numeric, votes numeric, inducted text, category text, needed_note text, foreign key (player_id) references player(player_id));",
    "output": "SELECT yearid, count(*) FROM hall_of_fame GROUP BY yearid;"
  },
  {
    "instruction": "Take the average of the school enrollment.",
    "input": "create table \"school\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Enrollment\" real, \"Founded\" real, \"Denomination\" text, \"Boys_or_Girls\" text, \"Day_or_Boarding\" text, \"Year_Entered_Competition\" real, \"School_Colors\" text, primary key (\"School_Id\"));",
    "output": "SELECT avg(Enrollment) FROM school"
  },
  {
    "instruction": "where are some restaurants good for french food in the yosemite and mono lake area ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t3.house_number, t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id WHERE t2.region = \"yosemite and mono lake area\" AND t1.food_type = \"french\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Find all actors who acted in the same movie as \" Tom Hanks \"",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN CAST AS t3 ON t5.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid WHERE t2.name = \"Tom Hanks\";"
  },
  {
    "instruction": "What are distinct locations where tracks are located?",
    "input": "create table \"track\" (\"Track_ID\" int, \"Name\" text, \"Location\" text, \"Seating\" real, \"Year_Opened\" real, primary key (\"Track_ID\"));",
    "output": "SELECT DISTINCT LOCATION FROM track"
  },
  {
    "instruction": "return me the total citations of papers in PVLDB before 2005 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"journal\" (\"homepage\" text, \"jid\" int, \"name\" text, primary key(\"jid\"));",
    "output": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid WHERE t1.name = \"PVLDB\" AND t2.year < 2005;"
  },
  {
    "instruction": "How many different cities have these stations?",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);",
    "output": "SELECT count(DISTINCT city) FROM station"
  },
  {
    "instruction": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC"
  },
  {
    "instruction": "what is a good restaurant in the bay area ?",
    "input": "create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"GEOGRAPHIC\" (\"CITY_NAME\" text, \"COUNTY\" text, \"REGION\" text, primary key(\"CITY_NAME\"));",
    "output": "SELECT t2.house_number, t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region = \"region0\" ) AND t1.rating > 2.5;"
  },
  {
    "instruction": "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT count(*), affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation"
  },
  {
    "instruction": "How many bands are there?",
    "input": "create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT count(*) FROM Band"
  },
  {
    "instruction": "Which problem id and log id are assigned to the staff named Rylan Homenick?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_first_name` varchar(80), `staff_last_name` varchar(80), `other_staff_details` varchar(255));create table `problem_log` (`problem_log_id` integer primary key, `assigned_to_staff_id` integer not null, `problem_id` integer not null, `problem_category_code` varchar(20) not null, `problem_status_code` varchar(20) not null, `log_entry_date` datetime, `log_entry_description` varchar(255), `log_entry_fix` varchar(255), `other_log_details` varchar(255), foreign key (`problem_category_code`) references `problem_category_codes`(`problem_category_code`), foreign key (`assigned_to_staff_id`) references `staff`(`staff_id`), foreign key (`problem_id`) references `problems`(`problem_id`), foreign key (`problem_status_code`) references `problem_status_codes`(`problem_status_code`));",
    "output": "SELECT DISTINCT T2.problem_id, T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\""
  },
  {
    "instruction": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
    "input": "create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));create table `addresses` (`address_id` integer primary key, `address_content` varchar(80), `city` varchar(50), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));",
    "output": "SELECT address_content FROM addresses WHERE city = \"East Julianaside\" AND state_province_county = \"Texas\" UNION SELECT address_content FROM addresses WHERE city = \"Gleasonmouth\" AND state_province_county = \"Arizona\""
  },
  {
    "instruction": "What are the id and name of the photos for mountains?",
    "input": "create table \"mountain\" (\"id\" int, \"name\" text, \"Height\" real, \"Prominence\" real, \"Range\" text, \"Country\" text, primary key(\"id\"));create table \"photos\" (\"id\" int, \"camera_lens_id\" int, \"mountain_id\" int, \"color\" text, \"name\" text, primary key(\"id\"), foreign key(\"camera_lens_id\") references `camera_lens`(\"id\"), foreign key(\"mountain_id\") references `mountain`(\"id\"));",
    "output": "SELECT T1.id, T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.height > 4000"
  },
  {
    "instruction": "which rivers run through the state with the lowest elevation in the usa",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation = ( SELECT MIN ( lowest_elevation ) FROM highlow ) );"
  },
  {
    "instruction": "What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT employee_id, job_id FROM employees WHERE salary < ( SELECT min(salary) FROM employees WHERE job_id = 'MK_MAN' )"
  },
  {
    "instruction": "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?",
    "input": "create table college (cname varchar(20) not null, state varchar(2), enr numeric(5, 0), primary key (cname));create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT DISTINCT T1.state, T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'"
  },
  {
    "instruction": "Hom many albums does the artist \"Metallica\" have?",
    "input": "create table `album` (`albumid` integer not null , `title` varchar(160) not null , `artistid` integer not null , primary key (`albumid`) , constraint `fk_albumartistid` foreign key (`artistid`) references `artist` (`artistid`)\n        ON delete no action\n        ON update no action);create table `artist` (`artistid` integer not null , `name` varchar(120) default null , primary key (`artistid`));",
    "output": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"Metallica\""
  },
  {
    "instruction": "Return the founded year for the school with the largest enrollment.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
  },
  {
    "instruction": "Papers written by Liwen Xiong in 2015",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"Liwen Xiong\" AND t3.year = 2015;"
  },
  {
    "instruction": "List the name and assets of each company in ascending order of company name.",
    "input": "create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT name, Assets_billion FROM Companies ORDER BY name ASC"
  },
  {
    "instruction": "Who cites Daniel A Reed the most",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t4.citingpaperid ), t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t4 ON t2.paperid = t4.citedpaperid JOIN writes AS t3 ON t3.paperid = t4.citingpaperid WHERE t1.authorname = \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;"
  },
  {
    "instruction": "Show gas station id, location, and manager_name for all gas stations ordered by open year.",
    "input": "create table \"gas_station\" (\"Station_ID\" int, \"Open_Year\" int, \"Location\" text, \"Manager_Name\" text, \"Vice_Manager_Name\" text, \"Representative_Name\" text, primary key (\"Station_ID\"));",
    "output": "SELECT station_id, LOCATION, manager_name FROM gas_station ORDER BY open_year"
  },
  {
    "instruction": "How many students attend course English?",
    "input": "create table courses (course_id varchar(100) not null, course_name varchar(120), course_description varchar(255), other_details varchar(255), primary key (course_id));create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
  },
  {
    "instruction": "What is the color code and description of the product named \"chervil\"?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT t1.color_code, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"chervil\""
  },
  {
    "instruction": "Return the prices of wines produced before 2010.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Price FROM WINE WHERE YEAR < 2010"
  },
  {
    "instruction": "How many employees does each role have? List role description, id and number of employees.",
    "input": "create table roles (role_code char(15) not null, role_description varchar(255), primary key (role_code));create table employees (employee_id integer not null, role_code char(15) not null, employee_name varchar(255), other_details varchar(255), primary key (employee_id), foreign key (role_code) references roles (role_code));",
    "output": "SELECT T1.role_description, T2.role_code, count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;"
  },
  {
    "instruction": "how many french restaurants are there in palo alto ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"palo alto\" AND t1.food_type = \"french\";"
  },
  {
    "instruction": "Show all school names in alphabetical order.",
    "input": "create table \"School\" (\"School_id\" text, \"School_name\" text, \"Location\" text, \"Mascot\" text, \"Enrollment\" int, \"IHSAA_Class\" text, \"IHSAA_Football_Class\" text, \"County\" text, primary key (\"School_id\"));",
    "output": "SELECT school_name FROM school ORDER BY school_name"
  },
  {
    "instruction": "How many Bars in \" Dallas \" have a rating above 3.5 ?",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.city = \"Dallas\" AND t1.rating > 3.5 AND t2.category_name = \"Bars\";"
  },
  {
    "instruction": "How many students exist?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT count(*) FROM student"
  },
  {
    "instruction": "what is the population density in the state with capital austin",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT density FROM state WHERE capital = \"austin\";"
  },
  {
    "instruction": "Show me some recent papers on deep learning ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid, t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"deep learning\" ORDER BY t3.year DESC;"
  },
  {
    "instruction": "the papers at eccv in 2014 using ImageNet dataset",
    "input": "create table `paperdataset` (`paperid` integer default null , `datasetid` integer default null , primary key (`datasetid`, `paperid`));create table `dataset` (`datasetid` integer not null , `datasetname` varchar(50) default null , primary key (`datasetid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.datasetname = \"ImageNet\" AND t3.year = 2014 AND t4.venuename = \"eccv\";"
  },
  {
    "instruction": "Show the headquarters that have at least two companies.",
    "input": "create table \"company\" (\"Company_ID\" real, \"Name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_in_Billion\" real, \"Profits_in_Billion\" real, \"Assets_in_Billion\" real, \"Market_Value_in_Billion\" real, primary key (\"Company_ID\"));",
    "output": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*) >= 2"
  },
  {
    "instruction": "Which allergy has most number of students affected?",
    "input": "create table has_allergy (stuid integer, allergy varchar(20), foreign key(stuid) references student(stuid), foreign key(allergy) references allergy_type(allergy));",
    "output": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the female friends of Alice.",
    "input": "create table person (name varchar(20) primary key, age integer, city text, gender text, job text);create table personfriend (name varchar(20), friend varchar(20), year integer, foreign key (name) references person(name), foreign key (friend) references person(name));",
    "output": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'female'"
  },
  {
    "instruction": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
    "input": "create table `employees` (`employee_id` decimal(6, 0) not null default '0', `first_name` varchar(20) default null, `last_name` varchar(25) not null, `email` varchar(25) not null, `phone_number` varchar(20) default null, `hire_date` date not null, `job_id` varchar(10) not null, `salary` decimal(8, 2) default null, `commission_pct` decimal(2, 2) default null, `manager_id` decimal(6, 0) default null, `department_id` decimal(4, 0) default null, primary key (`employee_id`), foreign key (`department_id`) references departments(`department_id`), foreign key (`job_id`) references jobs(`job_id`));",
    "output": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC"
  },
  {
    "instruction": "what is the density of wyoming",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT density FROM state WHERE state_name = \"wyoming\";"
  },
  {
    "instruction": "what state has the largest capital",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM city WHERE population = ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name );"
  },
  {
    "instruction": "What are the origins of all flights that are headed to Honolulu?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT origin FROM Flight WHERE destination = \"Honolulu\""
  },
  {
    "instruction": "How many orders does Lucas Mancini has?",
    "input": "create table customers (id integer primary key autoincrement, first_name varchar(40) not null, last_name varchar(20) not null, company varchar(80), address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60) not null, support_rep_id integer, foreign key (support_rep_id) references employees (id)\n        ON delete no action\n        ON update no action);create table invoices (id integer primary key autoincrement, customer_id integer not null, invoice_date timestamp not null, billing_address varchar(70), billing_city varchar(40), billing_state varchar(40), billing_country varchar(40), billing_postal_code varchar(10), total numeric(10, 2) not null, foreign key (customer_id) references customers (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
  },
  {
    "instruction": "Show writers who have published a book with price more than 4000000.",
    "input": "create table \"book\" (\"Book_ID\" int, \"Title\" text, \"Issues\" real, \"Writer\" text, primary key (\"Book_ID\"));create table \"publication\" (\"Publication_ID\" int, \"Book_ID\" int, \"Publisher\" text, \"Publication_Date\" text, \"Price\" real, primary key (\"Publication_ID\"), foreign key (\"Book_ID\") references \"book\"(\"Book_ID\"));",
    "output": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000"
  },
  {
    "instruction": "Show all cities without a branch having more than 100 memberships.",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount > 100"
  },
  {
    "instruction": "Find the names of scientists who are not working on the project with the highest hours.",
    "input": "create table scientists (ssn int, name char(30) not null, primary key (ssn));create table assignedto (scientist int not null, project char(4) not null, primary key (scientist, project), foreign key (scientist) references scientists (ssn), foreign key (project) references projects (code));create table projects (code char(4), name char(50) not null, hours int, primary key (code));create table scientists (ssn int, name char(30) not null, primary key (ssn));create table projects (code char(4), name char(50) not null, hours int, primary key (code));",
    "output": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT max(hours) FROM projects)"
  },
  {
    "instruction": "How many climbers are from each country?",
    "input": "create table \"climber\" (\"Climber_ID\" int, \"Name\" text, \"Country\" text, \"Time\" text, \"Points\" real, \"Mountain_ID\" int, primary key (\"Climber_ID\"), foreign key (\"Mountain_ID\") references \"mountain\"(\"Mountain_ID\"));",
    "output": "SELECT Country, COUNT(*) FROM climber GROUP BY Country"
  },
  {
    "instruction": "return me the total citations of papers in the VLDB conference in 2005 .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid WHERE t1.name = \"VLDB\" AND t2.year = 2005;"
  },
  {
    "instruction": "How many games are held after season 2007?",
    "input": "create table \"game\" (\"stadium_id\" int, \"id\" int, \"Season\" int, \"Date\" text, \"Home_team\" text, \"Away_team\" text, \"Score\" text, \"Competition\" text, primary key (\"id\"), foreign key (\"stadium_id\") references `stadium`(\"id\"));",
    "output": "SELECT count(*) FROM game WHERE season > 2007"
  },
  {
    "instruction": "how many cities does the usa have",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT COUNT ( city_name ) FROM city;"
  },
  {
    "instruction": "What is the title, credit value, and department name for courses with more than one prerequisite?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));",
    "output": "SELECT T1.title, T1.credits, T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count(*) > 1"
  },
  {
    "instruction": "How many architects haven't built a mill before year 1850?",
    "input": "create table \"architect\" (\"id\" text, \"name\" text, \"nationality\" text, \"gender\" text, primary key(\"id\"));create table \"mill\" (\"architect_id\" int, \"id\" int, \"location\" text, \"name\" text, \"type\" text, \"built_year\" int, \"notes\" text, primary key (\"id\"), foreign key (\"architect_id\") references `architect`(\"id\"));",
    "output": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year < 1850 );"
  },
  {
    "instruction": "What is maximum group equity shareholding of the companies?",
    "input": "create table \"operate_company\" (\"id\" int, \"name\" text, \"Type\" text, \"Principal_activities\" text, \"Incorporated_in\" text, \"Group_Equity_Shareholding\" real, primary key (\"id\"));",
    "output": "SELECT max(group_equity_shareholding) FROM operate_company"
  },
  {
    "instruction": "What are the ids for all sporty students who are on scholarship?",
    "input": "create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'"
  },
  {
    "instruction": "What are the  ids of every student who has never attended a course?",
    "input": "create table students (student_id integer not null, student_details varchar(255), primary key (student_id), foreign key (student_id) references people (person_id));create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
  },
  {
    "instruction": "What are the names of all the games that have been played for at least 1000 hours?",
    "input": "create table plays_games (stuid integer, gameid integer, hours_played integer, foreign key(gameid) references video_games(gameid), foreign key(stuid) references student(stuid));create table video_games (gameid integer primary key, gname varchar(40), gtype varchar(40));",
    "output": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid HAVING sum(hours_played) >= 1000"
  },
  {
    "instruction": "What is the name of teh studio that created the most films?",
    "input": "create table \"film\" (\"Film_ID\" int, \"Title\" text, \"Studio\" text, \"Director\" text, \"Gross_in_dollar\" int, primary key (\"Film_ID\"));",
    "output": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
    "input": "create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Home Town\" text, primary key (\"People_ID\"));create table \"perpetrator\" (\"Perpetrator_ID\" int, \"People_ID\" int, \"Date\" text, \"Year\" real, \"Location\" text, \"Country\" text, \"Killed\" int, \"Injured\" int, primary key (\"Perpetrator_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));",
    "output": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = \"China\" OR T2.Country = \"Japan\""
  },
  {
    "instruction": "What is the year in which most ships were built?",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));",
    "output": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What is the average price for a lesson taught by Janessa Sawayn?",
    "input": "create table `lessons` (`lesson_id` integer primary key, `customer_id` integer not null, `lesson_status_code` varchar(15) not null, `staff_id` integer, `vehicle_id` integer not null, `lesson_date` datetime, `lesson_time` varchar(10), `price` double null, foreign key (`vehicle_id`) references `vehicles`(`vehicle_id`), foreign key (`staff_id`) references `staff`(`staff_id`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";"
  },
  {
    "instruction": "return me all the organizations in Databases area .",
    "input": "create table \"domain_author\" (\"aid\" int, \"did\" int, primary key (\"did\", \"aid\"), foreign key(\"aid\") references `author`(\"aid\"), foreign key(\"did\") references `domain`(\"did\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));",
    "output": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid WHERE t3.name = \"Databases\";"
  },
  {
    "instruction": "Select the names of all the products in the store.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT Name FROM Products"
  },
  {
    "instruction": "List all the log ids and their descriptions from the problem logs.",
    "input": "create table `problem_log` (`problem_log_id` integer primary key, `assigned_to_staff_id` integer not null, `problem_id` integer not null, `problem_category_code` varchar(20) not null, `problem_status_code` varchar(20) not null, `log_entry_date` datetime, `log_entry_description` varchar(255), `log_entry_fix` varchar(255), `other_log_details` varchar(255), foreign key (`problem_category_code`) references `problem_category_codes`(`problem_category_code`), foreign key (`assigned_to_staff_id`) references `staff`(`staff_id`), foreign key (`problem_id`) references `problems`(`problem_id`), foreign key (`problem_status_code`) references `problem_status_codes`(`problem_status_code`));",
    "output": "SELECT problem_log_id, log_entry_description FROM problem_log"
  },
  {
    "instruction": "Find all states in which there is a Whataburger",
    "input": "create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT state FROM business WHERE name = \"Whataburger\";"
  },
  {
    "instruction": "Show customer ids who don't have an account.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(50), `customer_middle_initial` varchar(1), `customer_last_name` varchar(50), `gender` varchar(1), `email_address` varchar(255), `login_name` varchar(80), `login_password` varchar(20), `phone_number` varchar(255), `town_city` varchar(50), `state_county_province` varchar(50), `country` varchar(50));create table `accounts` (`account_id` integer primary key, `customer_id` integer not null, `date_account_opened` datetime, `account_name` varchar(50), `other_account_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));",
    "output": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts"
  },
  {
    "instruction": "For each year, return the year and the average number of attendance at home games.",
    "input": "create table home_game (year integer, league_id text, team_id text, park_id text, span_first text, span_last text, games integer, openings integer, attendance integer, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id));",
    "output": "SELECT YEAR, avg(attendance) FROM home_game GROUP BY YEAR;"
  },
  {
    "instruction": "Find the id and color description of the products with at least 2 characteristics.",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));create table `product_characteristics` (`product_id` integer not null, `characteristic_id` integer not null, `product_characteristic_value` varchar(50), foreign key (`characteristic_id`) references `characteristics`(`characteristic_id`), foreign key (`product_id`) references `products`(`product_id`));",
    "output": "SELECT t1.product_id, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id HAVING count(*) >= 2"
  },
  {
    "instruction": "How many routes end in a Canadian airport?",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);create table routes (rid integer primary key, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- \"Y\" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid));",
    "output": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE country = 'Canada'"
  },
  {
    "instruction": "What instruments did the musician with the last name \"Heilo\" play in \"Badlands\"?",
    "input": "create table \"Performance\" (\"SongId\" integer, \"Bandmate\" integer, \"StagePosition\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);create table \"Instruments\" (\"SongId\" integer, \"BandmateId\" integer, \"Instrument\" text , primary key(songid, bandmateid, instrument), foreign key (songid) references songs(songid), foreign key (bandmateid) references band(id));",
    "output": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = \"Heilo\" AND T3.title = \"Badlands\""
  },
  {
    "instruction": "where are mountains",
    "input": "create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM mountain;"
  },
  {
    "instruction": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `airport_aircraft` (\"ID\" int, \"Airport_ID\" int, \"Aircraft_ID\" int, primary key (\"Airport_ID\",\"Aircraft_ID\"), foreign key (\"Airport_ID\") references `airport`(`airport_id`), foreign key (\"Aircraft_ID\") references `aircraft`(`aircraft_id`));create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `airport_aircraft` (\"ID\" int, \"Airport_ID\" int, \"Aircraft_ID\" int, primary key (\"Airport_ID\",\"Aircraft_ID\"), foreign key (\"Airport_ID\") references `airport`(`airport_id`), foreign key (\"Aircraft_ID\") references `aircraft`(`aircraft_id`));create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = \"London Gatwick\""
  },
  {
    "instruction": "What is the description of the color used by least products?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "instruction": "What is the total rating of channel for each channel owner?",
    "input": "create table \"channel\" (\"Channel_ID\" int, \"Name\" text, \"Owner\" text, \"Share_in_percent\" real, \"Rating_in_percent\" real, primary key (\"Channel_ID\"));",
    "output": "SELECT sum(Rating_in_percent), OWNER FROM channel GROUP BY OWNER"
  },
  {
    "instruction": "List all the reviews by Michelle for Italian restaurant",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN review AS t4 ON t4.business_id = t1.business_id JOIN USER AS t5 ON t5.user_id = t4.user_id WHERE t2.category_name = \"Italian\" AND t3.category_name = \"category_category_name1\" AND t5.name = \"Michelle\";"
  },
  {
    "instruction": "What is the title of the prerequisite class of International Finance course?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')"
  },
  {
    "instruction": "What si the youngest employee's first and last name?",
    "input": "create table employees (id integer primary key autoincrement, last_name varchar(20) not null, first_name varchar(20) not null, title varchar(30), reports_to integer, birth_date timestamp, hire_date timestamp, address varchar(70), city varchar(40), state varchar(40), country varchar(40), postal_code varchar(10), phone varchar(24), fax varchar(24), email varchar(60), foreign key (reports_to) references employees (id)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1;"
  },
  {
    "instruction": "How many Professors are in building NEB?",
    "input": "create table faculty (facid integer primary key, lname varchar(15), fname varchar(15), rank varchar(15), sex varchar(1), phone integer, room varchar(5), building varchar(13));",
    "output": "SELECT count(*) FROM Faculty WHERE Rank = \"Professor\" AND building = \"NEB\""
  },
  {
    "instruction": "What is the average number of audience for festivals?",
    "input": "create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));",
    "output": "SELECT avg(Num_of_Audience) FROM festival_detail"
  },
  {
    "instruction": "What are the names of all movies made before 1980 or had James Cameron as the director?",
    "input": "create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT title FROM Movie WHERE director = \"James Cameron\" OR YEAR < 1980"
  },
  {
    "instruction": "Show the name of each county along with the corresponding number of delegates from that county.",
    "input": "create table \"county\" (\"County_Id\" int, \"County_name\" text, \"Population\" real, \"Zip_code\" text, primary key (\"County_Id\"));create table \"election\" (\"Election_ID\" int, \"Counties_Represented\" text, \"District\" int, \"Delegate\" text, \"Party\" int, \"First_Elected\" real, \"Committee\" text, primary key (\"Election_ID\"), foreign key (`party`) references `party`(`party_id`), foreign key (`district`) references `county`(`county_id`));",
    "output": "SELECT T1.County_name, COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id"
  },
  {
    "instruction": "Show ids for all documents with budget types described as 'Government'.",
    "input": "create table documents_with_expenses (document_id integer not null, budget_type_code char(15) not null, document_details varchar(255), primary key (document_id), foreign key (budget_type_code) references ref_budget_codes (budget_type_code), foreign key (document_id) references documents (document_id));create table ref_budget_codes (budget_type_code char(15) not null, budget_type_description varchar(255) not null, primary key (budget_type_code));",
    "output": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE T2.budget_type_Description = \"Government\""
  },
  {
    "instruction": "Find the number of classes in each department.",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT count(*), dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code"
  },
  {
    "instruction": "What are the names of students who have taken Statistics courses?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table takes (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), grade varchar(2), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references student (id)\n        ON delete cascade);create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE T1.dept_name = 'Statistics'"
  },
  {
    "instruction": "Give the title of the prerequisite to the course International Finance.",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);",
    "output": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')"
  },
  {
    "instruction": "what states border states which the mississippi runs through",
    "input": "create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name = \"mississippi\" );"
  },
  {
    "instruction": "Which allergy type is most common?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "how many citizens in boulder",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = \"boulder\";"
  },
  {
    "instruction": "How many papers David M. Blei has in AISTATS ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"David M. Blei\" AND t4.venuename = \"AISTATS\";"
  },
  {
    "instruction": "what papers have fewer than 5 citations by ACL papers",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid WHERE t2.venuename = \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid ) < 5;"
  },
  {
    "instruction": "What are the names of the pilots that have not won any matches in Australia?",
    "input": "create table `pilot` (`pilot_id` int(11) not null, `name` varchar(50) not null, `age` int(11) not null, primary key (`pilot_id`));create table `match` (\"Round\" real, \"Location\" text, \"Country\" text, \"Date\" text, \"Fastest_Qualifying\" text, \"Winning_Pilot\" text, \"Winning_Aircraft\" text, primary key (\"Round\"), foreign key (`winning_aircraft`) references `aircraft`(`aircraft_id`), foreign key (`winning_pilot`) references `pilot`(`pilot_id`));",
    "output": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot FROM MATCH WHERE country = 'Australia')"
  },
  {
    "instruction": "What is the total checking balance in all accounts?",
    "input": "create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT sum(balance) FROM checking"
  },
  {
    "instruction": "What are the ids of all female students who play football?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));create table sportsinfo (stuid integer, sportname varchar(32), hoursperweek integer, gamesplayed integer, onscholarship varchar(1), foreign key(stuid) references student(stuid));",
    "output": "SELECT StuID FROM Student WHERE sex = 'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname = \"Football\""
  },
  {
    "instruction": "where is mount whitney located",
    "input": "create table `mountain` (`mountain_name` text , `mountain_altitude` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`mountain_name`, `state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM mountain WHERE mountain_name = \"whitney\";"
  },
  {
    "instruction": "what is the area of new mexico",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT area FROM state WHERE state_name = \"new mexico\";"
  },
  {
    "instruction": "What are the ids of the students who attended courses in the statistics department in order of attendance date.",
    "input": "create table courses (course_id varchar(100) not null, course_name varchar(120), course_description varchar(255), other_details varchar(255), primary key (course_id));create table student_course_attendance (student_id integer not null, course_id integer not null, date_of_attendance datetime not null, primary key (student_id, course_id), foreign key (student_id, course_id) references student_course_registrations (student_id, course_id));",
    "output": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance"
  },
  {
    "instruction": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
    "input": "create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));create table course (cid varchar(7) primary key, cname varchar(40), credits integer, instructor\tinteger, days varchar(5), hours varchar(11), dno integer, foreign key(instructor) references faculty(facid), foreign key(dno) references department(dno));",
    "output": "SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4"
  },
  {
    "instruction": "How many credits is the course that the student with the last name Smithson took, and what is its description?",
    "input": "create table class (class_code varchar(5) primary key, crs_code varchar(10), class_section varchar(2), class_time varchar(20), class_room varchar(8), prof_num int, foreign key (crs_code) references course(crs_code) foreign key (prof_num) references employee(emp_num));create table enroll (class_code varchar(5), stu_num int, enroll_grade varchar(50), foreign key (class_code) references class(class_code) foreign key (stu_num) references student(stu_num));create table student (stu_num int primary key, stu_lname varchar(15), stu_fname varchar(15), stu_init varchar(1), stu_dob datetime, stu_hrs int, stu_class varchar(2), stu_gpa float(8), stu_transfer numeric, dept_code varchar(18), stu_phone varchar(4), prof_num int, foreign key (dept_code) references department(dept_code));create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT T4.crs_description, T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE T3.stu_lname = 'Smithson'"
  },
  {
    "instruction": "what is the capital of the smallest state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT capital FROM state WHERE area = ( SELECT MIN ( area ) FROM state );"
  },
  {
    "instruction": "When was the order placed whose shipment tracking number is 3452? Give me the date.",
    "input": "create table `orders` (`order_id` integer primary key, `customer_id` integer not null, `order_status` varchar(10) not null, `date_order_placed` datetime not null, `order_details` varchar(255), foreign key (`customer_id`) references `customers`(`customer_id`));create table `shipments` (`shipment_id` integer primary key, `order_id` integer not null, `invoice_number` integer not null, `shipment_tracking_number` varchar(80), `shipment_date` datetime, `other_shipment_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`invoice_number`) references `invoices`(`invoice_number`));",
    "output": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452"
  },
  {
    "instruction": "List the names of all routes in alphabetic order.",
    "input": "create table `delivery_routes` (`route_id` integer primary key, `route_name` varchar(50), `other_route_details` varchar(255));",
    "output": "SELECT route_name FROM Delivery_Routes ORDER BY route_name"
  },
  {
    "instruction": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
    "input": "create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));",
    "output": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'"
  },
  {
    "instruction": "List the titles of the books in ascending order of issues.",
    "input": "create table \"book\" (\"Book_ID\" int, \"Title\" text, \"Issues\" real, \"Writer\" text, primary key (\"Book_ID\"));",
    "output": "SELECT Title FROM book ORDER BY Issues ASC"
  },
  {
    "instruction": "What is the total money requested by entrepreneurs with height more than 1.85?",
    "input": "create table \"entrepreneur\" (\"Entrepreneur_ID\" int, \"People_ID\" int, \"Company\" text, \"Money_Requested\" real, \"Investor\" text, primary key (\"Entrepreneur_ID\"), foreign key (\"People_ID\") references \"people\"(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Date_of_Birth\" text, primary key (\"People_ID\"));",
    "output": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85"
  },
  {
    "instruction": "What is the average unit price of rock tracks?",
    "input": "create table `genre` (`genreid` integer not null , `name` varchar(120) default null , primary key (`genreid`));create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\""
  },
  {
    "instruction": "On which days more than one revisions were made on catalogs.",
    "input": "create table `catalogs` (`catalog_id` integer primary key, `catalog_name` varchar(50), `catalog_publisher` varchar(80), `date_of_publication` datetime, `date_of_latest_revision` datetime);",
    "output": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*) > 1"
  },
  {
    "instruction": "Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.major = \"600\""
  },
  {
    "instruction": "Return the name of the category to which the film 'HUNGER ROOF' belongs.",
    "input": "create table category (category_id tinyint unsigned not null, name varchar(25) not null, last_update timestamp not null default current_timestamp, primary key (category_id));create table film_category (film_id smallint unsigned not null, category_id tinyint unsigned not null, last_update timestamp not null default current_timestamp, primary key (film_id, category_id), foreign key (film_id) references film (film_id), foreign key (category_id) references category (category_id));create table film (film_id smallint unsigned not null, title varchar(255) not null, description text default null, release_year year default null, language_id tinyint unsigned not null, original_language_id tinyint unsigned default null, rental_duration tinyint unsigned not null default 3, rental_rate decimal(4, 2) not null default 4.99, length smallint unsigned default null, replacement_cost decimal(5, 2) not null default 19.99, rating default 'G', special_features default null, last_update timestamp not null default current_timestamp, primary key (film_id), foreign key (language_id) references language (language_id), foreign key (original_language_id) references language (language_id));",
    "output": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'HUNGER ROOF'"
  },
  {
    "instruction": "What are the dates with a maximum temperature higher than 85?",
    "input": "create table weather (date text, max_temperature_f integer, mean_temperature_f integer, min_temperature_f integer, max_dew_point_f integer, mean_dew_point_f integer, min_dew_point_f integer, max_humidity integer, mean_humidity integer, min_humidity integer, max_sea_level_pressure_inches numeric, mean_sea_level_pressure_inches numeric, min_sea_level_pressure_inches numeric, max_visibility_miles integer, mean_visibility_miles integer, min_visibility_miles integer, max_wind_speed_mph integer, mean_wind_speed_mph integer, max_gust_speed_mph integer, precipitation_inches integer, cloud_cover integer, events text, wind_dir_degrees integer, zip_code integer);",
    "output": "SELECT date FROM weather WHERE max_temperature_f > 85"
  },
  {
    "instruction": "which state has the smallest area that borders texas",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));create table `border_info` (`state_name` text , `border` text , primary key (`border`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`) , foreign key(`border`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name = \"texas\" );"
  },
  {
    "instruction": "List venues of all matches in the order of their dates starting from the most recent one.",
    "input": "create table \"match\" (\"Match_ID\" int, \"Date\" text, \"Venue\" text, \"Score\" text, \"Result\" text, \"Competition\" text, primary key (\"Match_ID\"));",
    "output": "SELECT venue FROM MATCH ORDER BY date DESC"
  },
  {
    "instruction": "What are the ids and first names of customers who do not hold a credit card?",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT customer_id, customer_first_name FROM Customers EXCEPT SELECT T1.customer_id, T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = \"Credit\""
  },
  {
    "instruction": "return me the keywords in the papers of \" University of Michigan \" .",
    "input": "create table \"organization\" (\"continent\" text, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"oid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));",
    "output": "SELECT t1.keyword FROM organization AS t6 JOIN author AS t2 ON t6.oid = t2.oid JOIN writes AS t4 ON t4.aid = t2.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN publication_keyword AS t3 ON t5.pid = t3.pid JOIN keyword AS t1 ON t3.kid = t1.kid WHERE t6.name = \"University of Michigan\";"
  },
  {
    "instruction": "papers written by authors Peter Mertens and Dina Barbian",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid WHERE t2.authorname = \"Peter Mertens\" AND t1.authorname = \"Dina Barbian\";"
  },
  {
    "instruction": "For each city, how many branches opened before 2010?",
    "input": "create table \"branch\" (\"Branch_ID\" int, \"Name\" text, \"Open_year\" text, \"Address_road\" text, \"City\" text, \"membership_amount\" text, primary key (\"Branch_ID\"));",
    "output": "SELECT city, count(*) FROM branch WHERE open_year < 2010 GROUP BY city"
  },
  {
    "instruction": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT f_id FROM song WHERE resolution > (SELECT max(resolution) FROM song WHERE rating < 8)"
  },
  {
    "instruction": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
    "input": "create table station (id integer primary key, name text, lat numeric, long numeric, dock_count integer, city text, installation_date text);create table status (station_id integer, bikes_available integer, docks_available integer, time text, foreign key (station_id) references station(id));",
    "output": "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10"
  },
  {
    "instruction": "What are the carriers of devices that are not in stock anywhere?",
    "input": "create table \"device\" (\"Device_ID\" int, \"Device\" text, \"Carrier\" text, \"Package_Version\" text, \"Applications\" text, \"Software_Platform\" text, primary key (\"Device_ID\"));create table \"stock\" (\"Shop_ID\" int, \"Device_ID\" int, \"Quantity\" int, primary key (\"Shop_ID\",\"Device_ID\"), foreign key (`shop_id`) references `shop`(`shop_id`), foreign key (`device_id`) references `device`(`device_id`));",
    "output": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)"
  },
  {
    "instruction": "What is the name of the event that happened in the most recent year?",
    "input": "create table \"event\" (\"ID\" int, \"Name\" text, \"Stadium_ID\" int, \"Year\" text, primary key (\"ID\"), foreign key (`stadium_id`) references `stadium`(`id`));",
    "output": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1"
  },
  {
    "instruction": "List the names of all distinct races in reversed  lexicographic order?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT DISTINCT name FROM races ORDER BY name DESC"
  },
  {
    "instruction": "What papers were written on question answering in 2016 ?",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid WHERE t1.keyphrasename = \"question answering\" AND t3.year = 2016;"
  },
  {
    "instruction": "What are the line 1 of addresses shared by some students and some teachers?",
    "input": "create table `addresses` (`address_id` integer primary key, `line_1` varchar(120), `line_2` varchar(120), `line_3` varchar(120), `city` varchar(80), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));create table `students` (`student_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(40), `last_name` varchar(40), `cell_mobile_number` varchar(40), `email_address` varchar(40), `date_first_rental` datetime, `date_left_university` datetime, `other_student_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));create table `addresses` (`address_id` integer primary key, `line_1` varchar(120), `line_2` varchar(120), `line_3` varchar(120), `city` varchar(80), `zip_postcode` varchar(20), `state_province_county` varchar(50), `country` varchar(50), `other_address_details` varchar(255));create table `teachers` (`teacher_id` integer primary key, `address_id` integer not null, `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `gender` varchar(1), `cell_mobile_number` varchar(40), `email_address` varchar(40), `other_details` varchar(255), foreign key (`address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id"
  },
  {
    "instruction": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.",
    "input": "create table \"performance\" (\"Performance_ID\" real, \"Date\" text, \"Host\" text, \"Location\" text, \"Attendance\" int, primary key (\"Performance_ID\"));create table \"performance\" (\"Performance_ID\" real, \"Date\" text, \"Host\" text, \"Location\" text, \"Attendance\" int, primary key (\"Performance_ID\"));",
    "output": "SELECT LOCATION FROM performance WHERE Attendance > 2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance < 1000"
  },
  {
    "instruction": "Show all locations with only 1 station.",
    "input": "create table \"station\" (\"Station_ID\" int, \"Name\" text, \"Annual_entry_exit\" real, \"Annual_interchanges\" real, \"Total_Passengers\" real, \"Location\" text, \"Main_Services\" text, \"Number_of_Platforms\" int, primary key (\"Station_ID\"));",
    "output": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*) = 1"
  },
  {
    "instruction": "Find the number of investors in total.",
    "input": "create table `investors` (`investor_id` integer primary key, `investor_details` varchar(255));",
    "output": "SELECT count(*) FROM INVESTORS"
  },
  {
    "instruction": "What is the maximum, minimum and average market share of the listed browsers?",
    "input": "create table \"browser\" (\"id\" int, \"name\" text, \"market_share\" real, primary key(\"id\"));",
    "output": "SELECT max(market_share), min(market_share), avg(market_share) FROM browser"
  },
  {
    "instruction": "return me the paper in Databases area with the most citations .",
    "input": "create table \"domain\" (\"did\" int, \"name\" text, primary key (\"did\"));create table \"domain_publication\" (\"did\" int, \"pid\" int, primary key (\"did\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"did\") references \"domain\"(\"did\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));",
    "output": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did = t1.did JOIN publication AS t3 ON t3.pid = t1.pid WHERE t2.name = \"Databases\" ORDER BY t3.citation_num DESC LIMIT 1;"
  },
  {
    "instruction": "What are the names of the races held after 2017 in Spain?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"circuits\" (\"circuitId\" integer primary key, \"circuitRef\" text, \"name\" text, \"location\" text, \"country\" text, \"lat\" real, \"lng\" real, \"alt\" text, \"url\" text);",
    "output": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017"
  },
  {
    "instruction": "How many patients are not using Procrastin-X as medication?",
    "input": "create table patient (ssn integer primary key not null, name varchar(30) not null, address varchar(30) not null, phone varchar(30) not null, insuranceid integer not null, pcp integer not null, constraint fk_patient_physician_employeeid foreign key(pcp) references physician(employeeid));create table prescribes (physician integer not null, patient integer not null, medication integer not null, date datetime not null, appointment integer, dose varchar(30) not null, primary key(physician, patient, medication, date), constraint fk_prescribes_physician_employeeid foreign key(physician) references physician(employeeid), constraint fk_prescribes_patient_ssn foreign key(patient) references patient(ssn), constraint fk_prescribes_medication_code foreign key(medication) references medication(code), constraint fk_prescribes_appointment_appointmentid foreign key(appointment) references appointment(appointmentid));create table medication (code integer primary key not null, name varchar(30) not null, brand varchar(30) not null, description varchar(30) not null);",
    "output": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication = T2.Code WHERE T2.name = 'Procrastin-X' )"
  },
  {
    "instruction": "Which advisors have more than two students?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*) > 2"
  },
  {
    "instruction": "List all the product names with the color description \"white\".",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"white\""
  },
  {
    "instruction": "What is the language that was used most often in songs with resolution above 500?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT artist_name FROM song WHERE resolution > 500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "what is the state that contains the highest point",
    "input": "create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `highlow` (`state_name` text , `highest_elevation` text , `lowest_point` text , `highest_point` text , `lowest_elevation` text , primary key (`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM highlow WHERE highest_elevation = ( SELECT MAX ( highest_elevation ) FROM highlow );"
  },
  {
    "instruction": "Return the different statuses of cities, ascending by frequency.",
    "input": "create table \"city\" (\"City_ID\" int, \"Official_Name\" text, \"Status\" text, \"Area_km_2\" real, \"Population\" real, \"Census_Ranking\" text, primary key (\"City_ID\"));",
    "output": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC"
  },
  {
    "instruction": "Find the number of times ROY SWEAZY has reserved a room.",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));",
    "output": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\";"
  },
  {
    "instruction": "What is the average total score of body builders with height bigger than 200?",
    "input": "create table \"body_builder\" (\"Body_Builder_ID\" int, \"People_ID\" int, \"Snatch\" real, \"Clean_Jerk\" real, \"Total\" real, primary key (\"Body_Builder_ID\"), foreign key (\"People_ID\") references `people`(\"People_ID\"));create table \"people\" (\"People_ID\" int, \"Name\" text, \"Height\" real, \"Weight\" real, \"Birth_Date\" text, \"Birth_Place\" text, primary key (\"People_ID\"));",
    "output": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200"
  },
  {
    "instruction": "give me some good arabics on buchanan in san francisco ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"san francisco\" AND t2.street_name = \"buchanan\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "Show the names of products and the number of events they are in.",
    "input": "create table products (product_id integer not null, product_type_code char(15), product_name varchar(255), product_price decimal(20, 4), primary key (product_id), unique (product_id));create table products_in_events (product_in_event_id integer not null, event_id integer not null, product_id integer not null, primary key (product_in_event_id), foreign key (event_id) references events (event_id), foreign key (product_id) references products (product_id));",
    "output": "SELECT T1.Product_Name, COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name"
  },
  {
    "instruction": "what is the capital of the state with the longest river",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT capital FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) );"
  },
  {
    "instruction": "return me the homepage of the VLDB conference .",
    "input": "create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT homepage FROM conference WHERE name = \"VLDB\";"
  },
  {
    "instruction": "What is the average rating for right-footed players and left-footed players?",
    "input": "create table \"Player_Attributes\" (`id`\tinteger primary key autoincrement, `player_fifa_api_id`\tinteger, `player_api_id`\tinteger, `date`\ttext, `overall_rating`\tinteger, `potential`\tinteger, `preferred_foot`\ttext, `attacking_work_rate`\ttext, `defensive_work_rate`\ttext, `crossing`\tinteger, `finishing`\tinteger, `heading_accuracy`\tinteger, `short_passing`\tinteger, `volleys`\tinteger, `dribbling`\tinteger, `curve`\tinteger, `free_kick_accuracy`\tinteger, `long_passing`\tinteger, `ball_control`\tinteger, `acceleration`\tinteger, `sprint_speed`\tinteger, `agility`\tinteger, `reactions`\tinteger, `balance`\tinteger, `shot_power`\tinteger, `jumping`\tinteger, `stamina`\tinteger, `strength`\tinteger, `long_shots`\tinteger, `aggression`\tinteger, `interceptions`\tinteger, `positioning`\tinteger, `vision`\tinteger, `penalties`\tinteger, `marking`\tinteger, `standing_tackle`\tinteger, `sliding_tackle`\tinteger, `gk_diving`\tinteger, `gk_handling`\tinteger, `gk_kicking`\tinteger, `gk_positioning`\tinteger, `gk_reflexes`\tinteger, foreign key(`player_fifa_api_id`) references `player`(`player_fifa_api_id`), foreign key(`player_api_id`) references `player`(`player_api_id`));",
    "output": "SELECT preferred_foot, avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot"
  },
  {
    "instruction": "How many movies are there that are directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \" ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));create table \"directed_by\" (\"id\" int, \"msid\" int, \"did\" int, primary key(\"id\"), foreign key(\"msid\") references `copyright`(\"msid\"), foreign key(\"did\") references `director`(\"did\"));create table \"director\" (\"did\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"did\"));",
    "output": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN directed_by AS t2 ON t4.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did WHERE t1.name = \"Taraneh Alidoosti\" AND t3.name = \"Asghar Farhadi\";"
  },
  {
    "instruction": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `airport_aircraft` (\"ID\" int, \"Airport_ID\" int, \"Aircraft_ID\" int, primary key (\"Airport_ID\",\"Aircraft_ID\"), foreign key (\"Airport_ID\") references `airport`(`airport_id`), foreign key (\"Aircraft_ID\") references `aircraft`(`aircraft_id`));create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT T1.Aircraft, T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Total_Passengers > 10000000"
  },
  {
    "instruction": "Find the id of the order whose shipment tracking number is \"3452\".",
    "input": "create table `shipments` (`shipment_id` integer primary key, `order_id` integer not null, `invoice_number` integer not null, `shipment_tracking_number` varchar(80), `shipment_date` datetime, `other_shipment_details` varchar(255), foreign key (`order_id`) references `orders`(`order_id`), foreign key (`invoice_number`) references `invoices`(`invoice_number`));",
    "output": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\""
  },
  {
    "instruction": "What is the time of elimination for the wrestler with the most days held?",
    "input": "create table \"Elimination\" (\"Elimination_ID\" text, \"Wrestler_ID\" text, \"Team\" text, \"Eliminated_By\" text, \"Elimination_Move\" text, \"Time\" text, primary key (\"Elimination_ID\"), foreign key (\"Wrestler_ID\") references \"wrestler\"(\"Wrestler_ID\"));create table \"wrestler\" (\"Wrestler_ID\" int, \"Name\" text, \"Reign\" text, \"Days_held\" text, \"Location\" text, \"Event\" text, primary key (\"Wrestler_ID\"));",
    "output": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1"
  },
  {
    "instruction": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));",
    "output": "SELECT name, trade_name FROM medicine WHERE FDA_approved = 'Yes'"
  },
  {
    "instruction": "What are the names of all the aircrafts associated with London Gatwick airport?",
    "input": "create table `aircraft` (\"Aircraft_ID\" int(11) not null, \"Aircraft\" varchar(50) not null, \"Description\" varchar(50) not null, \"Max_Gross_Weight\" varchar(50) not null, \"Total_disk_area\" varchar(50) not null, \"Max_disk_Loading\" varchar(50) not null, primary key (`aircraft_id`));create table `airport_aircraft` (\"ID\" int, \"Airport_ID\" int, \"Aircraft_ID\" int, primary key (\"Airport_ID\",\"Aircraft_ID\"), foreign key (\"Airport_ID\") references `airport`(`airport_id`), foreign key (\"Aircraft_ID\") references `aircraft`(`aircraft_id`));create table `airport` (\"Airport_ID\" int, \"Airport_Name\" text, \"Total_Passengers\" real, \"%_Change_2007\" text, \"International_Passengers\" real, \"Domestic_Passengers\" real, \"Transit_Passengers\" real, \"Aircraft_Movements\" real, \"Freight_Metric_Tonnes\" real, primary key (\"Airport_ID\"));",
    "output": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = \"London Gatwick\""
  },
  {
    "instruction": "Who is the actor playing \" Alan Turing \" in \" The Imitation Game \" ?",
    "input": "create table \"cast\" (\"id\" int, \"msid\" int, \"aid\" int, \"role\" int, primary key(\"id\"), foreign key(\"aid\") references `actor`(\"aid\"), foreign key(\"msid\") references `copyright`(\"msid\"));create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));create table \"movie\" (\"mid\" int, \"title\" text, \"release_year\" int, \"title_aka\" text, \"budget\" text, primary key(\"mid\"));",
    "output": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid WHERE t2.role = \"Alan Turing\" AND t3.title = \"The Imitation Game\";"
  },
  {
    "instruction": "What are the names of musicals who have no actors?",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));create table \"actor\" (\"Actor_ID\" int, \"Name\" text, \"Musical_ID\" int, \"Character\" text, \"Duration\" text, \"age\" int, primary key (\"Actor_ID\"), foreign key (\"Musical_ID\") references \"actor\"(\"Actor_ID\"));",
    "output": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"
  },
  {
    "instruction": "For each room, find its name and the number of times reservations were made for it.",
    "input": "create table \"Reservations\" (\"Code\" integer primary key, \"Room\" text, \"CheckIn\" text, \"CheckOut\" text, \"Rate\" real, \"LastName\" text, \"FirstName\" text, \"Adults\" integer, \"Kids\" integer, foreign key (room) references rooms(roomid));create table \"Rooms\" (\"RoomId\" text primary key, \"roomName\" text, \"beds\" integer, \"bedType\" text, \"maxOccupancy\" integer, \"basePrice\" integer, \"decor\" text);",
    "output": "SELECT T2.roomName, count(*), T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room"
  },
  {
    "instruction": "What is the average fastest lap speed for the Monaco Grand Prix in 2008?",
    "input": "create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));",
    "output": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
  },
  {
    "instruction": "Find the subject ID, subject name, and the corresponding number of available courses for each subject.",
    "input": "create table `courses` (`course_id` integer primary key, `author_id` integer not null, `subject_id` integer not null, `course_name` varchar(120), `course_description` varchar(255), foreign key (`author_id`) references `course_authors_and_tutors`(`author_id`), foreign key (`subject_id`) references `subjects`(`subject_id`));create table `subjects` (`subject_id` integer primary key, `subject_name` varchar(120));",
    "output": "SELECT T1.subject_id, T2.subject_name, COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id"
  },
  {
    "instruction": "where is a good arabic in mountain view ?",
    "input": "create table \"RESTAURANT\" (\"ID\" int, \"NAME\" text, \"FOOD_TYPE\" text, \"CITY_NAME\" text, \"RATING\" real, primary key(\"ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\"));create table \"LOCATION\" (\"RESTAURANT_ID\" int, \"HOUSE_NUMBER\" int, \"STREET_NAME\" text, \"CITY_NAME\" text, primary key(\"RESTAURANT_ID\"), foreign key (\"CITY_NAME\") references `geographic`(\"CITY_NAME\") foreign key (\"RESTAURANT_ID\") references `restaurant`(\"RESTAURANT_ID\"));",
    "output": "SELECT t2.house_number, t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id WHERE t2.city_name = \"mountain view\" AND t1.food_type = \"arabic\" AND t1.rating > 2.5;"
  },
  {
    "instruction": "List the cities which have more than one airport and number of airports.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT city, count(*) FROM airports GROUP BY city HAVING count(*) > 1"
  },
  {
    "instruction": "Find the id of the courses that do not have any prerequisite?",
    "input": "create table course (course_id varchar(8), title varchar(50), dept_name varchar(20) null, credits numeric(2, 0) check (credits > 0), primary key (course_id), foreign key (dept_name) references `department` (dept_name)\n        ON delete set null -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null);create table prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id)\n        ON delete cascade, foreign key (prereq_id) references course (course_id));",
    "output": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq"
  },
  {
    "instruction": "Show the most common location of performances.",
    "input": "create table \"performance\" (\"Performance_ID\" real, \"Date\" text, \"Host\" text, \"Location\" text, \"Attendance\" int, primary key (\"Performance_ID\"));",
    "output": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.",
    "input": "create table \"endowment\" (\"endowment_id\" int, \"School_id\" int, \"donator_name\" text, \"amount\" real, primary key(\"endowment_id\"), foreign key(\"School_id\") references \"School\"(\"School_id\"));",
    "output": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount > 8.5 GROUP BY school_id HAVING count(*) > 1)"
  },
  {
    "instruction": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?",
    "input": "create table files(f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution < 1000"
  },
  {
    "instruction": "List all the types of forms.",
    "input": "create table `forms` (`form_id` integer primary key, `form_type_code` varchar(15) not null, `service_id` integer, `form_number` varchar(50), `form_name` varchar(80), `form_description` varchar(255), foreign key (`service_id`) references `services`(`service_id`));",
    "output": "SELECT DISTINCT form_type_code FROM forms"
  },
  {
    "instruction": "Find the number of different cities which banks are located at.",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT count(DISTINCT city) FROM bank"
  },
  {
    "instruction": "What is the total number of residents for the districts with the 3 largest areas?",
    "input": "create table \"district\" (\"District_ID\" int, \"District_name\" text, \"Headquartered_City\" text, \"City_Population\" real, \"City_Area\" real, primary key (\"District_ID\"));",
    "output": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3"
  },
  {
    "instruction": "Find the total number of students in each department.",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);",
    "output": "SELECT count(*), dept_name FROM student GROUP BY dept_name"
  },
  {
    "instruction": "How many credits does the department offer?",
    "input": "create table course (crs_code varchar(10) primary key, dept_code varchar(10), crs_description varchar(35), crs_credit float(8), foreign key (dept_code) references department(dept_code));",
    "output": "SELECT sum(crs_credit), dept_code FROM course GROUP BY dept_code"
  },
  {
    "instruction": "Find the number of followers for each user.",
    "input": "create table `follows` (`f1` int(11) not null, `f2` int(11) not null, primary key (`f1`,`f2`), foreign key (`f1`) references `user_profiles`(`uid`), foreign key (`f2`) references `user_profiles`(`uid`));",
    "output": "SELECT count(*) FROM follows GROUP BY f1"
  },
  {
    "instruction": "Which actors were born in Tehran",
    "input": "create table \"actor\" (\"aid\" int, \"gender\" text, \"name\" text, \"nationality\" text, \"birth_city\" text, \"birth_year\" int, primary key(\"aid\"));",
    "output": "SELECT name FROM actor WHERE birth_city = \"Tehran\";"
  },
  {
    "instruction": "How many reviews has Adrienne written ?",
    "input": "create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t2.name = \"Adrienne\";"
  },
  {
    "instruction": "What is the area for the appelation which produced the most wines prior to 2010?",
    "input": "create table \"appellations\" (\"No\" integer primary key, \"Appelation\" text unique, \"County\" text, \"State\" text, \"Area\" text, \"isAVA\" text);create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING T2.year < 2010 ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the different customer ids, and how many cards does each one hold?",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT customer_id, count(*) FROM Customers_cards GROUP BY customer_id"
  },
  {
    "instruction": "Which vocal type has the band mate with first name \"Marianne\" played the most?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Band\" (\"Id\" integer primary key, \"Firstname\" text, \"Lastname\" text);",
    "output": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the different positions of players from UCLA or Duke colleges?",
    "input": "create table \"match_season\" (\"Season\" real, \"Player\" text, \"Position\" text, \"Country\" int, \"Team\" int, \"Draft_Pick_Number\" int, \"Draft_Class\" text, \"College\" text, primary key (\"Season\"), foreign key (`country`) references `country`(`country_id`), foreign key (`team`) references `team`(`team_id`));",
    "output": "SELECT DISTINCT POSITION FROM match_season WHERE College = \"UCLA\" OR College = \"Duke\""
  },
  {
    "instruction": "What are the names of banks that have loaned money to customers with credit scores below 100?",
    "input": "create table loan (loan_id varchar(3) primary key, loan_type varchar(15), cust_id varchar(3), branch_id varchar(3), amount int, foreign key(branch_id) references bank(branch_id), foreign key(cust_id) references customer(cust_id));create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));create table customer (cust_id varchar(3) primary key, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_id int, state varchar(20), foreign key(branch_id) references bank(branch_id));",
    "output": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100"
  },
  {
    "instruction": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with the most number of citations .",
    "input": "create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid WHERE t2.name = \"Divesh Srivastava\" AND t1.name = \"H. V. Jagadish\" ORDER BY t5.citation_num DESC LIMIT 1;"
  },
  {
    "instruction": "List all businesses that are restaurant in Pennsylvania .",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));",
    "output": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id WHERE t1.state = \"Pennsylvania\" AND t2.category_name = \"restaurant\";"
  },
  {
    "instruction": "TAIL papers in NIPS",
    "input": "create table `paperkeyphrase` (`paperid` integer default null , `keyphraseid` integer default null , primary key (`keyphraseid`,`paperid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`keyphraseid`) references `keyphrase`(`keyphraseid`));create table `keyphrase` (`keyphraseid` integer not null , `keyphrasename` varchar(50) default null , primary key (`keyphraseid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid WHERE t1.keyphrasename = \"TAIL\" AND t4.venuename = \"NIPS\";"
  },
  {
    "instruction": "Find the names of furnitures whose prices are lower than the highest price.",
    "input": "create table \"furniture\" (\"Furniture_ID\" int, \"Name\" text, \"Num_of_Component\" int, \"Market_Rate\" real, primary key (\"Furniture_ID\"));create table \"furniture_manufacte\" (\"Manufacturer_ID\" int, \"Furniture_ID\" int, \"Price_in_Dollar\" real, primary key (\"Manufacturer_ID\",\"Furniture_ID\"), foreign key (\"Manufacturer_ID\") references `manufacturer`(\"Manufacturer_ID\"), foreign key (\"Furniture_ID\") references `furniture`(\"Furniture_ID\"));create table \"furniture_manufacte\" (\"Manufacturer_ID\" int, \"Furniture_ID\" int, \"Price_in_Dollar\" real, primary key (\"Manufacturer_ID\",\"Furniture_ID\"), foreign key (\"Manufacturer_ID\") references `manufacturer`(\"Manufacturer_ID\"), foreign key (\"Furniture_ID\") references `furniture`(\"Furniture_ID\"));",
    "output": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID WHERE t2.Price_in_Dollar < (SELECT max(Price_in_Dollar) FROM furniture_manufacte)"
  },
  {
    "instruction": "What are the member names and hometowns of those who registered at a branch in 2016?",
    "input": "create table \"membership_register_branch\" (\"Member_ID\" int, \"Branch_ID\" text, \"Register_Year\" text, primary key (\"Member_ID\"), foreign key (\"Member_ID\") references \"member\"(\"Member_ID\"), foreign key (\"Branch_ID\") references \"branch\"(\"Branch_ID\"));create table \"member\" (\"Member_ID\" int, \"Card_Number\" text, \"Name\" text, \"Hometown\" text, \"Level\" int, primary key (\"Member_ID\"));",
    "output": "SELECT T2.name, T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T1.register_year = 2016"
  },
  {
    "instruction": "Select the code of the product that is cheapest in each product category.",
    "input": "create table products (code integer, name varchar(255) not null , price decimal not null , manufacturer integer not null, primary key (code), foreign key (manufacturer) references manufacturers(code));",
    "output": "SELECT code, name, min(price) FROM products GROUP BY name"
  },
  {
    "instruction": "Count the number of different affiliation types.",
    "input": "create table \"university\" (\"School_ID\" int, \"School\" text, \"Location\" text, \"Founded\" real, \"Affiliation\" text, \"Enrollment\" real, \"Nickname\" text, \"Primary_conference\" text, primary key (\"School_ID\"));",
    "output": "SELECT count(DISTINCT affiliation) FROM university"
  },
  {
    "instruction": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.",
    "input": "create table dorm (dormid integer, dorm_name\tvarchar(20), student_capacity\tinteger, gender varchar(1));",
    "output": "SELECT student_capacity, gender FROM dorm WHERE dorm_name LIKE '%Donor%'"
  },
  {
    "instruction": "Please show the police forces and the number of counties with each police force.",
    "input": "create table \"county_public_safety\" (\"County_ID\" int, \"Name\" text, \"Population\" int, \"Police_officers\" int, \"Residents_per_officer\" int, \"Case_burden\" int, \"Crime_rate\" real, \"Police_force\" text, \"Location\" text, primary key (\"County_ID\"));",
    "output": "SELECT Police_force, COUNT(*) FROM county_public_safety GROUP BY Police_force"
  },
  {
    "instruction": "What is the detail of each visitor?",
    "input": "create table visitors (tourist_id integer not null, tourist_details varchar(255), primary key (tourist_id), unique (tourist_id));",
    "output": "SELECT Tourist_Details FROM VISITORS"
  },
  {
    "instruction": "What are the facility codes of the apartments with more than four bedrooms?",
    "input": "create table apartment_facilities (apt_id integer not null, facility_code char(15) not null, primary key (apt_id, facility_code), foreign key (apt_id) references apartments (apt_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4"
  },
  {
    "instruction": "Who directed Avatar?",
    "input": "create table movie(mid int primary key, title text, year int, director text);",
    "output": "SELECT director FROM Movie WHERE title = 'Avatar'"
  },
  {
    "instruction": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.",
    "input": "create table \"station_company\" (\"Station_ID\" int, \"Company_ID\" int, \"Rank_of_the_Year\" int, primary key (\"Station_ID\",\"Company_ID\"), foreign key (`station_id`) references `gas_station`(`station_id`), foreign key (`company_id`) references `company`(`company_id`));create table \"company\" (\"Company_ID\" int, \"Rank\" int, \"Company\" text, \"Headquarters\" text, \"Main_Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value\" real, primary key (\"Company_ID\"));create table \"gas_station\" (\"Station_ID\" int, \"Open_Year\" int, \"Location\" text, \"Manager_Name\" text, \"Vice_Manager_Name\" text, \"Representative_Name\" text, primary key (\"Station_ID\"));",
    "output": "SELECT T3.location, T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3"
  },
  {
    "instruction": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?",
    "input": "create table \"Campuses\" (\"Id\" integer primary key, \"Campus\" text, \"Location\" text, \"County\" text, \"Year\" integer);create table \"faculty\" (\"Campus\" integer, \"Year\" integer, \"Faculty\" real, foreign key (campus) references campuses(id));create table \"degrees\" (\"Year\" integer, \"Campus\" integer, \"Degrees\" integer, primary key (year, campus), foreign key (campus) references campuses(id));",
    "output": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2001 ORDER BY t3.degrees LIMIT 1"
  },
  {
    "instruction": "How many staff in total?",
    "input": "create table `staff` (`staff_id` integer primary key, `staff_address_id` integer not null, `nickname` varchar(80), `first_name` varchar(80), `middle_name` varchar(80), `last_name` varchar(80), `date_of_birth` datetime, `date_joined_staff` datetime, `date_left_staff` datetime, foreign key (`staff_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT count(*) FROM Staff;"
  },
  {
    "instruction": "list papers published by balakrishnan prabhakaran",
    "input": "create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT t3.paperid, t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid WHERE t1.authorname = \"balakrishnan prabhakaran\";"
  },
  {
    "instruction": "How many settlements are there in total?",
    "input": "create table settlements (settlement_id integer not null, claim_id integer not null, date_claim_made date, date_claim_settled date, amount_claimed integer, amount_settled integer, customer_policy_id integer not null, primary key (settlement_id), foreign key (claim_id) references claims (claim_id));",
    "output": "SELECT count(*) FROM Settlements"
  },
  {
    "instruction": "how many papers are published in sigir ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"sigir\";"
  },
  {
    "instruction": "What are the durations of the longest and the shortest tracks in milliseconds?",
    "input": "create table `track` (`trackid` integer not null , `name` varchar(200) not null , `albumid` integer default null , `mediatypeid` integer not null , `genreid` integer default null , `composer` varchar(220) default null , `milliseconds` integer not null , `bytes` integer default null , `unitprice` decimal(10, 2) not null , primary key (`trackid`) , constraint `fk_trackalbumid` foreign key (`albumid`) references `album` (`albumid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackgenreid` foreign key (`genreid`) references `genre` (`genreid`)\n        ON delete no action\n        ON update no action , constraint `fk_trackmediatypeid` foreign key (`mediatypeid`) references `mediatype` (`mediatypeid`)\n        ON delete no action\n        ON update no action);",
    "output": "SELECT max(Milliseconds), min(Milliseconds) FROM TRACK"
  },
  {
    "instruction": "Find the name and component amount of the least popular furniture.",
    "input": "create table \"furniture\" (\"Furniture_ID\" int, \"Name\" text, \"Num_of_Component\" int, \"Market_Rate\" real, primary key (\"Furniture_ID\"));",
    "output": "SELECT name, Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1"
  },
  {
    "instruction": "What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?",
    "input": "create table `products` (`product_id` integer primary key, `color_code` varchar(15) not null, `product_category_code` varchar(15) not null, `product_name` varchar(80), `typical_buying_price` varchar(20), `typical_selling_price` varchar(20), `product_description` varchar(255), `other_product_details` varchar(255), foreign key (`product_category_code`) references `ref_product_categories`(`product_category_code`), foreign key (`color_code`) references `ref_colors`(`color_code`));create table `ref_colors` (`color_code` varchar(15) primary key, `color_description` varchar(80));",
    "output": "SELECT T1.product_name, T2.color_description, T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code WHERE product_category_code = \"Herbs\""
  },
  {
    "instruction": "Find the branch name of the bank that has the most number of customers.",
    "input": "create table bank (branch_id int primary key, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20));",
    "output": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1"
  },
  {
    "instruction": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
    "input": "create table \"artist\" (\"Artist_ID\" int, \"Artist\" text, \"Age\" int, \"Famous_Title\" text, \"Famous_Release_date\" text, primary key (\"Artist_ID\"));create table \"volume\" (\"Volume_ID\" int, \"Volume_Issue\" text, \"Issue_Date\" text, \"Weeks_on_Top\" real, \"Song\" text, \"Artist_ID\" int, primary key (\"Volume_ID\"), foreign key (`artist_id`) references `artist`(`artist_id`));",
    "output": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 25"
  },
  {
    "instruction": "Show the number of card types.",
    "input": "create table `customers_cards` (`card_id` integer primary key, `customer_id` integer not null, `card_type_code` varchar(15) not null, `card_number` varchar(80), `date_valid_from` datetime, `date_valid_to` datetime, `other_card_details` varchar(255));",
    "output": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards"
  },
  {
    "instruction": "How many papers has David M. Blei published in AISTATS ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"David M. Blei\" AND t4.venuename = \"AISTATS\";"
  },
  {
    "instruction": "Return all the apartment numbers sorted by the room count in ascending order.",
    "input": "create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT apt_number FROM Apartments ORDER BY room_count ASC"
  },
  {
    "instruction": "How many songs have vocals of type lead?",
    "input": "create table \"Vocals\" (\"SongId\" integer, \"Bandmate\" integer, \"Type\" text, primary key(songid, bandmate), foreign key (songid) references songs(songid), foreign key (bandmate) references band(id));create table \"Songs\" (\"SongId\" integer primary key, \"Title\" text);",
    "output": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = \"lead\""
  },
  {
    "instruction": "How many different payment methods are there?",
    "input": "create table `customers` (`customer_id` integer primary key, `payment_method` varchar(10) not null, `customer_name` varchar(80), `customer_phone` varchar(80), `customer_email` varchar(80), `date_became_customer` datetime);",
    "output": "SELECT count(DISTINCT payment_method) FROM customers"
  },
  {
    "instruction": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.",
    "input": "create table \"pilot_record\" (\"Record_ID\" int, \"Pilot_ID\" int, \"Aircraft_ID\" int, \"Date\" text, primary key (\"Pilot_ID\", \"Aircraft_ID\", \"Date\"), foreign key (`pilot_id`) references `pilot`(`pilot_id`), foreign key (`aircraft_id`) references `aircraft`(`aircraft_id`));create table \"aircraft\" (\"Aircraft_ID\" int, \"Order_Year\" int, \"Manufacturer\" text, \"Model\" text, \"Fleet_Series\" text, \"Powertrain\" text, \"Fuel_Propulsion\" text, primary key (\"Aircraft_ID\"));create table \"pilot\" (\"Pilot_ID\" int, \"Pilot_name\" text, \"Rank\" int, \"Age\" int, \"Nationality\" text, \"Position\" text, \"Join_Year\" int, \"Team\" text, primary key (\"Pilot_ID\"));",
    "output": "SELECT T3.Pilot_name, T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID ORDER BY T3.Rank"
  },
  {
    "instruction": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?",
    "input": "create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);create table song(song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating > 0 and rating < 11), languages varchar2(20), releasedate date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name)\n        ON delete cascade, foreign key(f_id) references files(f_id)\n        ON delete cascade, foreign key(genre_is) references genre(g_name)\n        ON delete cascade);",
    "output": "SELECT f_id FROM song WHERE resolution > (SELECT avg(resolution) FROM song WHERE genre_is = \"modern\")"
  },
  {
    "instruction": "How many reviews has Michelle written in March 2014 ?",
    "input": "create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));",
    "output": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id WHERE t1.month = \"March\" AND t1.year = 2014 AND t2.name = \"Michelle\";"
  },
  {
    "instruction": "return me the papers by \" H. V. Jagadish \" on VLDB conference .",
    "input": "create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid WHERE t1.name = \"H. V. Jagadish\" AND t2.name = \"VLDB\";"
  },
  {
    "instruction": "when were most NIPS papers published ?",
    "input": "create table `venue` (`venueid` integer not null , `venuename` varchar(100) default null , primary key (`venueid`));create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));",
    "output": "SELECT DISTINCT COUNT ( t1.paperid ), t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid WHERE t2.venuename = \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;"
  },
  {
    "instruction": "What are the details and opening hours of the museums?",
    "input": "create table museums (museum_id integer not null, museum_details varchar(255), primary key (museum_id), foreign key (museum_id) references tourist_attractions (tourist_attraction_id));create table tourist_attractions (tourist_attraction_id integer not null, attraction_type_code char(15) not null, location_id integer not null, how_to_get_there varchar(255), name varchar(255), description varchar(255), opening_hours varchar(255), other_details varchar(255), primary key (tourist_attraction_id), foreign key (location_id) references locations (location_id), foreign key (attraction_type_code) references ref_attraction_types (attraction_type_code));",
    "output": "SELECT T1.Museum_Details, T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID"
  },
  {
    "instruction": "citations for Daniel Jurafsky",
    "input": "create table `paper` (`paperid` integer not null , `title` varchar(300) default null , `venueid` integer default null , `year` integer default null , `numciting` integer default null , `numcitedby` integer default null , `journalid` integer default null , primary key (`paperid`) , foreign key(`journalid`) references `journal`(`journalid`) , foreign key(`venueid`) references `venue`(`venueid`));create table `cite` (`citingpaperid` integer not null , `citedpaperid` integer not null , primary key (`citingpaperid`,`citedpaperid`) , foreign key(`citedpaperid`) references `paper`(`paperid`) , foreign key(`citingpaperid`) references `paper`(`paperid`));create table `writes` (`paperid` integer default null , `authorid` integer default null , primary key (`paperid`,`authorid`) , foreign key(`paperid`) references `paper`(`paperid`) , foreign key(`authorid`) references `author`(`authorid`));create table `author` (`authorid` integer not null , `authorname` varchar(50) default null , primary key (`authorid`));",
    "output": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid WHERE t1.authorname = \"Daniel Jurafsky\";"
  },
  {
    "instruction": "what is the population of boulder",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = \"boulder\";"
  },
  {
    "instruction": "How many games has each stadium held?",
    "input": "create table \"stadium\" (\"id\" int, \"name\" text, \"Home_Games\" int, \"Average_Attendance\" real, \"Total_Attendance\" real, \"Capacity_Percentage\" real, primary key (\"id\"));create table \"game\" (\"stadium_id\" int, \"id\" int, \"Season\" int, \"Date\" text, \"Home_team\" text, \"Away_team\" text, \"Score\" text, \"Competition\" text, primary key (\"id\"), foreign key (\"stadium_id\") references `stadium`(\"id\"));",
    "output": "SELECT T1.id, count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id"
  },
  {
    "instruction": "What are the names of festivals held in year 2007?",
    "input": "create table \"festival_detail\" (\"Festival_ID\" int, \"Festival_Name\" text, \"Chair_Name\" text, \"Location\" text, \"Year\" int, \"Num_of_Audience\" int, primary key (\"Festival_ID\"));",
    "output": "SELECT Festival_Name FROM festival_detail WHERE YEAR = 2007"
  },
  {
    "instruction": "find the name of the program that was launched most recently.",
    "input": "create table \"program\" (\"Program_ID\" int, \"Name\" text, \"Origin\" text, \"Launch\" real, \"Owner\" text, primary key (\"Program_ID\"));",
    "output": "SELECT name FROM program ORDER BY launch DESC LIMIT 1"
  },
  {
    "instruction": "What are the names and buildings of the deparments, sorted by budget descending?",
    "input": "create table department (dept_name varchar(20), building varchar(15), budget numeric(12, 2) check (budget > 0), primary key (dept_name));",
    "output": "SELECT dept_name, building FROM department ORDER BY budget DESC"
  },
  {
    "instruction": "what is the most populous state in the us",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state );"
  },
  {
    "instruction": "How many distinct FDA approval statuses are there for the medicines?",
    "input": "create table \"medicine\" (\"id\" int, \"name\" text, \"Trade_Name\" text, \"FDA_approved\" text, primary key (\"id\"));",
    "output": "SELECT count(DISTINCT FDA_approved) FROM medicine"
  },
  {
    "instruction": "How many musicals has each nominee been nominated for?",
    "input": "create table \"musical\" (\"Musical_ID\" int, \"Name\" text, \"Year\" int, \"Award\" text, \"Category\" text, \"Nominee\" text, \"Result\" text, primary key (\"Musical_ID\"));",
    "output": "SELECT Nominee, COUNT(*) FROM musical GROUP BY Nominee"
  },
  {
    "instruction": "what is the area of the smallest state",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT area FROM state WHERE area = ( SELECT MIN ( area ) FROM state );"
  },
  {
    "instruction": "What is the project id and detail for the project with at least two documents?",
    "input": "create table projects (project_id integer not null, project_details varchar(255), primary key (project_id));create table documents (document_id integer not null, document_type_code char(15) not null, project_id integer not null, document_date datetime, document_name varchar(255), document_description varchar(255), other_details varchar(255), primary key (document_id), foreign key (document_type_code) references ref_document_types (document_type_code), foreign key (project_id) references projects (project_id));",
    "output": "SELECT T1.project_id, T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING count(*) > 2"
  },
  {
    "instruction": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?",
    "input": "create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"temperature\" (\"City_ID\" int, \"Jan\" real, \"Feb\" real, \"Mar\" real, \"Apr\" real, \"Jun\" real, \"Jul\" real, \"Aug\" real, \"Sep\" real, \"Oct\" real, \"Nov\" real, \"Dec\" real, primary key (\"City_ID\"), foreign key (`city_id`) references `city`(`city_id`));create table \"city\" (\"City_ID\" int, \"City\" text, \"Hanzi\" text, \"Hanyu_Pinyin\" text, \"Regional_Population\" int, \"GDP\" real, primary key (\"City_ID\"));create table \"hosting_city\" (\"Year\" int, \"Match_ID\" int, \"Host_City\" text, primary key (\"Year\"), foreign key (`host_city`) references `city`(`city_id`), foreign key (`match_id`) references `match`(`match_id`));",
    "output": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city"
  },
  {
    "instruction": "What are the first names of all students who are older than 20?",
    "input": "create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT fname FROM student WHERE age > 20"
  },
  {
    "instruction": "Find the name of students who took any class in the years of 2009 and 2010.",
    "input": "create table student (id varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3, 0) check (tot_cred >= 0), primary key (id), foreign key (dept_name) references department (dept_name)\n        ON delete set null);create table takes (id varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4, 0), grade varchar(2), primary key (id, course_id, sec_id, semester, year), foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year)\n        ON delete cascade, foreign key (id) references student (id)\n        ON delete cascade);",
    "output": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE YEAR = 2009 OR YEAR = 2010"
  },
  {
    "instruction": "return me the authors who have more than 10 papers containing keyword \" Relational Database \" .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"writes\" (\"aid\" int, \"pid\" int, primary key (\"aid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"aid\") references \"author\"(\"aid\"));create table \"author\" (\"aid\" int, \"homepage\" text, \"name\" text, \"oid\" int, primary key(\"aid\"));",
    "output": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid WHERE t1.keyword = \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title ) > 10;"
  },
  {
    "instruction": "Find the ids of the students who participate in Canoeing and Kayaking.",
    "input": "create table participates_in (stuid integer, actid integer, foreign key(stuid) references student(stuid), foreign key(actid) references activity(actid));create table activity (actid integer primary key, activity_name varchar(25));create table participates_in (stuid integer, actid integer, foreign key(stuid) references student(stuid), foreign key(actid) references activity(actid));create table activity (actid integer primary key, activity_name varchar(25));",
    "output": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Kayaking'"
  },
  {
    "instruction": "what are the major cities in the state of kansas",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT city_name FROM city WHERE population > 150000 AND state_name = \"kansas\";"
  },
  {
    "instruction": "how many different positions are there?",
    "input": "create table \"player\" (\"Player_ID\" int, \"name\" text, \"Position\" text, \"Club_ID\" int, \"Apps\" real, \"Tries\" real, \"Goals\" text, \"Points\" real, primary key (\"Player_ID\"), foreign key (`club_id`) references `club`(`club_id`));",
    "output": "SELECT count(DISTINCT POSITION) FROM player"
  },
  {
    "instruction": "List all users who reviewed businesses that are restaurant .",
    "input": "create table \"category\" (\"id\" int, \"business_id\" text, \"category_name\" text, primary key(\"id\"), foreign key(\"business_id\") references `business`(\"business_id\"));create table \"business\" (\"bid\" int, \"business_id\" text, \"name\" text, \"full_address\" text, \"city\" text, \"latitude\" text, \"longitude\" text, \"review_count\" int, \"is_open\" int, \"rating\" real, \"state\" text, primary key(\"bid\"));create table \"review\" (\"rid\" int, \"business_id\" text, \"user_id\" text, \"rating\" real, \"text\" text, \"year\" int, \"month\" text, primary key(\"rid\"), foreign key(\"business_id\") references `business`(\"business_id\"), foreign key(\"user_id\") references `user`(\"user_id\"));create table \"user\" (\"uid\" int, \"user_id\" text, \"name\" text, primary key(\"uid\"));",
    "output": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id WHERE t2.category_name = \"restaurant\";"
  },
  {
    "instruction": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?",
    "input": "create table \"enzyme\" (\"id\" int, \"name\" text, \"Location\" text, \"Product\" text, \"Chromosome\" text, \"OMIM\" int, \"Porphyria\" text, primary key (\"id\"));create table \"medicine_enzyme_interaction\" (\"enzyme_id\" int, \"medicine_id\" int, \"interaction_type\" text, primary key (\"enzyme_id\", \"medicine_id\"), foreign key (\"enzyme_id\") references `enzyme`(\"id\"), foreign key (\"medicine_id\") references `medicine`(\"id\"));",
    "output": "SELECT DISTINCT T1.name, T1.location, T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'"
  },
  {
    "instruction": "How many allergies are there?",
    "input": "create table allergy_type (allergy varchar(20) primary key, allergytype varchar(20));",
    "output": "SELECT count(DISTINCT allergy) FROM Allergy_type"
  },
  {
    "instruction": "Which club has the most female students as their members? Give me the name of the club.",
    "input": "create table club (clubid integer primary key, clubname varchar(40), clubdesc varchar(1024), clublocation varchar(40));create table member_of_club (stuid integer, clubid integer, position varchar(40), foreign key(stuid) references student(stuid), foreign key(clubid) references club(clubid));create table student (stuid integer primary key, lname varchar(12), fname varchar(12), age integer, sex varchar(1), major integer, advisor integer, city_code varchar(3));",
    "output": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.sex = \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the numbers of the shortest flights?",
    "input": "create table flight(flno number(4, 0) primary key, origin varchar2(20), destination varchar2(20), distance number(6, 0), departure_date date, arrival_date date, price number(7, 2), aid number(9, 0), foreign key(\"aid\") references `aircraft`(\"aid\"));",
    "output": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"
  },
  {
    "instruction": "List the total number of horses on farms in ascending order.",
    "input": "create table \"farm\" (\"Farm_ID\" int, \"Year\" int, \"Total_Horses\" real, \"Working_Horses\" real, \"Total_Cattle\" real, \"Oxen\" real, \"Bulls\" real, \"Cows\" real, \"Pigs\" real, \"Sheep_and_Goats\" real, primary key (\"Farm_ID\"));",
    "output": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC"
  },
  {
    "instruction": "Show the average room count of the apartments that have booking status code \"Provisional\".",
    "input": "create table apartment_bookings (apt_booking_id integer not null, apt_id integer, guest_id integer not null, booking_status_code char(15) not null, booking_start_date datetime, booking_end_date datetime, primary key (apt_booking_id), unique (apt_booking_id), foreign key (apt_id) references apartments (apt_id), foreign key (guest_id) references guests (guest_id));create table apartments (apt_id integer not null , building_id integer not null, apt_type_code char(15), apt_number char(10), bathroom_count integer, bedroom_count integer, room_count char(5), primary key (apt_id), unique (apt_id), foreign key (building_id) references apartment_buildings (building_id));",
    "output": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\""
  },
  {
    "instruction": "how many people live in seattle washington",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));",
    "output": "SELECT population FROM city WHERE city_name = \"seattle\" AND state_name = \"washington\";"
  },
  {
    "instruction": "Find the names of reviewers who had given higher than 3 star ratings.",
    "input": "create table rating(rid int, mid int, stars int, ratingdate date, foreign key (mid) references movie(mid), foreign key (rid) references reviewer(rid));create table reviewer(rid int primary key, name text);",
    "output": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3"
  },
  {
    "instruction": "What are the different names of the colleges involved in the tryout in alphabetical order?",
    "input": "create table tryout (pid numeric(5, 0), cname varchar(20), ppos varchar(8), decision varchar(3), primary key (pid, cname), foreign key (pid) references player(pid), foreign key (cname) references college(cname));",
    "output": "SELECT DISTINCT cName FROM tryout ORDER BY cName"
  },
  {
    "instruction": "Find the id and surname of the driver who participated the most number of races?",
    "input": "create table \"drivers\" (\"driverId\" integer primary key, \"driverRef\" text, \"number\" text, \"code\" text, \"forename\" text, \"surname\" text, \"dob\" text, \"nationality\" text, \"url\" text);create table \"results\" (\"resultId\" integer primary key, \"raceId\" integer, \"driverId\" integer, \"constructorId\" integer, \"number\" integer, \"grid\" integer, \"position\" text, \"positionText\" text, \"positionOrder\" integer, \"points\" real, \"laps\" text, \"time\" text, \"milliseconds\" text, \"fastestLap\" text, \"rank\" text, \"fastestLapTime\" text, \"fastestLapSpeed\" text, \"statusId\" integer, foreign key(\"constructorId\") references \"constructors\"(\"constructorId\"), foreign key(\"raceId\") references \"races\"(\"raceId\"), foreign key (\"driverId\") references \"drivers\"(\"driverId\"));create table \"races\" (\"raceId\" integer primary key, \"year\" integer, \"round\" integer, \"circuitId\" integer, \"name\" text, \"date\" text, \"time\" text, \"url\" text, foreign key (\"circuitId\") references \"circuits\"(\"circuitId\"));",
    "output": "SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "What are the names of ships, ordered by year they were built and their class?",
    "input": "create table \"Ship\" (\"Ship_ID\" int, \"Name\" text, \"Type\" text, \"Built_Year\" real, \"Class\" text, \"Flag\" text, primary key (\"Ship_ID\"));",
    "output": "SELECT name FROM ship ORDER BY built_year, CLASS"
  },
  {
    "instruction": "what river flows through the most states",
    "input": "create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;"
  },
  {
    "instruction": "Count the number of customers.",
    "input": "create table `customers` (`customer_id` integer primary key, `customer_first_name` varchar(20), `customer_last_name` varchar(20), `customer_address` varchar(255), `customer_phone` varchar(255), `customer_email` varchar(255), `other_customer_details` varchar(255));",
    "output": "SELECT count(*) FROM Customers"
  },
  {
    "instruction": "How much salary did the top 3 well-paid players get in 2001?",
    "input": "create table salary (year integer, team_id text, league_id text, player_id text, salary integer);",
    "output": "SELECT salary FROM salary WHERE YEAR = 2001 ORDER BY salary DESC LIMIT 3;"
  },
  {
    "instruction": "List the grapes and appelations of all wines.",
    "input": "create table \"wine\" (\"No\" integer, \"Grape\" text, \"Winery\" text, \"Appelation\" text, \"State\" text, \"Name\" text, \"Year\" integer, \"Price\" integer, \"Score\" integer, \"Cases\" integer, \"Drink\" text, foreign key (grape) references grapes(grape), foreign key (appelation) references appellations(appelation));",
    "output": "SELECT Grape, Appelation FROM WINE"
  },
  {
    "instruction": "What are the first and last names of all customers with more than 2 payments?",
    "input": "create table `customer_payments` (`customer_id` integer not null, `datetime_payment` datetime not null, `payment_method_code` varchar(10) not null, `amount_payment` double null, primary key (`customer_id`,`datetime_payment`), foreign key (`customer_id`) references `customers`(`customer_id`));create table `customers` (`customer_id` integer primary key, `customer_address_id` integer not null, `customer_status_code` varchar(15) not null, `date_became_customer` datetime, `date_of_birth` datetime, `first_name` varchar(80), `last_name` varchar(80), `amount_outstanding` double null, `email_address` varchar(250), `phone_number` varchar(255), `cell_mobile_phone_number` varchar(255), foreign key (`customer_address_id`) references `addresses`(`address_id`));",
    "output": "SELECT T2.first_name, T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 2;"
  },
  {
    "instruction": "Which restaurants have highest rating? List the restaurant name and its rating.",
    "input": "create table restaurant (resid integer primary key, resname varchar(100), address varchar(100), rating integer);",
    "output": "SELECT ResName, Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;"
  },
  {
    "instruction": "What are the names of all genres in alphabetical order, combined with its ratings?",
    "input": "create table genre(g_name varchar2(20) not null, rating varchar2(10), most_popular_in varchar2(50), primary key(g_name));",
    "output": "SELECT g_name, rating FROM genre ORDER BY g_name"
  },
  {
    "instruction": "Which membership card has more than 5 members?",
    "input": "create table \"member\" (\"Member_ID\" int, \"Name\" text, \"Membership_card\" text, \"Age\" int, \"Time_of_purchase\" int, \"Level_of_membership\" int, \"Address\" text, primary key (\"Member_ID\"));",
    "output": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*) > 5"
  },
  {
    "instruction": "what is the population of the largest city in the state with the largest area",
    "input": "create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `city` (`city_name` text , `population` integer default null , `country_name` varchar(3) not null default '' , `state_name` text , primary key (`city_name`,`state_name`) , foreign key(`state_name`) references `state`(`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));",
    "output": "SELECT population FROM city WHERE population = ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) );"
  },
  {
    "instruction": "What are the three countries that the least players are from?",
    "input": "create table player (player_id text, birth_year numeric, birth_month numeric, birth_day numeric, birth_country text, birth_state text, birth_city text, death_year numeric, death_month numeric, death_day numeric, death_country text, death_state text, death_city text, name_first text, name_last text, name_given text, weight numeric, height numeric, bats text, throws text, debut text, final_game text, retro_id text, bbref_id text);",
    "output": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;"
  },
  {
    "instruction": "Show the name of the building that has the most company offices.",
    "input": "create table \"Office_locations\" (\"building_id\" int, \"company_id\" int, \"move_in_year\" int, primary key (\"building_id\", \"company_id\"), foreign key (\"building_id\") references \"buildings\"(\"id\"), foreign key (\"company_id\") references \"Companies\"(\"id\"));create table \"buildings\" (\"id\" int, \"name\" text, \"City\" text, \"Height\" int, \"Stories\" int, \"Status\" text, primary key(\"id\"));create table \"Companies\" (\"id\" int, \"name\" text, \"Headquarters\" text, \"Industry\" text, \"Sales_billion\" real, \"Profits_billion\" real, \"Assets_billion\" real, \"Market_Value_billion\" text, primary key (\"id\"));",
    "output": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "instruction": "what state has no rivers",
    "input": "create table `state` (`state_name` text , `population` integer default null , `area` double default null , `country_name` varchar(3) not null default '' , `capital` text , `density` double default null , primary key (`state_name`));create table `river` (`river_name` text , `length` integer default null , `country_name` varchar(3) not null default '' , `traverse` text , primary key (`river_name`) , foreign key(`traverse`) references `state`(`state_name`));",
    "output": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );"
  },
  {
    "instruction": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
    "input": "create table accounts (custid bigint not null primary key, name varchar(64) not null);create table checking (custid bigint not null primary key, balance float not null, foreign key (custid) references accounts (custid));",
    "output": "SELECT count(*), T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid GROUP BY T1.name"
  },
  {
    "instruction": "return me the keywords, which have been contained by more than 100 papers in VLDB conference .",
    "input": "create table \"publication_keyword\" (\"pid\" int, \"kid\" int, primary key (\"kid\", \"pid\"), foreign key(\"pid\") references \"publication\"(\"pid\"), foreign key(\"kid\") references \"keyword\"(\"kid\"));create table \"keyword\" (\"keyword\" text, \"kid\" int, primary key(\"kid\"));create table \"publication\" (\"abstract\" text, \"cid\" text, \"citation_num\" int, \"jid\" int, \"pid\" int, \"reference_num\" int, \"title\" text, \"year\" int, primary key(\"pid\"), foreign key(\"jid\") references \"journal\"(\"jid\"), foreign key(\"cid\") references \"conference\"(\"cid\"));create table \"conference\" (\"cid\" int, \"homepage\" text, \"name\" text, primary key (\"cid\"));",
    "output": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid WHERE t2.name = \"VLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title ) > 100;"
  },
  {
    "instruction": "Retrieve the country that has published the most papers.",
    "input": "create table inst (instid integer, name text, country text, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID));create table authorship (authid integer, instid integer, paperid integer, authorder integer, primary key (authid, instid, paperid), foreign key (authid) references authors (authid), foreign key (instid) references inst (instid), foreign key (paperid) references papers (paperid));create table papers (paperid integer, title text, primary key (paperid));",
    "output": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "instruction": "Return the cities with more than 3 airports in the United States.",
    "input": "create table airports (apid integer primary key, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned);",
    "output": "SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING count(*) > 3"
  }
]